{
    "AMQPChannel": {
        "descr": "", 
        "name": "AMQPChannel", 
        "params": [], 
        "path": "php/class.amqpchannel", 
        "syntax": "public void commitTransaction ( void )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::__construct": {
        "descr": "Creates an AMQPChannel instance representing a channel on the given connection.", 
        "name": "AMQPChannel::__construct", 
        "params": [
            {
                "descr": "A instance of AMQPConnection with an active connection to a broker.", 
                "name": "amqp_connection"
            }
        ], 
        "path": "php/amqpchannel.construct", 
        "syntax": "AMQPChannel::__construct ( AMQPConnection $amqp_connection )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::commitTransaction": {
        "descr": "Commit an existing transaction. AMQPChannel::startTransaction() must be called prior to this.", 
        "name": "AMQPChannel::commitTransaction", 
        "params": [], 
        "path": "php/amqpchannel.committransaction", 
        "syntax": "public void AMQPChannel::commitTransaction ( void )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::isConnected": {
        "descr": "Indicates whether the channel is connected.", 
        "name": "AMQPChannel::isConnected", 
        "params": [], 
        "path": "php/amqpchannel.isconnected", 
        "syntax": "public void AMQPChannel::isConnected ( void )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::qos": {
        "descr": "Specify the amount of data to prefetch in terms of window size (octets) or number of messages from a queue during a AMQPQueue::consume() or AMQPQueue::get() method call. The client will prefetch data up to size octets or count messages from the server, whichever limit is hit first.", 
        "name": "AMQPChannel::qos", 
        "params": [
            {
                "descr": "The window size, in octets, to prefetch.", 
                "name": "size"
            }, 
            {
                "descr": "The number of messages to prefetch.", 
                "name": "count"
            }
        ], 
        "path": "php/amqpchannel.qos", 
        "syntax": "public void AMQPChannel::qos ( int $size , int $count )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::rollbackTransaction": {
        "descr": "Rollback an existing transaction. AMQPChannel::startTransaction() must be called prior to this.", 
        "name": "AMQPChannel::rollbackTransaction", 
        "params": [], 
        "path": "php/amqpchannel.rollbacktransaction", 
        "syntax": "public void AMQPChannel::rollbackTransaction ( void )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::setPrefetchCount": {
        "descr": "Set the number of messages to prefetch from the broker during a call to AMQPQueue::consume() or AMQPQueue::get(). Any call to this method will automatically set the prefetch window size to 0, meaning that the prefetch window size setting will be ignored.", 
        "name": "AMQPChannel::setPrefetchCount", 
        "params": [
            {
                "descr": "The number of messages to prefetch.", 
                "name": "count"
            }
        ], 
        "path": "php/amqpchannel.setprefetchcount", 
        "syntax": "public void AMQPChannel::setPrefetchCount ( int $count )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::setPrefetchSize": {
        "descr": "Set the prefetch window size, in octets, during a call to AMQPQueue::consume() or AMQPQueue::get(). Any call to this method will automatically set the prefetch message count to 0, meaning that the prefetch message count setting will be ignored.", 
        "name": "AMQPChannel::setPrefetchSize", 
        "params": [
            {
                "descr": "The window size, in octets, to prefetch.", 
                "name": "size"
            }
        ], 
        "path": "php/amqpchannel.setprefetchsize", 
        "syntax": "public void AMQPChannel::setPrefetchSize ( int $size )", 
        "type": "AMQP"
    }, 
    "AMQPChannel::startTransaction": {
        "descr": "Start a transaction. This method must be called on the given channel prior to calling AMQPChannel::commitTransaction() or AMQPChannel::rollbackTransaction().", 
        "name": "AMQPChannel::startTransaction", 
        "params": [], 
        "path": "php/amqpchannel.starttransaction", 
        "syntax": "public void AMQPChannel::startTransaction ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection": {
        "descr": "", 
        "name": "AMQPConnection", 
        "params": [], 
        "path": "php/class.amqpconnection", 
        "syntax": "public bool connect ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::__construct": {
        "descr": "Creates an AMQPConnection instance representing a connection to an AMQP broker.", 
        "name": "AMQPConnection::__construct", 
        "params": [
            {
                "descr": "The credentials is an optional array of credential information for connecting to the AMQP broker. ", 
                "name": "credentials"
            }
        ], 
        "path": "php/amqpconnection.construct", 
        "syntax": "public AMQPConnection::__construct ([ array $credentials = array() ] )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::connect": {
        "descr": "This method will initiate a connection with the AMQP broker.", 
        "name": "AMQPConnection::connect", 
        "params": [], 
        "path": "php/amqpconnection.connect", 
        "syntax": "public bool AMQPConnection::connect ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::disconnect": {
        "descr": "This method will close an open connection with the AMQP broker.", 
        "name": "AMQPConnection::disconnect", 
        "params": [], 
        "path": "php/amqpconnection.disconnect", 
        "syntax": "public bool AMQPConnection::disconnect ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getHost": {
        "descr": "Get the value of the configured host.", 
        "name": "AMQPConnection::getHost", 
        "params": [], 
        "path": "php/amqpconnection.gethost", 
        "syntax": "public string AMQPConnection::getHost ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getLogin": {
        "descr": "Get the configured login.", 
        "name": "AMQPConnection::getLogin", 
        "params": [], 
        "path": "php/amqpconnection.getlogin", 
        "syntax": "public string AMQPConnection::getLogin ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getPassword": {
        "descr": "Get the configured password.", 
        "name": "AMQPConnection::getPassword", 
        "params": [], 
        "path": "php/amqpconnection.getpassword", 
        "syntax": "public string AMQPConnection::getPassword ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getPort": {
        "descr": "Return the port configured for this AMQPConnection object.", 
        "name": "AMQPConnection::getPort", 
        "params": [], 
        "path": "php/amqpconnection.getport", 
        "syntax": "public int AMQPConnection::getPort ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getTimeout": {
        "descr": "Get the current timeout setting for this instance of an AMQPConnection object.", 
        "name": "AMQPConnection::getTimeout", 
        "params": [], 
        "path": "php/amqpconnection.gettimeout", 
        "syntax": "public int AMQPConnection::getTimeout ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getVhost": {
        "descr": "Get the configured vhost.", 
        "name": "AMQPConnection::getVhost", 
        "params": [], 
        "path": "php/amqpconnection.getvhost", 
        "syntax": "public string AMQPConnection::getVhost ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::isConnected": {
        "descr": "This method will check whether the connection to the AMQP broker is still valid. It does so by checking the return status of the last command.", 
        "name": "AMQPConnection::isConnected", 
        "params": [], 
        "path": "php/amqpconnection.isconnected", 
        "syntax": "public bool AMQPConnection::isConnected ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::reconnect": {
        "descr": "This method will close any open connections and initiate a new connection with the AMQP broker.", 
        "name": "AMQPConnection::reconnect", 
        "params": [], 
        "path": "php/amqpconnection.reconnect", 
        "syntax": "public bool AMQPConnection::reconnect ( void )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setHost": {
        "descr": "This method will set the hostname used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setHost", 
        "params": [
            {
                "descr": "The hostname of the AMQP broker.", 
                "name": "host"
            }
        ], 
        "path": "php/amqpconnection.sethost", 
        "syntax": "public bool AMQPConnection::setHost ( string $host )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setLogin": {
        "descr": "This method will set the login string used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setLogin", 
        "params": [
            {
                "descr": "The login string used to authenticate with the AMQP broker.", 
                "name": "login"
            }
        ], 
        "path": "php/amqpconnection.setlogin", 
        "syntax": "public bool AMQPConnection::setLogin ( string $login )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setPassword": {
        "descr": "This method will set the password string used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setPassword", 
        "params": [
            {
                "descr": "The password string used to authenticate with the AMQP broker.", 
                "name": "password"
            }
        ], 
        "path": "php/amqpconnection.setpassword", 
        "syntax": "public bool AMQPConnection::setPassword ( string $password )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setPort": {
        "descr": "This method will set the port used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setPort", 
        "params": [
            {
                "descr": "The port used to connect to the AMQP broker.", 
                "name": "port"
            }
        ], 
        "path": "php/amqpconnection.setport", 
        "syntax": "public bool AMQPConnection::setPort ( int $port )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setTimeout": {
        "descr": "Set the amount of time, in seconds, after which this instance of an AMQPConnection object times out a request to the broker. Setting this value will override the default value specified by the amqp.timeout INI setting. To specify a timeout of 500ms, simply pass in 0.5.", 
        "name": "AMQPConnection::setTimeout", 
        "params": [
            {
                "descr": "The timeout used to connect to the AMQP broker.", 
                "name": "timeout"
            }
        ], 
        "path": "php/amqpconnection.settimeout", 
        "syntax": "public bool AMQPConnection::setTimeout ( float $timeout )", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setVhost": {
        "descr": "Sets the virtual host to which to connect on the AMQP broker.", 
        "name": "AMQPConnection::setVhost", 
        "params": [
            {
                "descr": "The virtual host to use on the AMQP broker.", 
                "name": "host"
            }
        ], 
        "path": "php/amqpconnection.setvhost", 
        "syntax": "public bool AMQPConnection::setVhost ( string $vhost )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope": {
        "descr": "", 
        "name": "AMQPEnvelope", 
        "params": [], 
        "path": "php/class.amqpenvelope", 
        "syntax": "public string getAppId ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getAppId": {
        "descr": "Get the application id of the message.", 
        "name": "AMQPEnvelope::getAppId", 
        "params": [], 
        "path": "php/amqpenvelope.getappid", 
        "syntax": "public string AMQPEnvelope::getAppId ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getBody": {
        "descr": "Get the body of the message.", 
        "name": "AMQPEnvelope::getBody", 
        "params": [], 
        "path": "php/amqpenvelope.getbody", 
        "syntax": "public string AMQPEnvelope::getBody ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getContentEncoding": {
        "descr": "Get the content encoding of the message.", 
        "name": "AMQPEnvelope::getContentEncoding", 
        "params": [], 
        "path": "php/amqpenvelope.getcontentencoding", 
        "syntax": "public string AMQPEnvelope::getContentEncoding ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getContentType": {
        "descr": "Get the content type of the message.", 
        "name": "AMQPEnvelope::getContentType", 
        "params": [], 
        "path": "php/amqpenvelope.getcontenttype", 
        "syntax": "public string AMQPEnvelope::getContentType ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getCorrelationId": {
        "descr": "Get the correlation id of the message.", 
        "name": "AMQPEnvelope::getCorrelationId", 
        "params": [], 
        "path": "php/amqpenvelope.getcorrelationid", 
        "syntax": "public string AMQPEnvelope::getCorrelationId ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getDeliveryTag": {
        "descr": "Get the delivery tag of the message.", 
        "name": "AMQPEnvelope::getDeliveryTag", 
        "params": [], 
        "path": "php/amqpenvelope.getdeliverytag", 
        "syntax": "public string AMQPEnvelope::getDeliveryTag ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getExchange": {
        "descr": "Get the exchange name on which the message was published.", 
        "name": "AMQPEnvelope::getExchange", 
        "params": [], 
        "path": "php/amqpenvelope.getexchange", 
        "syntax": "public string AMQPEnvelope::getExchange ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getExpiration": {
        "descr": "Get the expiration of the message.", 
        "name": "AMQPEnvelope::getExpiration", 
        "params": [], 
        "path": "php/amqpenvelope.getexpiration", 
        "syntax": "public string AMQPEnvelope::getExpiration ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getHeader": {
        "descr": "Get the header value for a specific header key.", 
        "name": "AMQPEnvelope::getHeader", 
        "params": [], 
        "path": "php/amqpenvelope.getheader", 
        "syntax": "public string AMQPEnvelope::getHeader ( string $header_key )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getHeaders": {
        "descr": "Get the headers of the message.", 
        "name": "AMQPEnvelope::getHeaders", 
        "params": [], 
        "path": "php/amqpenvelope.getheaders", 
        "syntax": "public array AMQPEnvelope::getHeaders ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getMessageId": {
        "descr": "Get the message id of the message.", 
        "name": "AMQPEnvelope::getMessageId", 
        "params": [], 
        "path": "php/amqpenvelope.getmessageid", 
        "syntax": "public string AMQPEnvelope::getMessageId ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getPriority": {
        "descr": "Get the priority of the message.", 
        "name": "AMQPEnvelope::getPriority", 
        "params": [], 
        "path": "php/amqpenvelope.getpriority", 
        "syntax": "public string AMQPEnvelope::getPriority ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getReplyTo": {
        "descr": "Get the reply to of the message.", 
        "name": "AMQPEnvelope::getReplyTo", 
        "params": [], 
        "path": "php/amqpenvelope.getreplyto", 
        "syntax": "public string AMQPEnvelope::getReplyTo ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getRoutingKey": {
        "descr": "Get the routing key of the message.", 
        "name": "AMQPEnvelope::getRoutingKey", 
        "params": [], 
        "path": "php/amqpenvelope.getroutingkey", 
        "syntax": "public string AMQPEnvelope::getRoutingKey ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getTimeStamp": {
        "descr": "Get the timestamp of the message.", 
        "name": "AMQPEnvelope::getTimeStamp", 
        "params": [], 
        "path": "php/amqpenvelope.gettimestamp", 
        "syntax": "public string AMQPEnvelope::getTimeStamp ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getType": {
        "descr": "Get the type of the message.", 
        "name": "AMQPEnvelope::getType", 
        "params": [], 
        "path": "php/amqpenvelope.gettype", 
        "syntax": "public string AMQPEnvelope::getType ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getUserId": {
        "descr": "Get the user id of the message.", 
        "name": "AMQPEnvelope::getUserId", 
        "params": [], 
        "path": "php/amqpenvelope.getuserid", 
        "syntax": "public string AMQPEnvelope::getUserId ( void )", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::isRedelivery": {
        "descr": "Whether this is a redelivery of a message. If this message has been delivered and AMQPEnvelope::nack() was called, the message will be put back on the queue to be redelivered, at which point the message will always return TRUE when this method is called.", 
        "name": "AMQPEnvelope::isRedelivery", 
        "params": [], 
        "path": "php/amqpenvelope.isredelivery", 
        "syntax": "public bool AMQPEnvelope::isRedelivery ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange": {
        "descr": "", 
        "name": "AMQPExchange", 
        "params": [], 
        "path": "php/class.amqpexchange", 
        "syntax": "public bool bind ( string $destination_exchange_name , string $source_exchange_name , string $routing_key )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::__construct": {
        "descr": "Returns a new instance of an AMQPExchange object, associated with the given AMQPChannel object.", 
        "name": "AMQPExchange::__construct", 
        "params": [
            {
                "descr": "A valid AMQPChannel object, connected to a broker.", 
                "name": "AMQPChannel"
            }
        ], 
        "path": "php/amqpexchange.construct", 
        "syntax": "public AMQPExchange::__construct ( AMQPChannel $amqp_channel )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::bind": {
        "descr": "Bind an exchange to another exchange using the specified routing key.", 
        "name": "AMQPExchange::bind", 
        "params": [
            {
                "descr": "The name of the destination exchange in the binding.", 
                "name": "destination_exchange_name"
            }, 
            {
                "descr": "The name of the source exchange in the binding.", 
                "name": "source_exchange_name"
            }, 
            {
                "descr": "The routing key to use as a binding.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpexchange.bind", 
        "syntax": "public bool AMQPExchange::bind ( string $destination_exchange_name , string $source_exchange_name , string $routing_key )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::declare": {
        "descr": "Declare a new exchange on the broker.", 
        "name": "AMQPExchange::declare", 
        "params": [], 
        "path": "php/amqpexchange.declare", 
        "syntax": "public int AMQPExchange::declare ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::delete": {
        "descr": "Delete and exchange from the broker.", 
        "name": "AMQPExchange::delete", 
        "params": [
            {
                "descr": "Optionally AMQP_IFUNUSED can be specified to indicate the exchange should not be deleted until no clients are connected to it.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpexchange.delete", 
        "syntax": "public bool AMQPExchange::delete ([ int $flags = AMQP_NOPARAM ] )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getArgument": {
        "descr": "Get the argument associated with the given key.", 
        "name": "AMQPExchange::getArgument", 
        "params": [
            {
                "descr": "The key to look up.", 
                "name": "key"
            }
        ], 
        "path": "php/amqpexchange.getargument", 
        "syntax": "public mixed AMQPExchange::getArgument ( string $key )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getArguments": {
        "descr": "Get all arguments as an array of key/value pairs that are currently set on the given exchange.", 
        "name": "AMQPExchange::getArguments", 
        "params": [], 
        "path": "php/amqpexchange.getarguments", 
        "syntax": "public array AMQPExchange::getArguments ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getFlags": {
        "descr": "Get all the flags currently set on the given exchange.", 
        "name": "AMQPExchange::getFlags", 
        "params": [], 
        "path": "php/amqpexchange.getflags", 
        "syntax": "public int AMQPExchange::getFlags ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getName": {
        "descr": "Get the configured name.", 
        "name": "AMQPExchange::getName", 
        "params": [], 
        "path": "php/amqpexchange.getname", 
        "syntax": "public string AMQPExchange::getName ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getType": {
        "descr": "Get the configured type.", 
        "name": "AMQPExchange::getType", 
        "params": [], 
        "path": "php/amqpexchange.gettype", 
        "syntax": "public string AMQPExchange::getType ( void )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::publish": {
        "descr": "Publish a message to the exchange represented by the AMQPExchange object.", 
        "name": "AMQPExchange::publish", 
        "params": [
            {
                "descr": "The message to publish.", 
                "name": "message"
            }, 
            {
                "descr": "The routing key to which to publish.", 
                "name": "routing_key"
            }, 
            {
                "descr": "One or more of AMQP_MANDATORY and AMQP_IMMEDIATE.", 
                "name": "flags"
            }, 
            {
                "descr": "Supported indexes key Description Default value content_type   text/plain content_encoding   NULL message_id   NULL user_id   NULL app_id   NULL delivery_mode   NULL priority   NULL timestamp   NULL expiration time in milliseconds NULL type   NULL reply_to   NULL headers custom attributes to pass along with message array", 
                "name": "attributes"
            }
        ], 
        "path": "php/amqpexchange.publish", 
        "syntax": "public bool AMQPExchange::publish ( string $message , string $routing_key [, int $flags = AMQP_NOPARAM [, array $attributes = array() ]] )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setArgument": {
        "descr": "Set the key to the given value.", 
        "name": "AMQPExchange::setArgument", 
        "params": [
            {
                "descr": "The key to set.", 
                "name": "key"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/amqpexchange.setargument", 
        "syntax": "public void AMQPExchange::setArgument ( string $key , mixed $value )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setArguments": {
        "descr": "Set all arguments on the given exchange. All other argument settings will be wiped.", 
        "name": "AMQPExchange::setArguments", 
        "params": [
            {
                "descr": "An array of key/value pairs of arguments.", 
                "name": "arguments"
            }
        ], 
        "path": "php/amqpexchange.setarguments", 
        "syntax": "public void AMQPExchange::setArguments ( array $arguments )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setFlags": {
        "descr": "Set the flags on an exchange.", 
        "name": "AMQPExchange::setFlags", 
        "params": [
            {
                "descr": "A bitmask of flags. This call currently only considers the following flags: AMQP_DURABLE, AMQP_PASSIVE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpexchange.setflags", 
        "syntax": "public void AMQPExchange::setFlags ( int $flags )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setName": {
        "descr": "Set the name of the exchange.", 
        "name": "AMQPExchange::setName", 
        "params": [
            {
                "descr": "The name of the exchange to set as string.", 
                "name": "exchange_name"
            }
        ], 
        "path": "php/amqpexchange.setname", 
        "syntax": "public void AMQPExchange::setName ( string $exchange_name )", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setType": {
        "descr": "Set the type of the exchange. This can be any of AMQP_EX_TYPE_DIRECT, AMQP_EX_TYPE_FANOUT, AMQP_EX_TYPE_HEADER or AMQP_EX_TYPE_TOPIC.", 
        "name": "AMQPExchange::setType", 
        "params": [
            {
                "descr": "The type of exchange as a string.", 
                "name": "exchange_type"
            }
        ], 
        "path": "php/amqpexchange.settype", 
        "syntax": "public string AMQPExchange::setType ( string $exchange_type )", 
        "type": "AMQP"
    }, 
    "AMQPQueue": {
        "descr": "", 
        "name": "AMQPQueue", 
        "params": [], 
        "path": "php/class.amqpqueue", 
        "syntax": "public bool ack ( int $delivery_tag [, int $flags = AMQP_NOPARAM ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::__construct": {
        "descr": "Creates an AMQPQueue instance representing an AMQP queue on the broker.", 
        "name": "AMQPQueue::__construct", 
        "params": [], 
        "path": "php/amqpqueue.construct", 
        "syntax": "public AMQPQueue::__construct ( AMQPChannel $amqp_channel )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::ack": {
        "descr": "This method allows the acknowledgement of a message that is retrieved without the AMQP_AUTOACK flag through AMQPQueue::get() or AMQPQueue::consume()", 
        "name": "AMQPQueue::ack", 
        "params": [
            {
                "descr": "The message delivery tag of which to acknowledge receipt.", 
                "name": "delivery_tag"
            }, 
            {
                "descr": "The only valid flag that can be passed is AMQP_MULTIPLE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.ack", 
        "syntax": "public bool AMQPQueue::ack ( int $delivery_tag [, int $flags = AMQP_NOPARAM ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::bind": {
        "descr": "The bind method will bind the given queue to the specified routing key on the given exchange.", 
        "name": "AMQPQueue::bind", 
        "params": [
            {
                "descr": "The exchange name on which to bind.", 
                "name": "exchange_name"
            }, 
            {
                "descr": "The routing key to which to bind.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpqueue.bind", 
        "syntax": "public bool AMQPQueue::bind ( string $exchange_name , string $routing_key )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::cancel": {
        "descr": "Cancel a queue that is already bound to an exchange and routing key.", 
        "name": "AMQPQueue::cancel", 
        "params": [
            {
                "descr": "The queue name to cancel, if the queue object is not already representative of a queue.", 
                "name": "consumer_tag"
            }
        ], 
        "path": "php/amqpqueue.cancel", 
        "syntax": "public bool AMQPQueue::cancel ([ string $consumer_tag = \"\" ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::consume": {
        "descr": "Blocking function that will retrieve the next message from the queue as it becomes available and will pass it off to the callback.", 
        "name": "AMQPQueue::consume", 
        "params": [
            {
                "descr": "A callback function to which the consumed message will be passed. ", 
                "name": "callback"
            }, 
            {
                "descr": "A bitmask of any of the flags: AMQP_NOACK.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.consume", 
        "syntax": "public void AMQPQueue::consume ( callable $callback [, int $flags = AMQP_NOPARAM ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::declare": {
        "descr": "Declare a new queue on the broker.", 
        "name": "AMQPQueue::declare", 
        "params": [], 
        "path": "php/amqpqueue.declare", 
        "syntax": "public int AMQPQueue::declare ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::delete": {
        "descr": "Delete a queue from the broker, including its entire contents of unread or unacknowledged messages.", 
        "name": "AMQPQueue::delete", 
        "params": [], 
        "path": "php/amqpqueue.delete", 
        "syntax": "publicbool AMQPQueue::delete ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::get": {
        "descr": "Retrieve the next available message from the queue. If no messages are present in the queue, this function will return FALSE immediately. This is a non blocking alternative to the AMQPQueue::consume() method.", 
        "name": "AMQPQueue::get", 
        "params": [
            {
                "descr": "A bitmask of supported flags for the method call. ", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.get", 
        "syntax": "public mixed AMQPQueue::get ([ int $flags = ini_get(\"amqp.auto_ack\") ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getArgument": {
        "descr": "Get the argument associated with the given key.", 
        "name": "AMQPQueue::getArgument", 
        "params": [
            {
                "descr": "The key to look up.", 
                "name": "key"
            }
        ], 
        "path": "php/amqpqueue.getargument", 
        "syntax": "public mixed AMQPQueue::getArgument ( string $key )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getArguments": {
        "descr": "Get all arguments as an array of key/value pairs that are currently set on the given queue.", 
        "name": "AMQPQueue::getArguments", 
        "params": [], 
        "path": "php/amqpqueue.getarguments", 
        "syntax": "public array AMQPQueue::getArguments ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getFlags": {
        "descr": "Get all the flags currently set on the given queue.", 
        "name": "AMQPQueue::getFlags", 
        "params": [], 
        "path": "php/amqpqueue.getflags", 
        "syntax": "public int AMQPQueue::getFlags ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getName": {
        "descr": "Get the configured name.", 
        "name": "AMQPQueue::getName", 
        "params": [], 
        "path": "php/amqpqueue.getname", 
        "syntax": "public string AMQPQueue::getName ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::nack": {
        "descr": "Mark the message identified by delivery_tag as explicitly not acknowledged. This method can only be called on messages that have not yet been acknowledged, meaning that messages retrieved with by AMQPQueue::consume() and AMQPQueue::get() and using the AMQP_AUTOACK flag are not eligible.", 
        "name": "AMQPQueue::nack", 
        "params": [
            {
                "descr": "The delivery tag by which to identify the message.", 
                "name": "delivery_tag"
            }, 
            {
                "descr": "A bitmask of flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.nack", 
        "syntax": "public void AMQPQueue::nack ( string $delivery_tag [, string $flags = AMQP_NOPARAM ] )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::purge": {
        "descr": "Purge the contents of a queue.", 
        "name": "AMQPQueue::purge", 
        "params": [], 
        "path": "php/amqpqueue.purge", 
        "syntax": "public bool AMQPQueue::purge ( void )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setArgument": {
        "descr": "Set the key to the given value.", 
        "name": "AMQPQueue::setArgument", 
        "params": [
            {
                "descr": "The key to set.", 
                "name": "key"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/amqpqueue.setargument", 
        "syntax": "public void AMQPQueue::setArgument ( string $key , mixed $value )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setArguments": {
        "descr": "Set all arguments on the given queue. All other argument settings will be wiped.", 
        "name": "AMQPQueue::setArguments", 
        "params": [
            {
                "descr": "An array of key/value pairs of arguments.", 
                "name": "arguments"
            }
        ], 
        "path": "php/amqpqueue.setarguments", 
        "syntax": "public void AMQPQueue::setArguments ( array $arguments )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setFlags": {
        "descr": "Set the flags on the queue.", 
        "name": "AMQPQueue::setFlags", 
        "params": [
            {
                "descr": "A bitmask of flags. This call currently only supports a bitmask of the following flags: AMQP_DURABLE, AMQP_PASSIVE, AMQP_EXCLUSIVE, AMQP_AUTODELETE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.setflags", 
        "syntax": "public void AMQPQueue::setFlags ( int $flags )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setName": {
        "descr": "Set the name of the queue", 
        "name": "AMQPQueue::setName", 
        "params": [
            {
                "descr": "The name of the queue as a string.", 
                "name": "queue_name"
            }
        ], 
        "path": "php/amqpqueue.setname", 
        "syntax": "public void AMQPQueue::setName ( string $queue_name )", 
        "type": "AMQP"
    }, 
    "AMQPQueue::unbind": {
        "descr": "Remove a routing key binding on an exchange from the given queue.", 
        "name": "AMQPQueue::unbind", 
        "params": [
            {
                "descr": "The name of the exchange on which the queue is bound.", 
                "name": "exchange_name"
            }, 
            {
                "descr": "The binding routing key used by the queue.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpqueue.unbind", 
        "syntax": "public bool AMQPQueue::unbind ( string $exchange_name , string $routing_key )", 
        "type": "AMQP"
    }, 
    "APCIterator": {
        "descr": "", 
        "name": "APCIterator", 
        "params": [], 
        "path": "php/class.apciterator", 
        "syntax": "public __construct ( string $cache [, mixed $search = null [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )", 
        "type": "APC"
    }, 
    "APCIterator::__construct": {
        "descr": "Constructs an APCIterator object.", 
        "name": "APCIterator::__construct", 
        "params": [
            {
                "descr": "The cache type, which will be user or file.", 
                "name": "cache"
            }, 
            {
                "descr": "A PCRE regular expression that matches against APC key names, either as a string for a single regular expression, or as an array of regular expressions. ", 
                "name": "search"
            }, 
            {
                "descr": "The desired format, as configured with one or more of the APC_ITER_* constants.", 
                "name": "format"
            }, 
            {
                "descr": "The chunk size. Must be a value greater than 0. ", 
                "name": "chunk_size"
            }, 
            {
                "descr": "The type to list. Either pass in APC_LIST_ACTIVE or APC_LIST_DELETED.", 
                "name": "list"
            }
        ], 
        "path": "php/apciterator.construct", 
        "syntax": "public APCIterator::__construct ( string $cache [, mixed $search = null [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )", 
        "type": "APC"
    }, 
    "APCIterator::current": {
        "descr": "Gets the current item from the APCIterator stack.", 
        "name": "APCIterator::current", 
        "params": [], 
        "path": "php/apciterator.current", 
        "syntax": "public mixed APCIterator::current ( void )", 
        "type": "APC"
    }, 
    "APCIterator::getTotalCount": {
        "descr": "Get the total count.", 
        "name": "APCIterator::getTotalCount", 
        "params": [], 
        "path": "php/apciterator.gettotalcount", 
        "syntax": "public int APCIterator::getTotalCount ( void )", 
        "type": "APC"
    }, 
    "APCIterator::getTotalHits": {
        "descr": "Gets the total number of cache hits.", 
        "name": "APCIterator::getTotalHits", 
        "params": [], 
        "path": "php/apciterator.gettotalhits", 
        "syntax": "public int APCIterator::getTotalHits ( void )", 
        "type": "APC"
    }, 
    "APCIterator::getTotalSize": {
        "descr": "Gets the total cache size.", 
        "name": "APCIterator::getTotalSize", 
        "params": [], 
        "path": "php/apciterator.gettotalsize", 
        "syntax": "public int APCIterator::getTotalSize ( void )", 
        "type": "APC"
    }, 
    "APCIterator::key": {
        "descr": "Gets the current iterator key.", 
        "name": "APCIterator::key", 
        "params": [], 
        "path": "php/apciterator.key", 
        "syntax": "public string APCIterator::key ( void )", 
        "type": "APC"
    }, 
    "APCIterator::next": {
        "descr": "Moves the iterator pointer to the next element.", 
        "name": "APCIterator::next", 
        "params": [], 
        "path": "php/apciterator.next", 
        "syntax": "public void APCIterator::next ( void )", 
        "type": "APC"
    }, 
    "APCIterator::rewind": {
        "descr": "Rewinds back the iterator to the first element.", 
        "name": "APCIterator::rewind", 
        "params": [], 
        "path": "php/apciterator.rewind", 
        "syntax": "public void APCIterator::rewind ( void )", 
        "type": "APC"
    }, 
    "APCIterator::valid": {
        "descr": "Checks if the current iterator position is valid.", 
        "name": "APCIterator::valid", 
        "params": [], 
        "path": "php/apciterator.valid", 
        "syntax": "public void APCIterator::valid ( void )", 
        "type": "APC"
    }, 
    "AppendIterator": {
        "descr": "", 
        "name": "AppendIterator", 
        "params": [], 
        "path": "php/class.appenditerator", 
        "syntax": "public void append ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::append": {
        "descr": "Appends an iterator.", 
        "name": "AppendIterator::append", 
        "params": [
            {
                "descr": "The iterator to append.", 
                "name": "iterator"
            }
        ], 
        "path": "php/appenditerator.append", 
        "syntax": "public void AppendIterator::append ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::current": {
        "descr": "Gets the current value.", 
        "name": "AppendIterator::current", 
        "params": [], 
        "path": "php/appenditerator.current", 
        "syntax": "public mixed AppendIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getArrayIterator": {
        "descr": "This method gets the ArrayIterator that is used to store the iterators added with AppendIterator::append().", 
        "name": "AppendIterator::getArrayIterator", 
        "params": [], 
        "path": "php/appenditerator.getarrayiterator", 
        "syntax": "public void AppendIterator::getArrayIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getInnerIterator": {
        "descr": "This method returns the current inner iterator.", 
        "name": "AppendIterator::getInnerIterator", 
        "params": [], 
        "path": "php/appenditerator.getinneriterator", 
        "syntax": "public Iterator AppendIterator::getInnerIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getIteratorIndex": {
        "descr": "Gets the index of the current inner iterator.", 
        "name": "AppendIterator::getIteratorIndex", 
        "params": [], 
        "path": "php/appenditerator.getiteratorindex", 
        "syntax": "public int AppendIterator::getIteratorIndex ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::key": {
        "descr": "Get the current key.", 
        "name": "AppendIterator::key", 
        "params": [], 
        "path": "php/appenditerator.key", 
        "syntax": "public scalar AppendIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::next": {
        "descr": "Moves to the next element. If this means to another Iterator then it rewinds that Iterator.", 
        "name": "AppendIterator::next", 
        "params": [], 
        "path": "php/appenditerator.next", 
        "syntax": "public void AppendIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::rewind": {
        "descr": "Rewind to the first element of the first inner Iterator.", 
        "name": "AppendIterator::rewind", 
        "params": [], 
        "path": "php/appenditerator.rewind", 
        "syntax": "public void AppendIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::valid": {
        "descr": "Checks validity of the current element.", 
        "name": "AppendIterator::valid", 
        "params": [], 
        "path": "php/appenditerator.valid", 
        "syntax": "public bool AppendIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayAccess (interface": {
        "descr": "", 
        "name": "ArrayAccess (interface", 
        "params": [], 
        "path": "php/class.arrayaccess", 
        "syntax": "abstract public boolean offsetExists ( mixed $offset )", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetExists": {
        "descr": "Whether or not an offset exists.", 
        "name": "ArrayAccess::offsetExists", 
        "params": [
            {
                "descr": "An offset to check for.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetexists", 
        "syntax": "abstract public boolean ArrayAccess::offsetExists ( mixed $offset )", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetGet": {
        "descr": "Returns the value at specified offset.", 
        "name": "ArrayAccess::offsetGet", 
        "params": [
            {
                "descr": "The offset to retrieve.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetget", 
        "syntax": "abstract public mixed ArrayAccess::offsetGet ( mixed $offset )", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetSet": {
        "descr": "Assigns a value to the specified offset.", 
        "name": "ArrayAccess::offsetSet", 
        "params": [
            {
                "descr": "The offset to assign the value to.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayaccess.offsetset", 
        "syntax": "abstract public void ArrayAccess::offsetSet ( mixed $offset , mixed $value )", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetUnset": {
        "descr": "Unsets an offset.", 
        "name": "ArrayAccess::offsetUnset", 
        "params": [
            {
                "descr": "The offset to unset.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetunset", 
        "syntax": "abstract public void ArrayAccess::offsetUnset ( mixed $offset )", 
        "type": "Classes and Functions"
    }, 
    "ArrayIterator": {
        "descr": "", 
        "name": "ArrayIterator", 
        "params": [], 
        "path": "php/class.arrayiterator", 
        "syntax": "public void append ( mixed $value )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::__construct": {
        "descr": "Constructs an ArrayIterator object.", 
        "name": "ArrayIterator::__construct", 
        "params": [
            {
                "descr": "The array or object to be iterated on.", 
                "name": "array"
            }, 
            {
                "descr": "Flags to control the behaviour of the ArrayIterator object. ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayiterator.construct", 
        "syntax": "public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::append": {
        "descr": "Appends value as the last element.", 
        "name": "ArrayIterator::append", 
        "params": [
            {
                "descr": "The value to append.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayiterator.append", 
        "syntax": "public void ArrayIterator::append ( mixed $value )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::asort": {
        "descr": "Sorts an array by values.", 
        "name": "ArrayIterator::asort", 
        "params": [], 
        "path": "php/arrayiterator.asort", 
        "syntax": "public void ArrayIterator::asort ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::count": {
        "descr": "Gets the number of elements in the array, or the number of public properties in the object.", 
        "name": "ArrayIterator::count", 
        "params": [], 
        "path": "php/arrayiterator.count", 
        "syntax": "public int ArrayIterator::count ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::current": {
        "descr": "Get the current array entry.", 
        "name": "ArrayIterator::current", 
        "params": [], 
        "path": "php/arrayiterator.current", 
        "syntax": "public mixed ArrayIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::getArrayCopy": {
        "descr": "Get a copy of an array.", 
        "name": "ArrayIterator::getArrayCopy", 
        "params": [], 
        "path": "php/arrayiterator.getarraycopy", 
        "syntax": "public array ArrayIterator::getArrayCopy ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::getFlags": {
        "descr": "Get the current flags.", 
        "name": "ArrayIterator::getFlags", 
        "params": [], 
        "path": "php/arrayiterator.getflags", 
        "syntax": "public void ArrayIterator::getFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::key": {
        "descr": "This function returns the current array key", 
        "name": "ArrayIterator::key", 
        "params": [], 
        "path": "php/arrayiterator.key", 
        "syntax": "public mixed ArrayIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::ksort": {
        "descr": "Sorts an array by the keys.", 
        "name": "ArrayIterator::ksort", 
        "params": [], 
        "path": "php/arrayiterator.ksort", 
        "syntax": "public void ArrayIterator::ksort ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::natcasesort": {
        "descr": "Sort the entries by values using a case insensitive \"natural order\" algorithm.", 
        "name": "ArrayIterator::natcasesort", 
        "params": [], 
        "path": "php/arrayiterator.natcasesort", 
        "syntax": "public void ArrayIterator::natcasesort ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::natsort": {
        "descr": "Sort the entries by values using \"natural order\" algorithm.", 
        "name": "ArrayIterator::natsort", 
        "params": [], 
        "path": "php/arrayiterator.natsort", 
        "syntax": "public void ArrayIterator::natsort ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::next": {
        "descr": "The iterator to the next entry.", 
        "name": "ArrayIterator::next", 
        "params": [], 
        "path": "php/arrayiterator.next", 
        "syntax": "public void ArrayIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetExists": {
        "descr": "Checks if the offset exists.", 
        "name": "ArrayIterator::offsetExists", 
        "params": [
            {
                "descr": "The offset being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetexists", 
        "syntax": "public void ArrayIterator::offsetExists ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetGet": {
        "descr": "Gets the value from the provided offset.", 
        "name": "ArrayIterator::offsetGet", 
        "params": [
            {
                "descr": "The offset to get the value from.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetget", 
        "syntax": "public mixed ArrayIterator::offsetGet ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetSet": {
        "descr": "Sets a value for a given offset.", 
        "name": "ArrayIterator::offsetSet", 
        "params": [
            {
                "descr": "The index to set for.", 
                "name": "index"
            }, 
            {
                "descr": "The new value to store at the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/arrayiterator.offsetset", 
        "syntax": "public void ArrayIterator::offsetSet ( string $index , string $newval )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetUnset": {
        "descr": "Unsets a value for an offset.", 
        "name": "ArrayIterator::offsetUnset", 
        "params": [
            {
                "descr": "The offset to unset.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetunset", 
        "syntax": "public void ArrayIterator::offsetUnset ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::rewind": {
        "descr": "This rewinds the iterator to the beginning.", 
        "name": "ArrayIterator::rewind", 
        "params": [], 
        "path": "php/arrayiterator.rewind", 
        "syntax": "public void ArrayIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::seek": {
        "descr": "", 
        "name": "ArrayIterator::seek", 
        "params": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/arrayiterator.seek", 
        "syntax": "public void ArrayIterator::seek ( int $position )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::serialize": {
        "descr": "Serialize.", 
        "name": "ArrayIterator::serialize", 
        "params": [], 
        "path": "php/arrayiterator.serialize", 
        "syntax": "public string ArrayIterator::serialize ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::setFlags": {
        "descr": "Sets behaviour flags.", 
        "name": "ArrayIterator::setFlags", 
        "params": [
            {
                "descr": "A bitmask as follows:  0 = Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.). ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayiterator.setflags", 
        "syntax": "public void ArrayIterator::setFlags ( string $flags )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::uasort": {
        "descr": "Sort the entries by values using user defined function.", 
        "name": "ArrayIterator::uasort", 
        "params": [
            {
                "descr": "The compare function used for the sort.", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayiterator.uasort", 
        "syntax": "public void ArrayIterator::uasort ( string $cmp_function )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::uksort": {
        "descr": "Sort the entries by key using user defined function.", 
        "name": "ArrayIterator::uksort", 
        "params": [
            {
                "descr": "The compare function used for the sort.", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayiterator.uksort", 
        "syntax": "public void ArrayIterator::uksort ( string $cmp_function )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::unserialize": {
        "descr": "Unserialize.", 
        "name": "ArrayIterator::unserialize", 
        "params": [
            {
                "descr": "The serialized ArrayIterator object to be unserialized.", 
                "name": "serialized"
            }
        ], 
        "path": "php/arrayiterator.unserialize", 
        "syntax": "public string ArrayIterator::unserialize ( string $serialized )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::valid": {
        "descr": "Checks if the array contains any more entries.", 
        "name": "ArrayIterator::valid", 
        "params": [], 
        "path": "php/arrayiterator.valid", 
        "syntax": "public bool ArrayIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ArrayObject": {
        "descr": "", 
        "name": "ArrayObject", 
        "params": [], 
        "path": "php/class.arrayobject", 
        "syntax": "public void append ( mixed $value )", 
        "type": "SPL"
    }, 
    "ArrayObject::append": {
        "descr": "Appends a new value as the last element.", 
        "name": "ArrayObject::append", 
        "params": [
            {
                "descr": "The value being appended.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayobject.append", 
        "syntax": "public void ArrayObject::append ( mixed $value )", 
        "type": "SPL"
    }, 
    "ArrayObject::asort": {
        "descr": "Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.", 
        "name": "ArrayObject::asort", 
        "params": [], 
        "path": "php/arrayobject.asort", 
        "syntax": "public void ArrayObject::asort ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::count": {
        "descr": "Get the number of public properties in the ArrayObject.", 
        "name": "ArrayObject::count", 
        "params": [], 
        "path": "php/arrayobject.count", 
        "syntax": "public int ArrayObject::count ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::exchangeArray": {
        "descr": "Exchange the current array with another array or object.", 
        "name": "ArrayObject::exchangeArray", 
        "params": [
            {
                "descr": "The new array or object to exchange with the current array.", 
                "name": "input"
            }
        ], 
        "path": "php/arrayobject.exchangearray", 
        "syntax": "public array ArrayObject::exchangeArray ( mixed $input )", 
        "type": "SPL"
    }, 
    "ArrayObject::getArrayCopy": {
        "descr": "Exports the ArrayObject to an array.", 
        "name": "ArrayObject::getArrayCopy", 
        "params": [], 
        "path": "php/arrayobject.getarraycopy", 
        "syntax": "public array ArrayObject::getArrayCopy ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::getFlags": {
        "descr": "Gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of the available flags.", 
        "name": "ArrayObject::getFlags", 
        "params": [], 
        "path": "php/arrayobject.getflags", 
        "syntax": "public int ArrayObject::getFlags ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::getIterator": {
        "descr": "Create a new iterator from an ArrayObject instance.", 
        "name": "ArrayObject::getIterator", 
        "params": [], 
        "path": "php/arrayobject.getiterator", 
        "syntax": "public ArrayIterator ArrayObject::getIterator ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::getIteratorClass": {
        "descr": "Gets the class name of the array iterator that is used by ArrayObject::getIterator().", 
        "name": "ArrayObject::getIteratorClass", 
        "params": [], 
        "path": "php/arrayobject.getiteratorclass", 
        "syntax": "public string ArrayObject::getIteratorClass ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::ksort": {
        "descr": "Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.", 
        "name": "ArrayObject::ksort", 
        "params": [], 
        "path": "php/arrayobject.ksort", 
        "syntax": "public void ArrayObject::ksort ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::natcasesort": {
        "descr": "This method is a case insensitive version of ArrayObject::natsort.", 
        "name": "ArrayObject::natcasesort", 
        "params": [], 
        "path": "php/arrayobject.natcasesort", 
        "syntax": "public void ArrayObject::natcasesort ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::natsort": {
        "descr": "This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ArrayObject::asort) method can be seen in the example below.", 
        "name": "ArrayObject::natsort", 
        "params": [], 
        "path": "php/arrayobject.natsort", 
        "syntax": "public void ArrayObject::natsort ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetExists": {
        "descr": "", 
        "name": "ArrayObject::offsetExists", 
        "params": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetexists", 
        "syntax": "public bool ArrayObject::offsetExists ( mixed $index )", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetGet": {
        "descr": "", 
        "name": "ArrayObject::offsetGet", 
        "params": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetget", 
        "syntax": "public mixed ArrayObject::offsetGet ( mixed $index )", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetSet": {
        "descr": "Sets the value at the specified index to newval.", 
        "name": "ArrayObject::offsetSet", 
        "params": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/arrayobject.offsetset", 
        "syntax": "public void ArrayObject::offsetSet ( mixed $index , mixed $newval )", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetUnset": {
        "descr": "Unsets the value at the specified index.", 
        "name": "ArrayObject::offsetUnset", 
        "params": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetunset", 
        "syntax": "public void ArrayObject::offsetUnset ( mixed $index )", 
        "type": "SPL"
    }, 
    "ArrayObject::serialize": {
        "descr": "Serializes an ArrayObject.", 
        "name": "ArrayObject::serialize", 
        "params": [], 
        "path": "php/arrayobject.serialize", 
        "syntax": "public void ArrayObject::serialize ( void )", 
        "type": "SPL"
    }, 
    "ArrayObject::setFlags": {
        "descr": "Set the flags that change the behavior of the ArrayObject.", 
        "name": "ArrayObject::setFlags", 
        "params": [
            {
                "descr": "The new ArrayObject behavior. It takes on either a bitmask, or named constants. ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayobject.setflags", 
        "syntax": "public void ArrayObject::setFlags ( int $flags )", 
        "type": "SPL"
    }, 
    "ArrayObject::setIteratorClass": {
        "descr": "Sets the classname of the array iterator that is used by ArrayObject::getIterator().", 
        "name": "ArrayObject::setIteratorClass", 
        "params": [
            {
                "descr": "The classname of the array iterator to use when iterating over this object.", 
                "name": "iterator_class"
            }
        ], 
        "path": "php/arrayobject.setiteratorclass", 
        "syntax": "public void ArrayObject::setIteratorClass ( string $iterator_class )", 
        "type": "SPL"
    }, 
    "ArrayObject::uasort": {
        "descr": "This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.", 
        "name": "ArrayObject::uasort", 
        "params": [
            {
                "descr": "Function cmp_function should accept two parameters which will be filled by pairs of entries. ", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayobject.uasort", 
        "syntax": "public void ArrayObject::uasort ( callable $cmp_function )", 
        "type": "SPL"
    }, 
    "ArrayObject::uksort": {
        "descr": "This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.", 
        "name": "ArrayObject::uksort", 
        "params": [
            {
                "descr": "The callback comparison function. ", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayobject.uksort", 
        "syntax": "public void ArrayObject::uksort ( callable $cmp_function )", 
        "type": "SPL"
    }, 
    "ArrayObject::unserialize": {
        "descr": "Unserializes a serialized ArrayObject.", 
        "name": "ArrayObject::unserialize", 
        "params": [
            {
                "descr": "The serialized ArrayObject.", 
                "name": "serialized"
            }
        ], 
        "path": "php/arrayobject.unserialize", 
        "syntax": "public void ArrayObject::unserialize ( string $serialized )", 
        "type": "SPL"
    }, 
    "BadFunctionCallException": {
        "descr": "", 
        "name": "BadFunctionCallException", 
        "params": [], 
        "path": "php/class.badfunctioncallexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "BadMethodCallException": {
        "descr": "", 
        "name": "BadMethodCallException", 
        "params": [], 
        "path": "php/class.badmethodcallexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "CURLFile": {
        "descr": "", 
        "name": "CURLFile", 
        "params": [], 
        "path": "php/class.curlfile", 
        "syntax": "public __construct ( string $filename [, string $mimetype [, string $postname ]] )", 
        "type": "cURL"
    }, 
    "CURLFile::__construct": {
        "descr": "Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.", 
        "name": "CURLFile::__construct", 
        "params": [
            {
                "descr": "Path to the file which will be uploaded.", 
                "name": "filename"
            }, 
            {
                "descr": "Mimetype of the file.", 
                "name": "mimetype"
            }, 
            {
                "descr": "Name of the file.", 
                "name": "postname"
            }
        ], 
        "path": "php/curlfile.construct", 
        "syntax": "public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )", 
        "type": "cURL"
    }, 
    "CURLFile::__wakeup": {
        "descr": "", 
        "name": "CURLFile::__wakeup", 
        "params": [], 
        "path": "php/curlfile.wakeup", 
        "syntax": "public void CURLFile::__wakeup ( void )", 
        "type": "cURL"
    }, 
    "CURLFile::getFilename": {
        "descr": "", 
        "name": "CURLFile::getFilename", 
        "params": [], 
        "path": "php/curlfile.getfilename", 
        "syntax": "public string CURLFile::getFilename ( void )", 
        "type": "cURL"
    }, 
    "CURLFile::getMimeType": {
        "descr": "", 
        "name": "CURLFile::getMimeType", 
        "params": [], 
        "path": "php/curlfile.getmimetype", 
        "syntax": "public string CURLFile::getMimeType ( void )", 
        "type": "cURL"
    }, 
    "CURLFile::getPostFilename": {
        "descr": "", 
        "name": "CURLFile::getPostFilename", 
        "params": [], 
        "path": "php/curlfile.getpostfilename", 
        "syntax": "public string CURLFile::getPostFilename ( void )", 
        "type": "cURL"
    }, 
    "CURLFile::setMimeType": {
        "descr": "", 
        "name": "CURLFile::setMimeType", 
        "params": [], 
        "path": "php/curlfile.setmimetype", 
        "syntax": "public void CURLFile::setMimeType ( string $mime )", 
        "type": "cURL"
    }, 
    "CURLFile::setPostFilename": {
        "descr": "", 
        "name": "CURLFile::setPostFilename", 
        "params": [], 
        "path": "php/curlfile.setpostfilename", 
        "syntax": "public void CURLFile::setPostFilename ( string $postname )", 
        "type": "cURL"
    }, 
    "CachingIterator": {
        "descr": "", 
        "name": "CachingIterator", 
        "params": [], 
        "path": "php/class.cachingiterator", 
        "syntax": "public __construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::__construct": {
        "descr": "", 
        "name": "CachingIterator::__construct", 
        "params": [
            {
                "descr": "Iterator to cache", 
                "name": "iterator"
            }, 
            {
                "descr": "Bitmask of flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/cachingiterator.construct", 
        "syntax": "public CachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::__toString": {
        "descr": "", 
        "name": "CachingIterator::__toString", 
        "params": [], 
        "path": "php/cachingiterator.tostring", 
        "syntax": "public void CachingIterator::__toString ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::count": {
        "descr": "", 
        "name": "CachingIterator::count", 
        "params": [], 
        "path": "php/cachingiterator.count", 
        "syntax": "public int CachingIterator::count ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::current": {
        "descr": "", 
        "name": "CachingIterator::current", 
        "params": [], 
        "path": "php/cachingiterator.current", 
        "syntax": "public void CachingIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getCache": {
        "descr": "", 
        "name": "CachingIterator::getCache", 
        "params": [], 
        "path": "php/cachingiterator.getcache", 
        "syntax": "public void CachingIterator::getCache ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getFlags": {
        "descr": "", 
        "name": "CachingIterator::getFlags", 
        "params": [], 
        "path": "php/cachingiterator.getflags", 
        "syntax": "public void CachingIterator::getFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getInnerIterator": {
        "descr": "", 
        "name": "CachingIterator::getInnerIterator", 
        "params": [], 
        "path": "php/cachingiterator.getinneriterator", 
        "syntax": "public Iterator CachingIterator::getInnerIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::hasNext": {
        "descr": "", 
        "name": "CachingIterator::hasNext", 
        "params": [], 
        "path": "php/cachingiterator.hasnext", 
        "syntax": "public void CachingIterator::hasNext ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::key": {
        "descr": "", 
        "name": "CachingIterator::key", 
        "params": [], 
        "path": "php/cachingiterator.key", 
        "syntax": "public scalar CachingIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::next": {
        "descr": "", 
        "name": "CachingIterator::next", 
        "params": [], 
        "path": "php/cachingiterator.next", 
        "syntax": "public void CachingIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetExists": {
        "descr": "", 
        "name": "CachingIterator::offsetExists", 
        "params": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetexists", 
        "syntax": "public void CachingIterator::offsetExists ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetGet": {
        "descr": "", 
        "name": "CachingIterator::offsetGet", 
        "params": [
            {
                "descr": "Description...", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetget", 
        "syntax": "public void CachingIterator::offsetGet ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetSet": {
        "descr": "", 
        "name": "CachingIterator::offsetSet", 
        "params": [
            {
                "descr": "The index of the element to be set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/cachingiterator.offsetset", 
        "syntax": "public void CachingIterator::offsetSet ( string $index , string $newval )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetUnset": {
        "descr": "", 
        "name": "CachingIterator::offsetUnset", 
        "params": [
            {
                "descr": "The index of the element to be unset.", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetunset", 
        "syntax": "public void CachingIterator::offsetUnset ( string $index )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::rewind": {
        "descr": "", 
        "name": "CachingIterator::rewind", 
        "params": [], 
        "path": "php/cachingiterator.rewind", 
        "syntax": "public void CachingIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::setFlags": {
        "descr": "", 
        "name": "CachingIterator::setFlags", 
        "params": [
            {
                "descr": "Bitmask of the flags to set.", 
                "name": "flags"
            }
        ], 
        "path": "php/cachingiterator.setflags", 
        "syntax": "public void CachingIterator::setFlags ( bitmask $flags )", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::valid": {
        "descr": "", 
        "name": "CachingIterator::valid", 
        "params": [], 
        "path": "php/cachingiterator.valid", 
        "syntax": "public void CachingIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CallbackFilterIterator": {
        "descr": "", 
        "name": "CallbackFilterIterator", 
        "params": [], 
        "path": "php/class.callbackfilteriterator", 
        "syntax": "public string accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "CallbackFilterIterator::accept": {
        "descr": "This method calls the callback with the current value, current key and the inner iterator.", 
        "name": "CallbackFilterIterator::accept", 
        "params": [], 
        "path": "php/callbackfilteriterator.accept", 
        "syntax": "public string CallbackFilterIterator::accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Closure": {
        "descr": "", 
        "name": "Closure", 
        "params": [], 
        "path": "php/class.closure", 
        "syntax": "private __construct ( void )", 
        "type": "Classes and Functions"
    }, 
    "Closure::__construct": {
        "descr": "This method exists only to disallow instantiation of the Closure class. Objects of this class are created in the fashion described on the anonymous functions page.", 
        "name": "Closure::__construct", 
        "params": [], 
        "path": "php/closure.construct", 
        "syntax": "private Closure::__construct ( void )", 
        "type": "Classes and Functions"
    }, 
    "Closure::bind": {
        "descr": "This method is a static version of Closure::bindTo(). See the documentation of that method for more information.", 
        "name": "Closure::bind", 
        "params": [
            {
                "descr": "The anonymous functions to bind.", 
                "name": "closure"
            }, 
            {
                "descr": "The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.", 
                "name": "newthis"
            }, 
            {
                "descr": "The class scope to which associate the closure is to be associated, or 'static' to keep the current one. ", 
                "name": "newscope"
            }
        ], 
        "path": "php/closure.bind", 
        "syntax": "public static Closure Closure::bind ( Closure $closure , object $newthis [, mixed $newscope  = 'static' ] )", 
        "type": "Classes and Functions"
    }, 
    "Closure::bindTo": {
        "descr": "Create and return a new anonymous function with the same body and bound variables as this one, but possibly with a different bound object and a new class scope.", 
        "name": "Closure::bindTo", 
        "params": [
            {
                "descr": "The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.", 
                "name": "newthis"
            }, 
            {
                "descr": "The class scope to which associate the closure is to be associated, or 'static' to keep the current one. ", 
                "name": "newscope"
            }
        ], 
        "path": "php/closure.bindto", 
        "syntax": "public Closure Closure::bindTo ( object $newthis [, mixed $newscope  = 'static' ] )", 
        "type": "Classes and Functions"
    }, 
    "Collator": {
        "descr": "", 
        "name": "Collator", 
        "params": [], 
        "path": "php/class.collator", 
        "syntax": "public bool asort ( array &$arr [, int $sort_flag ] )", 
        "type": "Internationalization"
    }, 
    "Collator::asort": {
        "descr": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules.", 
        "name": "Collator::asort", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort.", 
                "name": "arr"
            }, 
            {
                "descr": "Optional sorting type, one of the following:   Collator::SORT_REGULAR - compare items normally (don't change types)     Collator::SORT_NUMERIC - compare items numerically     Collator::SORT_STRING - compare items as strings    Default $sort_flag value is Collator::SORT_REGULAR. It is also used if an invalid $sort_flag value has been specified.", 
                "name": "sort_flag"
            }
        ], 
        "path": "php/collator.asort", 
        "syntax": "public bool Collator::asort ( array &$arr [, int $sort_flag ] )", 
        "type": "Internationalization"
    }, 
    "Collator::compare": {
        "descr": "Compare two Unicode strings according to collation rules.", 
        "name": "Collator::compare", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "The first string to compare.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string to compare.", 
                "name": "str2"
            }
        ], 
        "path": "php/collator.compare", 
        "syntax": "public int Collator::compare ( string $str1 , string $str2 )", 
        "type": "Internationalization"
    }, 
    "Collator::create": {
        "descr": "The strings will be compared using the options already specified.", 
        "name": "Collator::create", 
        "params": [
            {
                "descr": "The locale containing the required collation rules. ", 
                "name": "locale"
            }
        ], 
        "path": "php/collator.create", 
        "syntax": "public static Collator Collator::create ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Collator::getAttribute": {
        "descr": "Get a value of an integer collator attribute.", 
        "name": "Collator::getAttribute", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Attribute to get value for.", 
                "name": "attr"
            }
        ], 
        "path": "php/collator.getattribute", 
        "syntax": "public int Collator::getAttribute ( int $attr )", 
        "type": "Internationalization"
    }, 
    "Collator::getErrorCode": {
        "descr": "Procedural style", 
        "name": "Collator::getErrorCode", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.geterrorcode", 
        "syntax": "public int Collator::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "Collator::getErrorMessage": {
        "descr": "Retrieves the message for the last error.", 
        "name": "Collator::getErrorMessage", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.geterrormessage", 
        "syntax": "public string Collator::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "Collator::getLocale": {
        "descr": "Get collector locale name.", 
        "name": "Collator::getLocale", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE, respectively).", 
                "name": "type"
            }
        ], 
        "path": "php/collator.getlocale", 
        "syntax": "public string Collator::getLocale ( int $type )", 
        "type": "Internationalization"
    }, 
    "Collator::getSortKey": {
        "descr": "Return collation key for a string.", 
        "name": "Collator::getSortKey", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "The string to produce the key from.", 
                "name": "str"
            }
        ], 
        "path": "php/collator.getsortkey", 
        "syntax": "public string Collator::getSortKey ( string $str )", 
        "type": "Internationalization"
    }, 
    "Collator::getStrength": {
        "descr": "Procedural style", 
        "name": "Collator::getStrength", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.getstrength", 
        "syntax": "public int Collator::getStrength ( void )", 
        "type": "Internationalization"
    }, 
    "Collator::setAttribute": {
        "descr": "Procedural style", 
        "name": "Collator::setAttribute", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Attribute.", 
                "name": "attr"
            }, 
            {
                "descr": "Attribute value.", 
                "name": "val"
            }
        ], 
        "path": "php/collator.setattribute", 
        "syntax": "public bool Collator::setAttribute ( int $attr , int $val )", 
        "type": "Internationalization"
    }, 
    "Collator::setStrength": {
        "descr": "The \u00bb ICU Collation Service supports many levels of comparison (named \"Levels\", but also known as \"Strengths\"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions.", 
        "name": "Collator::setStrength", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Strength to set.  Possible values are:   Collator::PRIMARY     Collator::SECONDARY     Collator::TERTIARY     Collator::QUATERNARY     Collator::IDENTICAL     Collator::DEFAULT_STRENGTH", 
                "name": "strength"
            }
        ], 
        "path": "php/collator.setstrength", 
        "syntax": "public bool Collator::setStrength ( int $strength )", 
        "type": "Internationalization"
    }, 
    "Collator::sort": {
        "descr": "This function sorts an array according to current locale rules.", 
        "name": "Collator::sort", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort.", 
                "name": "arr"
            }, 
            {
                "descr": "Optional sorting type, one of the following:    Collator::SORT_REGULAR - compare items normally (don't change types)     Collator::SORT_NUMERIC - compare items numerically     Collator::SORT_STRING - compare items as strings    Default sorting type is Collator::SORT_REGULAR. It is also used if an invalid sort_flag value has been specified.", 
                "name": "sort_flag"
            }
        ], 
        "path": "php/collator.sort", 
        "syntax": "public bool Collator::sort ( array &$arr [, int $sort_flag ] )", 
        "type": "Internationalization"
    }, 
    "Collator::sortWithSortKeys": {
        "descr": "Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.", 
        "name": "Collator::sortWithSortKeys", 
        "params": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort", 
                "name": "arr"
            }
        ], 
        "path": "php/collator.sortwithsortkeys", 
        "syntax": "public bool Collator::sortWithSortKeys ( array &$arr )", 
        "type": "Internationalization"
    }, 
    "Cond": {
        "descr": "", 
        "name": "Cond", 
        "params": [], 
        "path": "php/class.cond", 
        "syntax": "final public static boolean broadcast (  long $condition  )", 
        "type": "Process Control"
    }, 
    "Cond::broadcast": {
        "descr": "Broadcast to all Threads blocking on a call to Cond::wait().", 
        "name": "Cond::broadcast", 
        "params": [
            {
                "descr": "A handle to a Condition Variable returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.broadcast", 
        "syntax": "final public static boolean Cond::broadcast (  long $condition  )", 
        "type": "Process Control"
    }, 
    "Cond::create": {
        "descr": "Creates a new Condition Variable for the caller.", 
        "name": "Cond::create", 
        "params": [], 
        "path": "php/cond.create", 
        "syntax": "final public static long Cond::create ( void )", 
        "type": "Process Control"
    }, 
    "Cond::destroy": {
        "descr": "Destroying Condition Variable handles must be carried out explicitly by the programmer when they are finished with the Condition Variable. No Threads should be blocking on a call to Cond::wait() when the call to Cond::destroy() takes place.", 
        "name": "Cond::destroy", 
        "params": [
            {
                "descr": "A handle to a Condition Variable returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.destroy", 
        "syntax": "final public static boolean Cond::destroy (  long $condition  )", 
        "type": "Process Control"
    }, 
    "Cond::signal": {
        "descr": "", 
        "name": "Cond::signal", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.signal", 
        "syntax": "final public static boolean Cond::signal (  long $condition  )", 
        "type": "Process Control"
    }, 
    "Cond::wait": {
        "descr": "Wait for a signal on a Condition Variable, optionally specifying a timeout to limit waiting time.", 
        "name": "Cond::wait", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Cond::create().", 
                "name": "condition"
            }, 
            {
                "descr": "A handle returned by a previous call to Mutex::create() and owned (locked) by the caller.", 
                "name": "mutex"
            }, 
            {
                "descr": "An optional timeout, in microseconds ( millionths of a second ).", 
                "name": "timeout"
            }
        ], 
        "path": "php/cond.wait", 
        "syntax": "final public static boolean Cond::wait (  long $condition  ,  long $mutex  [,  long $timeout  ] )", 
        "type": "Process Control"
    }, 
    "Countable (interface": {
        "descr": "", 
        "name": "Countable (interface", 
        "params": [], 
        "path": "php/class.countable", 
        "syntax": "abstract public int count ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "Countable::count": {
        "descr": "This method is executed when using the count() function on an object implementing Countable.", 
        "name": "Countable::count", 
        "params": [], 
        "path": "php/countable.count", 
        "syntax": "abstract public int Countable::count ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "DOMAttr": {
        "descr": "", 
        "name": "DOMAttr", 
        "params": [], 
        "path": "php/class.domattr", 
        "syntax": "public __construct ( string $name [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMAttr::__construct": {
        "descr": "Creates a new DOMAttr object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writable node, use DOMDocument::createAttribute.", 
        "name": "DOMAttr::__construct", 
        "params": [
            {
                "descr": "The tag name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }
        ], 
        "path": "php/domattr.construct", 
        "syntax": "public DOMAttr::__construct ( string $name [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMAttr::isId": {
        "descr": "This function checks if the attribute is a defined ID.", 
        "name": "DOMAttr::isId", 
        "params": [], 
        "path": "php/domattr.isid", 
        "syntax": "public bool DOMAttr::isId ( void )", 
        "type": "HTML"
    }, 
    "DOMCdataSection": {
        "descr": "", 
        "name": "DOMCdataSection", 
        "params": [], 
        "path": "php/class.domcdatasection", 
        "syntax": "public bool DOMText::isWhitespaceInElementContent ( void )", 
        "type": "HTML"
    }, 
    "DOMCharacterData": {
        "descr": "", 
        "name": "DOMCharacterData", 
        "params": [], 
        "path": "php/class.domcharacterdata", 
        "syntax": "void appendData ( string $data )", 
        "type": "HTML"
    }, 
    "DOMCharacterData::appendData": {
        "descr": "Append the string data to the end of the character data of the node.", 
        "name": "DOMCharacterData::appendData", 
        "params": [
            {
                "descr": "The string to append.", 
                "name": "data"
            }
        ], 
        "path": "php/domcharacterdata.appenddata", 
        "syntax": "void DOMCharacterData::appendData ( string $data )", 
        "type": "HTML"
    }, 
    "DOMCharacterData::deleteData": {
        "descr": "Deletes count characters starting from position offset.", 
        "name": "DOMCharacterData::deleteData", 
        "params": [
            {
                "descr": "The offset from which to start removing.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to delete. ", 
                "name": "count"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.deletedata", 
        "syntax": "void DOMCharacterData::deleteData ( int $offset , int $count )", 
        "type": "HTML"
    }, 
    "DOMCharacterData::insertData": {
        "descr": "Inserts string data at position offset.", 
        "name": "DOMCharacterData::insertData", 
        "params": [
            {
                "descr": "The character offset at which to insert.", 
                "name": "offset"
            }, 
            {
                "descr": "The string to insert.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.insertdata", 
        "syntax": "void DOMCharacterData::insertData ( int $offset , string $data )", 
        "type": "HTML"
    }, 
    "DOMCharacterData::replaceData": {
        "descr": "Replace count characters starting from position offset with data.", 
        "name": "DOMCharacterData::replaceData", 
        "params": [
            {
                "descr": "The offset from which to start replacing.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to replace. ", 
                "name": "count"
            }, 
            {
                "descr": "The string with which the range must be replaced.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.replacedata", 
        "syntax": "void DOMCharacterData::replaceData ( int $offset , int $count , string $data )", 
        "type": "HTML"
    }, 
    "DOMCharacterData::substringData": {
        "descr": "Returns the specified substring.", 
        "name": "DOMCharacterData::substringData", 
        "params": [
            {
                "descr": "Start offset of substring to extract.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to extract.", 
                "name": "count"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.substringdata", 
        "syntax": "string DOMCharacterData::substringData ( int $offset , int $count )", 
        "type": "HTML"
    }, 
    "DOMComment": {
        "descr": "", 
        "name": "DOMComment", 
        "params": [], 
        "path": "php/class.domcomment", 
        "syntax": "public __construct ([ string $value ] )", 
        "type": "HTML"
    }, 
    "DOMComment::__construct": {
        "descr": "Creates a new DOMComment object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createComment.", 
        "name": "DOMComment::__construct", 
        "params": [
            {
                "descr": "The value of the comment.", 
                "name": "value"
            }
        ], 
        "path": "php/domcomment.construct", 
        "syntax": "public DOMComment::__construct ([ string $value ] )", 
        "type": "HTML"
    }, 
    "DOMDocument": {
        "descr": "", 
        "name": "DOMDocument", 
        "params": [], 
        "path": "php/class.domdocument", 
        "syntax": "public __construct ([ string $version [, string $encoding ]] )", 
        "type": "HTML"
    }, 
    "DOMDocument::__construct": {
        "descr": "Creates a new DOMDocument object.", 
        "name": "DOMDocument::__construct", 
        "params": [
            {
                "descr": "The version number of the document as part of the XML declaration.", 
                "name": "version"
            }, 
            {
                "descr": "The encoding of the document as part of the XML declaration.", 
                "name": "encoding"
            }
        ], 
        "path": "php/domdocument.construct", 
        "syntax": "public DOMDocument::__construct ([ string $version [, string $encoding ]] )", 
        "type": "HTML"
    }, 
    "DOMDocument::createAttribute": {
        "descr": "This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createattribute", 
        "syntax": "public DOMAttr DOMDocument::createAttribute ( string $name )", 
        "type": "HTML"
    }, 
    "DOMDocument::createAttributeNS": {
        "descr": "This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createAttributeNS", 
        "params": [
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The tag name and prefix of the attribute, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "Raised if qualifiedName contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a malformed qualified name, or if qualifiedName has a prefix and namespaceURI is NULL.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domdocument.createattributens", 
        "syntax": "public DOMAttr DOMDocument::createAttributeNS ( string $namespaceURI , string $qualifiedName )", 
        "type": "HTML"
    }, 
    "DOMDocument::createCDATASection": {
        "descr": "This function creates a new instance of class DOMCDATASection. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createCDATASection", 
        "params": [
            {
                "descr": "The content of the cdata.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocument.createcdatasection", 
        "syntax": "public DOMCDATASection DOMDocument::createCDATASection ( string $data )", 
        "type": "HTML"
    }, 
    "DOMDocument::createComment": {
        "descr": "This function creates a new instance of class DOMComment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createComment", 
        "params": [
            {
                "descr": "The content of the comment.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocument.createcomment", 
        "syntax": "public DOMComment DOMDocument::createComment ( string $data )", 
        "type": "HTML"
    }, 
    "DOMDocument::createDocumentFragment": {
        "descr": "This function creates a new instance of class DOMDocumentFragment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createDocumentFragment", 
        "params": [], 
        "path": "php/domdocument.createdocumentfragment", 
        "syntax": "public DOMDocumentFragment DOMDocument::createDocumentFragment ( void )", 
        "type": "HTML"
    }, 
    "DOMDocument::createElement": {
        "descr": "This function creates a new instance of class DOMElement. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createElement", 
        "params": [
            {
                "descr": "The tag name of the element.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the element. By default, an empty element will be created. ", 
                "name": "value"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createelement", 
        "syntax": "public DOMElement DOMDocument::createElement ( string $name [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::createElementNS": {
        "descr": "This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createElementNS", 
        "params": [
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the element, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The value of the element. By default, an empty element will be created. ", 
                "name": "value"
            }, 
            {
                "descr": "Raised if qualifiedName contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a maformed qualified name.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domdocument.createelementns", 
        "syntax": "public DOMElement DOMDocument::createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::createEntityReference": {
        "descr": "This function creates a new instance of class DOMEntityReference. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createEntityReference", 
        "params": [
            {
                "descr": "The content of the entity reference, e.g. ", 
                "name": "name"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createentityreference", 
        "syntax": "public DOMEntityReference DOMDocument::createEntityReference ( string $name )", 
        "type": "HTML"
    }, 
    "DOMDocument::createProcessingInstruction": {
        "descr": "This function creates a new instance of class DOMProcessingInstruction. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createProcessingInstruction", 
        "params": [
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }, 
            {
                "descr": "The content of the processing instruction.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if target contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createprocessinginstruction", 
        "syntax": "public DOMProcessingInstruction DOMDocument::createProcessingInstruction ( string $target [, string $data ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::createTextNode": {
        "descr": "This function creates a new instance of class DOMText. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createTextNode", 
        "params": [
            {
                "descr": "The content of the text.", 
                "name": "content"
            }
        ], 
        "path": "php/domdocument.createtextnode", 
        "syntax": "public DOMText DOMDocument::createTextNode ( string $content )", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementById": {
        "descr": "This function is similar to DOMDocument::getElementsByTagName but searches for an element with a given id.", 
        "name": "DOMDocument::getElementById", 
        "params": [
            {
                "descr": "The unique id value for an element.", 
                "name": "elementId"
            }
        ], 
        "path": "php/domdocument.getelementbyid", 
        "syntax": "public DOMElement DOMDocument::getElementById ( string $elementId )", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementsByTagName": {
        "descr": "This function returns a new instance of class DOMNodeList containing all the elements with a given local tag name.", 
        "name": "DOMDocument::getElementsByTagName", 
        "params": [
            {
                "descr": "The local name (without namespace) of the tag to match on. ", 
                "name": "name"
            }
        ], 
        "path": "php/domdocument.getelementsbytagname", 
        "syntax": "public DOMNodeList DOMDocument::getElementsByTagName ( string $name )", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementsByTagNameNS": {
        "descr": "Returns a DOMNodeList of all elements with a given local name and a namespace URI.", 
        "name": "DOMDocument::getElementsByTagNameNS", 
        "params": [
            {
                "descr": "The namespace URI of the elements to match on. ", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the elements to match on. ", 
                "name": "localName"
            }
        ], 
        "path": "php/domdocument.getelementsbytagnamens", 
        "syntax": "public DOMNodeList DOMDocument::getElementsByTagNameNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMDocument::importNode": {
        "descr": "This function returns a copy of the node to import and associates it with the current document.", 
        "name": "DOMDocument::importNode", 
        "params": [
            {
                "descr": "The node to import.", 
                "name": "importedNode"
            }, 
            {
                "descr": "If set to TRUE, this method will recursively import the subtree under the importedNode. ", 
                "name": "deep"
            }
        ], 
        "path": "php/domdocument.importnode", 
        "syntax": "public DOMNode DOMDocument::importNode ( DOMNode $importedNode [, bool $deep ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::load": {
        "descr": "Loads an XML document from a file.", 
        "name": "DOMDocument::load", 
        "params": [
            {
                "descr": "The path to the XML document.", 
                "name": "filename"
            }, 
            {
                "descr": "Bitwise OR of the libxml option constants.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.load", 
        "syntax": "public mixed DOMDocument::load ( string $filename [, int $options = 0 ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::loadHTML": {
        "descr": "The function parses the HTML contained in the string source. Unlike loading XML, HTML does not have to be well-formed to load. This function may also be called statically to load and create a DOMDocument object. The static invocation may be used when no DOMDocument properties need to be set prior to loading.", 
        "name": "DOMDocument::loadHTML", 
        "params": [
            {
                "descr": "The HTML string.", 
                "name": "source"
            }, 
            {
                "descr": "Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadhtml", 
        "syntax": "public bool DOMDocument::loadHTML ( string $source [, int $options = 0 ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::loadHTMLFile": {
        "descr": "The function parses the HTML document in the file named filename. Unlike loading XML, HTML does not have to be well-formed to load.", 
        "name": "DOMDocument::loadHTMLFile", 
        "params": [
            {
                "descr": "The path to the HTML file.", 
                "name": "filename"
            }, 
            {
                "descr": "Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadhtmlfile", 
        "syntax": "public bool DOMDocument::loadHTMLFile ( string $filename [, int $options = 0 ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::loadXML": {
        "descr": "Loads an XML document from a string.", 
        "name": "DOMDocument::loadXML", 
        "params": [
            {
                "descr": "The string containing the XML.", 
                "name": "source"
            }, 
            {
                "descr": "Bitwise OR of the libxml option constants.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadxml", 
        "syntax": "public mixed DOMDocument::loadXML ( string $source [, int $options = 0 ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::normalizeDocument": {
        "descr": "This method acts as if you saved and then loaded the document, putting the document in a \"normal\" form.", 
        "name": "DOMDocument::normalizeDocument", 
        "params": [], 
        "path": "php/domdocument.normalizedocument", 
        "syntax": "public void DOMDocument::normalizeDocument ( void )", 
        "type": "HTML"
    }, 
    "DOMDocument::registerNodeClass": {
        "descr": "This method allows you to register your own extended DOM class to be used afterward by the PHP DOM extension.", 
        "name": "DOMDocument::registerNodeClass", 
        "params": [
            {
                "descr": "The DOM class that you want to extend. ", 
                "name": "baseclass"
            }, 
            {
                "descr": "Your extended class name. If NULL is provided, any previously registered class extending baseclass will be removed.", 
                "name": "extendedclass"
            }
        ], 
        "path": "php/domdocument.registernodeclass", 
        "syntax": "public bool DOMDocument::registerNodeClass ( string $baseclass , string $extendedclass )", 
        "type": "HTML"
    }, 
    "DOMDocument::relaxNGValidate": {
        "descr": "Performs \u00bb relaxNG validation on the document based on the given RNG schema.", 
        "name": "DOMDocument::relaxNGValidate", 
        "params": [
            {
                "descr": "The RNG file.", 
                "name": "filename"
            }
        ], 
        "path": "php/domdocument.relaxngvalidate", 
        "syntax": "public bool DOMDocument::relaxNGValidate ( string $filename )", 
        "type": "HTML"
    }, 
    "DOMDocument::relaxNGValidateSource": {
        "descr": "Performs \u00bb relaxNG validation on the document based on the given RNG source.", 
        "name": "DOMDocument::relaxNGValidateSource", 
        "params": [
            {
                "descr": "A string containing the RNG schema.", 
                "name": "source"
            }
        ], 
        "path": "php/domdocument.relaxngvalidatesource", 
        "syntax": "public bool DOMDocument::relaxNGValidateSource ( string $source )", 
        "type": "HTML"
    }, 
    "DOMDocument::save": {
        "descr": "Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::save", 
        "params": [
            {
                "descr": "The path to the saved XML document.", 
                "name": "filename"
            }, 
            {
                "descr": "Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.save", 
        "syntax": "public int DOMDocument::save ( string $filename [, int $options ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::saveHTML": {
        "descr": "Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveHTML", 
        "params": [
            {
                "descr": "Optional parameter to output a subset of the document.", 
                "name": "node"
            }
        ], 
        "path": "php/domdocument.savehtml", 
        "syntax": "public string DOMDocument::saveHTML ([ DOMNode $node = NULL ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::saveHTMLFile": {
        "descr": "Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveHTMLFile", 
        "params": [
            {
                "descr": "The path to the saved HTML document.", 
                "name": "filename"
            }
        ], 
        "path": "php/domdocument.savehtmlfile", 
        "syntax": "public int DOMDocument::saveHTMLFile ( string $filename )", 
        "type": "HTML"
    }, 
    "DOMDocument::saveXML": {
        "descr": "Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveXML", 
        "params": [
            {
                "descr": "Use this parameter to output only a specific node without XML declaration rather than the entire document.", 
                "name": "node"
            }, 
            {
                "descr": "Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.", 
                "name": "options"
            }, 
            {
                "descr": "Raised if node is from another document.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }
        ], 
        "path": "php/domdocument.savexml", 
        "syntax": "public string DOMDocument::saveXML ([ DOMNode $node [, int $options ]] )", 
        "type": "HTML"
    }, 
    "DOMDocument::schemaValidate": {
        "descr": "Validates a document based on the given schema file.", 
        "name": "DOMDocument::schemaValidate", 
        "params": [
            {
                "descr": "The path to the schema.", 
                "name": "filename"
            }, 
            {
                "descr": "A bitmask of Libxml schema validation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/domdocument.schemavalidate", 
        "syntax": "public bool DOMDocument::schemaValidate ( string $filename [, int $flags ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::schemaValidateSource": {
        "descr": "Validates a document based on a schema defined in the given string.", 
        "name": "DOMDocument::schemaValidateSource", 
        "params": [
            {
                "descr": "A string containing the schema.", 
                "name": "source"
            }, 
            {
                "descr": "A bitmask of Libxml schema validation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/domdocument.schemavalidatesource", 
        "syntax": "public bool DOMDocument::schemaValidateSource ( string $source [, int $flags ] )", 
        "type": "HTML"
    }, 
    "DOMDocument::validate": {
        "descr": "Validates the document based on its DTD.", 
        "name": "DOMDocument::validate", 
        "params": [], 
        "path": "php/domdocument.validate", 
        "syntax": "public bool DOMDocument::validate ( void )", 
        "type": "HTML"
    }, 
    "DOMDocument::xinclude": {
        "descr": "This method substitutes \u00bb XIncludes in a DOMDocument object.", 
        "name": "DOMDocument::xinclude", 
        "params": [
            {
                "descr": "libxml parameters. Available since PHP 5.1.0 and Libxml 2.6.7.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.xinclude", 
        "syntax": "public int DOMDocument::xinclude ([ int $options ] )", 
        "type": "HTML"
    }, 
    "DOMDocumentFragment": {
        "descr": "", 
        "name": "DOMDocumentFragment", 
        "params": [], 
        "path": "php/class.domdocumentfragment", 
        "syntax": "public bool appendXML ( string $data )", 
        "type": "HTML"
    }, 
    "DOMDocumentFragment::appendXML": {
        "descr": "Appends raw XML data to a DOMDocumentFragment.", 
        "name": "DOMDocumentFragment::appendXML", 
        "params": [
            {
                "descr": "XML to append.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocumentfragment.appendxml", 
        "syntax": "public bool DOMDocumentFragment::appendXML ( string $data )", 
        "type": "HTML"
    }, 
    "DOMDocumentType": {
        "descr": "", 
        "name": "DOMDocumentType", 
        "params": [], 
        "path": "php/class.domdocumenttype", 
        "syntax": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "type": "HTML"
    }, 
    "DOMElement": {
        "descr": "", 
        "name": "DOMElement", 
        "params": [], 
        "path": "php/class.domelement", 
        "syntax": "public __construct ( string $name [, string $value [, string $namespaceURI ]] )", 
        "type": "HTML"
    }, 
    "DOMElement::__construct": {
        "descr": "Creates a new DOMElement object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createElement or DOMDocument::createElementNS.", 
        "name": "DOMElement::__construct", 
        "params": [
            {
                "descr": "The tag name of the element. When also passing in namespaceURI, the element name may take a prefix to be associated with the URI.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the element.", 
                "name": "value"
            }, 
            {
                "descr": "A namespace URI to create the element within a specific namespace.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domelement.construct", 
        "syntax": "public DOMElement::__construct ( string $name [, string $value [, string $namespaceURI ]] )", 
        "type": "HTML"
    }, 
    "DOMElement::getAttribute": {
        "descr": "Gets the value of the attribute with name name for the current node.", 
        "name": "DOMElement::getAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getattribute", 
        "syntax": "public string DOMElement::getAttribute ( string $name )", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNS": {
        "descr": "Gets the value of the attribute in namespace namespaceURI with local name localName for the current node.", 
        "name": "DOMElement::getAttributeNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getattributens", 
        "syntax": "public string DOMElement::getAttributeNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNode": {
        "descr": "Returns the attribute node with name name for the current element.", 
        "name": "DOMElement::getAttributeNode", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getattributenode", 
        "syntax": "public DOMAttr DOMElement::getAttributeNode ( string $name )", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNodeNS": {
        "descr": "Returns the attribute node in namespace namespaceURI with local name localName for the current node.", 
        "name": "DOMElement::getAttributeNodeNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getattributenodens", 
        "syntax": "public DOMAttr DOMElement::getAttributeNodeNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMElement::getElementsByTagName": {
        "descr": "This function returns a new instance of the class DOMNodeList of all descendant elements with a given tag name, in the order in which they are encountered in a preorder traversal of this element tree.", 
        "name": "DOMElement::getElementsByTagName", 
        "params": [
            {
                "descr": "The tag name. Use * to return all elements within the element tree.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getelementsbytagname", 
        "syntax": "public DOMNodeList DOMElement::getElementsByTagName ( string $name )", 
        "type": "HTML"
    }, 
    "DOMElement::getElementsByTagNameNS": {
        "descr": "This function fetch all the descendant elements with a given localName and namespaceURI.", 
        "name": "DOMElement::getElementsByTagNameNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name. Use * to return all elements within the element tree.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getelementsbytagnamens", 
        "syntax": "public DOMNodeList DOMElement::getElementsByTagNameNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMElement::hasAttribute": {
        "descr": "Indicates whether attribute named name exists as a member of the element.", 
        "name": "DOMElement::hasAttribute", 
        "params": [
            {
                "descr": "The attribute name.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.hasattribute", 
        "syntax": "public bool DOMElement::hasAttribute ( string $name )", 
        "type": "HTML"
    }, 
    "DOMElement::hasAttributeNS": {
        "descr": "Indicates whether attribute in namespace namespaceURI named localName exists as a member of the element.", 
        "name": "DOMElement::hasAttributeNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.hasattributens", 
        "syntax": "public bool DOMElement::hasAttributeNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttribute": {
        "descr": "Removes attribute named name from the element.", 
        "name": "DOMElement::removeAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.removeattribute", 
        "syntax": "public bool DOMElement::removeAttribute ( string $name )", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttributeNS": {
        "descr": "Removes attribute is namespace namespaceURI named localName from the element.", 
        "name": "DOMElement::removeAttributeNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.removeattributens", 
        "syntax": "public bool DOMElement::removeAttributeNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttributeNode": {
        "descr": "Removes attribute oldnode from the element.", 
        "name": "DOMElement::removeAttributeNode", 
        "params": [
            {
                "descr": "The attribute node.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not an attribute of the element.", 
                "name": "DOM_NOT_FOUND_ERROR"
            }
        ], 
        "path": "php/domelement.removeattributenode", 
        "syntax": "public bool DOMElement::removeAttributeNode ( DOMAttr $oldnode )", 
        "type": "HTML"
    }, 
    "DOMElement::setAttribute": {
        "descr": "Sets an attribute with name name to the given value. If the attribute does not exist, it will be created.", 
        "name": "DOMElement::setAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattribute", 
        "syntax": "public DOMAttr DOMElement::setAttribute ( string $name , string $value )", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNS": {
        "descr": "Sets an attribute with namespace namespaceURI and name name to the given value. If the attribute does not exist, it will be created.", 
        "name": "DOMElement::setAttributeNS", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the attribute, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a malformed qualified name, or if qualifiedName has a prefix and namespaceURI is NULL.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domelement.setattributens", 
        "syntax": "public void DOMElement::setAttributeNS ( string $namespaceURI , string $qualifiedName , string $value )", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNode": {
        "descr": "Adds new attribute node attr to element.", 
        "name": "DOMElement::setAttributeNode", 
        "params": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattributenode", 
        "syntax": "public DOMAttr DOMElement::setAttributeNode ( DOMAttr $attr )", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNodeNS": {
        "descr": "Adds new attribute node attr to element.", 
        "name": "DOMElement::setAttributeNodeNS", 
        "params": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattributenodens", 
        "syntax": "public DOMAttr DOMElement::setAttributeNodeNS ( DOMAttr $attr )", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttribute": {
        "descr": "Declares the attribute name to be of type ID.", 
        "name": "DOMElement::setIdAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattribute", 
        "syntax": "public void DOMElement::setIdAttribute ( string $name , bool $isId )", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttributeNS": {
        "descr": "Declares the attribute specified by localName and namespaceURI to be of type ID.", 
        "name": "DOMElement::setIdAttributeNS", 
        "params": [
            {
                "descr": "The namespace URI of the attribute.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the attribute, as prefix:tagname.", 
                "name": "localName"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattributens", 
        "syntax": "public void DOMElement::setIdAttributeNS ( string $namespaceURI , string $localName , bool $isId )", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttributeNode": {
        "descr": "Declares the attribute specified by attr to be of type ID.", 
        "name": "DOMElement::setIdAttributeNode", 
        "params": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattributenode", 
        "syntax": "public void DOMElement::setIdAttributeNode ( DOMAttr $attr , bool $isId )", 
        "type": "HTML"
    }, 
    "DOMEntity": {
        "descr": "", 
        "name": "DOMEntity", 
        "params": [], 
        "path": "php/class.domentity", 
        "syntax": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "type": "HTML"
    }, 
    "DOMEntityReference": {
        "descr": "", 
        "name": "DOMEntityReference", 
        "params": [], 
        "path": "php/class.domentityreference", 
        "syntax": "public __construct ( string $name )", 
        "type": "HTML"
    }, 
    "DOMEntityReference::__construct": {
        "descr": "Creates a new DOMEntityReference object.", 
        "name": "DOMEntityReference::__construct", 
        "params": [
            {
                "descr": "The name of the entity reference.", 
                "name": "name"
            }
        ], 
        "path": "php/domentityreference.construct", 
        "syntax": "public DOMEntityReference::__construct ( string $name )", 
        "type": "HTML"
    }, 
    "DOMException": {
        "descr": "", 
        "name": "DOMException", 
        "params": [], 
        "path": "php/class.domexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "HTML"
    }, 
    "DOMImplementation": {
        "descr": "", 
        "name": "DOMImplementation", 
        "params": [], 
        "path": "php/class.domimplementation", 
        "syntax": "__construct ( void )", 
        "type": "HTML"
    }, 
    "DOMImplementation::__construct": {
        "descr": "Creates a new DOMImplementation object.", 
        "name": "DOMImplementation::__construct", 
        "params": [], 
        "path": "php/domimplementation.construct", 
        "syntax": "DOMImplementation::__construct ( void )", 
        "type": "HTML"
    }, 
    "DOMImplementation::createDocument": {
        "descr": "Creates a DOMDocument object of the specified type with its document element.", 
        "name": "DOMImplementation::createDocument", 
        "params": [
            {
                "descr": "The namespace URI of the document element to create.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the document element to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The type of document to create or NULL.", 
                "name": "doctype"
            }, 
            {
                "descr": "Raised if doctype has already been used with a different document or was created from a different implementation.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if there is an error with the namespace, as determined by namespaceURI and qualifiedName.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domimplementation.createdocument", 
        "syntax": "public DOMDocument DOMImplementation::createDocument ([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]] )", 
        "type": "HTML"
    }, 
    "DOMImplementation::createDocumentType": {
        "descr": "Creates an empty DOMDocumentType object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.", 
        "name": "DOMImplementation::createDocumentType", 
        "params": [
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }, 
            {
                "descr": "Raised if there is an error with the namespace, as determined by qualifiedName.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domimplementation.createdocumenttype", 
        "syntax": "public DOMDocumentType DOMImplementation::createDocumentType ([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]] )", 
        "type": "HTML"
    }, 
    "DOMImplementation::hasFeature": {
        "descr": "Test if the DOM implementation implements a specific feature.", 
        "name": "DOMImplementation::hasFeature", 
        "params": [
            {
                "descr": "The feature to test.", 
                "name": "feature"
            }, 
            {
                "descr": "The version number of the feature to test. ", 
                "name": "version"
            }
        ], 
        "path": "php/domimplementation.hasfeature", 
        "syntax": "public bool DOMImplementation::hasFeature ( string $feature , string $version )", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap": {
        "descr": "", 
        "name": "DOMNamedNodeMap", 
        "params": [], 
        "path": "php/class.domnamednodemap", 
        "syntax": "DOMNode getNamedItem ( string $name )", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::getNamedItem": {
        "descr": "Retrieves a node specified by its nodeName.", 
        "name": "DOMNamedNodeMap::getNamedItem", 
        "params": [
            {
                "descr": "The nodeName of the node to retrieve.", 
                "name": "name"
            }
        ], 
        "path": "php/domnamednodemap.getnameditem", 
        "syntax": "DOMNode DOMNamedNodeMap::getNamedItem ( string $name )", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::getNamedItemNS": {
        "descr": "Retrieves a node specified by localName and namespaceURI.", 
        "name": "DOMNamedNodeMap::getNamedItemNS", 
        "params": [
            {
                "descr": "The namespace URI of the node to retrieve.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the node to retrieve.", 
                "name": "localName"
            }
        ], 
        "path": "php/domnamednodemap.getnameditemns", 
        "syntax": "DOMNode DOMNamedNodeMap::getNamedItemNS ( string $namespaceURI , string $localName )", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::item": {
        "descr": "Retrieves a node specified by index within the DOMNamedNodeMap object.", 
        "name": "DOMNamedNodeMap::item", 
        "params": [
            {
                "descr": "Index into this map.", 
                "name": "index"
            }
        ], 
        "path": "php/domnamednodemap.item", 
        "syntax": "DOMNode DOMNamedNodeMap::item ( int $index )", 
        "type": "HTML"
    }, 
    "DOMNode": {
        "descr": "", 
        "name": "DOMNode", 
        "params": [], 
        "path": "php/class.domnode", 
        "syntax": "public DOMNode appendChild ( DOMNode $newnode )", 
        "type": "HTML"
    }, 
    "DOMNode::C14N": {
        "descr": "Canonicalize nodes to a string", 
        "name": "DOMNode::C14N", 
        "params": [
            {
                "descr": "Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.", 
                "name": "exclusive"
            }, 
            {
                "descr": "Retain comments in output.", 
                "name": "with_comments"
            }, 
            {
                "descr": "An array of xpaths to filter the nodes by.", 
                "name": "xpath"
            }, 
            {
                "descr": "An array of namespace prefixes to filter the nodes by.", 
                "name": "ns_prefixes"
            }
        ], 
        "path": "php/domnode.c14n", 
        "syntax": "public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )", 
        "type": "HTML"
    }, 
    "DOMNode::C14NFile": {
        "descr": "Canonicalize nodes to a file.", 
        "name": "DOMNode::C14NFile", 
        "params": [
            {
                "descr": "Path to write the output to.", 
                "name": "uri"
            }, 
            {
                "descr": "Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.", 
                "name": "exclusive"
            }, 
            {
                "descr": "Retain comments in output.", 
                "name": "with_comments"
            }, 
            {
                "descr": "An array of xpaths to filter the nodes by.", 
                "name": "xpath"
            }, 
            {
                "descr": "An array of namespace prefixes to filter the nodes by.", 
                "name": "ns_prefixes"
            }
        ], 
        "path": "php/domnode.c14nfile", 
        "syntax": "public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )", 
        "type": "HTML"
    }, 
    "DOMNode::appendChild": {
        "descr": "This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. DOMDocument::createElement(), DOMDocument::createTextNode() etc. or simply by using any other node.", 
        "name": "DOMNode::appendChild", 
        "params": [
            {
                "descr": "The appended child.", 
                "name": "newnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to append is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }
        ], 
        "path": "php/domnode.appendchild", 
        "syntax": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "type": "HTML"
    }, 
    "DOMNode::cloneNode": {
        "descr": "Creates a copy of the node.", 
        "name": "DOMNode::cloneNode", 
        "params": [
            {
                "descr": "Indicates whether to copy all descendant nodes. ", 
                "name": "deep"
            }
        ], 
        "path": "php/domnode.clonenode", 
        "syntax": "public DOMNode DOMNode::cloneNode ([ bool $deep ] )", 
        "type": "HTML"
    }, 
    "DOMNode::getLineNo": {
        "descr": "Gets line number for where the node is defined.", 
        "name": "DOMNode::getLineNo", 
        "params": [], 
        "path": "php/domnode.getlineno", 
        "syntax": "public int DOMNode::getLineNo ( void )", 
        "type": "HTML"
    }, 
    "DOMNode::getNodePath": {
        "descr": "Gets an XPath location path for the node.", 
        "name": "DOMNode::getNodePath", 
        "params": [], 
        "path": "php/domnode.getnodepath", 
        "syntax": "public string DOMNode::getNodePath ( void )", 
        "type": "HTML"
    }, 
    "DOMNode::hasAttributes": {
        "descr": "This method checks if the node has attributes. The tested node has to be an XML_ELEMENT_NODE.", 
        "name": "DOMNode::hasAttributes", 
        "params": [], 
        "path": "php/domnode.hasattributes", 
        "syntax": "public bool DOMNode::hasAttributes ( void )", 
        "type": "HTML"
    }, 
    "DOMNode::hasChildNodes": {
        "descr": "This function checks if the node has children.", 
        "name": "DOMNode::hasChildNodes", 
        "params": [], 
        "path": "php/domnode.haschildnodes", 
        "syntax": "public bool DOMNode::hasChildNodes ( void )", 
        "type": "HTML"
    }, 
    "DOMNode::insertBefore": {
        "descr": "This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.", 
        "name": "DOMNode::insertBefore", 
        "params": [
            {
                "descr": "The new node.", 
                "name": "newnode"
            }, 
            {
                "descr": "The reference node. If not supplied, newnode is appended to the children.", 
                "name": "refnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to append is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if refnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.insertbefore", 
        "syntax": "public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] )", 
        "type": "HTML"
    }, 
    "DOMNode::isDefaultNamespace": {
        "descr": "Tells whether namespaceURI is the default namespace.", 
        "name": "DOMNode::isDefaultNamespace", 
        "params": [
            {
                "descr": "The namespace URI to look for.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domnode.isdefaultnamespace", 
        "syntax": "public bool DOMNode::isDefaultNamespace ( string $namespaceURI )", 
        "type": "HTML"
    }, 
    "DOMNode::isSameNode": {
        "descr": "This function indicates if two nodes are the same node. The comparison is not based on content", 
        "name": "DOMNode::isSameNode", 
        "params": [
            {
                "descr": "The compared node.", 
                "name": "node"
            }
        ], 
        "path": "php/domnode.issamenode", 
        "syntax": "public bool DOMNode::isSameNode ( DOMNode $node )", 
        "type": "HTML"
    }, 
    "DOMNode::isSupported": {
        "descr": "Checks if the asked feature is supported for the specified version.", 
        "name": "DOMNode::isSupported", 
        "params": [
            {
                "descr": "The feature to test. See the example of DOMImplementation::hasFeature() for a list of features.", 
                "name": "feature"
            }, 
            {
                "descr": "The version number of the feature to test.", 
                "name": "version"
            }
        ], 
        "path": "php/domnode.issupported", 
        "syntax": "public bool DOMNode::isSupported ( string $feature , string $version )", 
        "type": "HTML"
    }, 
    "DOMNode::lookupNamespaceURI": {
        "descr": "Gets the namespace URI of the node based on the prefix.", 
        "name": "DOMNode::lookupNamespaceURI", 
        "params": [
            {
                "descr": "The prefix of the namespace.", 
                "name": "prefix"
            }
        ], 
        "path": "php/domnode.lookupnamespaceuri", 
        "syntax": "public string DOMNode::lookupNamespaceURI ( string $prefix )", 
        "type": "HTML"
    }, 
    "DOMNode::lookupPrefix": {
        "descr": "Gets the namespace prefix of the node based on the namespace URI.", 
        "name": "DOMNode::lookupPrefix", 
        "params": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domnode.lookupprefix", 
        "syntax": "public string DOMNode::lookupPrefix ( string $namespaceURI )", 
        "type": "HTML"
    }, 
    "DOMNode::normalize": {
        "descr": "Remove empty text nodes and merge adjacent text nodes in this node and all its children.", 
        "name": "DOMNode::normalize", 
        "params": [], 
        "path": "php/domnode.normalize", 
        "syntax": "public void DOMNode::normalize ( void )", 
        "type": "HTML"
    }, 
    "DOMNode::removeChild": {
        "descr": "This functions removes a child from a list of children.", 
        "name": "DOMNode::removeChild", 
        "params": [
            {
                "descr": "The removed child.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if this node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.removechild", 
        "syntax": "public DOMNode DOMNode::removeChild ( DOMNode $oldnode )", 
        "type": "HTML"
    }, 
    "DOMNode::replaceChild": {
        "descr": "This function replaces the child oldnode with the passed new node. If the new node is already a child it will not be added a second time. If the replacement succeeds the old node is returned.", 
        "name": "DOMNode::replaceChild", 
        "params": [
            {
                "descr": "The new node. It must be a member of the target document, i.e. ", 
                "name": "newnode"
            }, 
            {
                "descr": "The old node.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to put in is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.replacechild", 
        "syntax": "public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode )", 
        "type": "HTML"
    }, 
    "DOMNodeList": {
        "descr": "", 
        "name": "DOMNodeList", 
        "params": [], 
        "path": "php/class.domnodelist", 
        "syntax": "DOMNode DOMNodelist::item ( int $index )", 
        "type": "HTML"
    }, 
    "DOMNodelist::item": {
        "descr": "Retrieves a node specified by index within the DOMNodeList object.", 
        "name": "DOMNodelist::item", 
        "params": [
            {
                "descr": "Index of the node into the collection.", 
                "name": "index"
            }
        ], 
        "path": "php/domnodelist.item", 
        "syntax": "DOMNode DOMNodelist::item ( int $index )", 
        "type": "HTML"
    }, 
    "DOMNotation": {
        "descr": "", 
        "name": "DOMNotation", 
        "params": [], 
        "path": "php/class.domnotation", 
        "syntax": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "type": "HTML"
    }, 
    "DOMProcessingInstruction": {
        "descr": "", 
        "name": "DOMProcessingInstruction", 
        "params": [], 
        "path": "php/class.domprocessinginstruction", 
        "syntax": "public __construct ( string $name [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMProcessingInstruction::__construct": {
        "descr": "Creates a new DOMProcessingInstruction object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createProcessingInstruction.", 
        "name": "DOMProcessingInstruction::__construct", 
        "params": [
            {
                "descr": "The tag name of the processing instruction.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the processing instruction.", 
                "name": "value"
            }
        ], 
        "path": "php/domprocessinginstruction.construct", 
        "syntax": "public DOMProcessingInstruction::__construct ( string $name [, string $value ] )", 
        "type": "HTML"
    }, 
    "DOMText": {
        "descr": "", 
        "name": "DOMText", 
        "params": [], 
        "path": "php/class.domtext", 
        "syntax": "public bool isWhitespaceInElementContent ( void )", 
        "type": "HTML"
    }, 
    "DOMText::isWhitespaceInElementContent": {
        "descr": "Indicates whether this text node contains only whitespace or it is empty. The text node is determined to contain whitespace in element content during the load of the document.", 
        "name": "DOMText::isWhitespaceInElementContent", 
        "params": [], 
        "path": "php/domtext.iswhitespaceinelementcontent", 
        "syntax": "public bool DOMText::isWhitespaceInElementContent ( void )", 
        "type": "HTML"
    }, 
    "DOMText::splitText": {
        "descr": "Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.", 
        "name": "DOMText::splitText", 
        "params": [
            {
                "descr": "The offset at which to split, starting from 0.", 
                "name": "offset"
            }
        ], 
        "path": "php/domtext.splittext", 
        "syntax": "public DOMText DOMText::splitText ( int $offset )", 
        "type": "HTML"
    }, 
    "DOMXPath": {
        "descr": "", 
        "name": "DOMXPath", 
        "params": [], 
        "path": "php/class.domxpath", 
        "syntax": "public __construct ( DOMDocument $doc )", 
        "type": "HTML"
    }, 
    "DOMXPath::__construct": {
        "descr": "Creates a new DOMXPath object.", 
        "name": "DOMXPath::__construct", 
        "params": [
            {
                "descr": "The DOMDocument associated with the DOMXPath.", 
                "name": "doc"
            }
        ], 
        "path": "php/domxpath.construct", 
        "syntax": "public DOMXPath::__construct ( DOMDocument $doc )", 
        "type": "HTML"
    }, 
    "DOMXPath::evaluate": {
        "descr": "Executes the given XPath expression and returns a typed result if possible.", 
        "name": "DOMXPath::evaluate", 
        "params": [
            {
                "descr": "The XPath expression to execute.", 
                "name": "expression"
            }, 
            {
                "descr": "The optional contextnode can be specified for doing relative XPath queries. ", 
                "name": "contextnode"
            }, 
            {
                "descr": "The optional registerNodeNS can be specified to disable automatic registration of the context node.", 
                "name": "registerNodeNS"
            }
        ], 
        "path": "php/domxpath.evaluate", 
        "syntax": "public mixed DOMXPath::evaluate ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )", 
        "type": "HTML"
    }, 
    "DOMXPath::query": {
        "descr": "Executes the given XPath expression.", 
        "name": "DOMXPath::query", 
        "params": [
            {
                "descr": "The XPath expression to execute.", 
                "name": "expression"
            }, 
            {
                "descr": "The optional contextnode can be specified for doing relative XPath queries. ", 
                "name": "contextnode"
            }, 
            {
                "descr": "The optional registerNodeNS can be specified to disable automatic registration of the context node.", 
                "name": "registerNodeNS"
            }
        ], 
        "path": "php/domxpath.query", 
        "syntax": "public DOMNodeList DOMXPath::query ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )", 
        "type": "HTML"
    }, 
    "DOMXPath::registerNamespace": {
        "descr": "Registers the namespaceURI and prefix with the DOMXPath object.", 
        "name": "DOMXPath::registerNamespace", 
        "params": [
            {
                "descr": "The prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domxpath.registernamespace", 
        "syntax": "public bool DOMXPath::registerNamespace ( string $prefix , string $namespaceURI )", 
        "type": "HTML"
    }, 
    "DOMXPath::registerPhpFunctions": {
        "descr": "This method enables the ability to use PHP functions within XPath expressions.", 
        "name": "DOMXPath::registerPhpFunctions", 
        "params": [
            {
                "descr": "Use this parameter to only allow certain functions to be called from XPath. ", 
                "name": "restrict"
            }
        ], 
        "path": "php/domxpath.registerphpfunctions", 
        "syntax": "public void DOMXPath::registerPhpFunctions ([ mixed $restrict ] )", 
        "type": "HTML"
    }, 
    "DateInterval": {
        "descr": "", 
        "name": "DateInterval", 
        "params": [], 
        "path": "php/class.dateinterval", 
        "syntax": "public static DateInterval createFromDateString ( string $time )", 
        "type": "Date and Time"
    }, 
    "DateInterval::createFromDateString": {
        "descr": "Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.", 
        "name": "DateInterval::createFromDateString", 
        "params": [
            {
                "descr": "A date with relative parts. Specifically, the relative formats supported by the parser used for strtotime() and DateTime will be used to construct the DateInterval.", 
                "name": "time"
            }
        ], 
        "path": "php/dateinterval.createfromdatestring", 
        "syntax": "public static DateInterval DateInterval::createFromDateString ( string $time )", 
        "type": "Date and Time"
    }, 
    "DateInterval::format": {
        "descr": "Formats the interval.", 
        "name": "DateInterval::format", 
        "params": [
            {
                "descr": "The following characters are recognized in the format parameter string. ", 
                "name": "format"
            }
        ], 
        "path": "php/dateinterval.format", 
        "syntax": "public string DateInterval::format ( string $format )", 
        "type": "Date and Time"
    }, 
    "DateTime": {
        "descr": "", 
        "name": "DateTime", 
        "params": [
            {
                "descr": "Atom (example: 2005-08-15T15:52:01+00:00)", 
                "name": "DATE_ATOM"
            }, 
            {
                "descr": "HTTP Cookies (example: Monday, 15-Aug-05 15:52:01 UTC)", 
                "name": "DATE_COOKIE"
            }, 
            {
                "descr": "ISO-8601 (example: 2005-08-15T15:52:01+0000)", 
                "name": "DATE_ISO8601"
            }, 
            {
                "descr": "RFC 822 (example: Mon, 15 Aug 05 15:52:01 +0000)", 
                "name": "DATE_RFC822"
            }, 
            {
                "descr": "RFC 850 (example: Monday, 15-Aug-05 15:52:01 UTC)", 
                "name": "DATE_RFC850"
            }, 
            {
                "descr": "RFC 1036 (example: Mon, 15 Aug 05 15:52:01 +0000)", 
                "name": "DATE_RFC1036"
            }, 
            {
                "descr": "RFC 1123 (example: Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RFC1123"
            }, 
            {
                "descr": "RFC 2822 (Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RFC2822"
            }, 
            {
                "descr": "Same as DATE_ATOM (since PHP 5.1.3)", 
                "name": "DATE_RFC3339"
            }, 
            {
                "descr": "RSS (Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RSS"
            }, 
            {
                "descr": "World Wide Web Consortium (example: 2005-08-15T15:52:01+00:00)", 
                "name": "DATE_W3C"
            }
        ], 
        "path": "php/class.datetime", 
        "syntax": "public DateTime add ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTime::__construct": {
        "descr": "Returns new DateTime object.", 
        "name": "DateTime::__construct", 
        "params": [
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats. ", 
                "name": "time"
            }, 
            {
                "descr": "A DateTimeZone object representing the timezone of $time. ", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.construct", 
        "syntax": "DateTime date_create ([ string $time = \"now\" [, DateTimeZone $timezone = NULL ]] )", 
        "type": "Date and Time"
    }, 
    "DateTime::__set_state": {
        "descr": "The __set_state() handler.", 
        "name": "DateTime::__set_state", 
        "params": [
            {
                "descr": "Initialization array.", 
                "name": "array"
            }
        ], 
        "path": "php/datetime.set-state", 
        "syntax": "public static DateTime DateTime::__set_state ( array $array )", 
        "type": "Date and Time"
    }, 
    "DateTime::__wakeup": {
        "descr": "The __wakeup() handler.", 
        "name": "DateTime::__wakeup", 
        "params": [], 
        "path": "php/datetime.wakeup", 
        "syntax": "public DateTime::__wakeup ( void )", 
        "type": "Date and Time"
    }, 
    "DateTime::add": {
        "descr": "Adds the specified DateInterval object to the specified DateTime object.", 
        "name": "DateTime::add", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateInterval object", 
                "name": "interval"
            }
        ], 
        "path": "php/datetime.add", 
        "syntax": "public DateTime DateTime::add ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTime::createFromFormat": {
        "descr": "Returns new DateTime object formatted according to the specified format.", 
        "name": "DateTime::createFromFormat", 
        "params": [
            {
                "descr": "The format that the passed in string should be in. ", 
                "name": "format"
            }, 
            {
                "descr": "String representing the time.", 
                "name": "time"
            }, 
            {
                "descr": "A DateTimeZone object representing the desired time zone. ", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.createfromformat", 
        "syntax": "public static DateTime DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )", 
        "type": "Date and Time"
    }, 
    "DateTime::diff": {
        "descr": "Returns the difference between two DateTimeInterface objects.", 
        "name": "DateTime::diff", 
        "params": [
            {
                "descr": "The date to compare to.", 
                "name": "datetime"
            }, 
            {
                "descr": "Should the interval be forced to be positive?", 
                "name": "absolute"
            }
        ], 
        "path": "php/datetime.diff", 
        "syntax": "public DateInterval DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = false ] )", 
        "type": "Date and Time"
    }, 
    "DateTime::format": {
        "descr": "Returns date formatted according to given format.", 
        "name": "DateTime::format", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }, 
            {
                "descr": "Format accepted by date().", 
                "name": "format"
            }
        ], 
        "path": "php/datetime.format", 
        "syntax": "public string DateTime::format ( string $format )", 
        "type": "Date and Time"
    }, 
    "DateTime::getLastErrors": {
        "descr": "Returns an array of warnings and errors found while parsing a date/time string.", 
        "name": "DateTime::getLastErrors", 
        "params": [], 
        "path": "php/datetime.getlasterrors", 
        "syntax": "public static array DateTime::getLastErrors ( void )", 
        "type": "Date and Time"
    }, 
    "DateTime::getOffset": {
        "descr": "Returns the timezone offset.", 
        "name": "DateTime::getOffset", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }
        ], 
        "path": "php/datetime.getoffset", 
        "syntax": "public int DateTime::getOffset ( void )", 
        "type": "Date and Time"
    }, 
    "DateTime::getTimestamp": {
        "descr": "Gets the Unix timestamp.", 
        "name": "DateTime::getTimestamp", 
        "params": [], 
        "path": "php/datetime.gettimestamp", 
        "syntax": "public int DateTime::getTimestamp ( void )", 
        "type": "Date and Time"
    }, 
    "DateTime::getTimezone": {
        "descr": "Return time zone relative to given DateTime.", 
        "name": "DateTime::getTimezone", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }
        ], 
        "path": "php/datetime.gettimezone", 
        "syntax": "public DateTimeZone DateTime::getTimezone ( void )", 
        "type": "Date and Time"
    }, 
    "DateTime::modify": {
        "descr": "Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().", 
        "name": "DateTime::modify", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats.", 
                "name": "modify"
            }
        ], 
        "path": "php/datetime.modify", 
        "syntax": "public DateTime DateTime::modify ( string $modify )", 
        "type": "Date and Time"
    }, 
    "DateTime::setDate": {
        "descr": "Resets the current date of the DateTime object to a different date.", 
        "name": "DateTime::setDate", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Year of the date.", 
                "name": "year"
            }, 
            {
                "descr": "Month of the date.", 
                "name": "month"
            }, 
            {
                "descr": "Day of the date.", 
                "name": "day"
            }
        ], 
        "path": "php/datetime.setdate", 
        "syntax": "public DateTime DateTime::setDate ( int $year , int $month , int $day )", 
        "type": "Date and Time"
    }, 
    "DateTime::setISODate": {
        "descr": "Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.", 
        "name": "DateTime::setISODate", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Year of the date.", 
                "name": "year"
            }, 
            {
                "descr": "Week of the date.", 
                "name": "week"
            }, 
            {
                "descr": "Offset from the first day of the week.", 
                "name": "day"
            }
        ], 
        "path": "php/datetime.setisodate", 
        "syntax": "public DateTime DateTime::setISODate ( int $year , int $week [, int $day = 1 ] )", 
        "type": "Date and Time"
    }, 
    "DateTime::setTime": {
        "descr": "Resets the current time of the DateTime object to a different time.", 
        "name": "DateTime::setTime", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Hour of the time.", 
                "name": "hour"
            }, 
            {
                "descr": "Minute of the time.", 
                "name": "minute"
            }, 
            {
                "descr": "Second of the time.", 
                "name": "second"
            }
        ], 
        "path": "php/datetime.settime", 
        "syntax": "public DateTime DateTime::setTime ( int $hour , int $minute [, int $second = 0 ] )", 
        "type": "Date and Time"
    }, 
    "DateTime::setTimestamp": {
        "descr": "Sets the date and time based on an Unix timestamp.", 
        "name": "DateTime::setTimestamp", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Unix timestamp representing the date.", 
                "name": "unixtimestamp"
            }
        ], 
        "path": "php/datetime.settimestamp", 
        "syntax": "public DateTime DateTime::setTimestamp ( int $unixtimestamp )", 
        "type": "Date and Time"
    }, 
    "DateTime::setTimezone": {
        "descr": "Sets a new timezone for a DateTime object.", 
        "name": "DateTime::setTimezone", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateTimeZone object representing the desired time zone.", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.settimezone", 
        "syntax": "public DateTime DateTime::setTimezone ( DateTimeZone $timezone )", 
        "type": "Date and Time"
    }, 
    "DateTime::sub": {
        "descr": "Subtracts the specified DateInterval object from the specified DateTime object.", 
        "name": "DateTime::sub", 
        "params": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateInterval object", 
                "name": "interval"
            }
        ], 
        "path": "php/datetime.sub", 
        "syntax": "public DateTime DateTime::sub ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable": {
        "descr": "", 
        "name": "DateTimeImmutable", 
        "params": [], 
        "path": "php/class.datetimeimmutable", 
        "syntax": "public DateTimeImmutable add ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::__construct": {
        "descr": "Like DateTime::__construct() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::__construct", 
        "params": [], 
        "path": "php/datetimeimmutable.construct", 
        "syntax": "DateTimeImmutable date_create_immutable ([ string $time = \"now\" [, DateTimeZone $timezone = NULL ]] )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::__set_state": {
        "descr": "Like DateTime::__set_state() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::__set_state", 
        "params": [], 
        "path": "php/datetimeimmutable.set-state", 
        "syntax": "public static DateTimeImmutable DateTimeImmutable::__set_state ( array $array )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::add": {
        "descr": "Like DateTime::add() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::add", 
        "params": [], 
        "path": "php/datetimeimmutable.add", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::add ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::createFromFormat": {
        "descr": "Like DateTime::createFromFormat() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::createFromFormat", 
        "params": [], 
        "path": "php/datetimeimmutable.createfromformat", 
        "syntax": "public static DateTimeImmutable DateTimeImmutable::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::getLastErrors": {
        "descr": "Like DateTime::getLastErrors() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::getLastErrors", 
        "params": [], 
        "path": "php/datetimeimmutable.getlasterrors", 
        "syntax": "public static array DateTimeImmutable::getLastErrors ( void )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::modify": {
        "descr": "Like DateTime::modify() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::modify", 
        "params": [], 
        "path": "php/datetimeimmutable.modify", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::modify ( string $modify )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setDate": {
        "descr": "Like DateTime::setDate() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setDate", 
        "params": [], 
        "path": "php/datetimeimmutable.setdate", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::setDate ( int $year , int $month , int $day )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setISODate": {
        "descr": "Like DateTime::setISODate() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setISODate", 
        "params": [], 
        "path": "php/datetimeimmutable.setisodate", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::setISODate ( int $year , int $week [, int $day = 1 ] )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTime": {
        "descr": "Like DateTime::setTime() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTime", 
        "params": [], 
        "path": "php/datetimeimmutable.settime", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::setTime ( int $hour , int $minute [, int $second = 0 ] )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTimestamp": {
        "descr": "Like DateTime::setTimestamp() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTimestamp", 
        "params": [], 
        "path": "php/datetimeimmutable.settimestamp", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::setTimestamp ( int $unixtimestamp )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTimezone": {
        "descr": "Like DateTime::setTimezone() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTimezone", 
        "params": [], 
        "path": "php/datetimeimmutable.settimezone", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::setTimezone ( DateTimeZone $timezone )", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::sub": {
        "descr": "Like DateTime::sub() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::sub", 
        "params": [], 
        "path": "php/datetimeimmutable.sub", 
        "syntax": "public DateTimeImmutable DateTimeImmutable::sub ( DateInterval $interval )", 
        "type": "Date and Time"
    }, 
    "DateTimeInterface (interface": {
        "descr": "", 
        "name": "DateTimeInterface (interface", 
        "params": [], 
        "path": "php/class.datetimeinterface", 
        "syntax": "public DateInterval diff ( DateTimeInterface $datetime2 [, bool $absolute = false ] )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone": {
        "descr": "", 
        "name": "DateTimeZone", 
        "params": [], 
        "path": "php/class.datetimezone", 
        "syntax": "public array getLocation ( void )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::__construct": {
        "descr": "Creates new DateTimeZone object.", 
        "name": "DateTimeZone::__construct", 
        "params": [
            {
                "descr": "One of timezones.", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetimezone.construct", 
        "syntax": "DateTimeZone timezone_open ( string $timezone )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getLocation": {
        "descr": "Returns location information for a timezone, including country code, latitude/longitude and comments.", 
        "name": "DateTimeZone::getLocation", 
        "params": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }
        ], 
        "path": "php/datetimezone.getlocation", 
        "syntax": "public array DateTimeZone::getLocation ( void )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getName": {
        "descr": "Returns the name of the timezone.", 
        "name": "DateTimeZone::getName", 
        "params": [
            {
                "descr": "The DateTimeZone for which to get a name.", 
                "name": "object"
            }
        ], 
        "path": "php/datetimezone.getname", 
        "syntax": "public string DateTimeZone::getName ( void )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getOffset": {
        "descr": "This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.", 
        "name": "DateTimeZone::getOffset", 
        "params": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }, 
            {
                "descr": "DateTime that contains the date/time to compute the offset from.", 
                "name": "datetime"
            }
        ], 
        "path": "php/datetimezone.getoffset", 
        "syntax": "public int DateTimeZone::getOffset ( DateTime $datetime )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getTransitions": {
        "descr": "Procedural style", 
        "name": "DateTimeZone::getTransitions", 
        "params": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }, 
            {
                "descr": "Begin timestamp.", 
                "name": "timestamp_begin"
            }, 
            {
                "descr": "End timestamp.", 
                "name": "timestamp_end"
            }
        ], 
        "path": "php/datetimezone.gettransitions", 
        "syntax": "public array DateTimeZone::getTransitions ([ int $timestamp_begin [, int $timestamp_end ]] )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::listAbbreviations": {
        "descr": "Procedural style", 
        "name": "DateTimeZone::listAbbreviations", 
        "params": [], 
        "path": "php/datetimezone.listabbreviations", 
        "syntax": "public static array DateTimeZone::listAbbreviations ( void )", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::listIdentifiers": {
        "descr": "Procedural style", 
        "name": "DateTimeZone::listIdentifiers", 
        "params": [
            {
                "descr": "One of DateTimeZone class constants.", 
                "name": "what"
            }, 
            {
                "descr": "A two-letter ISO 3166-1 compatible country code. ", 
                "name": "country"
            }
        ], 
        "path": "php/datetimezone.listidentifiers", 
        "syntax": "public static array DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )", 
        "type": "Date and Time"
    }, 
    "Directory": {
        "descr": "", 
        "name": "Directory", 
        "params": [], 
        "path": "php/class.directory", 
        "syntax": "public void close ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "Directory::close": {
        "descr": "Same as closedir(), only    dir_handle defaults to $this.", 
        "name": "Directory::close", 
        "params": [], 
        "path": "php/directory.close", 
        "syntax": "public void Directory::close ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "Directory::read": {
        "descr": "Same as readdir(), only    dir_handle defaults to $this.", 
        "name": "Directory::read", 
        "params": [], 
        "path": "php/directory.read", 
        "syntax": "public string Directory::read ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "Directory::rewind": {
        "descr": "Same as rewinddir(), only    dir_handle defaults to $this.", 
        "name": "Directory::rewind", 
        "params": [], 
        "path": "php/directory.rewind", 
        "syntax": "public void Directory::rewind ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "DirectoryIterator": {
        "descr": "", 
        "name": "DirectoryIterator", 
        "params": [], 
        "path": "php/class.directoryiterator", 
        "syntax": "public DirectoryIterator current ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::__toString": {
        "descr": "Get the file name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::__toString", 
        "params": [], 
        "path": "php/directoryiterator.tostring", 
        "syntax": "public string DirectoryIterator::__toString ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::current": {
        "descr": "Get the current DirectoryIterator item.", 
        "name": "DirectoryIterator::current", 
        "params": [], 
        "path": "php/directoryiterator.current", 
        "syntax": "public DirectoryIterator DirectoryIterator::current ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getATime": {
        "descr": "Get the last access time of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getATime", 
        "params": [], 
        "path": "php/directoryiterator.getatime", 
        "syntax": "public int DirectoryIterator::getATime ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getBasename": {
        "descr": "Get the base name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getBasename", 
        "params": [
            {
                "descr": "If the base name ends in suffix, this will be cut.", 
                "name": "suffix"
            }
        ], 
        "path": "php/directoryiterator.getbasename", 
        "syntax": "public string DirectoryIterator::getBasename ([  string $suffix  ] )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getCTime": {
        "descr": "Get the inode change time for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getCTime", 
        "params": [], 
        "path": "php/directoryiterator.getctime", 
        "syntax": "public int DirectoryIterator::getCTime ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getExtension": {
        "descr": "Retrieves the file extension.", 
        "name": "DirectoryIterator::getExtension", 
        "params": [], 
        "path": "php/directoryiterator.getextension", 
        "syntax": "public string DirectoryIterator::getExtension ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getFilename": {
        "descr": "Get the file name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getFilename", 
        "params": [], 
        "path": "php/directoryiterator.getfilename", 
        "syntax": "public string DirectoryIterator::getFilename ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getGroup": {
        "descr": "Get the group id of the file.", 
        "name": "DirectoryIterator::getGroup", 
        "params": [], 
        "path": "php/directoryiterator.getgroup", 
        "syntax": "public int DirectoryIterator::getGroup ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getInode": {
        "descr": "Get the inode number for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getInode", 
        "params": [], 
        "path": "php/directoryiterator.getinode", 
        "syntax": "public int DirectoryIterator::getInode ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getMTime": {
        "descr": "Get the last modification time of the current DirectoryIterator item, as a Unix timestamp.", 
        "name": "DirectoryIterator::getMTime", 
        "params": [], 
        "path": "php/directoryiterator.getmtime", 
        "syntax": "public int DirectoryIterator::getMTime ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getOwner": {
        "descr": "Get the owner of the current DirectoryIterator item, in numerical format.", 
        "name": "DirectoryIterator::getOwner", 
        "params": [], 
        "path": "php/directoryiterator.getowner", 
        "syntax": "public int DirectoryIterator::getOwner ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPath": {
        "descr": "Get the path to the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getPath", 
        "params": [], 
        "path": "php/directoryiterator.getpath", 
        "syntax": "public string DirectoryIterator::getPath ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPathname": {
        "descr": "Get the path and file name of the current file.", 
        "name": "DirectoryIterator::getPathname", 
        "params": [], 
        "path": "php/directoryiterator.getpathname", 
        "syntax": "public string DirectoryIterator::getPathname ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPerms": {
        "descr": "Get the permissions of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getPerms", 
        "params": [], 
        "path": "php/directoryiterator.getperms", 
        "syntax": "public int DirectoryIterator::getPerms ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getSize": {
        "descr": "Get the file size for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getSize", 
        "params": [], 
        "path": "php/directoryiterator.getsize", 
        "syntax": "public int DirectoryIterator::getSize ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::getType": {
        "descr": "Determines which file type the current DirectoryIterator item belongs to. One of file, link, or dir.", 
        "name": "DirectoryIterator::getType", 
        "params": [], 
        "path": "php/directoryiterator.gettype", 
        "syntax": "public string DirectoryIterator::getType ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isDir": {
        "descr": "Determines if the current DirectoryIterator item is a directory.", 
        "name": "DirectoryIterator::isDir", 
        "params": [], 
        "path": "php/directoryiterator.isdir", 
        "syntax": "public bool DirectoryIterator::isDir ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isDot": {
        "descr": "Determines if the current DirectoryIterator item is a directory and either . or ...", 
        "name": "DirectoryIterator::isDot", 
        "params": [], 
        "path": "php/directoryiterator.isdot", 
        "syntax": "public bool DirectoryIterator::isDot ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isExecutable": {
        "descr": "Determines if the current DirectoryIterator item is executable.", 
        "name": "DirectoryIterator::isExecutable", 
        "params": [], 
        "path": "php/directoryiterator.isexecutable", 
        "syntax": "public bool DirectoryIterator::isExecutable ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isFile": {
        "descr": "Determines if the current DirectoryIterator item is a regular file.", 
        "name": "DirectoryIterator::isFile", 
        "params": [], 
        "path": "php/directoryiterator.isfile", 
        "syntax": "public bool DirectoryIterator::isFile ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isLink": {
        "descr": "Determines if the current DirectoryIterator item is a symbolic link.", 
        "name": "DirectoryIterator::isLink", 
        "params": [], 
        "path": "php/directoryiterator.islink", 
        "syntax": "public bool DirectoryIterator::isLink ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isReadable": {
        "descr": "Determines if the current DirectoryIterator item is readable.", 
        "name": "DirectoryIterator::isReadable", 
        "params": [], 
        "path": "php/directoryiterator.isreadable", 
        "syntax": "public bool DirectoryIterator::isReadable ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::isWritable": {
        "descr": "Determines if the current DirectoryIterator item is writable.", 
        "name": "DirectoryIterator::isWritable", 
        "params": [], 
        "path": "php/directoryiterator.iswritable", 
        "syntax": "public bool DirectoryIterator::isWritable ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::key": {
        "descr": "Get the key for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::key", 
        "params": [], 
        "path": "php/directoryiterator.key", 
        "syntax": "public string DirectoryIterator::key ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::next": {
        "descr": "Move forward to the next DirectoryIterator item.", 
        "name": "DirectoryIterator::next", 
        "params": [], 
        "path": "php/directoryiterator.next", 
        "syntax": "public void DirectoryIterator::next ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::rewind": {
        "descr": "Rewind the DirectoryIterator back to the start.", 
        "name": "DirectoryIterator::rewind", 
        "params": [], 
        "path": "php/directoryiterator.rewind", 
        "syntax": "public void DirectoryIterator::rewind ( void )", 
        "type": "File System"
    }, 
    "DirectoryIterator::seek": {
        "descr": "Seek to a given position in the DirectoryIterator.", 
        "name": "DirectoryIterator::seek", 
        "params": [
            {
                "descr": "The zero-based numeric position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/directoryiterator.seek", 
        "syntax": "public void DirectoryIterator::seek ( int $position )", 
        "type": "File System"
    }, 
    "DirectoryIterator::valid": {
        "descr": "Check whether current DirectoryIterator position is a valid file.", 
        "name": "DirectoryIterator::valid", 
        "params": [], 
        "path": "php/directoryiterator.valid", 
        "syntax": "public bool DirectoryIterator::valid ( void )", 
        "type": "File System"
    }, 
    "DomainException": {
        "descr": "", 
        "name": "DomainException", 
        "params": [], 
        "path": "php/class.domainexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "EmptyIterator": {
        "descr": "", 
        "name": "EmptyIterator", 
        "params": [], 
        "path": "php/class.emptyiterator", 
        "syntax": "public void current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::current": {
        "descr": "This function must not be called. It throws an exception upon access.", 
        "name": "EmptyIterator::current", 
        "params": [], 
        "path": "php/emptyiterator.current", 
        "syntax": "public void EmptyIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::key": {
        "descr": "This function must not be called. It throws an exception upon access.", 
        "name": "EmptyIterator::key", 
        "params": [], 
        "path": "php/emptyiterator.key", 
        "syntax": "public void EmptyIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::next": {
        "descr": "No operation, nothing to do.", 
        "name": "EmptyIterator::next", 
        "params": [], 
        "path": "php/emptyiterator.next", 
        "syntax": "public void EmptyIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::rewind": {
        "descr": "No operation, nothing to do.", 
        "name": "EmptyIterator::rewind", 
        "params": [], 
        "path": "php/emptyiterator.rewind", 
        "syntax": "public void EmptyIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::valid": {
        "descr": "The EmptyIterator valid() method.", 
        "name": "EmptyIterator::valid", 
        "params": [], 
        "path": "php/emptyiterator.valid", 
        "syntax": "public void EmptyIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ErrorException": {
        "descr": "", 
        "name": "ErrorException", 
        "params": [], 
        "path": "php/class.errorexception", 
        "syntax": "final public int getSeverity ( void )", 
        "type": "Errors"
    }, 
    "ErrorException::getSeverity": {
        "descr": "Returns the severity of the exception.", 
        "name": "ErrorException::getSeverity", 
        "params": [], 
        "path": "php/errorexception.getseverity", 
        "syntax": "final public int ErrorException::getSeverity ( void )", 
        "type": "Errors"
    }, 
    "Exception": {
        "descr": "", 
        "name": "Exception", 
        "params": [], 
        "path": "php/class.exception", 
        "syntax": "final public string getMessage ( void )", 
        "type": "Errors"
    }, 
    "Exception::__clone": {
        "descr": "Tries to clone the Exception, which results in Fatal error.", 
        "name": "Exception::__clone", 
        "params": [], 
        "path": "php/exception.clone", 
        "syntax": "final private void Exception::__clone ( void )", 
        "type": "Errors"
    }, 
    "Exception::__toString": {
        "descr": "Returns the string representation of the exception.", 
        "name": "Exception::__toString", 
        "params": [], 
        "path": "php/exception.tostring", 
        "syntax": "public string Exception::__toString ( void )", 
        "type": "Errors"
    }, 
    "Exception::getCode": {
        "descr": "Returns the Exception code.", 
        "name": "Exception::getCode", 
        "params": [], 
        "path": "php/exception.getcode", 
        "syntax": "final public mixed Exception::getCode ( void )", 
        "type": "Errors"
    }, 
    "Exception::getFile": {
        "descr": "Get the name of the file the exception was created.", 
        "name": "Exception::getFile", 
        "params": [], 
        "path": "php/exception.getfile", 
        "syntax": "final public string Exception::getFile ( void )", 
        "type": "Errors"
    }, 
    "Exception::getLine": {
        "descr": "Get line number where the exception was created.", 
        "name": "Exception::getLine", 
        "params": [], 
        "path": "php/exception.getline", 
        "syntax": "final public int Exception::getLine ( void )", 
        "type": "Errors"
    }, 
    "Exception::getMessage": {
        "descr": "Returns the Exception message.", 
        "name": "Exception::getMessage", 
        "params": [], 
        "path": "php/exception.getmessage", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Errors"
    }, 
    "Exception::getPrevious": {
        "descr": "Returns previous Exception (the third parameter of Exception::__construct()).", 
        "name": "Exception::getPrevious", 
        "params": [], 
        "path": "php/exception.getprevious", 
        "syntax": "final public Exception Exception::getPrevious ( void )", 
        "type": "Errors"
    }, 
    "Exception::getTrace": {
        "descr": "Returns the Exception stack trace.", 
        "name": "Exception::getTrace", 
        "params": [], 
        "path": "php/exception.gettrace", 
        "syntax": "final public array Exception::getTrace ( void )", 
        "type": "Errors"
    }, 
    "Exception::getTraceAsString": {
        "descr": "Returns the Exception stack trace as a string.", 
        "name": "Exception::getTraceAsString", 
        "params": [], 
        "path": "php/exception.gettraceasstring", 
        "syntax": "final public string Exception::getTraceAsString ( void )", 
        "type": "Errors"
    }, 
    "FilesystemIterator": {
        "descr": "", 
        "name": "FilesystemIterator", 
        "params": [], 
        "path": "php/class.filesystemiterator", 
        "syntax": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::__construct": {
        "descr": "Constructs a new filesystem iterator from the path.", 
        "name": "FilesystemIterator::__construct", 
        "params": [
            {
                "descr": "The path of the filesystem item to be iterated over.", 
                "name": "path"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }
        ], 
        "path": "php/filesystemiterator.construct", 
        "syntax": "public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::current": {
        "descr": "Get file information of the current element.", 
        "name": "FilesystemIterator::current", 
        "params": [], 
        "path": "php/filesystemiterator.current", 
        "syntax": "public mixed FilesystemIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::getFlags": {
        "descr": "Gets the handling flags, as set in FilesystemIterator::__construct() or FilesystemIterator::setFlags().", 
        "name": "FilesystemIterator::getFlags", 
        "params": [], 
        "path": "php/filesystemiterator.getflags", 
        "syntax": "public int FilesystemIterator::getFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::key": {
        "descr": "", 
        "name": "FilesystemIterator::key", 
        "params": [], 
        "path": "php/filesystemiterator.key", 
        "syntax": "public string FilesystemIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::next": {
        "descr": "Move to the next file.", 
        "name": "FilesystemIterator::next", 
        "params": [], 
        "path": "php/filesystemiterator.next", 
        "syntax": "public void FilesystemIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::rewind": {
        "descr": "Rewinds the directory back to the start.", 
        "name": "FilesystemIterator::rewind", 
        "params": [], 
        "path": "php/filesystemiterator.rewind", 
        "syntax": "public void FilesystemIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::setFlags": {
        "descr": "Sets handling flags.", 
        "name": "FilesystemIterator::setFlags", 
        "params": [
            {
                "descr": "The handling flags to set. See the FilesystemIterator constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/filesystemiterator.setflags", 
        "syntax": "public void FilesystemIterator::setFlags ([ int $flags ] )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator": {
        "descr": "", 
        "name": "FilterIterator", 
        "params": [], 
        "path": "php/class.filteriterator", 
        "syntax": "public abstract bool accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::__construct": {
        "descr": "Constructs a new FilterIterator, which consists of a passed in iterator with filters applied to it.", 
        "name": "FilterIterator::__construct", 
        "params": [
            {
                "descr": "The iterator that is being filtered.", 
                "name": "iterator"
            }
        ], 
        "path": "php/filteriterator.construct", 
        "syntax": "public FilterIterator::__construct ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::accept": {
        "descr": "Returns whether the current element of the iterator is acceptable through this filter.", 
        "name": "FilterIterator::accept", 
        "params": [], 
        "path": "php/filteriterator.accept", 
        "syntax": "public abstract bool FilterIterator::accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::current": {
        "descr": "", 
        "name": "FilterIterator::current", 
        "params": [], 
        "path": "php/filteriterator.current", 
        "syntax": "public mixed FilterIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::getInnerIterator": {
        "descr": "", 
        "name": "FilterIterator::getInnerIterator", 
        "params": [], 
        "path": "php/filteriterator.getinneriterator", 
        "syntax": "public Iterator FilterIterator::getInnerIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::key": {
        "descr": "", 
        "name": "FilterIterator::key", 
        "params": [], 
        "path": "php/filteriterator.key", 
        "syntax": "public mixed FilterIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::next": {
        "descr": "", 
        "name": "FilterIterator::next", 
        "params": [], 
        "path": "php/filteriterator.next", 
        "syntax": "public void FilterIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::rewind": {
        "descr": "", 
        "name": "FilterIterator::rewind", 
        "params": [], 
        "path": "php/filteriterator.rewind", 
        "syntax": "public void FilterIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::valid": {
        "descr": "", 
        "name": "FilterIterator::valid", 
        "params": [], 
        "path": "php/filteriterator.valid", 
        "syntax": "public bool FilterIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "FrenchToJD": {
        "descr": "Converts a date from the French Republican Calendar to a Julian Day Count.", 
        "name": "FrenchToJD", 
        "params": [
            {
                "descr": "The month as a number from 1 (for Vend\u00e9miaire) to 13 (for the period of 5-6 days at the end of each year)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 30", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between 1 and 14", 
                "name": "year"
            }
        ], 
        "path": "php/function.frenchtojd", 
        "syntax": "int frenchtojd ( int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "GearmanClient": {
        "descr": "", 
        "name": "GearmanClient", 
        "params": [], 
        "path": "php/class.gearmanclient", 
        "syntax": "public bool addOptions ( int $options )", 
        "type": "Gearman"
    }, 
    "GearmanClient::__construct": {
        "descr": "Creates a GearmanClient instance representing a client that connects to the job server and submits tasks to complete.", 
        "name": "GearmanClient::__construct", 
        "params": [], 
        "path": "php/gearmanclient.construct", 
        "syntax": "public GearmanClient::__construct ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addOptions": {
        "descr": "Adds one or more options to those already set.", 
        "name": "GearmanClient::addOptions", 
        "params": [
            {
                "descr": "The options to add", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.addoptions", 
        "syntax": "public bool GearmanClient::addOptions ( int $options )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addServer": {
        "descr": "Adds a job server to a list of servers that can be used to run a task. No socket I/O happens here; the server is simply added to the list.", 
        "name": "GearmanClient::addServer", 
        "params": [
            {
                "descr": "The job server host name.", 
                "name": "host"
            }, 
            {
                "descr": "The job server port.", 
                "name": "port"
            }
        ], 
        "path": "php/gearmanclient.addserver", 
        "syntax": "public bool GearmanClient::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addServers": {
        "descr": "Adds a list of job servers that can be used to run a task. No socket I/O happens here; the servers are simply added to the full list of servers.", 
        "name": "GearmanClient::addServers", 
        "params": [
            {
                "descr": "A comma-separated list of servers, each server specified in the format 'host:port'.", 
                "name": "servers"
            }
        ], 
        "path": "php/gearmanclient.addservers", 
        "syntax": "public bool GearmanClient::addServers ([ string $servers = 127.0.0.1:4730 ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTask": {
        "descr": "Adds a task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Note that enough workers need to be available for the tasks to all run in parallel.", 
        "name": "GearmanClient::addTask", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtask", 
        "syntax": "public GearmanTask GearmanClient::addTask ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskBackground": {
        "descr": "Adds a background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work.", 
        "name": "GearmanClient::addTaskBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskbackground", 
        "syntax": "public GearmanTask GearmanClient::addTaskBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskHigh": {
        "descr": "Adds a high priority task to be run in parallel with other tasks. Call this method for all the high priority tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.", 
        "name": "GearmanClient::addTaskHigh", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskhigh", 
        "syntax": "public GearmanTask GearmanClient::addTaskHigh ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskHighBackground": {
        "descr": "Adds a high priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.", 
        "name": "GearmanClient::addTaskHighBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskhighbackground", 
        "syntax": "public GearmanTask GearmanClient::addTaskHighBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskLow": {
        "descr": "Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or low priority.", 
        "name": "GearmanClient::addTaskLow", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtasklow", 
        "syntax": "public GearmanTask GearmanClient::addTaskLow ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskLowBackground": {
        "descr": "Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or high priority.", 
        "name": "GearmanClient::addTaskLowBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtasklowbackground", 
        "syntax": "public GearmanTask GearmanClient::addTaskLowBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskStatus": {
        "descr": "Used to request status information from the Gearman server, which will call the specified status callback (set using GearmanClient::setStatusCallback()).", 
        "name": "GearmanClient::addTaskStatus", 
        "params": [
            {
                "descr": "The job handle for the task to get status for", 
                "name": "job_handle"
            }, 
            {
                "descr": "Data to be passed to the status callback, generally a reference to an array or object", 
                "name": "context"
            }
        ], 
        "path": "php/gearmanclient.addtaskstatus", 
        "syntax": "public GearmanTask GearmanClient::addTaskStatus ( string $job_handle [, string &$context ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::clearCallbacks": {
        "descr": "Clears all the task callback functions that have previously been set.", 
        "name": "GearmanClient::clearCallbacks", 
        "params": [], 
        "path": "php/gearmanclient.clearcallbacks", 
        "syntax": "public bool GearmanClient::clearCallbacks ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::clone": {
        "descr": "Creates a copy of a GearmanClient object.", 
        "name": "GearmanClient::clone", 
        "params": [], 
        "path": "php/gearmanclient.clone", 
        "syntax": "public GearmanClient GearmanClient::clone ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::context": {
        "descr": "Get the application context previously set with GearmanClient::setContext().", 
        "name": "GearmanClient::context", 
        "params": [], 
        "path": "php/gearmanclient.context", 
        "syntax": "public string GearmanClient::context ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::data": {
        "descr": "Get the application data previously set with GearmanClient::setData().", 
        "name": "GearmanClient::data", 
        "params": [], 
        "path": "php/gearmanclient.data", 
        "syntax": "public string GearmanClient::data ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::do": {
        "descr": "The GearmanClient::do() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::doNormal().", 
        "name": "GearmanClient::do", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.do", 
        "syntax": "public string GearmanClient::do ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doBackground": {
        "descr": "Runs a task in the background, returning a job handle which can be used to get the status of the running task.", 
        "name": "GearmanClient::doBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dobackground", 
        "syntax": "public string GearmanClient::doBackground ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doHigh": {
        "descr": "Runs a single high priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. High priority tasks will get precedence over normal and low priority tasks in the job queue.", 
        "name": "GearmanClient::doHigh", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dohigh", 
        "syntax": "public string GearmanClient::doHigh ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doHighBackground": {
        "descr": "Runs a high priority task in the background, returning a job handle which can be used to get the status of the running task. High priority tasks take precedence over normal and low priority tasks in the job queue.", 
        "name": "GearmanClient::doHighBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dohighbackground", 
        "syntax": "public string GearmanClient::doHighBackground ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doJobHandle": {
        "descr": "Gets that job handle for a running task. This should be used between repeated GearmanClient::doNormal() calls. The job handle can then be used to get information on the task.", 
        "name": "GearmanClient::doJobHandle", 
        "params": [], 
        "path": "php/gearmanclient.dojobhandle", 
        "syntax": "public string GearmanClient::doJobHandle ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doLow": {
        "descr": "Runs a single low priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. Normal and high priority tasks will get precedence over low priority tasks in the job queue.", 
        "name": "GearmanClient::doLow", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dolow", 
        "syntax": "public string GearmanClient::doLow ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doLowBackground": {
        "descr": "Runs a low priority task in the background, returning a job handle which can be used to get the status of the running task. Normal and high priority tasks take precedence over low priority tasks in the job queue.", 
        "name": "GearmanClient::doLowBackground", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dolowbackground", 
        "syntax": "public string GearmanClient::doLowBackground ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doNormal": {
        "descr": "Runs a single task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result.", 
        "name": "GearmanClient::doNormal", 
        "params": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.donormal", 
        "syntax": "public string GearmanClient::doNormal ( string $function_name , string $workload [, string $unique ] )", 
        "type": "Gearman"
    }, 
    "GearmanClient::doStatus": {
        "descr": "Returns the status for the running task. This should be used between repeated GearmanClient::doNormal() calls.", 
        "name": "GearmanClient::doStatus", 
        "params": [], 
        "path": "php/gearmanclient.dostatus", 
        "syntax": "public array GearmanClient::doStatus ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::echo": {
        "descr": "The GearmanClient::echo() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::ping().", 
        "name": "GearmanClient::echo", 
        "params": [
            {
                "descr": "Some arbitrary serialized data to be echo back", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanclient.echo", 
        "syntax": "public bool GearmanClient::echo ( string $workload )", 
        "type": "Gearman"
    }, 
    "GearmanClient::error": {
        "descr": "Returns an error string for the last error encountered.", 
        "name": "GearmanClient::error", 
        "params": [], 
        "path": "php/gearmanclient.error", 
        "syntax": "public string GearmanClient::error ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::getErrno": {
        "descr": "Value of errno in the case of a GEARMAN_ERRNO return value.", 
        "name": "GearmanClient::getErrno", 
        "params": [], 
        "path": "php/gearmanclient.geterrno", 
        "syntax": "public int GearmanClient::getErrno ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::jobStatus": {
        "descr": "Gets the status for a background job given a job handle. The status information will specify whether the job is known, whether the job is currently running, and the percentage completion.", 
        "name": "GearmanClient::jobStatus", 
        "params": [
            {
                "descr": "The job handle assigned by the Gearman server", 
                "name": "job_handle"
            }
        ], 
        "path": "php/gearmanclient.jobstatus", 
        "syntax": "public array GearmanClient::jobStatus ( string $job_handle )", 
        "type": "Gearman"
    }, 
    "GearmanClient::ping": {
        "descr": "Sends some arbitrary data to all job servers to see if they echo it back. The data sent is not used or processed in any other way. Primarily used for testing and debugging.", 
        "name": "GearmanClient::ping", 
        "params": [
            {
                "descr": "Some arbitrary serialized data to be echo back", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanclient.ping", 
        "syntax": "public bool GearmanClient::ping ( string $workload )", 
        "type": "Gearman"
    }, 
    "GearmanClient::removeOptions": {
        "descr": "Removes (unsets) one or more options.", 
        "name": "GearmanClient::removeOptions", 
        "params": [
            {
                "descr": "The options to be removed (unset)", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.removeoptions", 
        "syntax": "public bool GearmanClient::removeOptions ( int $options )", 
        "type": "Gearman"
    }, 
    "GearmanClient::returnCode": {
        "descr": "Returns the last Gearman return code.", 
        "name": "GearmanClient::returnCode", 
        "params": [], 
        "path": "php/gearmanclient.returncode", 
        "syntax": "public int GearmanClient::returnCode ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::runTasks": {
        "descr": "For a set of tasks previously added with GearmanClient::addTask(), GearmanClient::addTaskHigh(), GearmanClient::addTaskLow(), GearmanClient::addTaskBackground(), GearmanClient::addTaskHighBackground(), or GearmanClient::addTaskLowBackground(), this call starts running the tasks in parallel.", 
        "name": "GearmanClient::runTasks", 
        "params": [], 
        "path": "php/gearmanclient.runtasks", 
        "syntax": "public bool GearmanClient::runTasks ( void )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setClientCallback": {
        "descr": "Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setClientCallback", 
        "params": [
            {
                "descr": "A function or method to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setclientcallback", 
        "syntax": "public void GearmanClient::setClientCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setCompleteCallback": {
        "descr": "Use to set a function to be called when a task is completed. The callback function should accept a single argument, a GearmanTask oject.", 
        "name": "GearmanClient::setCompleteCallback", 
        "params": [
            {
                "descr": "A function to be called", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setcompletecallback", 
        "syntax": "public bool GearmanClient::setCompleteCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setContext": {
        "descr": "Sets an arbitrary string to provide application context that can later be retrieved by GearmanClient::context().", 
        "name": "GearmanClient::setContext", 
        "params": [
            {
                "descr": "Arbitrary context data", 
                "name": "context"
            }
        ], 
        "path": "php/gearmanclient.setcontext", 
        "syntax": "public bool GearmanClient::setContext ( string $context )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setCreatedCallback": {
        "descr": "Sets a function to be called when a task is received and queued by the Gearman job server. The callback should accept a single argument, a GearmanClient oject.", 
        "name": "GearmanClient::setCreatedCallback", 
        "params": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setcreatedcallback", 
        "syntax": "public bool GearmanClient::setCreatedCallback ( string $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setData": {
        "descr": "Sets some arbitrary application data that can later be retrieved by GearmanClient::data().", 
        "name": "GearmanClient::setData", 
        "params": [], 
        "path": "php/gearmanclient.setdata", 
        "syntax": "public bool GearmanClient::setData ( string $data )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setDataCallback": {
        "descr": "Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setDataCallback", 
        "params": [
            {
                "descr": "A function or method to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setdatacallback", 
        "syntax": "public bool GearmanClient::setDataCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setExceptionCallback": {
        "descr": "Specifies a function to call when a worker for a task sends an exception.", 
        "name": "GearmanClient::setExceptionCallback", 
        "params": [
            {
                "descr": "Function to call when the worker throws an exception", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setexceptioncallback", 
        "syntax": "public bool GearmanClient::setExceptionCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setFailCallback": {
        "descr": "Sets the callback function to be used when a task does not complete successfully. The function should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setFailCallback", 
        "params": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setfailcallback", 
        "syntax": "public bool GearmanClient::setFailCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setOptions": {
        "descr": "Sets one or more client options.", 
        "name": "GearmanClient::setOptions", 
        "params": [
            {
                "descr": "The options to be set", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.setoptions", 
        "syntax": "public bool GearmanClient::setOptions ( int $options )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setStatusCallback": {
        "descr": "Sets a callback function used for getting updated status information from a worker. The function should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setStatusCallback", 
        "params": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setstatuscallback", 
        "syntax": "public bool GearmanClient::setStatusCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setTimeout": {
        "descr": "Sets the timeout for socket I/O activity.", 
        "name": "GearmanClient::setTimeout", 
        "params": [
            {
                "descr": "An interval of time in milliseconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanclient.settimeout", 
        "syntax": "public bool GearmanClient::setTimeout ( int $timeout )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setWarningCallback": {
        "descr": "Sets a function to be called when a worker sends a warning. The callback should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setWarningCallback", 
        "params": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setwarningcallback", 
        "syntax": "public bool GearmanClient::setWarningCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::setWorkloadCallback": {
        "descr": "Sets a function to be called when a worker needs to send back data prior to job completion. A worker can do this when it needs to send updates, send partial results, or flush data during long running jobs. The callback should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setWorkloadCallback", 
        "params": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setworkloadcallback", 
        "syntax": "public bool GearmanClient::setWorkloadCallback ( callable $callback )", 
        "type": "Gearman"
    }, 
    "GearmanClient::timeout": {
        "descr": "Returns the timeout in milliseconds to wait for I/O activity.", 
        "name": "GearmanClient::timeout", 
        "params": [], 
        "path": "php/gearmanclient.timeout", 
        "syntax": "public int GearmanClient::timeout ( void )", 
        "type": "Gearman"
    }, 
    "GearmanException": {
        "descr": "", 
        "name": "GearmanException", 
        "params": [], 
        "path": "php/class.gearmanexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob": {
        "descr": "", 
        "name": "GearmanJob", 
        "params": [], 
        "path": "php/class.gearmanjob", 
        "syntax": "public bool complete ( string $result )", 
        "type": "Gearman"
    }, 
    "GearmanJob::__construct": {
        "descr": "Creates a GearmanJob instance representing a job the worker is to complete.", 
        "name": "GearmanJob::__construct", 
        "params": [], 
        "path": "php/gearmanjob.construct", 
        "syntax": "public GearmanJob::__construct ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::complete": {
        "descr": "Sends result data and the complete status update for this job.", 
        "name": "GearmanJob::complete", 
        "params": [
            {
                "descr": "Serialized result data.", 
                "name": "result"
            }
        ], 
        "path": "php/gearmanjob.complete", 
        "syntax": "public bool GearmanJob::complete ( string $result )", 
        "type": "Gearman"
    }, 
    "GearmanJob::data": {
        "descr": "Sends data to the job server (and any listening clients) for this job.", 
        "name": "GearmanJob::data", 
        "params": [
            {
                "descr": "Arbitrary serialized data.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmanjob.data", 
        "syntax": "public bool GearmanJob::data ( string $data )", 
        "type": "Gearman"
    }, 
    "GearmanJob::exception": {
        "descr": "Sends the supplied exception when this job is running.", 
        "name": "GearmanJob::exception", 
        "params": [
            {
                "descr": "An exception description.", 
                "name": "exception"
            }
        ], 
        "path": "php/gearmanjob.exception", 
        "syntax": "public bool GearmanJob::exception ( string $exception )", 
        "type": "Gearman"
    }, 
    "GearmanJob::fail": {
        "descr": "Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).", 
        "name": "GearmanJob::fail", 
        "params": [], 
        "path": "php/gearmanjob.fail", 
        "syntax": "public bool GearmanJob::fail ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::functionName": {
        "descr": "Returns the function name for this job. This is the function the work will execute to perform the job.", 
        "name": "GearmanJob::functionName", 
        "params": [], 
        "path": "php/gearmanjob.functionname", 
        "syntax": "public string GearmanJob::functionName ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::handle": {
        "descr": "Returns the opaque job handle assigned by the job server.", 
        "name": "GearmanJob::handle", 
        "params": [], 
        "path": "php/gearmanjob.handle", 
        "syntax": "public string GearmanJob::handle ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::returnCode": {
        "descr": "Returns the last return code issued by the job server.", 
        "name": "GearmanJob::returnCode", 
        "params": [], 
        "path": "php/gearmanjob.returncode", 
        "syntax": "public int GearmanJob::returnCode ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendComplete": {
        "descr": "Sends result data and the complete status update for this job.", 
        "name": "GearmanJob::sendComplete", 
        "params": [
            {
                "descr": "Serialized result data.", 
                "name": "result"
            }
        ], 
        "path": "php/gearmanjob.sendcomplete", 
        "syntax": "public bool GearmanJob::sendComplete ( string $result )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendData": {
        "descr": "Sends data to the job server (and any listening clients) for this job.", 
        "name": "GearmanJob::sendData", 
        "params": [
            {
                "descr": "Arbitrary serialized data.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmanjob.senddata", 
        "syntax": "public bool GearmanJob::sendData ( string $data )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendException": {
        "descr": "Sends the supplied exception when this job is running.", 
        "name": "GearmanJob::sendException", 
        "params": [
            {
                "descr": "An exception description.", 
                "name": "exception"
            }
        ], 
        "path": "php/gearmanjob.sendexception", 
        "syntax": "public bool GearmanJob::sendException ( string $exception )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendFail": {
        "descr": "Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).", 
        "name": "GearmanJob::sendFail", 
        "params": [], 
        "path": "php/gearmanjob.sendfail", 
        "syntax": "public bool GearmanJob::sendFail ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendStatus": {
        "descr": "Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.", 
        "name": "GearmanJob::sendStatus", 
        "params": [
            {
                "descr": "The numerator of the precentage completed expressed as a fraction.", 
                "name": "numerator"
            }, 
            {
                "descr": "The denominator of the precentage completed expressed as a fraction.", 
                "name": "denominator"
            }
        ], 
        "path": "php/gearmanjob.sendstatus", 
        "syntax": "public bool GearmanJob::sendStatus ( int $numerator , int $denominator )", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendWarning": {
        "descr": "Sends a warning for this job while it is running.", 
        "name": "GearmanJob::sendWarning", 
        "params": [
            {
                "descr": "A warning message.", 
                "name": "warning"
            }
        ], 
        "path": "php/gearmanjob.sendwarning", 
        "syntax": "public bool GearmanJob::sendWarning ( string $warning )", 
        "type": "Gearman"
    }, 
    "GearmanJob::setReturn": {
        "descr": "Sets the return value for this job, indicates how the job completed.", 
        "name": "GearmanJob::setReturn", 
        "params": [
            {
                "descr": "A valid Gearman return value.", 
                "name": "gearman_return_t"
            }
        ], 
        "path": "php/gearmanjob.setreturn", 
        "syntax": "public bool GearmanJob::setReturn ( int $gearman_return_t )", 
        "type": "Gearman"
    }, 
    "GearmanJob::status": {
        "descr": "Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.", 
        "name": "GearmanJob::status", 
        "params": [
            {
                "descr": "The numerator of the precentage completed expressed as a fraction.", 
                "name": "numerator"
            }, 
            {
                "descr": "The denominator of the precentage completed expressed as a fraction.", 
                "name": "denominator"
            }
        ], 
        "path": "php/gearmanjob.status", 
        "syntax": "public bool GearmanJob::status ( int $numerator , int $denominator )", 
        "type": "Gearman"
    }, 
    "GearmanJob::unique": {
        "descr": "Returns the unique identifiter for this job. The identifier is assigned by the client.", 
        "name": "GearmanJob::unique", 
        "params": [], 
        "path": "php/gearmanjob.unique", 
        "syntax": "public string GearmanJob::unique ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::warning": {
        "descr": "Sends a warning for this job while it is running.", 
        "name": "GearmanJob::warning", 
        "params": [
            {
                "descr": "A warning messages.", 
                "name": "warning"
            }
        ], 
        "path": "php/gearmanjob.warning", 
        "syntax": "public bool GearmanJob::warning ( string $warning )", 
        "type": "Gearman"
    }, 
    "GearmanJob::workload": {
        "descr": "Returns the workload for the job. This is serialized data that is to be processed by the worker.", 
        "name": "GearmanJob::workload", 
        "params": [], 
        "path": "php/gearmanjob.workload", 
        "syntax": "public string GearmanJob::workload ( void )", 
        "type": "Gearman"
    }, 
    "GearmanJob::workloadSize": {
        "descr": "Returns the size of the job's work load (the data the worker is to process) in bytes.", 
        "name": "GearmanJob::workloadSize", 
        "params": [], 
        "path": "php/gearmanjob.workloadsize", 
        "syntax": "public int GearmanJob::workloadSize ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask": {
        "descr": "", 
        "name": "GearmanTask", 
        "params": [], 
        "path": "php/class.gearmantask", 
        "syntax": "public __construct ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::__construct": {
        "descr": "Creates a GearmanTask instance representing a task to be submitted to a job server.", 
        "name": "GearmanTask::__construct", 
        "params": [], 
        "path": "php/gearmantask.construct", 
        "syntax": "public GearmanTask::__construct ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::create": {
        "descr": "Returns a new GearmanTask object.", 
        "name": "GearmanTask::create", 
        "params": [], 
        "path": "php/gearmantask.create", 
        "syntax": "public GearmanTask GearmanTask::create ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::data": {
        "descr": "Returns data being returned for a task by a worker.", 
        "name": "GearmanTask::data", 
        "params": [], 
        "path": "php/gearmantask.data", 
        "syntax": "public string GearmanTask::data ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::dataSize": {
        "descr": "Returns the size of the data being returned for a task.", 
        "name": "GearmanTask::dataSize", 
        "params": [], 
        "path": "php/gearmantask.datasize", 
        "syntax": "public int GearmanTask::dataSize ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::function": {
        "descr": "Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.", 
        "name": "GearmanTask::function", 
        "params": [], 
        "path": "php/gearmantask.function", 
        "syntax": "public string GearmanTask::function ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::functionName": {
        "descr": "Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.", 
        "name": "GearmanTask::functionName", 
        "params": [], 
        "path": "php/gearmantask.functionname", 
        "syntax": "public string GearmanTask::functionName ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::isKnown": {
        "descr": "Gets the status information for whether or not this task is known to the job server.", 
        "name": "GearmanTask::isKnown", 
        "params": [], 
        "path": "php/gearmantask.isknown", 
        "syntax": "public bool GearmanTask::isKnown ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::isRunning": {
        "descr": "Indicates whether or not this task is currently running.", 
        "name": "GearmanTask::isRunning", 
        "params": [], 
        "path": "php/gearmantask.isrunning", 
        "syntax": "public bool GearmanTask::isRunning ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::jobHandle": {
        "descr": "Returns the job handle for this task.", 
        "name": "GearmanTask::jobHandle", 
        "params": [], 
        "path": "php/gearmantask.jobhandle", 
        "syntax": "public string GearmanTask::jobHandle ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::recvData": {
        "descr": "", 
        "name": "GearmanTask::recvData", 
        "params": [
            {
                "descr": "Length of data to be read.", 
                "name": "data_len"
            }
        ], 
        "path": "php/gearmantask.recvdata", 
        "syntax": "public array GearmanTask::recvData ( int $data_len )", 
        "type": "Gearman"
    }, 
    "GearmanTask::returnCode": {
        "descr": "Returns the last Gearman return code for this task.", 
        "name": "GearmanTask::returnCode", 
        "params": [], 
        "path": "php/gearmantask.returncode", 
        "syntax": "public int GearmanTask::returnCode ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::sendData": {
        "descr": "", 
        "name": "GearmanTask::sendData", 
        "params": [
            {
                "descr": "Data to send to the worker.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmantask.senddata", 
        "syntax": "public int GearmanTask::sendData ( string $data )", 
        "type": "Gearman"
    }, 
    "GearmanTask::sendWorkload": {
        "descr": "", 
        "name": "GearmanTask::sendWorkload", 
        "params": [
            {
                "descr": "Data to send to the worker.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmantask.sendworkload", 
        "syntax": "public int GearmanTask::sendWorkload ( string $data )", 
        "type": "Gearman"
    }, 
    "GearmanTask::taskDenominator": {
        "descr": "Returns the denominator of the percentage of the task that is complete expressed as a fraction.", 
        "name": "GearmanTask::taskDenominator", 
        "params": [], 
        "path": "php/gearmantask.taskdenominator", 
        "syntax": "public int GearmanTask::taskDenominator ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::taskNumerator": {
        "descr": "Returns the numerator of the percentage of the task that is complete expressed as a fraction.", 
        "name": "GearmanTask::taskNumerator", 
        "params": [], 
        "path": "php/gearmantask.tasknumerator", 
        "syntax": "public int GearmanTask::taskNumerator ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::unique": {
        "descr": "Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server.", 
        "name": "GearmanTask::unique", 
        "params": [], 
        "path": "php/gearmantask.unique", 
        "syntax": "public string GearmanTask::unique ( void )", 
        "type": "Gearman"
    }, 
    "GearmanTask::uuid": {
        "descr": "Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server.", 
        "name": "GearmanTask::uuid", 
        "params": [], 
        "path": "php/gearmantask.uuid", 
        "syntax": "public string GearmanTask::uuid ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker": {
        "descr": "", 
        "name": "GearmanWorker", 
        "params": [], 
        "path": "php/class.gearmanworker", 
        "syntax": "public bool addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::__construct": {
        "descr": "Creates a GearmanWorker instance representing a worker that connects to the job server and accepts tasks to run.", 
        "name": "GearmanWorker::__construct", 
        "params": [], 
        "path": "php/gearmanworker.construct", 
        "syntax": "public GearmanWorker::__construct ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addFunction": {
        "descr": "Registers a function name with the job server and specifies a callback corresponding to that function. Optionally specify extra application context data to be used when the callback is called and a timeout.", 
        "name": "GearmanWorker::addFunction", 
        "params": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }, 
            {
                "descr": "A callback that gets called when a job for the registered function name is submitted", 
                "name": "function"
            }, 
            {
                "descr": "A reference to arbitrary application context data that can be modified by the worker function", 
                "name": "context"
            }, 
            {
                "descr": "An interval of time in seconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.addfunction", 
        "syntax": "public bool GearmanWorker::addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addOptions": {
        "descr": "Adds one or more options to the options previously set.", 
        "name": "GearmanWorker::addOptions", 
        "params": [
            {
                "descr": "The options to be added", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.addoptions", 
        "syntax": "public bool GearmanWorker::addOptions ( int $option )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addServer": {
        "descr": "Adds a job server to this worker. This goes into a list of servers than can be used to run jobs. No socket I/O happens here.", 
        "name": "GearmanWorker::addServer", 
        "params": [
            {
                "descr": "The job server host name.", 
                "name": "host"
            }, 
            {
                "descr": "The job server port.", 
                "name": "port"
            }
        ], 
        "path": "php/gearmanworker.addserver", 
        "syntax": "public bool GearmanWorker::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addServers": {
        "descr": "Adds one or more job servers to this worker. These go into a list of servers that can be used to run jobs. No socket I/O happens here.", 
        "name": "GearmanWorker::addServers", 
        "params": [
            {
                "descr": "A comma separated list of job servers in the format host:port. ", 
                "name": "servers"
            }
        ], 
        "path": "php/gearmanworker.addservers", 
        "syntax": "public bool GearmanWorker::addServers ( string $servers = 127.0.0.1:4730 )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::clone": {
        "descr": "Creates a copy of the worker.", 
        "name": "GearmanWorker::clone", 
        "params": [], 
        "path": "php/gearmanworker.clone", 
        "syntax": "public void GearmanWorker::clone ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::echo": {
        "descr": "Sends data to all job servers to see if they echo it back. This is a test function to see if job servers are responding properly.", 
        "name": "GearmanWorker::echo", 
        "params": [
            {
                "descr": "Arbitrary serialized data", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanworker.echo", 
        "syntax": "public bool GearmanWorker::echo ( string $workload )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::error": {
        "descr": "Returns an error string for the last error encountered.", 
        "name": "GearmanWorker::error", 
        "params": [], 
        "path": "php/gearmanworker.error", 
        "syntax": "public string GearmanWorker::error ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::getErrno": {
        "descr": "Returns the value of errno in the case of a GEARMAN_ERRNO return value.", 
        "name": "GearmanWorker::getErrno", 
        "params": [], 
        "path": "php/gearmanworker.geterrno", 
        "syntax": "public int GearmanWorker::getErrno ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::options": {
        "descr": "Gets the options previously set for the worker.", 
        "name": "GearmanWorker::options", 
        "params": [], 
        "path": "php/gearmanworker.options", 
        "syntax": "public int GearmanWorker::options ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::register": {
        "descr": "Registers a function name with the job server with an optional timeout. The timeout specifies how many seconds the server will wait before marking a job as failed. If the timeout is set to zero, there is no timeout.", 
        "name": "GearmanWorker::register", 
        "params": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }, 
            {
                "descr": "An interval of time in seconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.register", 
        "syntax": "public bool GearmanWorker::register ( string $function_name [, int $timeout ] )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::removeOptions": {
        "descr": "Removes (unsets) one or more worker options.", 
        "name": "GearmanWorker::removeOptions", 
        "params": [
            {
                "descr": "The options to be removed (unset)", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.removeoptions", 
        "syntax": "public bool GearmanWorker::removeOptions ( int $option )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::returnCode": {
        "descr": "Returns the last Gearman return code.", 
        "name": "GearmanWorker::returnCode", 
        "params": [], 
        "path": "php/gearmanworker.returncode", 
        "syntax": "public int GearmanWorker::returnCode ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setId": {
        "descr": "Assigns the worker an identifier.", 
        "name": "GearmanWorker::setId", 
        "params": [
            {
                "descr": "A string identifier.", 
                "name": "id"
            }
        ], 
        "path": "php/function.func-name", 
        "syntax": "public bool GearmanWorker::setId ( string $id )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setOptions": {
        "descr": "Sets one or more options to the supplied value.", 
        "name": "GearmanWorker::setOptions", 
        "params": [
            {
                "descr": "The options to be set", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.setoptions", 
        "syntax": "public bool GearmanWorker::setOptions ( int $option )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setTimeout": {
        "descr": "Sets the interval of time to wait for socket I/O activity.", 
        "name": "GearmanWorker::setTimeout", 
        "params": [
            {
                "descr": "An interval of time in milliseconds. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.settimeout", 
        "syntax": "public bool GearmanWorker::setTimeout ( int $timeout )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::timeout": {
        "descr": "Returns the current time to wait, in milliseconds, for socket I/O activity.", 
        "name": "GearmanWorker::timeout", 
        "params": [], 
        "path": "php/gearmanworker.timeout", 
        "syntax": "public int GearmanWorker::timeout ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::unregister": {
        "descr": "Unregisters a function name with the job servers ensuring that no more jobs (for that function) are sent to this worker.", 
        "name": "GearmanWorker::unregister", 
        "params": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }
        ], 
        "path": "php/gearmanworker.unregister", 
        "syntax": "public bool GearmanWorker::unregister ( string $function_name )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::unregisterAll": {
        "descr": "Unregisters all previously registered functions, ensuring that no more jobs are sent to this worker.", 
        "name": "GearmanWorker::unregisterAll", 
        "params": [], 
        "path": "php/gearmanworker.unregisterall", 
        "syntax": "public bool GearmanWorker::unregisterAll ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::wait": {
        "descr": "Causes the worker to wait for activity from one of the Gearman job servers when operating in non-blocking I/O mode. On failure, issues a E_WARNING with the last Gearman error encountered.", 
        "name": "GearmanWorker::wait", 
        "params": [], 
        "path": "php/gearmanworker.wait", 
        "syntax": "public bool GearmanWorker::wait ( void )", 
        "type": "Gearman"
    }, 
    "GearmanWorker::work": {
        "descr": "Waits for a job to be assigned and then calls the appropriate callback function. Issues an E_WARNING with the last Gearman error if the return code is not one of GEARMAN_SUCCESS, GEARMAN_IO_WAIT, or GEARMAN_WORK_FAIL.", 
        "name": "GearmanWorker::work", 
        "params": [], 
        "path": "php/gearmanworker.work", 
        "syntax": "public bool GearmanWorker::work ( void )", 
        "type": "Gearman"
    }, 
    "Generator": {
        "descr": "", 
        "name": "Generator", 
        "params": [], 
        "path": "php/class.generator", 
        "syntax": "public mixed current ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::__wakeup": {
        "descr": "Throws an exception as generators can't be serialized.", 
        "name": "Generator::__wakeup", 
        "params": [], 
        "path": "php/generator.wakeup", 
        "syntax": "public void Generator::__wakeup ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::current": {
        "descr": "", 
        "name": "Generator::current", 
        "params": [], 
        "path": "php/generator.current", 
        "syntax": "public mixed Generator::current ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::key": {
        "descr": "", 
        "name": "Generator::key", 
        "params": [], 
        "path": "php/generator.key", 
        "syntax": "public mixed Generator::key ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::next": {
        "descr": "", 
        "name": "Generator::next", 
        "params": [], 
        "path": "php/generator.next", 
        "syntax": "public void Generator::next ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::rewind": {
        "descr": "If iteration has already begun, this will throw an exception.", 
        "name": "Generator::rewind", 
        "params": [], 
        "path": "php/generator.rewind", 
        "syntax": "public void Generator::rewind ( void )", 
        "type": "Classes and Functions"
    }, 
    "Generator::send": {
        "descr": "Sends the given value to the generator as the result of the current yield expression and resumes execution of the generator.", 
        "name": "Generator::send", 
        "params": [
            {
                "descr": "Value to send into the generator. ", 
                "name": "value"
            }
        ], 
        "path": "php/generator.send", 
        "syntax": "public mixed Generator::send ( mixed $value )", 
        "type": "Classes and Functions"
    }, 
    "Generator::throw": {
        "descr": "Throws an exception into the generator and resumes execution of the generator. The behavior will be the same as if the current yield expression was replaced with a throw $exception statement.", 
        "name": "Generator::throw", 
        "params": [
            {
                "descr": "Exception to throw into the generator.", 
                "name": "exception"
            }
        ], 
        "path": "php/generator.throw", 
        "syntax": "public mixed Generator::throw ( Exception $exception )", 
        "type": "Classes and Functions"
    }, 
    "Generator::valid": {
        "descr": "", 
        "name": "Generator::valid", 
        "params": [], 
        "path": "php/generator.valid", 
        "syntax": "public bool Generator::valid ( void )", 
        "type": "Classes and Functions"
    }, 
    "GlobIterator": {
        "descr": "", 
        "name": "GlobIterator", 
        "params": [], 
        "path": "php/class.globiterator", 
        "syntax": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "type": "SPL/Iterators"
    }, 
    "GlobIterator::__construct": {
        "descr": "Constructs a new directory iterator from a glob expression.", 
        "name": "GlobIterator::__construct", 
        "params": [
            {
                "descr": "The path of the directory.", 
                "name": "path"
            }, 
            {
                "descr": "Option flags, the flags may be a bitmask of the FilesystemIterator constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/globiterator.construct", 
        "syntax": "public GlobIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "type": "SPL/Iterators"
    }, 
    "GlobIterator::count": {
        "descr": "Gets the number of directories and files found by the glob expression.", 
        "name": "GlobIterator::count", 
        "params": [], 
        "path": "php/globiterator.count", 
        "syntax": "public int GlobIterator::count ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Gmagick": {
        "descr": "", 
        "name": "Gmagick", 
        "params": [], 
        "path": "php/class.gmagick", 
        "syntax": "public Gmagick addimage ( Gmagick $Gmagick )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::__construct": {
        "descr": "The Gmagick constructor.", 
        "name": "Gmagick::__construct", 
        "params": [
            {
                "descr": "The path to an image to load or array of paths", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.construct", 
        "syntax": "public Gmagick::__construct ([ string $filename ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::addimage": {
        "descr": "Adds new image to Gmagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.", 
        "name": "Gmagick::addimage", 
        "params": [
            {
                "descr": "The source Gmagick object", 
                "name": "source"
            }
        ], 
        "path": "php/gmagick.addimage", 
        "syntax": "public Gmagick Gmagick::addimage ( Gmagick $Gmagick )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::addnoiseimage": {
        "descr": "Adds random noise to the image.", 
        "name": "Gmagick::addnoiseimage", 
        "params": [
            {
                "descr": "The type of the noise. Refer to this list of noise constants.", 
                "name": "noise_type"
            }
        ], 
        "path": "php/gmagick.addnoiseimage", 
        "syntax": "public Gmagick Gmagick::addnoiseimage ( int $NOISE )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::annotateimage": {
        "descr": "Annotates an image with text.", 
        "name": "Gmagick::annotateimage", 
        "params": [
            {
                "descr": "The GmagickDraw object that contains settings for drawing the text", 
                "name": "GmagickDraw"
            }, 
            {
                "descr": "Horizontal offset in pixels to the left of text", 
                "name": "x"
            }, 
            {
                "descr": "Vertical offset in pixels to the baseline of text", 
                "name": "y"
            }, 
            {
                "descr": "The angle at which to write the text", 
                "name": "angle"
            }, 
            {
                "descr": "The string to draw", 
                "name": "text"
            }
        ], 
        "path": "php/gmagick.annotateimage", 
        "syntax": "public Gmagick Gmagick::annotateimage ( GmagickDraw $GmagickDraw , float $x , float $y , float $angle , string $text )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::blurimage": {
        "descr": "Adds blur filter to image.", 
        "name": "Gmagick::blurimage", 
        "params": [
            {
                "descr": "Blur radius", 
                "name": "radius"
            }, 
            {
                "descr": "Standard deviation", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.blurimage", 
        "syntax": "public Gmagick Gmagick::blurimage ( float $radius , float $sigma [, int $channel ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::borderimage": {
        "descr": "Surrounds the image with a border of the color defined by the bordercolor GmagickPixel object or a color string.", 
        "name": "Gmagick::borderimage", 
        "params": [
            {
                "descr": "GmagickPixel object or a string containing the border color", 
                "name": "color"
            }, 
            {
                "descr": "Border width", 
                "name": "width"
            }, 
            {
                "descr": "Border height", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.borderimage", 
        "syntax": "public Gmagick Gmagick::borderimage ( GmagickPixel $color , int $width , int $height )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::charcoalimage": {
        "descr": "Simulates a charcoal drawing.", 
        "name": "Gmagick::charcoalimage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.charcoalimage", 
        "syntax": "public Gmagick Gmagick::charcoalimage ( float $radius , float $sigma )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::chopimage": {
        "descr": "Removes a region of an image and collapses the image to occupy the removed portion.", 
        "name": "Gmagick::chopimage", 
        "params": [
            {
                "descr": "Width of the chopped area", 
                "name": "width"
            }, 
            {
                "descr": "Height of the chopped area", 
                "name": "height"
            }, 
            {
                "descr": "X origo of the chopped area", 
                "name": "x"
            }, 
            {
                "descr": "Y origo of the chopped area", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.chopimage", 
        "syntax": "public Gmagick Gmagick::chopimage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::clear": {
        "descr": "Clears all resources associated to Gmagick object", 
        "name": "Gmagick::clear", 
        "params": [], 
        "path": "php/gmagick.clear", 
        "syntax": "public Gmagick Gmagick::clear ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::commentimage": {
        "descr": "Adds a comment to your image.", 
        "name": "Gmagick::commentimage", 
        "params": [
            {
                "descr": "The comment to add", 
                "name": "comment"
            }
        ], 
        "path": "php/gmagick.commentimage", 
        "syntax": "public Gmagick Gmagick::commentimage ( string $comment )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::compositeimage": {
        "descr": "Composite one image onto another at the specified offset.", 
        "name": "Gmagick::compositeimage", 
        "params": [
            {
                "descr": "Gmagick object which holds the composite image", 
                "name": "source"
            }, 
            {
                "descr": "Composite operator.", 
                "name": "compose"
            }, 
            {
                "descr": "The column offset of the composited image", 
                "name": "x"
            }, 
            {
                "descr": "The row offset of the composited image", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.compositeimage", 
        "syntax": "public Gmagick Gmagick::compositeimage ( Gmagick $source , int $COMPOSE , int $x , int $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cropimage": {
        "descr": "Extracts a region of the image.", 
        "name": "Gmagick::cropimage", 
        "params": [
            {
                "descr": "The width of the crop", 
                "name": "width"
            }, 
            {
                "descr": "The height of the crop", 
                "name": "height"
            }, 
            {
                "descr": "The X coordinate of the cropped region's top left corner", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the cropped region's top left corner", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.cropimage", 
        "syntax": "public Gmagick Gmagick::cropimage (  int $width  ,  int $height  , int $x , int $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cropthumbnailimage": {
        "descr": "Creates a fixed size thumbnail by first scaling the image down and cropping a specified area from the center.", 
        "name": "Gmagick::cropthumbnailimage", 
        "params": [
            {
                "descr": "The width of the thumbnail", 
                "name": "width"
            }, 
            {
                "descr": "The Height of the thumbnail", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.cropthumbnailimage", 
        "syntax": "public Gmagick Gmagick::cropthumbnailimage ( int $width , int $height )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::current": {
        "descr": "Returns reference to the current gmagick object with image pointer at the correct sequence.", 
        "name": "Gmagick::current", 
        "params": [], 
        "path": "php/gmagick.current", 
        "syntax": "public Gmagick Gmagick::current ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cyclecolormapimage": {
        "descr": "Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.", 
        "name": "Gmagick::cyclecolormapimage", 
        "params": [
            {
                "descr": "The amount to displace the colormap.", 
                "name": "displace"
            }
        ], 
        "path": "php/gmagick.cyclecolormapimage", 
        "syntax": "public Gmagick Gmagick::cyclecolormapimage ( int $displace )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::deconstructimages": {
        "descr": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.", 
        "name": "Gmagick::deconstructimages", 
        "params": [], 
        "path": "php/gmagick.deconstructimages", 
        "syntax": "public void Gmagick::deconstructimages ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::despeckleimage": {
        "descr": "Reduces the speckle noise in an image while preserving the edges of the original image.", 
        "name": "Gmagick::despeckleimage", 
        "params": [], 
        "path": "php/gmagick.despeckleimage", 
        "syntax": "public Gmagick Gmagick::despeckleimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::destroy": {
        "descr": "Destroys the Gmagick object and frees all resources associated with it", 
        "name": "Gmagick::destroy", 
        "params": [], 
        "path": "php/gmagick.destroy", 
        "syntax": "public Gmagick Gmagick::destroy ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::drawimage": {
        "descr": "Renders the GmagickDraw object on the current image", 
        "name": "Gmagick::drawimage", 
        "params": [
            {
                "descr": "The drawing operations to render on the image.", 
                "name": "GmagickDraw"
            }
        ], 
        "path": "php/gmagick.drawimage", 
        "syntax": "public Gmagick Gmagick::drawimage ( GmagickDraw $GmagickDraw )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::edgeimage": {
        "descr": "Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.", 
        "name": "Gmagick::edgeimage", 
        "params": [
            {
                "descr": "The radius of the operation.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.edgeimage", 
        "syntax": "public Gmagick Gmagick::edgeimage ( float $radius )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::embossimage": {
        "descr": "Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.", 
        "name": "Gmagick::embossimage", 
        "params": [
            {
                "descr": "The radius of the effect", 
                "name": "radius"
            }, 
            {
                "descr": "The sigma of the effect", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.embossimage", 
        "syntax": "public Gmagick Gmagick::embossimage ( float $radius , float $sigma )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::enhanceimage": {
        "descr": "Applies a digital filter that improves the quality of a noisy image.", 
        "name": "Gmagick::enhanceimage", 
        "params": [], 
        "path": "php/gmagick.enhanceimage", 
        "syntax": "public Gmagick Gmagick::enhanceimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::equalizeimage": {
        "descr": "Equalizes the image histogram.", 
        "name": "Gmagick::equalizeimage", 
        "params": [], 
        "path": "php/gmagick.equalizeimage", 
        "syntax": "public Gmagick Gmagick::equalizeimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::flipimage": {
        "descr": "Creates a vertical mirror image by reflecting the pixels around the central x-axis.", 
        "name": "Gmagick::flipimage", 
        "params": [], 
        "path": "php/gmagick.flipimage", 
        "syntax": "public Gmagick Gmagick::flipimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::flopimage": {
        "descr": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis.", 
        "name": "Gmagick::flopimage", 
        "params": [], 
        "path": "php/gmagick.flopimage", 
        "syntax": "public Gmagick Gmagick::flopimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::frameimage": {
        "descr": "Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.", 
        "name": "Gmagick::frameimage", 
        "params": [
            {
                "descr": "GmagickPixel object or a float representing the matte color", 
                "name": "color"
            }, 
            {
                "descr": "The width of the border", 
                "name": "width"
            }, 
            {
                "descr": "The height of the border", 
                "name": "height"
            }, 
            {
                "descr": "The inner bevel width", 
                "name": "inner_bevel"
            }, 
            {
                "descr": "The outer bevel width", 
                "name": "outer_bevel"
            }
        ], 
        "path": "php/gmagick.frameimage", 
        "syntax": "public Gmagick Gmagick::frameimage ( GmagickPixel $color , int $width , int $height , int $inner_bevel , int $outer_bevel )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::gammaimage": {
        "descr": "Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.", 
        "name": "Gmagick::gammaimage", 
        "params": [
            {
                "descr": "The amount of gamma-correction.", 
                "name": "gamma"
            }
        ], 
        "path": "php/gmagick.gammaimage", 
        "syntax": "public Gmagick Gmagick::gammaimage ( float $gamma )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getcopyright": {
        "descr": "Returns the GraphicsMagick API copyright as a string.", 
        "name": "Gmagick::getcopyright", 
        "params": [], 
        "path": "php/gmagick.getcopyright", 
        "syntax": "public string Gmagick::getcopyright ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getfilename": {
        "descr": "Returns the filename associated with an image sequence.", 
        "name": "Gmagick::getfilename", 
        "params": [], 
        "path": "php/gmagick.getfilename", 
        "syntax": "public string Gmagick::getfilename ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagebackgroundcolor": {
        "descr": "Returns the image background color.", 
        "name": "Gmagick::getimagebackgroundcolor", 
        "params": [], 
        "path": "php/gmagick.getimagebackgroundcolor", 
        "syntax": "public void Gmagick::getimagebackgroundcolor ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageblueprimary": {
        "descr": "Returns the chromaticity blue primary point for the image.", 
        "name": "Gmagick::getimageblueprimary", 
        "params": [
            {
                "descr": "The chromaticity blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.getimageblueprimary", 
        "syntax": "public array Gmagick::getimageblueprimary ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagebordercolor": {
        "descr": "Returns the image border color.", 
        "name": "Gmagick::getimagebordercolor", 
        "params": [], 
        "path": "php/gmagick.getimagebordercolor", 
        "syntax": "public void Gmagick::getimagebordercolor ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagechanneldepth": {
        "descr": "Gets the depth for a particular image channel.", 
        "name": "Gmagick::getimagechanneldepth", 
        "params": [], 
        "path": "php/gmagick.getimagechanneldepth", 
        "syntax": "public int Gmagick::getimagechanneldepth ( int $channel_type )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecolors": {
        "descr": "Returns the color of the specified colormap index.", 
        "name": "Gmagick::getimagecolors", 
        "params": [], 
        "path": "php/gmagick.getimagecolors", 
        "syntax": "public int Gmagick::getimagecolors ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecolorspace": {
        "descr": "Gets the image colorspace.", 
        "name": "Gmagick::getimagecolorspace", 
        "params": [], 
        "path": "php/gmagick.getimagecolorspace", 
        "syntax": "public int Gmagick::getimagecolorspace ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecompose": {
        "descr": "Returns the composite operator associated with the image.", 
        "name": "Gmagick::getimagecompose", 
        "params": [], 
        "path": "php/gmagick.getimagecompose", 
        "syntax": "public int Gmagick::getimagecompose ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedelay": {
        "descr": "Gets the image delay", 
        "name": "Gmagick::getimagedelay", 
        "params": [], 
        "path": "php/gmagick.getimagedelay", 
        "syntax": "public int Gmagick::getimagedelay ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedepth": {
        "descr": "Gets the depth of the image.", 
        "name": "Gmagick::getimagedepth", 
        "params": [], 
        "path": "php/gmagick.getimagedepth", 
        "syntax": "public int Gmagick::getimagedepth ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedispose": {
        "descr": "Gets the image disposal method", 
        "name": "Gmagick::getimagedispose", 
        "params": [], 
        "path": "php/gmagick.getimagedispose", 
        "syntax": "public int Gmagick::getimagedispose ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageextrema": {
        "descr": "Returns an associative array with the keys \"min\" and \"max\". Throws an GmagickException on error.", 
        "name": "Gmagick::getimageextrema", 
        "params": [], 
        "path": "php/gmagick.getimageextrema", 
        "syntax": "public array Gmagick::getimageextrema ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagefilename": {
        "descr": "Returns the filename of a particular image in a sequence", 
        "name": "Gmagick::getimagefilename", 
        "params": [], 
        "path": "php/gmagick.getimagefilename", 
        "syntax": "public string Gmagick::getimagefilename ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageformat": {
        "descr": "Returns the format of a particular image in a sequence.", 
        "name": "Gmagick::getimageformat", 
        "params": [], 
        "path": "php/gmagick.getimageformat", 
        "syntax": "public string Gmagick::getimageformat ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagegamma": {
        "descr": "Gets the image gamma", 
        "name": "Gmagick::getimagegamma", 
        "params": [], 
        "path": "php/gmagick.getimagegamma", 
        "syntax": "public float Gmagick::getimagegamma ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagegreenprimary": {
        "descr": "Returns the chromaticity green primary point. Returns an array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimagegreenprimary", 
        "params": [], 
        "path": "php/gmagick.getimagegreenprimary", 
        "syntax": "public array Gmagick::getimagegreenprimary ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageheight": {
        "descr": "Returns the image height", 
        "name": "Gmagick::getimageheight", 
        "params": [], 
        "path": "php/gmagick.getimageheight", 
        "syntax": "public int Gmagick::getimageheight ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagehistogram": {
        "descr": "Returns the image histogram as an array of GmagickPixel objects. Throw an GmagickException on error.", 
        "name": "Gmagick::getimagehistogram", 
        "params": [], 
        "path": "php/gmagick.getimagehistogram", 
        "syntax": "public array Gmagick::getimagehistogram ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageindex": {
        "descr": "Returns the index of the current active image within the Gmagick object.", 
        "name": "Gmagick::getimageindex", 
        "params": [], 
        "path": "php/gmagick.getimageindex", 
        "syntax": "public int Gmagick::getimageindex ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageinterlacescheme": {
        "descr": "Gets the image interlace scheme.", 
        "name": "Gmagick::getimageinterlacescheme", 
        "params": [], 
        "path": "php/gmagick.getimageinterlacescheme", 
        "syntax": "public int Gmagick::getimageinterlacescheme ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageiterations": {
        "descr": "Gets the image iterations.", 
        "name": "Gmagick::getimageiterations", 
        "params": [], 
        "path": "php/gmagick.getimageiterations", 
        "syntax": "public int Gmagick::getimageiterations ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagematte": {
        "descr": "Returns TRUE if the image has a matte channel otherwise false.", 
        "name": "Gmagick::getimagematte", 
        "params": [], 
        "path": "php/gmagick.getimagematte", 
        "syntax": "public int Gmagick::getimagematte ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagemattecolor": {
        "descr": "Returns GmagickPixel object on success. Throw an GmagickException on error.", 
        "name": "Gmagick::getimagemattecolor", 
        "params": [], 
        "path": "php/gmagick.getimagemattecolor", 
        "syntax": "public void Gmagick::getimagemattecolor ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageprofile": {
        "descr": "Returns the named image profile.", 
        "name": "Gmagick::getimageprofile", 
        "params": [], 
        "path": "php/gmagick.getimageprofile", 
        "syntax": "public string Gmagick::getimageprofile ( string $name )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageredprimary": {
        "descr": "Returns the chromaticity red primary point as an array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimageredprimary", 
        "params": [], 
        "path": "php/gmagick.getimageredprimary", 
        "syntax": "public array Gmagick::getimageredprimary ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagerenderingintent": {
        "descr": "Gets the image rendering intent", 
        "name": "Gmagick::getimagerenderingintent", 
        "params": [], 
        "path": "php/gmagick.getimagerenderingintent", 
        "syntax": "public int Gmagick::getimagerenderingintent ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageresolution": {
        "descr": "Returns the resolution as an array.", 
        "name": "Gmagick::getimageresolution", 
        "params": [], 
        "path": "php/gmagick.getimageresolution", 
        "syntax": "public array Gmagick::getimageresolution ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagescene": {
        "descr": "Gets the image scene.", 
        "name": "Gmagick::getimagescene", 
        "params": [], 
        "path": "php/gmagick.getimagescene", 
        "syntax": "public int Gmagick::getimagescene ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagesignature": {
        "descr": "Generates an SHA-256 message digest for the image pixel stream.", 
        "name": "Gmagick::getimagesignature", 
        "params": [], 
        "path": "php/gmagick.getimagesignature", 
        "syntax": "public string Gmagick::getimagesignature ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagetype": {
        "descr": "Gets the potential image type.", 
        "name": "Gmagick::getimagetype", 
        "params": [], 
        "path": "php/gmagick.getimagetype", 
        "syntax": "public int Gmagick::getimagetype ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageunits": {
        "descr": "Gets the image units of resolution.", 
        "name": "Gmagick::getimageunits", 
        "params": [], 
        "path": "php/gmagick.getimageunits", 
        "syntax": "public int Gmagick::getimageunits ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagewhitepoint": {
        "descr": "Returns the chromaticity white point as an associative array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimagewhitepoint", 
        "params": [], 
        "path": "php/gmagick.getimagewhitepoint", 
        "syntax": "public array Gmagick::getimagewhitepoint ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagewidth": {
        "descr": "Returns the width of the image.", 
        "name": "Gmagick::getimagewidth", 
        "params": [], 
        "path": "php/gmagick.getimagewidth", 
        "syntax": "public int Gmagick::getimagewidth ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getpackagename": {
        "descr": "Returns the GraphicsMagick package name.", 
        "name": "Gmagick::getpackagename", 
        "params": [], 
        "path": "php/gmagick.getpackagename", 
        "syntax": "public string Gmagick::getpackagename ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getquantumdepth": {
        "descr": "Returns the Gmagick quantum depth as a string.", 
        "name": "Gmagick::getquantumdepth", 
        "params": [], 
        "path": "php/gmagick.getquantumdepth", 
        "syntax": "public array Gmagick::getquantumdepth ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getreleasedate": {
        "descr": "Returns the GraphicsMagick release date as a string.", 
        "name": "Gmagick::getreleasedate", 
        "params": [], 
        "path": "php/gmagick.getreleasedate", 
        "syntax": "public string Gmagick::getreleasedate ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getsamplingfactors": {
        "descr": "Gets the horizontal and vertical sampling factor.", 
        "name": "Gmagick::getsamplingfactors", 
        "params": [], 
        "path": "php/gmagick.getsamplingfactors", 
        "syntax": "public array Gmagick::getsamplingfactors ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getsize": {
        "descr": "Returns the size associated with the Gmagick object as an array with the keys \"columns\" and \"rows\".", 
        "name": "Gmagick::getsize", 
        "params": [], 
        "path": "php/gmagick.getsize", 
        "syntax": "public array Gmagick::getsize ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getversion": {
        "descr": "Returns the GraphicsMagick API version as a string and as a number.", 
        "name": "Gmagick::getversion", 
        "params": [], 
        "path": "php/gmagick.getversion", 
        "syntax": "public array Gmagick::getversion ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::hasnextimage": {
        "descr": "Returns TRUE if the object has more images when traversing the list in the forward direction.", 
        "name": "Gmagick::hasnextimage", 
        "params": [], 
        "path": "php/gmagick.hasnextimage", 
        "syntax": "public mixed Gmagick::hasnextimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::haspreviousimage": {
        "descr": "Returns TRUE if the object has more images when traversing the list in the reverse direction", 
        "name": "Gmagick::haspreviousimage", 
        "params": [], 
        "path": "php/gmagick.haspreviousimage", 
        "syntax": "public mixed Gmagick::haspreviousimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::implodeimage": {
        "descr": "Creates a new image that is a copy of an existing one with the image pixels \"imploded\" by the specified percentage.", 
        "name": "Gmagick::implodeimage", 
        "params": [
            {
                "descr": "The radius of the implode", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.implodeimage", 
        "syntax": "public mixed Gmagick::implodeimage ( float $radius )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::labelimage": {
        "descr": "Adds a label to an image.", 
        "name": "Gmagick::labelimage", 
        "params": [
            {
                "descr": "The label to add", 
                "name": "label"
            }
        ], 
        "path": "php/gmagick.labelimage", 
        "syntax": "public mixed Gmagick::labelimage ( string $label )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::levelimage": {
        "descr": "Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.", 
        "name": "Gmagick::levelimage", 
        "params": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The gamma value", 
                "name": "gamma"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.levelimage", 
        "syntax": "public mixed Gmagick::levelimage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::magnifyimage": {
        "descr": "Conveniently scales an image proportionally to twice its original size.", 
        "name": "Gmagick::magnifyimage", 
        "params": [], 
        "path": "php/gmagick.magnifyimage", 
        "syntax": "public mixed Gmagick::magnifyimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::mapimage": {
        "descr": "Replaces the colors of an image with the closest color from a reference image.", 
        "name": "Gmagick::mapimage", 
        "params": [
            {
                "descr": "The reference image", 
                "name": "gmagick"
            }, 
            {
                "descr": "Set this integer value to something other than zero to dither the mapped image", 
                "name": "dither"
            }
        ], 
        "path": "php/gmagick.mapimage", 
        "syntax": "public Gmagick Gmagick::mapimage ( gmagick $gmagick , bool $dither )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::medianfilterimage": {
        "descr": "Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.", 
        "name": "Gmagick::medianfilterimage", 
        "params": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.medianfilterimage", 
        "syntax": "public void Gmagick::medianfilterimage ( float $radius )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::minifyimage": {
        "descr": "A convenient method that scales an image proportionally to one-half its original size", 
        "name": "Gmagick::minifyimage", 
        "params": [], 
        "path": "php/gmagick.minifyimage", 
        "syntax": "public void Gmagick::minifyimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::modulateimage": {
        "descr": "Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.", 
        "name": "Gmagick::modulateimage", 
        "params": [
            {
                "descr": "The percent change in brighness (-100 thru +100).", 
                "name": "brightness"
            }, 
            {
                "descr": "The percent change in saturation (-100 thru +100)", 
                "name": "saturation"
            }, 
            {
                "descr": "The percent change in hue (-100 thru +100)", 
                "name": "hue"
            }
        ], 
        "path": "php/gmagick.modulateimage", 
        "syntax": "public void Gmagick::modulateimage ( float $brightness , float $saturation , float $hue )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::motionblurimage": {
        "descr": "Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.", 
        "name": "Gmagick::motionblurimage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }
        ], 
        "path": "php/gmagick.motionblurimage", 
        "syntax": "public void Gmagick::motionblurimage ( float $radius , float $sigma , float $angle )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::newimage": {
        "descr": "Creates a new image with the specified background color", 
        "name": "Gmagick::newimage", 
        "params": [
            {
                "descr": "Width of the new image", 
                "name": "width"
            }, 
            {
                "descr": "Height of the new image", 
                "name": "height"
            }, 
            {
                "descr": "The background color used for this image (as float)", 
                "name": "background"
            }, 
            {
                "descr": "Image format.", 
                "name": "format"
            }
        ], 
        "path": "php/gmagick.newimage", 
        "syntax": "public void Gmagick::newimage ( int $width , int $height , string $background [, string $format ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::nextimage": {
        "descr": "Associates the next image in the image list with an Gmagick object.", 
        "name": "Gmagick::nextimage", 
        "params": [], 
        "path": "php/gmagick.nextimage", 
        "syntax": "public bool Gmagick::nextimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::normalizeimage": {
        "descr": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.", 
        "name": "Gmagick::normalizeimage", 
        "params": [
            {
                "descr": "Identify which channel to normalize", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.normalizeimage", 
        "syntax": "public void Gmagick::normalizeimage ([ int $channel ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::oilpaintimage": {
        "descr": "Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.", 
        "name": "Gmagick::oilpaintimage", 
        "params": [
            {
                "descr": "The radius of the circular neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.oilpaintimage", 
        "syntax": "public void Gmagick::oilpaintimage (  float $radius  )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::previousimage": {
        "descr": "Assocates the previous image in an image list with the Gmagick object.", 
        "name": "Gmagick::previousimage", 
        "params": [], 
        "path": "php/gmagick.previousimage", 
        "syntax": "public bool Gmagick::previousimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::profileimage": {
        "descr": "Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.", 
        "name": "Gmagick::profileimage", 
        "params": [
            {
                "descr": "Name of profile to add or remove: ICC, IPTC, or generic profile.", 
                "name": "name"
            }, 
            {
                "descr": "The profile.", 
                "name": "profile"
            }
        ], 
        "path": "php/gmagick.profileimage", 
        "syntax": "public void Gmagick::profileimage ( string $name , string $profile )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::quantizeimage": {
        "descr": "Analyzes the colors within a reference image and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.", 
        "name": "Gmagick::quantizeimage", 
        "params": [
            {
                "descr": "The number of colors.", 
                "name": "numColors"
            }, 
            {
                "descr": "Perform color reduction in this colorspace, typically RGBColorspace.", 
                "name": "colorspace"
            }, 
            {
                "descr": "Normally, this integer value is zero or one. ", 
                "name": "treeDepth"
            }, 
            {
                "descr": "A value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a Hilbert curve.", 
                "name": "dither"
            }, 
            {
                "descr": "A value other than zero measures the difference between the original and quantized images. ", 
                "name": "measureError"
            }
        ], 
        "path": "php/gmagick.quantizeimage", 
        "syntax": "public void Gmagick::quantizeimage ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::quantizeimages": {
        "descr": "Analyzes the colors within a sequence of images and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.", 
        "name": "Gmagick::quantizeimages", 
        "params": [
            {
                "descr": "The number of colors.", 
                "name": "numColors"
            }, 
            {
                "descr": "Perform color reduction in this colorspace, typically RGBColorspace.", 
                "name": "colorspace"
            }, 
            {
                "descr": "Normally, this integer value is zero or one. ", 
                "name": "treeDepth"
            }, 
            {
                "descr": "A value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a Hilbert curve.", 
                "name": "dither"
            }, 
            {
                "descr": "A value other than zero measures the difference between the original and quantized images. ", 
                "name": "measureError"
            }
        ], 
        "path": "php/gmagick.quantizeimages", 
        "syntax": "public void Gmagick::quantizeimages ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryfontmetrics": {
        "descr": "MagickQueryFontMetrics() returns an array representing the font metrics.", 
        "name": "Gmagick::queryfontmetrics", 
        "params": [], 
        "path": "php/gmagick.queryfontmetrics", 
        "syntax": "public array Gmagick::queryfontmetrics ( GmagickDraw $draw , string $text )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryfonts": {
        "descr": "Returns fonts supported by Gmagick.", 
        "name": "Gmagick::queryfonts", 
        "params": [], 
        "path": "php/gmagick.queryfonts", 
        "syntax": "public array Gmagick::queryfonts ([ string $pattern = \"*\" ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryformats": {
        "descr": "Returns formats supported by Gmagick.", 
        "name": "Gmagick::queryformats", 
        "params": [
            {
                "descr": "Specifies a pointer to a text string containing a pattern.", 
                "name": "pattern"
            }
        ], 
        "path": "php/gmagick.queryformats", 
        "syntax": "public array Gmagick::queryformats ([ string $pattern = \"*\" ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::radialblurimage": {
        "descr": "Radial blurs an image.", 
        "name": "Gmagick::radialblurimage", 
        "params": [
            {
                "descr": "The angle of the blur in degrees.", 
                "name": "angle"
            }, 
            {
                "descr": "Related channel", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.radialblurimage", 
        "syntax": "public void Gmagick::radialblurimage ( float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::raiseimage": {
        "descr": "Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.", 
        "name": "Gmagick::raiseimage", 
        "params": [
            {
                "descr": "Width of the area to raise.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the area to raise.", 
                "name": "height"
            }, 
            {
                "descr": "X coordinate", 
                "name": "x"
            }, 
            {
                "descr": "Y coordinate", 
                "name": "y"
            }, 
            {
                "descr": "A value other than zero creates a 3-D raise effect, otherwise it has a lowered effect.", 
                "name": "raise"
            }
        ], 
        "path": "php/gmagick.raiseimage", 
        "syntax": "public void Gmagick::raiseimage ( int $width , int $height , int $x , int $y , bool $raise )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::read": {
        "descr": "Reads image from filename.", 
        "name": "Gmagick::read", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.read", 
        "syntax": "public void Gmagick::read ( string $filename )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimage": {
        "descr": "Reads image from filename.", 
        "name": "Gmagick::readimage", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.readimage", 
        "syntax": "public void Gmagick::readimage ( string $filename )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimageblob": {
        "descr": "Reads image from a binary string.", 
        "name": "Gmagick::readimageblob", 
        "params": [
            {
                "descr": "Content of image", 
                "name": "imageContents"
            }, 
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.readimageblob", 
        "syntax": "public void Gmagick::readimageblob ( string $imageContents [, string $filename ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimagefile": {
        "descr": "Reads an image or image sequence from an open file descriptor.", 
        "name": "Gmagick::readimagefile", 
        "params": [
            {
                "descr": "The file descriptor.", 
                "name": "fp"
            }
        ], 
        "path": "php/gmagick.readimagefile", 
        "syntax": "public void Gmagick::readimagefile ( resource $fp [, string $filename ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::reducenoiseimage": {
        "descr": "Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius for you.", 
        "name": "Gmagick::reducenoiseimage", 
        "params": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.reducenoiseimage", 
        "syntax": "public void Gmagick::reducenoiseimage ( float $radius )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::removeimage": {
        "descr": "Removes an image from the image list.", 
        "name": "Gmagick::removeimage", 
        "params": [], 
        "path": "php/gmagick.removeimage", 
        "syntax": "public void Gmagick::removeimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::removeimageprofile": {
        "descr": "Removes the named image profile and returns it.", 
        "name": "Gmagick::removeimageprofile", 
        "params": [
            {
                "descr": "Name of profile to return: ICC, IPTC, or generic profile.", 
                "name": "name"
            }
        ], 
        "path": "php/gmagick.removeimageprofile", 
        "syntax": "public string Gmagick::removeimageprofile ( string $name )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::resampleimage": {
        "descr": "Resample image to desired resolution.", 
        "name": "Gmagick::resampleimage", 
        "params": [
            {
                "descr": "The new image x resolution.", 
                "name": "xResolution"
            }, 
            {
                "descr": "The new image y resolution.", 
                "name": "yResolution"
            }, 
            {
                "descr": "Image filter to use.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where larger than 1 is blurry, smaller than 1 is sharp.", 
                "name": "blur"
            }
        ], 
        "path": "php/gmagick.resampleimage", 
        "syntax": "public void Gmagick::resampleimage ( float $xResolution , float $yResolution , int $filter , float $blur )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::resizeimage": {
        "descr": "Scales an image to the desired dimensions with a filter.", 
        "name": "Gmagick::resizeimage", 
        "params": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "width"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "height"
            }, 
            {
                "descr": "Image filter to use.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where larger than 1 is blurry, lesser than 1 is sharp.", 
                "name": "blur"
            }
        ], 
        "path": "php/gmagick.resizeimage", 
        "syntax": "public void Gmagick::resizeimage ( int $width , int $height , int $filter , float $blur [, bool $fit = false ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::rollimage": {
        "descr": "Offsets an image as defined by x and y.", 
        "name": "Gmagick::rollimage", 
        "params": [
            {
                "descr": "The x offset.", 
                "name": "x"
            }, 
            {
                "descr": "The y offset.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.rollimage", 
        "syntax": "public void Gmagick::rollimage ( int $x , int $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::rotateimage": {
        "descr": "Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.", 
        "name": "Gmagick::rotateimage", 
        "params": [
            {
                "descr": "The background pixel.", 
                "name": "color"
            }, 
            {
                "descr": "The number of degrees to rotate the image.", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagick.rotateimage", 
        "syntax": "public Gmagick Gmagick::rotateimage ( mixed $color , float $degrees )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::scaleimage": {
        "descr": "Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.", 
        "name": "Gmagick::scaleimage", 
        "params": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "width"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.scaleimage", 
        "syntax": "public Gmagick Gmagick::scaleimage ( int $width , int $height [, bool $fit = false ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::separateimagechannel": {
        "descr": "Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.", 
        "name": "Gmagick::separateimagechannel", 
        "params": [
            {
                "descr": "Identify which channel to extract: RedChannel, GreenChannel, BlueChannel, OpacityChannel, CyanChannel, MagentaChannel, YellowChannel, BlackChannel.", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.separateimagechannel", 
        "syntax": "public Gmagick Gmagick::separateimagechannel ( int $channel )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setfilename": {
        "descr": "Sets the filename before you read or write an image file.", 
        "name": "Gmagick::setfilename", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.setfilename", 
        "syntax": "public Gmagick Gmagick::setfilename ( string $filename )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagebackgroundcolor": {
        "descr": "Sets the image background color.", 
        "name": "Gmagick::setimagebackgroundcolor", 
        "params": [
            {
                "descr": "The background pixel wand.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagick.setimagebackgroundcolor", 
        "syntax": "public Gmagick Gmagick::setimagebackgroundcolor ( GmagickPixel $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageblueprimary": {
        "descr": "Sets the image chromaticity blue primary point.", 
        "name": "Gmagick::setimageblueprimary", 
        "params": [
            {
                "descr": "The blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimageblueprimary", 
        "syntax": "public Gmagick Gmagick::setimageblueprimary ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagebordercolor": {
        "descr": "Sets the image border color.", 
        "name": "Gmagick::setimagebordercolor", 
        "params": [
            {
                "descr": "The border pixel wand.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagick.setimagebordercolor", 
        "syntax": "public Gmagick Gmagick::setimagebordercolor ( GmagickPixel $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagechanneldepth": {
        "descr": "Sets the depth of a particular image channel.", 
        "name": "Gmagick::setimagechanneldepth", 
        "params": [
            {
                "descr": "Identify which channel to extract: RedChannel, GreenChannel, BlueChannel, OpacityChannel, CyanChannel, MagentaChannel, YellowChannel, BlackChannel.", 
                "name": "channel"
            }, 
            {
                "descr": "The image depth in bits.", 
                "name": "depth"
            }
        ], 
        "path": "php/gmagick.setimagechanneldepth", 
        "syntax": "public Gmagick Gmagick::setimagechanneldepth ( int $channel , int $depth )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagecolorspace": {
        "descr": "Sets the image colorspace.", 
        "name": "Gmagick::setimagecolorspace", 
        "params": [
            {
                "descr": "The image colorspace: UndefinedColorspace, RGBColorspace, GRAYColorspace, TransparentColorspace, OHTAColorspace, XYZColorspace, YCbCrColorspace, YCCColorspace, YIQColorspace, YPbPrColorspace, YPbPrColorspace, YUVColorspace, CMYKColorspace, sRGBColorspace, HSLColorspace, or HWBColorspace.", 
                "name": "colorspace"
            }
        ], 
        "path": "php/gmagick.setimagecolorspace", 
        "syntax": "public Gmagick Gmagick::setimagecolorspace ( int $colorspace )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagecompose": {
        "descr": "Sets the image composite operator.", 
        "name": "Gmagick::setimagecompose", 
        "params": [
            {
                "descr": "The image composite operator.", 
                "name": "composite"
            }
        ], 
        "path": "php/gmagick.setimagecompose", 
        "syntax": "public Gmagick Gmagick::setimagecompose ( int $composite )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedelay": {
        "descr": "Sets the image delay", 
        "name": "Gmagick::setimagedelay", 
        "params": [
            {
                "descr": "The image delay in 1/100th of a second.", 
                "name": "delay"
            }
        ], 
        "path": "php/gmagick.setimagedelay", 
        "syntax": "public Gmagick Gmagick::setimagedelay ( int $delay )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedepth": {
        "descr": "Sets the image depth", 
        "name": "Gmagick::setimagedepth", 
        "params": [
            {
                "descr": "The image depth in bits: 8, 16, or 32.", 
                "name": "depth"
            }
        ], 
        "path": "php/gmagick.setimagedepth", 
        "syntax": "public Gmagick Gmagick::setimagedepth ( int $depth )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedispose": {
        "descr": "Sets the image disposal method.", 
        "name": "Gmagick::setimagedispose", 
        "params": [
            {
                "descr": "The image disposal type.", 
                "name": "disposeType"
            }
        ], 
        "path": "php/gmagick.setimagedispose", 
        "syntax": "public Gmagick Gmagick::setimagedispose ( int $disposeType )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagefilename": {
        "descr": "Sets the filename of a particular image in a sequence.", 
        "name": "Gmagick::setimagefilename", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.setimagefilename", 
        "syntax": "public Gmagick Gmagick::setimagefilename ( string $filename )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageformat": {
        "descr": "Sets the format of a particular image in a sequence.", 
        "name": "Gmagick::setimageformat", 
        "params": [
            {
                "descr": "The image format.", 
                "name": "imageFormat"
            }
        ], 
        "path": "php/gmagick.setimageformat", 
        "syntax": "public Gmagick Gmagick::setimageformat ( string $imageFormat )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagegamma": {
        "descr": "Sets the image gamma.", 
        "name": "Gmagick::setimagegamma", 
        "params": [
            {
                "descr": "The image gamma.", 
                "name": "gamma"
            }
        ], 
        "path": "php/gmagick.setimagegamma", 
        "syntax": "public Gmagick Gmagick::setimagegamma ( float $gamma )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagegreenprimary": {
        "descr": "Sets the image chromaticity green primary point.", 
        "name": "Gmagick::setimagegreenprimary", 
        "params": [
            {
                "descr": "The chromaticity green primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity green primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimagegreenprimary", 
        "syntax": "public Gmagick Gmagick::setimagegreenprimary ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageindex": {
        "descr": "Set the iterator to the position in the image list specified with the index parameter.", 
        "name": "Gmagick::setimageindex", 
        "params": [
            {
                "descr": "The scene number.", 
                "name": "index"
            }
        ], 
        "path": "php/gmagick.setimageindex", 
        "syntax": "public Gmagick Gmagick::setimageindex ( int $index )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageinterlacescheme": {
        "descr": "Sets the interlace scheme of the image.", 
        "name": "Gmagick::setimageinterlacescheme", 
        "params": [
            {
                "descr": "The image interlace scheme: NoInterlace, LineInterlace, PlaneInterlace, PartitionInterlace.", 
                "name": "interlace"
            }
        ], 
        "path": "php/gmagick.setimageinterlacescheme", 
        "syntax": "public Gmagick Gmagick::setimageinterlacescheme ( int $interlace )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageiterations": {
        "descr": "Sets the image iterations.", 
        "name": "Gmagick::setimageiterations", 
        "params": [
            {
                "descr": "The image delay in 1/100th of a second.", 
                "name": "iterations"
            }
        ], 
        "path": "php/gmagick.setimageiterations", 
        "syntax": "public Gmagick Gmagick::setimageiterations ( int $iterations )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageprofile": {
        "descr": "Adds a named profile to the Gmagick object. If a profile with the same name already exists, it is replaced. This method differs from the Gmagick::ProfileImage() method in that it does not apply any CMS color profiles.", 
        "name": "Gmagick::setimageprofile", 
        "params": [
            {
                "descr": "Name of profile to add or remove: ICC, IPTC, or generic profile.", 
                "name": "name"
            }, 
            {
                "descr": "The profile.", 
                "name": "profile"
            }
        ], 
        "path": "php/gmagick.setimageprofile", 
        "syntax": "public Gmagick Gmagick::setimageprofile ( string $name , string $profile )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageredprimary": {
        "descr": "Sets the image chromaticity red primary point.", 
        "name": "Gmagick::setimageredprimary", 
        "params": [
            {
                "descr": "The red primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The red primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimageredprimary", 
        "syntax": "public Gmagick Gmagick::setimageredprimary ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagerenderingintent": {
        "descr": "Sets the image rendering intent.", 
        "name": "Gmagick::setimagerenderingintent", 
        "params": [
            {
                "descr": "The image rendering intent: UndefinedIntent, SaturationIntent, PerceptualIntent, AbsoluteIntent, or RelativeIntent.", 
                "name": "rendering_intent"
            }
        ], 
        "path": "php/gmagick.setimagerenderingintent", 
        "syntax": "public Gmagick Gmagick::setimagerenderingintent ( int $rendering_intent )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageresolution": {
        "descr": "Sets the image resolution.", 
        "name": "Gmagick::setimageresolution", 
        "params": [
            {
                "descr": "The image x resolution.", 
                "name": "xResolution"
            }, 
            {
                "descr": "The image y resolution.", 
                "name": "yResolution"
            }
        ], 
        "path": "php/gmagick.setimageresolution", 
        "syntax": "public Gmagick Gmagick::setimageresolution ( float $xResolution , float $yResolution )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagescene": {
        "descr": "Sets the image scene.", 
        "name": "Gmagick::setimagescene", 
        "params": [
            {
                "descr": "The image scene number.", 
                "name": "scene"
            }
        ], 
        "path": "php/gmagick.setimagescene", 
        "syntax": "public Gmagick Gmagick::setimagescene ( int $scene )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagetype": {
        "descr": "Sets the image type.", 
        "name": "Gmagick::setimagetype", 
        "params": [
            {
                "descr": "The image type: UndefinedType, BilevelType, GrayscaleType, GrayscaleMatteType, PaletteType, PaletteMatteType, TrueColorType, TrueColorMatteType, ColorSeparationType, ColorSeparationMatteType, or OptimizeType.", 
                "name": "imgType"
            }
        ], 
        "path": "php/gmagick.setimagetype", 
        "syntax": "public Gmagick Gmagick::setimagetype ( int $imgType )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageunits": {
        "descr": "Sets the image units of resolution.", 
        "name": "Gmagick::setimageunits", 
        "params": [
            {
                "descr": "The image units of resolution : Undefinedresolution, PixelsPerInchResolution, or PixelsPerCentimeterResolution.", 
                "name": "resolution"
            }
        ], 
        "path": "php/gmagick.setimageunits", 
        "syntax": "public Gmagick Gmagick::setimageunits ( int $resolution )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagewhitepoint": {
        "descr": "Sets the image chromaticity white point.", 
        "name": "Gmagick::setimagewhitepoint", 
        "params": [
            {
                "descr": "The white x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The white y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimagewhitepoint", 
        "syntax": "public Gmagick Gmagick::setimagewhitepoint ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setsamplingfactors": {
        "descr": "Sets the image sampling factors.", 
        "name": "Gmagick::setsamplingfactors", 
        "params": [
            {
                "descr": "An array of doubles representing the sampling factor for each color component (in RGB order).", 
                "name": "factors"
            }
        ], 
        "path": "php/gmagick.setsamplingfactors", 
        "syntax": "public Gmagick Gmagick::setsamplingfactors ( array $factors )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setsize": {
        "descr": "Sets the size of the Gmagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.", 
        "name": "Gmagick::setsize", 
        "params": [
            {
                "descr": "The width in pixels.", 
                "name": "columns"
            }, 
            {
                "descr": "The height in pixels.", 
                "name": "rows"
            }
        ], 
        "path": "php/gmagick.setsize", 
        "syntax": "public Gmagick Gmagick::setsize ( int $columns , int $rows )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::shearimage": {
        "descr": "Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.", 
        "name": "Gmagick::shearimage", 
        "params": [
            {
                "descr": "The background pixel wand.", 
                "name": "color"
            }, 
            {
                "descr": "The number of degrees to shear the image.", 
                "name": "xShear"
            }, 
            {
                "descr": "The number of degrees to shear the image.", 
                "name": "yShear"
            }
        ], 
        "path": "php/gmagick.shearimage", 
        "syntax": "public Gmagick Gmagick::shearimage ( mixed $color , float $xShear , float $yShear )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::solarizeimage": {
        "descr": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.", 
        "name": "Gmagick::solarizeimage", 
        "params": [
            {
                "descr": "Define the extent of the solarization.", 
                "name": "threshold"
            }
        ], 
        "path": "php/gmagick.solarizeimage", 
        "syntax": "public Gmagick Gmagick::solarizeimage ( int $threshold )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::spreadimage": {
        "descr": "Special effects method that randomly displaces each pixel in a block defined by the radius parameter.", 
        "name": "Gmagick::spreadimage", 
        "params": [
            {
                "descr": "Choose a random pixel in a neighborhood of this extent.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.spreadimage", 
        "syntax": "public Gmagick Gmagick::spreadimage ( float $radius )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::stripimage": {
        "descr": "Strips an image of all profiles and comments.", 
        "name": "Gmagick::stripimage", 
        "params": [], 
        "path": "php/gmagick.stripimage", 
        "syntax": "public Gmagick Gmagick::stripimage ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::swirlimage": {
        "descr": "Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.", 
        "name": "Gmagick::swirlimage", 
        "params": [
            {
                "descr": "Define the tightness of the swirling effect.", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagick.swirlimage", 
        "syntax": "public Gmagick Gmagick::swirlimage ( float $degrees )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::thumbnailimage": {
        "descr": "Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.", 
        "name": "Gmagick::thumbnailimage", 
        "params": [
            {
                "descr": "Image width", 
                "name": "width"
            }, 
            {
                "descr": "Image height", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.thumbnailimage", 
        "syntax": "public Gmagick Gmagick::thumbnailimage ( int $width , int $height [, bool $fit = false ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::trimimage": {
        "descr": "Remove edges that are the background color from the image.", 
        "name": "Gmagick::trimimage", 
        "params": [
            {
                "descr": "By default target must match a particular pixel color exactly. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/gmagick.trimimage", 
        "syntax": "public Gmagick Gmagick::trimimage ( float $fuzz )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::write": {
        "descr": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().", 
        "name": "Gmagick::write", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.write", 
        "syntax": "public void Gmagick::write ( string $filename )", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::writeimage": {
        "descr": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().", 
        "name": "Gmagick::writeimage", 
        "params": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.writeimage", 
        "syntax": "public Gmagick Gmagick::writeimage ( string $filename [, bool $all_frames = false ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw": {
        "descr": "", 
        "name": "GmagickDraw", 
        "params": [], 
        "path": "php/class.gmagickdraw", 
        "syntax": "public GmagickDraw annotate ( float $x , float $y , string $text )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::annotate": {
        "descr": "Draws text on the image.", 
        "name": "GmagickDraw::annotate", 
        "params": [
            {
                "descr": "x ordinate to left of text", 
                "name": "x"
            }, 
            {
                "descr": "y ordinate to text baseline", 
                "name": "y"
            }, 
            {
                "descr": "text to draw", 
                "name": "text"
            }
        ], 
        "path": "php/gmagickdraw.annotate", 
        "syntax": "public GmagickDraw GmagickDraw::annotate ( float $x , float $y , string $text )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::arc": {
        "descr": "Draws an arc falling within a specified bounding rectangle on the image.", 
        "name": "GmagickDraw::arc", 
        "params": [
            {
                "descr": "starting x ordinate of bounding rectangle", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate of bounding rectangle", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate of bounding rectangle", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate of bounding rectangle", 
                "name": "ey"
            }, 
            {
                "descr": "starting degrees of rotation", 
                "name": "sd"
            }, 
            {
                "descr": "ending degrees of rotation", 
                "name": "ed"
            }
        ], 
        "path": "php/gmagickdraw.arc", 
        "syntax": "public GmagickDraw GmagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::bezier": {
        "descr": "Draws a bezier curve through a set of points on the image.", 
        "name": "GmagickDraw::bezier", 
        "params": [
            {
                "descr": "Coordinates array", 
                "name": "coordinate_array"
            }
        ], 
        "path": "php/gmagickdraw.bezier", 
        "syntax": "public GmagickDraw GmagickDraw::bezier ( array $coordinate_array )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::ellipse": {
        "descr": "Draws an ellipse on the image.", 
        "name": "GmagickDraw::ellipse", 
        "params": [
            {
                "descr": "origin x ordinate", 
                "name": "ox"
            }, 
            {
                "descr": "origin y ordinate", 
                "name": "oy"
            }, 
            {
                "descr": "radius in x", 
                "name": "rx"
            }, 
            {
                "descr": "radius in y", 
                "name": "ry"
            }, 
            {
                "descr": "starting rotation in degrees", 
                "name": "start"
            }, 
            {
                "descr": "ending rotation in degrees", 
                "name": "end"
            }
        ], 
        "path": "php/gmagickdraw.ellipse", 
        "syntax": "public GmagickDraw GmagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfillcolor": {
        "descr": "Returns the fill color used for drawing filled objects.", 
        "name": "GmagickDraw::getfillcolor", 
        "params": [], 
        "path": "php/gmagickdraw.getfillcolor", 
        "syntax": "public void GmagickDraw::getfillcolor ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfillopacity": {
        "descr": "Returns the opacity used when drawing", 
        "name": "GmagickDraw::getfillopacity", 
        "params": [], 
        "path": "php/gmagickdraw.getfillopacity", 
        "syntax": "public float GmagickDraw::getfillopacity ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfont": {
        "descr": "Returns a string specifying the font used when annotating with text.", 
        "name": "GmagickDraw::getfont", 
        "params": [], 
        "path": "php/gmagickdraw.getfont", 
        "syntax": "public string GmagickDraw::getfont ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontsize": {
        "descr": "Returns the font pointsize used when annotating with text.", 
        "name": "GmagickDraw::getfontsize", 
        "params": [], 
        "path": "php/gmagickdraw.getfontsize", 
        "syntax": "public float GmagickDraw::getfontsize ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontstyle": {
        "descr": "Returns the font style used when annotating with text.", 
        "name": "GmagickDraw::getfontstyle", 
        "params": [], 
        "path": "php/gmagickdraw.getfontstyle", 
        "syntax": "public int GmagickDraw::getfontstyle ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontweight": {
        "descr": "Returns the font weight used when annotating with text.", 
        "name": "GmagickDraw::getfontweight", 
        "params": [], 
        "path": "php/gmagickdraw.getfontweight", 
        "syntax": "public int GmagickDraw::getfontweight ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokecolor": {
        "descr": "Returns the color used for stroking object outlines.", 
        "name": "GmagickDraw::getstrokecolor", 
        "params": [], 
        "path": "php/gmagickdraw.getstrokecolor", 
        "syntax": "public void GmagickDraw::getstrokecolor ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokeopacity": {
        "descr": "Returns the opacity of stroked object outlines.", 
        "name": "GmagickDraw::getstrokeopacity", 
        "params": [], 
        "path": "php/gmagickdraw.getstrokeopacity", 
        "syntax": "public float GmagickDraw::getstrokeopacity ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokewidth": {
        "descr": "Returns the width of the stroke used to draw object outlines.", 
        "name": "GmagickDraw::getstrokewidth", 
        "params": [], 
        "path": "php/gmagickdraw.getstrokewidth", 
        "syntax": "public float GmagickDraw::getstrokewidth ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::gettextdecoration": {
        "descr": "Returns the decoration applied when annotating with text.", 
        "name": "GmagickDraw::gettextdecoration", 
        "params": [], 
        "path": "php/gmagickdraw.gettextdecoration", 
        "syntax": "public int GmagickDraw::gettextdecoration ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::gettextencoding": {
        "descr": "Returns a string which specifies the code set used for text annotations.", 
        "name": "GmagickDraw::gettextencoding", 
        "params": [], 
        "path": "php/gmagickdraw.gettextencoding", 
        "syntax": "public string GmagickDraw::gettextencoding ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::line": {
        "descr": "Draws a line on the image using the current stroke color, stroke opacity, and stroke width.", 
        "name": "GmagickDraw::line", 
        "params": [
            {
                "descr": "starting x ordinate", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate", 
                "name": "ey"
            }
        ], 
        "path": "php/gmagickdraw.line", 
        "syntax": "public GmagickDraw GmagickDraw::line ( float $sx , float $sy , float $ex , float $ey )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::point": {
        "descr": "Draws a point using the current stroke color and stroke thickness at the specified coordinates.", 
        "name": "GmagickDraw::point", 
        "params": [
            {
                "descr": "target x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "target y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/gmagickdraw.point", 
        "syntax": "public GmagickDraw GmagickDraw::point ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::polygon": {
        "descr": "Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.", 
        "name": "GmagickDraw::polygon", 
        "params": [
            {
                "descr": "coordinate array", 
                "name": "coordinates"
            }
        ], 
        "path": "php/gmagickdraw.polygon", 
        "syntax": "public GmagickDraw GmagickDraw::polygon ( array $coordinates )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::polyline": {
        "descr": "Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.", 
        "name": "GmagickDraw::polyline", 
        "params": [
            {
                "descr": "The array of coordinates", 
                "name": "coordinate_array"
            }
        ], 
        "path": "php/gmagickdraw.polyline", 
        "syntax": "public GmagickDraw GmagickDraw::polyline ( array $coordinate_array )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::rectangle": {
        "descr": "Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.", 
        "name": "GmagickDraw::rectangle", 
        "params": [
            {
                "descr": "x ordinate of first coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "y ordinate of first coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "x ordinate of second coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "y ordinate of second coordinate", 
                "name": "y2"
            }
        ], 
        "path": "php/gmagickdraw.rectangle", 
        "syntax": "public GmagickDraw GmagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::rotate": {
        "descr": "Applies the specified rotation to the current coordinate space.", 
        "name": "GmagickDraw::rotate", 
        "params": [
            {
                "descr": "degrees of rotation", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagickdraw.rotate", 
        "syntax": "public GmagickDraw GmagickDraw::rotate ( float $degrees )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::roundrectangle": {
        "descr": "Draws a rounded rectangle given two coordinates, x and y corner radiuses and using the current stroke, stroke width, and fill settings.", 
        "name": "GmagickDraw::roundrectangle", 
        "params": [
            {
                "descr": "x ordinate of first coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "y ordinate of first coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "x ordinate of second coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "y ordinate of second coordinate", 
                "name": "y2"
            }, 
            {
                "descr": "radius of corner in horizontal direction", 
                "name": "rx"
            }, 
            {
                "descr": "radius of corner in vertical direction", 
                "name": "ry"
            }
        ], 
        "path": "php/gmagickdraw.roundrectangle", 
        "syntax": "public GmagickDraw GmagickDraw::roundrectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::scale": {
        "descr": "Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.", 
        "name": "GmagickDraw::scale", 
        "params": [
            {
                "descr": "horizontal scale factor", 
                "name": "x"
            }, 
            {
                "descr": "vertical scale factor", 
                "name": "y"
            }
        ], 
        "path": "php/gmagickdraw.scale", 
        "syntax": "public GmagickDraw GmagickDraw::scale ( float $x , float $y )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfillcolor": {
        "descr": "Sets the fill color to be used for drawing filled objects.", 
        "name": "GmagickDraw::setfillcolor", 
        "params": [
            {
                "descr": "GmagickPixel indicating color to use for filling.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickdraw.setfillcolor", 
        "syntax": "public GmagickDraw GmagickDraw::setfillcolor ( string $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfillopacity": {
        "descr": "Sets the opacity to use when drawing using the fill color or fill texture. Setting it to 1.0 will make fill full opaque.", 
        "name": "GmagickDraw::setfillopacity", 
        "params": [
            {
                "descr": "Fill opacity", 
                "name": "fill_opacity"
            }
        ], 
        "path": "php/gmagickdraw.setfillopacity", 
        "syntax": "public GmagickDraw GmagickDraw::setfillopacity ( float $fill_opacity )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfont": {
        "descr": "Sets the fully-specified font to use when annotating with text", 
        "name": "GmagickDraw::setfont", 
        "params": [
            {
                "descr": "font name", 
                "name": "font"
            }
        ], 
        "path": "php/gmagickdraw.setfont", 
        "syntax": "public GmagickDraw GmagickDraw::setfont ( string $font )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontsize": {
        "descr": "Sets the font pointsize to use when annotating with text.", 
        "name": "GmagickDraw::setfontsize", 
        "params": [
            {
                "descr": "Text pointsize", 
                "name": "pointsize"
            }
        ], 
        "path": "php/gmagickdraw.setfontsize", 
        "syntax": "public GmagickDraw GmagickDraw::setfontsize ( float $pointsize )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontstyle": {
        "descr": "Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card \"don't care\" option.", 
        "name": "GmagickDraw::setfontstyle", 
        "params": [
            {
                "descr": "Font style (NormalStyle, ItalicStyle, ObliqueStyle, AnyStyle)", 
                "name": "style"
            }
        ], 
        "path": "php/gmagickdraw.setfontstyle", 
        "syntax": "public GmagickDraw GmagickDraw::setfontstyle ( int $style )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontweight": {
        "descr": "Sets the font weight to use when annotating with text.", 
        "name": "GmagickDraw::setfontweight", 
        "params": [
            {
                "descr": "Font weight (valid range 100-900)", 
                "name": "weight"
            }
        ], 
        "path": "php/gmagickdraw.setfontweight", 
        "syntax": "public GmagickDraw GmagickDraw::setfontweight ( int $weight )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokecolor": {
        "descr": "Sets the color used for stroking object outlines.", 
        "name": "GmagickDraw::setstrokecolor", 
        "params": [
            {
                "descr": "GmagickPixel representing the color for the stroke.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickdraw.setstrokecolor", 
        "syntax": "public GmagickDraw GmagickDraw::setstrokecolor ( GmagickPixel $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokeopacity": {
        "descr": "Specifies the opacity of stroked object outlines.", 
        "name": "GmagickDraw::setstrokeopacity", 
        "params": [
            {
                "descr": "Stroke opacity. The value 1.0 is opaque.", 
                "name": "stroke_opacity"
            }
        ], 
        "path": "php/gmagickdraw.setstrokeopacity", 
        "syntax": "public GmagickDraw GmagickDraw::setstrokeopacity ( float $stroke_opacity )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokewidth": {
        "descr": "Sets the width of the stroke used to draw object outlines", 
        "name": "GmagickDraw::setstrokewidth", 
        "params": [
            {
                "descr": "Stroke width", 
                "name": "width"
            }
        ], 
        "path": "php/gmagickdraw.setstrokewidth", 
        "syntax": "public GmagickDraw GmagickDraw::setstrokewidth ( float $width )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::settextdecoration": {
        "descr": "Specifies a decoration to be applied when annotating with text.", 
        "name": "GmagickDraw::settextdecoration", 
        "params": [
            {
                "descr": "Text decoration. One of NoDecoration, UnderlineDecoration, OverlineDecoration, or LineThroughDecoration", 
                "name": "int"
            }
        ], 
        "path": "php/gmagickdraw.settextdecoration", 
        "syntax": "public GmagickDraw GmagickDraw::settextdecoration ( int $decoration )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::settextencoding": {
        "descr": "Specifies specifies the code set to use for text annotations. The only character encoding which may be specified at this time is \"UTF-8\" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.", 
        "name": "GmagickDraw::settextencoding", 
        "params": [
            {
                "descr": "Character string specifying text encoding", 
                "name": "encoding"
            }
        ], 
        "path": "php/gmagickdraw.settextencoding", 
        "syntax": "public GmagickDraw GmagickDraw::settextencoding ( string $encoding )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel": {
        "descr": "", 
        "name": "GmagickPixel", 
        "params": [], 
        "path": "php/class.gmagickpixel", 
        "syntax": "public __construct ([ string $color ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::__construct": {
        "descr": "Constructs an GmagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.", 
        "name": "GmagickPixel::__construct", 
        "params": [
            {
                "descr": "The optional color string to use as the initial value of this object.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.construct", 
        "syntax": "public GmagickPixel::__construct ([ string $color ] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolor": {
        "descr": "Returns the color described by the GmagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.", 
        "name": "GmagickPixel::getcolor", 
        "params": [
            {
                "descr": "True to indicate return of array instead of string", 
                "name": "as_array"
            }, 
            {
                "descr": "Normalize the color values", 
                "name": "normalize_array"
            }
        ], 
        "path": "php/gmagickpixel.getcolor", 
        "syntax": "public mixed GmagickPixel::getcolor ([ bool $as_array [, bool $normalize_array ]] )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolorcount": {
        "descr": "Returns the color count associated with this color", 
        "name": "GmagickPixel::getcolorcount", 
        "params": [], 
        "path": "php/gmagickpixel.getcolorcount", 
        "syntax": "public int GmagickPixel::getcolorcount ( void )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolorvalue": {
        "descr": "Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.", 
        "name": "GmagickPixel::getcolorvalue", 
        "params": [
            {
                "descr": "The channel to check, specified as one of the Gmagick channel constants.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.getcolorvalue", 
        "syntax": "public float GmagickPixel::getcolorvalue ( int $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::setcolor": {
        "descr": "Sets the color described by the GmagickPixel object, with a string (e.g. \"blue\", \"#0000ff\", \"rgb(0,0,255)\", \"cmyk(100,100,100,10)\", etc.).", 
        "name": "GmagickPixel::setcolor", 
        "params": [
            {
                "descr": "The color definition to use in order to initialise the GmagickPixel object.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.setcolor", 
        "syntax": "public GmagickPixel GmagickPixel::setcolor ( string $color )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::setcolorvalue": {
        "descr": "Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to a GmagickPixel object.", 
        "name": "GmagickPixel::setcolorvalue", 
        "params": [
            {
                "descr": "One of the Gmagick channel color constants.", 
                "name": "color"
            }, 
            {
                "descr": "The value to set this channel to, ranging from 0 to 1.", 
                "name": "value"
            }
        ], 
        "path": "php/gmagickpixel.setcolorvalue", 
        "syntax": "public GmagickPixel GmagickPixel::setcolorvalue ( int $color , float $value )", 
        "type": "Image/GraphicsMagick"
    }, 
    "GregorianToJD": {
        "descr": "Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.", 
        "name": "GregorianToJD", 
        "params": [
            {
                "descr": "The month as a number from 1 (for January) to 12 (for December)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 31", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between -4714 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.gregoriantojd", 
        "syntax": "int gregoriantojd ( int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "HttpDeflateStream": {
        "descr": "", 
        "name": "HttpDeflateStream", 
        "params": [], 
        "path": "php/class.httpdeflatestream", 
        "syntax": "public __construct ([ int $flags = 0 ] )", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::__construct": {
        "descr": "Creates a new HttpDeflateStream object instance.", 
        "name": "HttpDeflateStream::__construct", 
        "params": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }
        ], 
        "path": "php/httpdeflatestream.construct", 
        "syntax": "public HttpDeflateStream::__construct ([ int $flags = 0 ] )", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::factory": {
        "descr": "Creates a new HttpDeflateStream object instance.", 
        "name": "HttpDeflateStream::factory", 
        "params": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }, 
            {
                "descr": "name of a subclass of HttpDeflateStream", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpdeflatestream.factory", 
        "syntax": "static public HttpDeflateStream HttpDeflateStream::factory ([ int $flags = 0 [, string $class_name = \"HttpDeflateStream\" ]] )", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::finish": {
        "descr": "Finalizes the deflate stream. The deflate stream can be reused after finalizing.", 
        "name": "HttpDeflateStream::finish", 
        "params": [
            {
                "descr": "data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.finish", 
        "syntax": "public string HttpDeflateStream::finish ([ string $data ] )", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::flush": {
        "descr": "Flushes the deflate stream.", 
        "name": "HttpDeflateStream::flush", 
        "params": [
            {
                "descr": "more data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.flush", 
        "syntax": "public string HttpDeflateStream::flush ([ string $data ] )", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::update": {
        "descr": "Passes more data through the deflate stream.", 
        "name": "HttpDeflateStream::update", 
        "params": [
            {
                "descr": "data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.update", 
        "syntax": "public string HttpDeflateStream::update ( string $data )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream": {
        "descr": "", 
        "name": "HttpInflateStream", 
        "params": [], 
        "path": "php/class.httpinflatestream", 
        "syntax": "public __construct ([ int $flags = 0 ] )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::__construct": {
        "descr": "Creates a new HttpInflateStream object instance.", 
        "name": "HttpInflateStream::__construct", 
        "params": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }
        ], 
        "path": "php/httpinflatestream.construct", 
        "syntax": "public HttpInflateStream::__construct ([ int $flags = 0 ] )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::factory": {
        "descr": "Creates a new HttpInflateStream object instance.", 
        "name": "HttpInflateStream::factory", 
        "params": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }, 
            {
                "descr": "name of a subclass of HttpInflateStream", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpinflatestream.factory", 
        "syntax": "public HttpInflateStream HttpInflateStream::factory ([ int $flags = 0 [, string $class_name = \"HttpInflateStream\" ]] )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::finish": {
        "descr": "Finalizes the inflate stream. The inflate stream can be reused after finalizing.", 
        "name": "HttpInflateStream::finish", 
        "params": [
            {
                "descr": "data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.finish", 
        "syntax": "public string HttpInflateStream::finish ([ string $data ] )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::flush": {
        "descr": "Flushes the inflate stream.", 
        "name": "HttpInflateStream::flush", 
        "params": [
            {
                "descr": "more data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.flush", 
        "syntax": "public string HttpInflateStream::flush ([ string $data ] )", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::update": {
        "descr": "Passes more data through the inflate stream.", 
        "name": "HttpInflateStream::update", 
        "params": [
            {
                "descr": "data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.update", 
        "syntax": "public string HttpInflateStream::update ( string $data )", 
        "type": "HTTP"
    }, 
    "HttpMessage": {
        "descr": "", 
        "name": "HttpMessage", 
        "params": [], 
        "path": "php/class.httpmessage", 
        "syntax": "public void addHeaders ( array $headers [, bool $append = false ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::__construct": {
        "descr": "Instantiate a new HttpMessage object.", 
        "name": "HttpMessage::__construct", 
        "params": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "message"
            }
        ], 
        "path": "php/httpmessage.construct", 
        "syntax": "public HttpMessage::__construct ([ string $message ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::addHeaders": {
        "descr": "Add headers. If append is true, headers with the same name will be separated, else overwritten.", 
        "name": "HttpMessage::addHeaders", 
        "params": [
            {
                "descr": "associative array containing the additional HTTP headers to add to the messages existing headers", 
                "name": "headers"
            }, 
            {
                "descr": "if true, and a header with the same name of one to add exists already, this respective header will be converted to an array containing both header values, otherwise it will be overwritten with the new header value", 
                "name": "append"
            }
        ], 
        "path": "php/httpmessage.addheaders", 
        "syntax": "public void HttpMessage::addHeaders ( array $headers [, bool $append = false ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::detach": {
        "descr": "Returns a clone of an HttpMessage object detached from any parent messages.", 
        "name": "HttpMessage::detach", 
        "params": [], 
        "path": "php/httpmessage.detach", 
        "syntax": "public HttpMessage HttpMessage::detach ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::factory": {
        "descr": "Create an HttpMessage object from a string.", 
        "name": "HttpMessage::factory", 
        "params": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "raw_message"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.factory", 
        "syntax": "static public HttpMessage HttpMessage::factory ([ string $raw_message [, string $class_name = \"HttpMessage\" ]] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::fromEnv": {
        "descr": "Create an HttpMessage object from script environment.", 
        "name": "HttpMessage::fromEnv", 
        "params": [
            {
                "descr": "The message type. See HttpMessage type constants.", 
                "name": "message_type"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.fromenv", 
        "syntax": "static public HttpMessage HttpMessage::fromEnv ( int $message_type [, string $class_name = \"HttpMessage\" ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::fromString": {
        "descr": "Create an HttpMessage object from a string.", 
        "name": "HttpMessage::fromString", 
        "params": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "raw_message"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.fromstring", 
        "syntax": "static public HttpMessage HttpMessage::fromString ([ string $raw_message [, string $class_name = \"HttpMessage\" ]] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getBody": {
        "descr": "Get the body of the parsed HttpMessage.", 
        "name": "HttpMessage::getBody", 
        "params": [], 
        "path": "php/httpmessage.getbody", 
        "syntax": "public string HttpMessage::getBody ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHeader": {
        "descr": "Get message header.", 
        "name": "HttpMessage::getHeader", 
        "params": [
            {
                "descr": "header name", 
                "name": "header"
            }
        ], 
        "path": "php/httpmessage.getheader", 
        "syntax": "public string HttpMessage::getHeader ( string $header )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHeaders": {
        "descr": "Get message headers.", 
        "name": "HttpMessage::getHeaders", 
        "params": [], 
        "path": "php/httpmessage.getheaders", 
        "syntax": "public array HttpMessage::getHeaders ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHttpVersion": {
        "descr": "Get the HTTP Protocol Version of the Message.", 
        "name": "HttpMessage::getHttpVersion", 
        "params": [], 
        "path": "php/httpmessage.gethttpversion", 
        "syntax": "public string HttpMessage::getHttpVersion ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getParentMessage": {
        "descr": "Get parent Message.", 
        "name": "HttpMessage::getParentMessage", 
        "params": [], 
        "path": "php/httpmessage.getparentmessage", 
        "syntax": "public HttpMessage HttpMessage::getParentMessage ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getRequestMethod": {
        "descr": "Get the Request Method of the Message.", 
        "name": "HttpMessage::getRequestMethod", 
        "params": [], 
        "path": "php/httpmessage.getrequestmethod", 
        "syntax": "public string HttpMessage::getRequestMethod ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getRequestUrl": {
        "descr": "Get the Request URL of the Message.", 
        "name": "HttpMessage::getRequestUrl", 
        "params": [], 
        "path": "php/httpmessage.getrequesturl", 
        "syntax": "public string HttpMessage::getRequestUrl ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getResponseCode": {
        "descr": "Get the Response Code of the Message.", 
        "name": "HttpMessage::getResponseCode", 
        "params": [], 
        "path": "php/httpmessage.getresponsecode", 
        "syntax": "public int HttpMessage::getResponseCode ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getResponseStatus": {
        "descr": "Get the Response Status of the message (i.e. the string following the response code).", 
        "name": "HttpMessage::getResponseStatus", 
        "params": [], 
        "path": "php/httpmessage.getresponsestatus", 
        "syntax": "public string HttpMessage::getResponseStatus ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::getType": {
        "descr": "Get Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.", 
        "name": "HttpMessage::getType", 
        "params": [], 
        "path": "php/httpmessage.gettype", 
        "syntax": "public int HttpMessage::getType ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::guessContentType": {
        "descr": "Attempts to guess the content type of the message body through libmagic.", 
        "name": "HttpMessage::guessContentType", 
        "params": [
            {
                "descr": "the magic.mime database to use", 
                "name": "magic_file"
            }, 
            {
                "descr": "flags for libmagic", 
                "name": "magic_mode"
            }
        ], 
        "path": "php/httpmessage.guesscontenttype", 
        "syntax": "public string HttpMessage::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::prepend": {
        "descr": "Prepends message(s) to the HTTP message.", 
        "name": "HttpMessage::prepend", 
        "params": [
            {
                "descr": "HttpMessage object to prepend", 
                "name": "message"
            }, 
            {
                "descr": "whether to prepend to the top most or right this message", 
                "name": "top"
            }
        ], 
        "path": "php/httpmessage.prepend", 
        "syntax": "public void HttpMessage::prepend ( HttpMessage $message [, bool $top = true ] )", 
        "type": "HTTP"
    }, 
    "HttpMessage::reverse": {
        "descr": "Reorders the message chain in reverse order.", 
        "name": "HttpMessage::reverse", 
        "params": [], 
        "path": "php/httpmessage.reverse", 
        "syntax": "public HttpMessage HttpMessage::reverse ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::send": {
        "descr": "Send the Message according to its type as Response or Request.", 
        "name": "HttpMessage::send", 
        "params": [], 
        "path": "php/httpmessage.send", 
        "syntax": "public bool HttpMessage::send ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setBody": {
        "descr": "Set the body of the HttpMessage.", 
        "name": "HttpMessage::setBody", 
        "params": [
            {
                "descr": "the new body of the message", 
                "name": "body"
            }
        ], 
        "path": "php/httpmessage.setbody", 
        "syntax": "public void HttpMessage::setBody ( string $body )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setHeaders": {
        "descr": "Sets new headers.", 
        "name": "HttpMessage::setHeaders", 
        "params": [
            {
                "descr": "associative array containing the new HTTP headers, which will replace all previous HTTP headers of the message", 
                "name": "headers"
            }
        ], 
        "path": "php/httpmessage.setheaders", 
        "syntax": "public void HttpMessage::setHeaders ( array $headers )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setHttpVersion": {
        "descr": "Set the HTTP Protocol version of the Message.", 
        "name": "HttpMessage::setHttpVersion", 
        "params": [
            {
                "descr": "the HTTP protocol version", 
                "name": "version"
            }
        ], 
        "path": "php/httpmessage.sethttpversion", 
        "syntax": "public bool HttpMessage::setHttpVersion ( string $version )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setRequestMethod": {
        "descr": "Set the Request Method of the HTTP Message.", 
        "name": "HttpMessage::setRequestMethod", 
        "params": [
            {
                "descr": "the request method name", 
                "name": "method"
            }
        ], 
        "path": "php/httpmessage.setrequestmethod", 
        "syntax": "public bool HttpMessage::setRequestMethod ( string $method )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setRequestUrl": {
        "descr": "Set the Request URL of the HTTP Message.", 
        "name": "HttpMessage::setRequestUrl", 
        "params": [
            {
                "descr": "the request URL", 
                "name": "url"
            }
        ], 
        "path": "php/httpmessage.setrequesturl", 
        "syntax": "public bool HttpMessage::setRequestUrl ( string $url )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setResponseCode": {
        "descr": "Set the response code of an HTTP Response Message.", 
        "name": "HttpMessage::setResponseCode", 
        "params": [
            {
                "descr": "HTTP response code", 
                "name": "code"
            }
        ], 
        "path": "php/httpmessage.setresponsecode", 
        "syntax": "public bool HttpMessage::setResponseCode ( int $code )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setResponseStatus": {
        "descr": "Set the Response Status of the HTTP message (i.e. the string following the response code).", 
        "name": "HttpMessage::setResponseStatus", 
        "params": [
            {
                "descr": "the response status text", 
                "name": "status"
            }
        ], 
        "path": "php/httpmessage.setresponsestatus", 
        "syntax": "public bool HttpMessage::setResponseStatus ( string $status )", 
        "type": "HTTP"
    }, 
    "HttpMessage::setType": {
        "descr": "Set Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.", 
        "name": "HttpMessage::setType", 
        "params": [
            {
                "descr": "the HttpMessage::TYPE_*", 
                "name": "type"
            }
        ], 
        "path": "php/httpmessage.settype", 
        "syntax": "public void HttpMessage::setType ( int $type )", 
        "type": "HTTP"
    }, 
    "HttpMessage::toMessageTypeObject": {
        "descr": "Creates an object regarding to the type of the message.", 
        "name": "HttpMessage::toMessageTypeObject", 
        "params": [], 
        "path": "php/httpmessage.tomessagetypeobject", 
        "syntax": "public HttpRequest|HttpResponse HttpMessage::toMessageTypeObject ( void )", 
        "type": "HTTP"
    }, 
    "HttpMessage::toString": {
        "descr": "Get the string representation of the Message.", 
        "name": "HttpMessage::toString", 
        "params": [
            {
                "descr": "specifies whether the returned string should also contain any parent messages", 
                "name": "include_parent"
            }
        ], 
        "path": "php/httpmessage.tostring", 
        "syntax": "public string HttpMessage::toString ([ bool $include_parent = false ] )", 
        "type": "HTTP"
    }, 
    "HttpQueryString": {
        "descr": "", 
        "name": "HttpQueryString", 
        "params": [], 
        "path": "php/class.httpquerystring", 
        "syntax": "final public __construct ([ bool $global = true [, mixed $add ]] )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::__construct": {
        "descr": "Creates a new HttpQueryString object instance.", 
        "name": "HttpQueryString::__construct", 
        "params": [
            {
                "descr": "whether to operate on $_GET and $_SERVER['QUERY_STRING']", 
                "name": "global"
            }, 
            {
                "descr": "additional/initial query string parameters", 
                "name": "add"
            }
        ], 
        "path": "php/httpquerystring.construct", 
        "syntax": "final public HttpQueryString::__construct ([ bool $global = true [, mixed $add ]] )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::get": {
        "descr": "Get (part of) the query string.", 
        "name": "HttpQueryString::get", 
        "params": [
            {
                "descr": "key of the query string param to retrieve", 
                "name": "key"
            }, 
            {
                "descr": "which variable type to enforce", 
                "name": "type"
            }, 
            {
                "descr": "default value if key does not exist", 
                "name": "defval"
            }, 
            {
                "descr": "whether to remove the key/value pair from the query string", 
                "name": "delete"
            }
        ], 
        "path": "php/httpquerystring.get", 
        "syntax": "public mixed HttpQueryString::get ([ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]] )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::mod": {
        "descr": "Copies the query string object and sets provided params at the clone.", 
        "name": "HttpQueryString::mod", 
        "params": [
            {
                "descr": "query string params to add", 
                "name": "params"
            }
        ], 
        "path": "php/httpquerystring.mod", 
        "syntax": "public HttpQueryString HttpQueryString::mod ( mixed $params )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::set": {
        "descr": "Set query string entry/entries. NULL values will unset the variable.", 
        "name": "HttpQueryString::set", 
        "params": [
            {
                "descr": "query string params to add", 
                "name": "params"
            }
        ], 
        "path": "php/httpquerystring.set", 
        "syntax": "public string HttpQueryString::set ( mixed $params )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::singleton": {
        "descr": "Get a single instance (differentiates between the global setting).", 
        "name": "HttpQueryString::singleton", 
        "params": [
            {
                "descr": "whether to operate on $_GET and $_SERVER['QUERY_STRING']", 
                "name": "global"
            }
        ], 
        "path": "php/httpquerystring.singleton", 
        "syntax": "static public HttpQueryString HttpQueryString::singleton ([ bool $global = true ] )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::toArray": {
        "descr": "Get the query string represented as associative array.", 
        "name": "HttpQueryString::toArray", 
        "params": [], 
        "path": "php/httpquerystring.toarray", 
        "syntax": "public array HttpQueryString::toArray ( void )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::toString": {
        "descr": "Get the query string.", 
        "name": "HttpQueryString::toString", 
        "params": [], 
        "path": "php/httpquerystring.tostring", 
        "syntax": "public string HttpQueryString::toString ( void )", 
        "type": "HTTP"
    }, 
    "HttpQueryString::xlate": {
        "descr": "Converts the query string from the source encoding ie to the target encoding oe.", 
        "name": "HttpQueryString::xlate", 
        "params": [
            {
                "descr": "input encoding", 
                "name": "ie"
            }, 
            {
                "descr": "output encoding", 
                "name": "oe"
            }
        ], 
        "path": "php/httpquerystring.xlate", 
        "syntax": "public bool HttpQueryString::xlate ( string $ie , string $oe )", 
        "type": "HTTP"
    }, 
    "HttpRequest": {
        "descr": "", 
        "name": "HttpRequest", 
        "params": [], 
        "path": "php/class.httprequest", 
        "syntax": "public bool addCookies ( array $cookies )", 
        "type": "HTTP"
    }, 
    "HttpRequest::__construct": {
        "descr": "Instantiate a new HttpRequest object.", 
        "name": "HttpRequest::__construct", 
        "params": [
            {
                "descr": "the target request url", 
                "name": "url"
            }, 
            {
                "descr": "the request method to use", 
                "name": "request_method"
            }, 
            {
                "descr": "an associative array with request options", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.construct", 
        "syntax": "public HttpRequest::__construct ([ string $url [, int $request_method = HTTP_METH_GET [, array $options ]]] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addCookies": {
        "descr": "Add custom cookies.", 
        "name": "HttpRequest::addCookies", 
        "params": [
            {
                "descr": "an associative array containing any cookie name/value pairs to add", 
                "name": "cookies"
            }
        ], 
        "path": "php/httprequest.addcookies", 
        "syntax": "public bool HttpRequest::addCookies ( array $cookies )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addHeaders": {
        "descr": "Add request header name/value pairs.", 
        "name": "HttpRequest::addHeaders", 
        "params": [
            {
                "descr": "an associative array as parameter containing additional header name/value pairs", 
                "name": "headers"
            }
        ], 
        "path": "php/httprequest.addheaders", 
        "syntax": "public bool HttpRequest::addHeaders ( array $headers )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPostFields": {
        "descr": "Adds POST data entries, leaving previously set unchanged, unless a post entry with the same name already exists.", 
        "name": "HttpRequest::addPostFields", 
        "params": [
            {
                "descr": "an associative array as parameter containing the post fields", 
                "name": "post_data"
            }
        ], 
        "path": "php/httprequest.addpostfields", 
        "syntax": "public bool HttpRequest::addPostFields ( array $post_data )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPostFile": {
        "descr": "Add a file to the POST request, leaving previously set files unchanged.", 
        "name": "HttpRequest::addPostFile", 
        "params": [
            {
                "descr": "the form element name", 
                "name": "name"
            }, 
            {
                "descr": "the path to the file", 
                "name": "file"
            }, 
            {
                "descr": "the content type of the file", 
                "name": "content_type"
            }
        ], 
        "path": "php/httprequest.addpostfile", 
        "syntax": "public bool HttpRequest::addPostFile ( string $name , string $file [, string $content_type = \"application/x-octetstream\" ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPutData": {
        "descr": "Add PUT data, leaving previously set PUT data unchanged.", 
        "name": "HttpRequest::addPutData", 
        "params": [
            {
                "descr": "the data to concatenate", 
                "name": "put_data"
            }
        ], 
        "path": "php/httprequest.addputdata", 
        "syntax": "public bool HttpRequest::addPutData ( string $put_data )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addQueryData": {
        "descr": "Add parameters to the query parameter list, leaving previously set unchanged.", 
        "name": "HttpRequest::addQueryData", 
        "params": [
            {
                "descr": "an associative array as parameter containing the query fields to add", 
                "name": "query_params"
            }
        ], 
        "path": "php/httprequest.addquerydata", 
        "syntax": "public bool HttpRequest::addQueryData ( array $query_params )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addRawPostData": {
        "descr": "Add raw post data, leaving previously set raw post data unchanged.", 
        "name": "HttpRequest::addRawPostData", 
        "params": [
            {
                "descr": "the raw post data to concatenate", 
                "name": "raw_post_data"
            }
        ], 
        "path": "php/httprequest.addrawpostdata", 
        "syntax": "public bool HttpRequest::addRawPostData ( string $raw_post_data )", 
        "type": "HTTP"
    }, 
    "HttpRequest::addSslOptions": {
        "descr": "Set additional SSL options.", 
        "name": "HttpRequest::addSslOptions", 
        "params": [
            {
                "descr": "an associative array as parameter containing additional SSL specific options", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.addssloptions", 
        "syntax": "public bool HttpRequest::addSslOptions ( array $options )", 
        "type": "HTTP"
    }, 
    "HttpRequest::clearHistory": {
        "descr": "Clears all history messages.", 
        "name": "HttpRequest::clearHistory", 
        "params": [], 
        "path": "php/httprequest.clearhistory", 
        "syntax": "public void HttpRequest::clearHistory ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::enableCookies": {
        "descr": "Enable automatic sending of received cookies.", 
        "name": "HttpRequest::enableCookies", 
        "params": [], 
        "path": "php/httprequest.enablecookies", 
        "syntax": "public bool HttpRequest::enableCookies ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getContentType": {
        "descr": "Get the previously set content type.", 
        "name": "HttpRequest::getContentType", 
        "params": [], 
        "path": "php/httprequest.getcontenttype", 
        "syntax": "public string HttpRequest::getContentType ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getCookies": {
        "descr": "Get previously set cookies.", 
        "name": "HttpRequest::getCookies", 
        "params": [], 
        "path": "php/httprequest.getcookies", 
        "syntax": "public array HttpRequest::getCookies ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getHeaders": {
        "descr": "Get previously set request headers.", 
        "name": "HttpRequest::getHeaders", 
        "params": [], 
        "path": "php/httprequest.getheaders", 
        "syntax": "public array HttpRequest::getHeaders ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getHistory": {
        "descr": "Get all sent requests and received responses as an HttpMessage object.", 
        "name": "HttpRequest::getHistory", 
        "params": [], 
        "path": "php/httprequest.gethistory", 
        "syntax": "public HttpMessage HttpRequest::getHistory ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getMethod": {
        "descr": "Get the previously set request method.", 
        "name": "HttpRequest::getMethod", 
        "params": [], 
        "path": "php/httprequest.getmethod", 
        "syntax": "public int HttpRequest::getMethod ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getOptions": {
        "descr": "Get currently set options.", 
        "name": "HttpRequest::getOptions", 
        "params": [], 
        "path": "php/httprequest.getoptions", 
        "syntax": "public array HttpRequest::getOptions ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPostFields": {
        "descr": "Get previously set POST data.", 
        "name": "HttpRequest::getPostFields", 
        "params": [], 
        "path": "php/httprequest.getpostfields", 
        "syntax": "public array HttpRequest::getPostFields ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPostFiles": {
        "descr": "Get all previously added POST files.", 
        "name": "HttpRequest::getPostFiles", 
        "params": [], 
        "path": "php/httprequest.getpostfiles", 
        "syntax": "public array HttpRequest::getPostFiles ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPutData": {
        "descr": "Get previously set PUT data.", 
        "name": "HttpRequest::getPutData", 
        "params": [], 
        "path": "php/httprequest.getputdata", 
        "syntax": "public string HttpRequest::getPutData ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPutFile": {
        "descr": "Get previously set put file.", 
        "name": "HttpRequest::getPutFile", 
        "params": [], 
        "path": "php/httprequest.getputfile", 
        "syntax": "public string HttpRequest::getPutFile ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getQueryData": {
        "descr": "Get the current query data in form of an urlencoded query string.", 
        "name": "HttpRequest::getQueryData", 
        "params": [], 
        "path": "php/httprequest.getquerydata", 
        "syntax": "public string HttpRequest::getQueryData ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawPostData": {
        "descr": "Get previously set raw post data.", 
        "name": "HttpRequest::getRawPostData", 
        "params": [], 
        "path": "php/httprequest.getrawpostdata", 
        "syntax": "public string HttpRequest::getRawPostData ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawRequestMessage": {
        "descr": "Get sent HTTP message.", 
        "name": "HttpRequest::getRawRequestMessage", 
        "params": [], 
        "path": "php/httprequest.getrawrequestmessage", 
        "syntax": "public string HttpRequest::getRawRequestMessage ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawResponseMessage": {
        "descr": "Get the entire HTTP response.", 
        "name": "HttpRequest::getRawResponseMessage", 
        "params": [], 
        "path": "php/httprequest.getrawresponsemessage", 
        "syntax": "public string HttpRequest::getRawResponseMessage ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRequestMessage": {
        "descr": "Get sent HTTP message.", 
        "name": "HttpRequest::getRequestMessage", 
        "params": [], 
        "path": "php/httprequest.getrequestmessage", 
        "syntax": "public HttpMessage HttpRequest::getRequestMessage ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseBody": {
        "descr": "Get the response body after the request has been sent.", 
        "name": "HttpRequest::getResponseBody", 
        "params": [], 
        "path": "php/httprequest.getresponsebody", 
        "syntax": "public string HttpRequest::getResponseBody ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseCode": {
        "descr": "Get the response code after the request has been sent.", 
        "name": "HttpRequest::getResponseCode", 
        "params": [], 
        "path": "php/httprequest.getresponsecode", 
        "syntax": "public int HttpRequest::getResponseCode ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseCookies": {
        "descr": "Get response cookie(s) after the request has been sent.", 
        "name": "HttpRequest::getResponseCookies", 
        "params": [
            {
                "descr": "http_parse_cookie() flags", 
                "name": "flags"
            }, 
            {
                "descr": "allowed keys treated as extra information instead of cookie names", 
                "name": "allowed_extras"
            }
        ], 
        "path": "php/httprequest.getresponsecookies", 
        "syntax": "public array HttpRequest::getResponseCookies ([ int $flags = 0 [, array $allowed_extras ]] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseData": {
        "descr": "* Get all response data after the request has been sent.", 
        "name": "HttpRequest::getResponseData", 
        "params": [], 
        "path": "php/httprequest.getresponsedata", 
        "syntax": "public array HttpRequest::getResponseData ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseHeader": {
        "descr": "Get response header(s) after the request has been sent.", 
        "name": "HttpRequest::getResponseHeader", 
        "params": [
            {
                "descr": "header to read; if empty, all response headers will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httprequest.getresponseheader", 
        "syntax": "public mixed HttpRequest::getResponseHeader ([ string $name ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseInfo": {
        "descr": "Get response info after the request has been sent.", 
        "name": "HttpRequest::getResponseInfo", 
        "params": [
            {
                "descr": "the info to read; if empty or omitted, an associative array containing all available info will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httprequest.getresponseinfo", 
        "syntax": "public mixed HttpRequest::getResponseInfo ([ string $name ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseMessage": {
        "descr": "Get the full response as HttpMessage object after the request has been sent.", 
        "name": "HttpRequest::getResponseMessage", 
        "params": [], 
        "path": "php/httprequest.getresponsemessage", 
        "syntax": "public HttpMessage HttpRequest::getResponseMessage ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseStatus": {
        "descr": "Get the response status (i.e. the string after the response code) after the message has been sent.", 
        "name": "HttpRequest::getResponseStatus", 
        "params": [], 
        "path": "php/httprequest.getresponsestatus", 
        "syntax": "public string HttpRequest::getResponseStatus ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getSslOptions": {
        "descr": "Get previously set SSL options.", 
        "name": "HttpRequest::getSslOptions", 
        "params": [], 
        "path": "php/httprequest.getssloptions", 
        "syntax": "public array HttpRequest::getSslOptions ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::getUrl": {
        "descr": "Get the previously set request URL.", 
        "name": "HttpRequest::getUrl", 
        "params": [], 
        "path": "php/httprequest.geturl", 
        "syntax": "public string HttpRequest::getUrl ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::resetCookies": {
        "descr": "Reset all automatically received/sent cookies.", 
        "name": "HttpRequest::resetCookies", 
        "params": [
            {
                "descr": "whether only session cookies should be reset (needs libcurl >= v7.15.4, else libcurl >= v7.14.1)", 
                "name": "session_only"
            }
        ], 
        "path": "php/httprequest.resetcookies", 
        "syntax": "public bool HttpRequest::resetCookies ([ bool $session_only = false ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::send": {
        "descr": "Send the HTTP request.", 
        "name": "HttpRequest::send", 
        "params": [], 
        "path": "php/httprequest.send", 
        "syntax": "public HttpMessage HttpRequest::send ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setBody": {
        "descr": "Set request body to send, overwriting previously set request body.", 
        "name": "HttpRequest::setBody", 
        "params": [
            {
                "descr": "The request body to overwrite the existing request body with. ", 
                "name": "request_body_data"
            }
        ], 
        "path": "php/httprequest.setbody", 
        "syntax": "bool HttpRequest::setBody ([ string $request_body_data ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setContentType": {
        "descr": "Set the content type the post request should have.", 
        "name": "HttpRequest::setContentType", 
        "params": [
            {
                "descr": "the content type of the request (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/httprequest.setcontenttype", 
        "syntax": "public bool HttpRequest::setContentType ( string $content_type )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setCookies": {
        "descr": "Set custom cookies.", 
        "name": "HttpRequest::setCookies", 
        "params": [
            {
                "descr": "an associative array as parameter containing cookie name/value pairs; if empty or omitted, all previously set cookies will be unset", 
                "name": "cookies"
            }
        ], 
        "path": "php/httprequest.setcookies", 
        "syntax": "public bool HttpRequest::setCookies ([ array $cookies ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setHeaders": {
        "descr": "Set request header name/value pairs.", 
        "name": "HttpRequest::setHeaders", 
        "params": [
            {
                "descr": "an associative array as parameter containing header name/value pairs; if empty or omitted, all previously set headers will be unset", 
                "name": "headers"
            }
        ], 
        "path": "php/httprequest.setheaders", 
        "syntax": "public bool HttpRequest::setHeaders ([ array $headers ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setMethod": {
        "descr": "Set the request method.", 
        "name": "HttpRequest::setMethod", 
        "params": [
            {
                "descr": "the request method to use", 
                "name": "request_method"
            }
        ], 
        "path": "php/httprequest.setmethod", 
        "syntax": "public bool HttpRequest::setMethod ( int $request_method )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setOptions": {
        "descr": "Set the request options to use.", 
        "name": "HttpRequest::setOptions", 
        "params": [
            {
                "descr": "an associative array, which values will overwrite the currently set request options; if empty or omitted, the options of the HttpRequest object will be reset", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.setoptions", 
        "syntax": "public bool HttpRequest::setOptions ([ array $options ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPostFields": {
        "descr": "Set the POST data entries, overwriting previously set POST data.", 
        "name": "HttpRequest::setPostFields", 
        "params": [
            {
                "descr": "an associative array containing the post fields; if empty, the post data will be unset", 
                "name": "post_data"
            }
        ], 
        "path": "php/httprequest.setpostfields", 
        "syntax": "public bool HttpRequest::setPostFields ( array $post_data )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPostFiles": {
        "descr": "Set files to post, overwriting previously set post files.", 
        "name": "HttpRequest::setPostFiles", 
        "params": [
            {
                "descr": "an array containing the files to post; if empty, the post files will be unset", 
                "name": "post_files"
            }
        ], 
        "path": "php/httprequest.setpostfiles", 
        "syntax": "public bool HttpRequest::setPostFiles ( array $post_files )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPutData": {
        "descr": "Set PUT data to send, overwriting previously set PUT data.", 
        "name": "HttpRequest::setPutData", 
        "params": [
            {
                "descr": "the data to upload", 
                "name": "put_data"
            }
        ], 
        "path": "php/httprequest.setputdata", 
        "syntax": "public bool HttpRequest::setPutData ([ string $put_data ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPutFile": {
        "descr": "Set file to put. Affects only PUT requests.", 
        "name": "HttpRequest::setPutFile", 
        "params": [
            {
                "descr": "the path to the file to send; if empty or omitted the put file will be unset", 
                "name": "file"
            }
        ], 
        "path": "php/httprequest.setputfile", 
        "syntax": "public bool HttpRequest::setPutFile ([ string $file = \"\" ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setQueryData": {
        "descr": "Set the URL query parameters to use, overwriting previously set query parameters.", 
        "name": "HttpRequest::setQueryData", 
        "params": [
            {
                "descr": "a string or associative array parameter containing the pre-encoded query string or to be encoded query fields; if empty, the query data will be unset", 
                "name": "query_data"
            }
        ], 
        "path": "php/httprequest.setquerydata", 
        "syntax": "public bool HttpRequest::setQueryData ( mixed $query_data )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setRawPostData": {
        "descr": "Set raw post data to send, overwriting previously set raw post data. Don't forget to specify a content type. Affects only POST and custom requests.", 
        "name": "HttpRequest::setRawPostData", 
        "params": [
            {
                "descr": "raw post data", 
                "name": "raw_post_data"
            }
        ], 
        "path": "php/httprequest.setrawpostdata", 
        "syntax": "public bool HttpRequest::setRawPostData ([ string $raw_post_data ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setSslOptions": {
        "descr": "Set SSL options.", 
        "name": "HttpRequest::setSslOptions", 
        "params": [
            {
                "descr": "an associative array containing any SSL specific options; if empty or omitted, the SSL options will be reset", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.setssloptions", 
        "syntax": "public bool HttpRequest::setSslOptions ([ array $options ] )", 
        "type": "HTTP"
    }, 
    "HttpRequest::setUrl": {
        "descr": "Set the request URL.", 
        "name": "HttpRequest::setUrl", 
        "params": [
            {
                "descr": "the request url", 
                "name": "url"
            }
        ], 
        "path": "php/httprequest.seturl", 
        "syntax": "public bool HttpRequest::setUrl ( string $url )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool": {
        "descr": "", 
        "name": "HttpRequestPool", 
        "params": [], 
        "path": "php/class.httprequestpool", 
        "syntax": "public bool attach ( HttpRequest $request )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::__construct": {
        "descr": "Instantiate a new HttpRequestPool object. An HttpRequestPool is able to send several HttpRequests in parallel.", 
        "name": "HttpRequestPool::__construct", 
        "params": [
            {
                "descr": "HttpRequest object to attach", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.construct", 
        "syntax": "public HttpRequestPool::__construct ([ HttpRequest $request [, HttpRequest $... ]] )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::__destruct": {
        "descr": "Clean up HttpRequestPool object.", 
        "name": "HttpRequestPool::__destruct", 
        "params": [], 
        "path": "php/httprequestpool.destruct", 
        "syntax": "void HttpRequestPool::__destruct ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::attach": {
        "descr": "Attach an HttpRequest object to this HttpRequestPool.", 
        "name": "HttpRequestPool::attach", 
        "params": [
            {
                "descr": "an HttpRequest object not already attached to any HttpRequestPool object", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.attach", 
        "syntax": "public bool HttpRequestPool::attach ( HttpRequest $request )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::detach": {
        "descr": "Detach an HttpRequest object from this HttpRequestPool.", 
        "name": "HttpRequestPool::detach", 
        "params": [
            {
                "descr": "an HttpRequest object attached to this HttpRequestPool object", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.detach", 
        "syntax": "bool HttpRequestPool::detach ( HttpRequest $request )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::getAttachedRequests": {
        "descr": "Get attached HttpRequest objects.", 
        "name": "HttpRequestPool::getAttachedRequests", 
        "params": [], 
        "path": "php/httprequestpool.getattachedrequests", 
        "syntax": "array HttpRequestPool::getAttachedRequests ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::getFinishedRequests": {
        "descr": "Get attached HttpRequest objects that already have finished their work.", 
        "name": "HttpRequestPool::getFinishedRequests", 
        "params": [], 
        "path": "php/httprequestpool.getfinishedrequests", 
        "syntax": "array HttpRequestPool::getFinishedRequests ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::reset": {
        "descr": "Detach all attached HttpRequest objects.", 
        "name": "HttpRequestPool::reset", 
        "params": [], 
        "path": "php/httprequestpool.reset", 
        "syntax": "void HttpRequestPool::reset ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::send": {
        "descr": "Send all attached HttpRequest objects in parallel.", 
        "name": "HttpRequestPool::send", 
        "params": [], 
        "path": "php/httprequestpool.send", 
        "syntax": "bool HttpRequestPool::send ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::socketPerform": {
        "descr": "Returns TRUE until each request has finished its transaction.", 
        "name": "HttpRequestPool::socketPerform", 
        "params": [], 
        "path": "php/httprequestpool.socketperform", 
        "syntax": "protected bool HttpRequestPool::socketPerform ( void )", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::socketSelect": {
        "descr": "", 
        "name": "HttpRequestPool::socketSelect", 
        "params": [], 
        "path": "php/httprequestpool.socketselect", 
        "syntax": "protected bool HttpRequestPool::socketSelect ([ float $timeout = 0 ] )", 
        "type": "HTTP"
    }, 
    "HttpResponse": {
        "descr": "", 
        "name": "HttpResponse", 
        "params": [], 
        "path": "php/class.httpresponse", 
        "syntax": "static void capture ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::capture": {
        "descr": "Capture script output.", 
        "name": "HttpResponse::capture", 
        "params": [], 
        "path": "php/httpresponse.capture", 
        "syntax": "static void HttpResponse::capture ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getBufferSize": {
        "descr": "Get current buffer size.", 
        "name": "HttpResponse::getBufferSize", 
        "params": [], 
        "path": "php/httpresponse.getbuffersize", 
        "syntax": "static int HttpResponse::getBufferSize ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getCache": {
        "descr": "Get current caching setting.", 
        "name": "HttpResponse::getCache", 
        "params": [], 
        "path": "php/httpresponse.getcache", 
        "syntax": "static bool HttpResponse::getCache ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getCacheControl": {
        "descr": "Get current Cache-Control header setting.", 
        "name": "HttpResponse::getCacheControl", 
        "params": [], 
        "path": "php/httpresponse.getcachecontrol", 
        "syntax": "static string HttpResponse::getCacheControl ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getContentDisposition": {
        "descr": "Get current Content-Disposition setting.", 
        "name": "HttpResponse::getContentDisposition", 
        "params": [], 
        "path": "php/httpresponse.getcontentdisposition", 
        "syntax": "static string HttpResponse::getContentDisposition ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getContentType": {
        "descr": "Get current Content-Type header setting.", 
        "name": "HttpResponse::getContentType", 
        "params": [], 
        "path": "php/httpresponse.getcontenttype", 
        "syntax": "static string HttpResponse::getContentType ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getData": {
        "descr": "Get the previously set data to be sent.", 
        "name": "HttpResponse::getData", 
        "params": [], 
        "path": "php/httpresponse.getdata", 
        "syntax": "static string HttpResponse::getData ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getETag": {
        "descr": "Get calculated or previously set custom ETag.", 
        "name": "HttpResponse::getETag", 
        "params": [], 
        "path": "php/httpresponse.getetag", 
        "syntax": "static string HttpResponse::getETag ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getFile": {
        "descr": "Get the previously set file to be sent.", 
        "name": "HttpResponse::getFile", 
        "params": [], 
        "path": "php/httpresponse.getfile", 
        "syntax": "static string HttpResponse::getFile ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getGzip": {
        "descr": "Get current gzip'ing setting.", 
        "name": "HttpResponse::getGzip", 
        "params": [], 
        "path": "php/httpresponse.getgzip", 
        "syntax": "static bool HttpResponse::getGzip ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getHeader": {
        "descr": "Get header(s) about to be sent.", 
        "name": "HttpResponse::getHeader", 
        "params": [
            {
                "descr": "specifies the name of the header to read; if empty or omitted, an associative array with all headers will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httpresponse.getheader", 
        "syntax": "static mixed HttpResponse::getHeader ([ string $name ] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getLastModified": {
        "descr": "Get calculated or previously set custom Last-Modified date.", 
        "name": "HttpResponse::getLastModified", 
        "params": [], 
        "path": "php/httpresponse.getlastmodified", 
        "syntax": "static int HttpResponse::getLastModified ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestBody": {
        "descr": "This function is an alias of: http_get_request_body().", 
        "name": "HttpResponse::getRequestBody", 
        "params": [], 
        "path": "php/httpresponse.getrequestbody", 
        "syntax": "static string HttpResponse::getRequestBody ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestBodyStream": {
        "descr": "This function is an alias of: http_get_request_body_stream().", 
        "name": "HttpResponse::getRequestBodyStream", 
        "params": [], 
        "path": "php/httpresponse.getrequestbodystream", 
        "syntax": "static resource HttpResponse::getRequestBodyStream ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestHeaders": {
        "descr": "This function is an alias of: http_get_request_headers().", 
        "name": "HttpResponse::getRequestHeaders", 
        "params": [], 
        "path": "php/httpresponse.getrequestheaders", 
        "syntax": "static array HttpResponse::getRequestHeaders ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getStream": {
        "descr": "Get the previously set resource to be sent.", 
        "name": "HttpResponse::getStream", 
        "params": [], 
        "path": "php/httpresponse.getstream", 
        "syntax": "static resource HttpResponse::getStream ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::getThrottleDelay": {
        "descr": "Get the current throttle delay.", 
        "name": "HttpResponse::getThrottleDelay", 
        "params": [], 
        "path": "php/httpresponse.getthrottledelay", 
        "syntax": "static float HttpResponse::getThrottleDelay ( void )", 
        "type": "HTTP"
    }, 
    "HttpResponse::guessContentType": {
        "descr": "Attempts to guess the content type of supplied payload through libmagic.", 
        "name": "HttpResponse::guessContentType", 
        "params": [
            {
                "descr": "specifies the magic.mime database to use", 
                "name": "magic_file"
            }, 
            {
                "descr": "flags for libmagic", 
                "name": "magic_mode"
            }
        ], 
        "path": "php/httpresponse.guesscontenttype", 
        "syntax": "static string HttpResponse::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::redirect": {
        "descr": "This function is an alias of: http_redirect().", 
        "name": "HttpResponse::redirect", 
        "params": [], 
        "path": "php/httpresponse.redirect", 
        "syntax": "static void HttpResponse::redirect ([ string $url [, array $params [, bool $session = false [, int $status ]]]] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::send": {
        "descr": "Finally send the entity.", 
        "name": "HttpResponse::send", 
        "params": [
            {
                "descr": "whether to destroy all previously started output handlers and their buffers", 
                "name": "clean_ob"
            }
        ], 
        "path": "php/httpresponse.send", 
        "syntax": "static bool HttpResponse::send ([ bool $clean_ob = true ] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setBufferSize": {
        "descr": "Sets the send buffer size of the throttling mechanism.", 
        "name": "HttpResponse::setBufferSize", 
        "params": [
            {
                "descr": "the chunk size in bytes", 
                "name": "bytes"
            }
        ], 
        "path": "php/httpresponse.setbuffersize", 
        "syntax": "static bool HttpResponse::setBufferSize ( int $bytes )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setCache": {
        "descr": "Whether it should be attempted to cache the entity.", 
        "name": "HttpResponse::setCache", 
        "params": [
            {
                "descr": "whether caching should be attempted", 
                "name": "cache"
            }
        ], 
        "path": "php/httpresponse.setcache", 
        "syntax": "static bool HttpResponse::setCache ( bool $cache )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setCacheControl": {
        "descr": "Define a custom Cache-Control header, usually being private or public;", 
        "name": "HttpResponse::setCacheControl", 
        "params": [
            {
                "descr": "the primary cache control setting", 
                "name": "control"
            }, 
            {
                "descr": "the max-age in seconds, suggesting how long the cache entry is valid on the client side", 
                "name": "max_age"
            }, 
            {
                "descr": "whether the cached entity should be revalidated by the client for every request", 
                "name": "must_revalidate"
            }
        ], 
        "path": "php/httpresponse.setcachecontrol", 
        "syntax": "static bool HttpResponse::setCacheControl ( string $control [, int $max_age = 0 [, bool $must_revalidate = true ]] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setContentDisposition": {
        "descr": "Set the Content-Disposition. The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client/user (i.e. by the browser's \"Save as...\" popup window).", 
        "name": "HttpResponse::setContentDisposition", 
        "params": [
            {
                "descr": "the file name the \"Save as...\" dialog should display", 
                "name": "filename"
            }, 
            {
                "descr": "if set to true and the user agent knows how to handle the content type, it will probably not cause the popup window to be shown", 
                "name": "inline"
            }
        ], 
        "path": "php/httpresponse.setcontentdisposition", 
        "syntax": "static bool HttpResponse::setContentDisposition ( string $filename [, bool $inline = false ] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setContentType": {
        "descr": "Set the Content-Type of the sent entity.", 
        "name": "HttpResponse::setContentType", 
        "params": [
            {
                "descr": "the content type of the sent entity (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/httpresponse.setcontenttype", 
        "syntax": "static bool HttpResponse::setContentType ( string $content_type )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setData": {
        "descr": "Set the data to be sent.", 
        "name": "HttpResponse::setData", 
        "params": [
            {
                "descr": "data to send", 
                "name": "data"
            }
        ], 
        "path": "php/httpresponse.setdata", 
        "syntax": "static bool HttpResponse::setData ( mixed $data )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setETag": {
        "descr": "Set a custom ETag. Use this only if you know what you're doing.", 
        "name": "HttpResponse::setETag", 
        "params": [
            {
                "descr": "unquoted string as parameter containing the ETag", 
                "name": "etag"
            }
        ], 
        "path": "php/httpresponse.setetag", 
        "syntax": "static bool HttpResponse::setETag ( string $etag )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setFile": {
        "descr": "Set the file to be sent.", 
        "name": "HttpResponse::setFile", 
        "params": [
            {
                "descr": "the path to the file to send", 
                "name": "file"
            }
        ], 
        "path": "php/httpresponse.setfile", 
        "syntax": "static bool HttpResponse::setFile ( string $file )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setGzip": {
        "descr": "Enable on-thy-fly gzip'ing of the sent entity.", 
        "name": "HttpResponse::setGzip", 
        "params": [
            {
                "descr": "whether GZip compression should be enabled", 
                "name": "gzip"
            }
        ], 
        "path": "php/httpresponse.setgzip", 
        "syntax": "static bool HttpResponse::setGzip ( bool $gzip )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setHeader": {
        "descr": "Send an HTTP header.", 
        "name": "HttpResponse::setHeader", 
        "params": [
            {
                "descr": "the name of the header", 
                "name": "name"
            }, 
            {
                "descr": "the value of the header; if not set, no header with this name will be sent", 
                "name": "value"
            }, 
            {
                "descr": "whether an existing header should be replaced", 
                "name": "replace"
            }
        ], 
        "path": "php/httpresponse.setheader", 
        "syntax": "static bool HttpResponse::setHeader ( string $name [, mixed $value [, bool $replace = true ]] )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setLastModified": {
        "descr": "Set a custom Last-Modified date.", 
        "name": "HttpResponse::setLastModified", 
        "params": [
            {
                "descr": "Unix timestamp representing the last modification time of the sent entity", 
                "name": "timestamp"
            }
        ], 
        "path": "php/httpresponse.setlastmodified", 
        "syntax": "static bool HttpResponse::setLastModified ( int $timestamp )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setStream": {
        "descr": "Set the resource to be sent.", 
        "name": "HttpResponse::setStream", 
        "params": [
            {
                "descr": "already opened stream from which the data to send will be read", 
                "name": "stream"
            }
        ], 
        "path": "php/httpresponse.setstream", 
        "syntax": "static bool HttpResponse::setStream ( resource $stream )", 
        "type": "HTTP"
    }, 
    "HttpResponse::setThrottleDelay": {
        "descr": "Sets the throttle delay.", 
        "name": "HttpResponse::setThrottleDelay", 
        "params": [
            {
                "descr": "seconds to sleep after each chunk sent", 
                "name": "seconds"
            }
        ], 
        "path": "php/httpresponse.setthrottledelay", 
        "syntax": "static bool HttpResponse::setThrottleDelay ( float $seconds )", 
        "type": "HTTP"
    }, 
    "HttpResponse::status": {
        "descr": "This function is an alias of: http_send_status().", 
        "name": "HttpResponse::status", 
        "params": [], 
        "path": "php/httpresponse.status", 
        "syntax": "static bool HttpResponse::status ( int $status )", 
        "type": "HTTP"
    }, 
    "Imagick": {
        "descr": "", 
        "name": "Imagick", 
        "params": [], 
        "path": "php/class.imagick", 
        "syntax": "bool adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::__construct": {
        "descr": "Creates an Imagick instance for a specified image or set of images.", 
        "name": "Imagick::__construct", 
        "params": [
            {
                "descr": "The path to an image to load or an array of paths. ", 
                "name": "files"
            }
        ], 
        "path": "php/imagick.construct", 
        "syntax": "Imagick::__construct ( mixed $files )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveBlurImage": {
        "descr": "Adds an adaptive blur filter to image. The intensity of an adaptive blur depends is dramatically decreased at edge of the image, whereas a standard blur is uniform across the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveBlurImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel. ", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.adaptiveblurimage", 
        "syntax": "bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveResizeImage": {
        "descr": "Adaptively resize image with data-dependent triangulation. Avoids blurring across sharp color changes. Most useful when used to shrink images slightly to a slightly smaller \"web size\"; may not look good when a full-sized image is adaptively resized to a thumbnail. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveResizeImage", 
        "params": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "columns"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "rows"
            }, 
            {
                "descr": "Whether to fit the image inside a bounding box.", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.adaptiveresizeimage", 
        "syntax": "bool Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $bestfit = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveSharpenImage": {
        "descr": "Adaptively sharpen the image by sharpening more intensely near image edges and less intensely far from edges. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveSharpenImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel. ", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.adaptivesharpenimage", 
        "syntax": "bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveThresholdImage": {
        "descr": "Selects an individual threshold for each pixel based on the range of intensity values in its local neighborhood. This allows for thresholding of an image whose global intensity histogram doesn't contain distinctive peaks.", 
        "name": "Imagick::adaptiveThresholdImage", 
        "params": [
            {
                "descr": "Width of the local neighborhood.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the local neighborhood.", 
                "name": "height"
            }, 
            {
                "descr": "The mean offset", 
                "name": "offset"
            }
        ], 
        "path": "php/imagick.adaptivethresholdimage", 
        "syntax": "bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::addImage": {
        "descr": "Adds new image to Imagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.", 
        "name": "Imagick::addImage", 
        "params": [
            {
                "descr": "The source Imagick object", 
                "name": "source"
            }
        ], 
        "path": "php/imagick.addimage", 
        "syntax": "bool Imagick::addImage ( Imagick $source )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::addNoiseImage": {
        "descr": "Adds random noise to the image.", 
        "name": "Imagick::addNoiseImage", 
        "params": [
            {
                "descr": "The type of the noise. Refer to this list of noise constants.", 
                "name": "noise_type"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.addnoiseimage", 
        "syntax": "bool Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::affineTransformImage": {
        "descr": "Transforms an image as dictated by the affine matrix.", 
        "name": "Imagick::affineTransformImage", 
        "params": [
            {
                "descr": "The affine matrix", 
                "name": "matrix"
            }
        ], 
        "path": "php/imagick.affinetransformimage", 
        "syntax": "bool Imagick::affineTransformImage ( ImagickDraw $matrix )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::animateImages": {
        "descr": "This method animates the image onto a local or remote X server. This method is not available on Windows. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::animateImages", 
        "params": [
            {
                "descr": "X server address", 
                "name": "x_server"
            }
        ], 
        "path": "php/imagick.animateimages", 
        "syntax": "bool Imagick::animateImages ( string $x_server )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::annotateImage": {
        "descr": "Annotates an image with text.", 
        "name": "Imagick::annotateImage", 
        "params": [
            {
                "descr": "The ImagickDraw object that contains settings for drawing the text", 
                "name": "draw_settings"
            }, 
            {
                "descr": "Horizontal offset in pixels to the left of text", 
                "name": "x"
            }, 
            {
                "descr": "Vertical offset in pixels to the baseline of text", 
                "name": "y"
            }, 
            {
                "descr": "The angle at which to write the text", 
                "name": "angle"
            }, 
            {
                "descr": "The string to draw", 
                "name": "text"
            }
        ], 
        "path": "php/imagick.annotateimage", 
        "syntax": "bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::appendImages": {
        "descr": "Append a set of images into one larger image.", 
        "name": "Imagick::appendImages", 
        "params": [
            {
                "descr": "Whether to stack the images vertically. ", 
                "name": "stack"
            }
        ], 
        "path": "php/imagick.appendimages", 
        "syntax": "Imagick Imagick::appendImages ( bool $stack = false )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::averageImages": {
        "descr": "Average a set of images.", 
        "name": "Imagick::averageImages", 
        "params": [], 
        "path": "php/imagick.averageimages", 
        "syntax": "Imagick Imagick::averageImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::blackThresholdImage": {
        "descr": "Is like Imagick::thresholdImage() but forces all pixels below the threshold into black while leaving all pixels above the threshold unchanged.", 
        "name": "Imagick::blackThresholdImage", 
        "params": [
            {
                "descr": "The threshold below which everything turns black", 
                "name": "threshold"
            }
        ], 
        "path": "php/imagick.blackthresholdimage", 
        "syntax": "bool Imagick::blackThresholdImage ( mixed $threshold )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::blurImage": {
        "descr": "Adds blur filter to image. Optional third parameter to blur a specific channel.", 
        "name": "Imagick::blurImage", 
        "params": [
            {
                "descr": "Blur radius", 
                "name": "radius"
            }, 
            {
                "descr": "Standard deviation", 
                "name": "sigma"
            }, 
            {
                "descr": "The Channeltype constant. When not supplied, all channels are blurred.", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.blurimage", 
        "syntax": "bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::borderImage": {
        "descr": "Surrounds the image with a border of the color defined by the bordercolor ImagickPixel object.", 
        "name": "Imagick::borderImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "Border width", 
                "name": "width"
            }, 
            {
                "descr": "Border height", 
                "name": "height"
            }
        ], 
        "path": "php/imagick.borderimage", 
        "syntax": "bool Imagick::borderImage ( mixed $bordercolor , int $width , int $height )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::charcoalImage": {
        "descr": "Simulates a charcoal drawing.", 
        "name": "Imagick::charcoalImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels", 
                "name": "sigma"
            }
        ], 
        "path": "php/imagick.charcoalimage", 
        "syntax": "bool Imagick::charcoalImage ( float $radius , float $sigma )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::chopImage": {
        "descr": "Removes a region of an image and collapses the image to occupy the removed portion.", 
        "name": "Imagick::chopImage", 
        "params": [
            {
                "descr": "Width of the chopped area", 
                "name": "width"
            }, 
            {
                "descr": "Height of the chopped area", 
                "name": "height"
            }, 
            {
                "descr": "X origo of the chopped area", 
                "name": "x"
            }, 
            {
                "descr": "Y origo of the chopped area", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.chopimage", 
        "syntax": "bool Imagick::chopImage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clear": {
        "descr": "Clears all resources associated to Imagick object", 
        "name": "Imagick::clear", 
        "params": [], 
        "path": "php/imagick.clear", 
        "syntax": "bool Imagick::clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clipImage": {
        "descr": "Clips along the first path from the 8BIM profile, if present.", 
        "name": "Imagick::clipImage", 
        "params": [], 
        "path": "php/imagick.clipimage", 
        "syntax": "bool Imagick::clipImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clipPathImage": {
        "descr": "Clips along the named paths from the 8BIM profile, if present. Later operations take effect inside the path. It may be a number if preceded with #, to work on a numbered path, e.g., \"#1\" to use the first path.", 
        "name": "Imagick::clipPathImage", 
        "params": [
            {
                "descr": "The name of the path", 
                "name": "pathname"
            }, 
            {
                "descr": "If TRUE later operations take effect inside clipping path. ", 
                "name": "inside"
            }
        ], 
        "path": "php/imagick.clippathimage", 
        "syntax": "bool Imagick::clipPathImage ( string $pathname , bool $inside )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clone": {
        "descr": "Makes an exact copy of the Imagick object.", 
        "name": "Imagick::clone", 
        "params": [], 
        "path": "php/imagick.clone", 
        "syntax": "Imagick Imagick::clone ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clutImage": {
        "descr": "Replaces colors in the image from a color lookup table. Optional second parameter to replace colors in a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::clutImage", 
        "params": [
            {
                "descr": "Imagick object containing the color lookup table", 
                "name": "lookup_table"
            }, 
            {
                "descr": "The Channeltype constant. When not supplied, default channels are replaced.", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.clutimage", 
        "syntax": "bool Imagick::clutImage ( Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::coalesceImages": {
        "descr": "Composites a set of images while respecting any page offsets and disposal methods. GIF, MIFF, and MNG animation sequences typically start with an image background and each subsequent image varies in size and offset. Returns a new Imagick object where each image in the sequence is the same size as the first and composited with the next image in the sequence.", 
        "name": "Imagick::coalesceImages", 
        "params": [], 
        "path": "php/imagick.coalesceimages", 
        "syntax": "Imagick Imagick::coalesceImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::colorFloodfillImage": {
        "descr": "Changes the color value of any pixel that matches target and is an immediate neighbor.", 
        "name": "Imagick::colorFloodfillImage", 
        "params": [
            {
                "descr": "ImagickPixel object containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color for the purposes of the floodfill.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.colorfloodfillimage", 
        "syntax": "bool Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::colorizeImage": {
        "descr": "Blends the fill color with each pixel in the image.", 
        "name": "Imagick::colorizeImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string containing the colorize color", 
                "name": "colorize"
            }, 
            {
                "descr": "ImagickPixel object or an float containing the opacity value. ", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagick.colorizeimage", 
        "syntax": "bool Imagick::colorizeImage ( mixed $colorize , mixed $opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::combineImages": {
        "descr": "Combines one or more images into a single image. The grayscale value of the pixels of each image in the sequence is assigned in order to the specified channels of the combined image. The typical ordering would be image 1 => Red, 2 => Green, 3 => Blue, etc.", 
        "name": "Imagick::combineImages", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channelType"
            }
        ], 
        "path": "php/imagick.combineimages", 
        "syntax": "Imagick Imagick::combineImages ( int $channelType )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::commentImage": {
        "descr": "Adds a comment to your image.", 
        "name": "Imagick::commentImage", 
        "params": [
            {
                "descr": "The comment to add", 
                "name": "comment"
            }
        ], 
        "path": "php/imagick.commentimage", 
        "syntax": "bool Imagick::commentImage ( string $comment )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImageChannels": {
        "descr": "Compares one or more images and returns the difference image.", 
        "name": "Imagick::compareImageChannels", 
        "params": [
            {
                "descr": "Imagick object containing the image to compare.", 
                "name": "image"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channelType"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metricType"
            }
        ], 
        "path": "php/imagick.compareimagechannels", 
        "syntax": "array Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImageLayers": {
        "descr": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::compareImageLayers", 
        "params": [
            {
                "descr": "One of the layer method constants.", 
                "name": "method"
            }
        ], 
        "path": "php/imagick.compareimagelayers", 
        "syntax": "Imagick Imagick::compareImageLayers ( int $method )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImages": {
        "descr": "Returns an array containing a reconstructed image and the difference between images.", 
        "name": "Imagick::compareImages", 
        "params": [
            {
                "descr": "An image to compare to.", 
                "name": "compare"
            }, 
            {
                "descr": "Provide a valid metric type constant. ", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.compareimages", 
        "syntax": "array Imagick::compareImages ( Imagick $compare , int $metric )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compositeImage": {
        "descr": "Composite one image onto another at the specified offset.", 
        "name": "Imagick::compositeImage", 
        "params": [
            {
                "descr": "Imagick object which holds the composite image", 
                "name": "composite_object"
            }, 
            {
                "descr": "Composite operator. See Composite Operator Constants", 
                "name": "compose"
            }, 
            {
                "descr": "The column offset of the composited image", 
                "name": "x"
            }, 
            {
                "descr": "The row offset of the composited image", 
                "name": "y"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.compositeimage", 
        "syntax": "bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::contrastImage": {
        "descr": "Enhances the intensity differences between the lighter and darker elements of the image. Set sharpen to a value other than 0 to increase the image contrast otherwise the contrast is reduced.", 
        "name": "Imagick::contrastImage", 
        "params": [
            {
                "descr": "The sharpen value", 
                "name": "sharpen"
            }
        ], 
        "path": "php/imagick.contrastimage", 
        "syntax": "bool Imagick::contrastImage ( bool $sharpen )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::contrastStretchImage": {
        "descr": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::contrastStretchImage", 
        "params": [
            {
                "descr": "The black point.", 
                "name": "black_point"
            }, 
            {
                "descr": "The white point.", 
                "name": "white_point"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.contraststretchimage", 
        "syntax": "bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::convolveImage": {
        "descr": "Applies a custom convolution kernel to the image.", 
        "name": "Imagick::convolveImage", 
        "params": [
            {
                "descr": "The convolution kernel", 
                "name": "kernel"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.convolveimage", 
        "syntax": "bool Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cropImage": {
        "descr": "Extracts a region of the image.", 
        "name": "Imagick::cropImage", 
        "params": [
            {
                "descr": "The width of the crop", 
                "name": "width"
            }, 
            {
                "descr": "The height of the crop", 
                "name": "height"
            }, 
            {
                "descr": "The X coordinate of the cropped region's top left corner", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the cropped region's top left corner", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.cropimage", 
        "syntax": "bool Imagick::cropImage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cropThumbnailImage": {
        "descr": "Creates a fixed size thumbnail by first scaling the image up or down and cropping a specified area from the center.", 
        "name": "Imagick::cropThumbnailImage", 
        "params": [
            {
                "descr": "The width of the thumbnail", 
                "name": "width"
            }, 
            {
                "descr": "The Height of the thumbnail", 
                "name": "height"
            }
        ], 
        "path": "php/imagick.cropthumbnailimage", 
        "syntax": "bool Imagick::cropThumbnailImage ( int $width , int $height )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::current": {
        "descr": "Returns reference to the current imagick object with image pointer at the correct sequence.", 
        "name": "Imagick::current", 
        "params": [], 
        "path": "php/imagick.current", 
        "syntax": "Imagick Imagick::current ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cycleColormapImage": {
        "descr": "Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.", 
        "name": "Imagick::cycleColormapImage", 
        "params": [
            {
                "descr": "The amount to displace the colormap.", 
                "name": "displace"
            }
        ], 
        "path": "php/imagick.cyclecolormapimage", 
        "syntax": "bool Imagick::cycleColormapImage ( int $displace )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::decipherImage": {
        "descr": "Deciphers image that has been enciphered before. The image must be enciphered using Imagick::encipherImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::decipherImage", 
        "params": [
            {
                "descr": "The passphrase", 
                "name": "passphrase"
            }
        ], 
        "path": "php/imagick.decipherimage", 
        "syntax": "bool Imagick::decipherImage ( string $passphrase )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deconstructImages": {
        "descr": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.", 
        "name": "Imagick::deconstructImages", 
        "params": [], 
        "path": "php/imagick.deconstructimages", 
        "syntax": "Imagick Imagick::deconstructImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deleteImageArtifact": {
        "descr": "Deletes an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::deleteImageArtifact", 
        "params": [
            {
                "descr": "The name of the artifact to delete", 
                "name": "artifact"
            }
        ], 
        "path": "php/imagick.deleteimageartifact", 
        "syntax": "bool Imagick::deleteImageArtifact ( string $artifact )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deskewImage": {
        "descr": "This method can be used to remove skew from for example scanned images where the paper was not properly placed on the scanning surface. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::deskewImage", 
        "params": [
            {
                "descr": "Deskew threshold", 
                "name": "threshold"
            }
        ], 
        "path": "php/imagick.deskewimage", 
        "syntax": "public bool Imagick::deskewImage ( float $threshold )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::despeckleImage": {
        "descr": "Reduces the speckle noise in an image while preserving the edges of the original image.", 
        "name": "Imagick::despeckleImage", 
        "params": [], 
        "path": "php/imagick.despeckleimage", 
        "syntax": "bool Imagick::despeckleImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::destroy": {
        "descr": "Destroys the Imagick object and frees all resources associated with it. This method is deprecated in favour of Imagick::clear.", 
        "name": "Imagick::destroy", 
        "params": [], 
        "path": "php/imagick.destroy", 
        "syntax": "bool Imagick::destroy ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::displayImage": {
        "descr": "This method displays an image on a X server.", 
        "name": "Imagick::displayImage", 
        "params": [
            {
                "descr": "The X server name", 
                "name": "servername"
            }
        ], 
        "path": "php/imagick.displayimage", 
        "syntax": "bool Imagick::displayImage ( string $servername )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::displayImages": {
        "descr": "Displays an image or image sequence on a X server.", 
        "name": "Imagick::displayImages", 
        "params": [
            {
                "descr": "The X server name", 
                "name": "servername"
            }
        ], 
        "path": "php/imagick.displayimages", 
        "syntax": "bool Imagick::displayImages ( string $servername )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::distortImage": {
        "descr": "Distorts an image using various distortion methods, by mapping color lookups of the source image to a new destination image usually of the same size as the source image, unless 'bestfit' is set to TRUE.", 
        "name": "Imagick::distortImage", 
        "params": [
            {
                "descr": "The method of image distortion. ", 
                "name": "method"
            }, 
            {
                "descr": "The arguments for this distortion method", 
                "name": "arguments"
            }, 
            {
                "descr": "Attempt to resize destination to fit distorted source", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.distortimage", 
        "syntax": "bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::drawImage": {
        "descr": "Renders the ImagickDraw object on the current image.", 
        "name": "Imagick::drawImage", 
        "params": [
            {
                "descr": "The drawing operations to render on the image.", 
                "name": "draw"
            }
        ], 
        "path": "php/imagick.drawimage", 
        "syntax": "bool Imagick::drawImage ( ImagickDraw $draw )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::edgeImage": {
        "descr": "Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.", 
        "name": "Imagick::edgeImage", 
        "params": [
            {
                "descr": "The radius of the operation.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.edgeimage", 
        "syntax": "bool Imagick::edgeImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::embossImage": {
        "descr": "Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.", 
        "name": "Imagick::embossImage", 
        "params": [
            {
                "descr": "The radius of the effect", 
                "name": "radius"
            }, 
            {
                "descr": "The sigma of the effect", 
                "name": "sigma"
            }
        ], 
        "path": "php/imagick.embossimage", 
        "syntax": "bool Imagick::embossImage ( float $radius , float $sigma )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::encipherImage": {
        "descr": "Converts plain pixels to enciphered pixels. The image is not readable until it has been deciphered using Imagick::decipherImage() This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::encipherImage", 
        "params": [
            {
                "descr": "The passphrase", 
                "name": "passphrase"
            }
        ], 
        "path": "php/imagick.encipherimage", 
        "syntax": "bool Imagick::encipherImage ( string $passphrase )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::enhanceImage": {
        "descr": "Applies a digital filter that improves the quality of a noisy image.", 
        "name": "Imagick::enhanceImage", 
        "params": [], 
        "path": "php/imagick.enhanceimage", 
        "syntax": "bool Imagick::enhanceImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::equalizeImage": {
        "descr": "Equalizes the image histogram.", 
        "name": "Imagick::equalizeImage", 
        "params": [], 
        "path": "php/imagick.equalizeimage", 
        "syntax": "bool Imagick::equalizeImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::evaluateImage": {
        "descr": "Applys an arithmetic, relational, or logical expression to an image. Use these operators to lighten or darken an image, to increase or decrease contrast in an image, or to produce the \"negative\" of an image.", 
        "name": "Imagick::evaluateImage", 
        "params": [
            {
                "descr": "The evaluation operator", 
                "name": "op"
            }, 
            {
                "descr": "The value of the operator", 
                "name": "constant"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.evaluateimage", 
        "syntax": "bool Imagick::evaluateImage ( int $op , float $constant [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::exportImagePixels": {
        "descr": "Exports image pixels into an array. The map defines the ordering of the exported pixels. The size of the returned array is width * height * strlen(map). This method is available if Imagick has been compiled against ImageMagick version 6.4.7 or newer.", 
        "name": "Imagick::exportImagePixels", 
        "params": [
            {
                "descr": "X-coordinate of the exported area", 
                "name": "x"
            }, 
            {
                "descr": "Y-coordinate of the exported area", 
                "name": "y"
            }, 
            {
                "descr": "Width of the exported aread", 
                "name": "width"
            }, 
            {
                "descr": "Height of the exported area", 
                "name": "height"
            }, 
            {
                "descr": "Ordering of the exported pixels. ", 
                "name": "map"
            }, 
            {
                "descr": "Refer to this list of pixel type constants", 
                "name": "STORAGE"
            }
        ], 
        "path": "php/imagick.exportimagepixels", 
        "syntax": "public array Imagick::exportImagePixels ( int $x , int $y , int $width , int $height , string $map , int $STORAGE )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::extentImage": {
        "descr": "Comfortability method for setting image size. The method sets the image size and allows setting x,y coordinates where the new area begins. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.", 
        "name": "Imagick::extentImage", 
        "params": [
            {
                "descr": "The new width", 
                "name": "width"
            }, 
            {
                "descr": "The new height", 
                "name": "height"
            }, 
            {
                "descr": "X position for the new size", 
                "name": "x"
            }, 
            {
                "descr": "Y position for the new size", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.extentimage", 
        "syntax": "bool Imagick::extentImage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flattenImages": {
        "descr": "Merges a sequence of images. This is useful for combining Photoshop layers into a single image.", 
        "name": "Imagick::flattenImages", 
        "params": [], 
        "path": "php/imagick.flattenimages", 
        "syntax": "Imagick Imagick::flattenImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flipImage": {
        "descr": "Creates a vertical mirror image by reflecting the pixels around the central x-axis.", 
        "name": "Imagick::flipImage", 
        "params": [], 
        "path": "php/imagick.flipimage", 
        "syntax": "bool Imagick::flipImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::floodFillPaintImage": {
        "descr": "Changes the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated Imagick::paintFloodFillImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::floodFillPaintImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object or a string containing the target color to paint", 
                "name": "target"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.floodfillpaintimage", 
        "syntax": "bool Imagick::floodFillPaintImage ( mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flopImage": {
        "descr": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis.", 
        "name": "Imagick::flopImage", 
        "params": [], 
        "path": "php/imagick.flopimage", 
        "syntax": "bool Imagick::flopImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::frameImage": {
        "descr": "Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.", 
        "name": "Imagick::frameImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string representing the matte color", 
                "name": "matte_color"
            }, 
            {
                "descr": "The width of the border", 
                "name": "width"
            }, 
            {
                "descr": "The height of the border", 
                "name": "height"
            }, 
            {
                "descr": "The inner bevel width", 
                "name": "inner_bevel"
            }, 
            {
                "descr": "The outer bevel width", 
                "name": "outer_bevel"
            }
        ], 
        "path": "php/imagick.frameimage", 
        "syntax": "bool Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::functionImage": {
        "descr": "Applies an arithmetic, relational, or logical expression to an image. Use these operators to create lighter or darker versions of an image, to increase or decrease contrast in an image, or to negate the image colors. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.", 
        "name": "Imagick::functionImage", 
        "params": [
            {
                "descr": "Refer to this list of function constants", 
                "name": "function"
            }, 
            {
                "descr": "Array of arguments to pass to this function.", 
                "name": "arguments"
            }
        ], 
        "path": "php/imagick.functionimage", 
        "syntax": "public bool Imagick::functionImage ( int $function , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::fxImage": {
        "descr": "Evaluate expression for each pixel in the image. Consult \u00bb The Fx Special Effects Image Operator for more information.", 
        "name": "Imagick::fxImage", 
        "params": [
            {
                "descr": "The expression.", 
                "name": "expression"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.fximage", 
        "syntax": "Imagick Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::gammaImage": {
        "descr": "Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.", 
        "name": "Imagick::gammaImage", 
        "params": [
            {
                "descr": "The amount of gamma-correction.", 
                "name": "gamma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.gammaimage", 
        "syntax": "bool Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::gaussianBlurImage": {
        "descr": "Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.", 
        "name": "Imagick::gaussianBlurImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.gaussianblurimage", 
        "syntax": "bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getColorspace": {
        "descr": "Gets the global colorspace value. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::getColorspace", 
        "params": [], 
        "path": "php/imagick.getcolorspace", 
        "syntax": "int Imagick::getColorspace ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCompression": {
        "descr": "Gets the object compression type.", 
        "name": "Imagick::getCompression", 
        "params": [], 
        "path": "php/imagick.getcompression", 
        "syntax": "int Imagick::getCompression ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCompressionQuality": {
        "descr": "Gets the object compression quality.", 
        "name": "Imagick::getCompressionQuality", 
        "params": [], 
        "path": "php/imagick.getcompressionquality", 
        "syntax": "int Imagick::getCompressionQuality ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCopyright": {
        "descr": "Returns the ImageMagick API copyright as a string.", 
        "name": "Imagick::getCopyright", 
        "params": [], 
        "path": "php/imagick.getcopyright", 
        "syntax": "string Imagick::getCopyright ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFilename": {
        "descr": "Returns the filename associated with an image sequence.", 
        "name": "Imagick::getFilename", 
        "params": [], 
        "path": "php/imagick.getfilename", 
        "syntax": "string Imagick::getFilename ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFont": {
        "descr": "Returns the objects font property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::getFont", 
        "params": [], 
        "path": "php/imagick.getfont", 
        "syntax": "string Imagick::getFont ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFormat": {
        "descr": "Returns the format of the Imagick object.", 
        "name": "Imagick::getFormat", 
        "params": [], 
        "path": "php/imagick.getformat", 
        "syntax": "string Imagick::getFormat ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getGravity": {
        "descr": "Gets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getGravity", 
        "params": [], 
        "path": "php/imagick.getgravity", 
        "syntax": "int Imagick::getGravity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getHomeURL": {
        "descr": "Returns the ImageMagick home URL.", 
        "name": "Imagick::getHomeURL", 
        "params": [], 
        "path": "php/imagick.gethomeurl", 
        "syntax": "string Imagick::getHomeURL ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImage": {
        "descr": "Returns a new Imagick object with the current image sequence.", 
        "name": "Imagick::getImage", 
        "params": [], 
        "path": "php/imagick.getimage", 
        "syntax": "Imagick Imagick::getImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageAlphaChannel": {
        "descr": "Gets the image alpha channel value. The returned value is one of the alpha channel constants. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getImageAlphaChannel", 
        "params": [], 
        "path": "php/imagick.getimagealphachannel", 
        "syntax": "int Imagick::getImageAlphaChannel ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageArtifact": {
        "descr": "Gets an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::getImageArtifact", 
        "params": [
            {
                "descr": "The name of the artifact", 
                "name": "artifact"
            }
        ], 
        "path": "php/imagick.getimageartifact", 
        "syntax": "string Imagick::getImageArtifact ( string $artifact )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBackgroundColor": {
        "descr": "Returns the image background color.", 
        "name": "Imagick::getImageBackgroundColor", 
        "params": [], 
        "path": "php/imagick.getimagebackgroundcolor", 
        "syntax": "ImagickPixel Imagick::getImageBackgroundColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBlob": {
        "descr": "Implements direct to memory image formats. It returns the image sequence as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().", 
        "name": "Imagick::getImageBlob", 
        "params": [], 
        "path": "php/imagick.getimageblob", 
        "syntax": "string Imagick::getImageBlob ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBluePrimary": {
        "descr": "Returns the chromaticity blue primary point for the image.", 
        "name": "Imagick::getImageBluePrimary", 
        "params": [
            {
                "descr": "The chromaticity blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimageblueprimary", 
        "syntax": "array Imagick::getImageBluePrimary ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBorderColor": {
        "descr": "Returns the image border color.", 
        "name": "Imagick::getImageBorderColor", 
        "params": [], 
        "path": "php/imagick.getimagebordercolor", 
        "syntax": "ImagickPixel Imagick::getImageBorderColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDepth": {
        "descr": "Gets the depth for a particular image channel.", 
        "name": "Imagick::getImageChannelDepth", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechanneldepth", 
        "syntax": "int Imagick::getImageChannelDepth ( int $channel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDistortion": {
        "descr": "Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metric.", 
        "name": "Imagick::getImageChannelDistortion", 
        "params": [
            {
                "descr": "Imagick object to compare to.", 
                "name": "reference"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.getimagechanneldistortion", 
        "syntax": "float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDistortions": {
        "descr": "Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metrics This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::getImageChannelDistortions", 
        "params": [
            {
                "descr": "Imagick object containing the reference image", 
                "name": "reference"
            }, 
            {
                "descr": "Refer to this list of metric type constants.", 
                "name": "metric"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechanneldistortions", 
        "syntax": "float Imagick::getImageChannelDistortions ( Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelExtrema": {
        "descr": "Gets the extrema for one or more image channels. Return value is an associative array with the keys \"minima\" and \"maxima\".", 
        "name": "Imagick::getImageChannelExtrema", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelextrema", 
        "syntax": "array Imagick::getImageChannelExtrema ( int $channel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelKurtosis": {
        "descr": "Get the kurtosis and skewness of a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.", 
        "name": "Imagick::getImageChannelKurtosis", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelkurtosis", 
        "syntax": "public array Imagick::getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelMean": {
        "descr": "Gets the mean and standard deviation of one or more image channels. Return value is an associative array with the keys \"mean\" and \"standardDeviation\".", 
        "name": "Imagick::getImageChannelMean", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelmean", 
        "syntax": "array Imagick::getImageChannelMean ( int $channel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelRange": {
        "descr": "Gets the range for one or more image channels. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getImageChannelRange", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelrange", 
        "syntax": "array Imagick::getImageChannelRange ( int $channel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelStatistics": {
        "descr": "Returns statistics for each channel in the image. The statistics include the channel depth, its minima and maxima, the mean, and the standard deviation. You can access the red channel mean, for example, like this:", 
        "name": "Imagick::getImageChannelStatistics", 
        "params": [], 
        "path": "php/imagick.getimagechannelstatistics", 
        "syntax": "array Imagick::getImageChannelStatistics ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageClipMask": {
        "descr": "Returns the image clip mask. The clip mask is an Imagick object containing the clip mask. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageClipMask", 
        "params": [], 
        "path": "php/imagick.getimageclipmask", 
        "syntax": "Imagick Imagick::getImageClipMask ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColormapColor": {
        "descr": "Returns the color of the specified colormap index.", 
        "name": "Imagick::getImageColormapColor", 
        "params": [
            {
                "descr": "The offset into the image colormap.", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.getimagecolormapcolor", 
        "syntax": "ImagickPixel Imagick::getImageColormapColor ( int $index )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColors": {
        "descr": "Gets the number of unique colors in the image.", 
        "name": "Imagick::getImageColors", 
        "params": [], 
        "path": "php/imagick.getimagecolors", 
        "syntax": "int Imagick::getImageColors ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColorspace": {
        "descr": "Gets the image colorspace.", 
        "name": "Imagick::getImageColorspace", 
        "params": [], 
        "path": "php/imagick.getimagecolorspace", 
        "syntax": "int Imagick::getImageColorspace ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompose": {
        "descr": "Returns the composite operator associated with the image.", 
        "name": "Imagick::getImageCompose", 
        "params": [], 
        "path": "php/imagick.getimagecompose", 
        "syntax": "int Imagick::getImageCompose ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompression": {
        "descr": "Gets the current image's compression type.", 
        "name": "Imagick::getImageCompression", 
        "params": [], 
        "path": "php/imagick.getimagecompression", 
        "syntax": "int Imagick::getImageCompression ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompressionQuality": {
        "descr": "Gets the current image's compression quality", 
        "name": "Imagick::getImageCompressionQuality", 
        "params": [], 
        "path": "php/imagick.getimagecompressionquality", 
        "syntax": "int Imagick::getCompressionQuality ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDelay": {
        "descr": "Gets the image delay.", 
        "name": "Imagick::getImageDelay", 
        "params": [], 
        "path": "php/imagick.getimagedelay", 
        "syntax": "int Imagick::getImageDelay ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDepth": {
        "descr": "Gets the image depth.", 
        "name": "Imagick::getImageDepth", 
        "params": [], 
        "path": "php/imagick.getimagedepth", 
        "syntax": "int Imagick::getImageDepth ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDispose": {
        "descr": "Gets the image disposal method.", 
        "name": "Imagick::getImageDispose", 
        "params": [], 
        "path": "php/imagick.getimagedispose", 
        "syntax": "int Imagick::getImageDispose ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDistortion": {
        "descr": "Compares an image to a reconstructed image and returns the specified distortion metric.", 
        "name": "Imagick::getImageDistortion", 
        "params": [
            {
                "descr": "Imagick object to compare to.", 
                "name": "reference"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.getimagedistortion", 
        "syntax": "float Imagick::getImageDistortion ( MagickWand $reference , int $metric )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageExtrema": {
        "descr": "Gets the extrema for the image. Returns an associative array with the keys \"min\" and \"max\".", 
        "name": "Imagick::getImageExtrema", 
        "params": [], 
        "path": "php/imagick.getimageextrema", 
        "syntax": "array Imagick::getImageExtrema ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageFilename": {
        "descr": "Returns the filename of a particular image in a sequence.", 
        "name": "Imagick::getImageFilename", 
        "params": [], 
        "path": "php/imagick.getimagefilename", 
        "syntax": "string Imagick::getImageFilename ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageFormat": {
        "descr": "Returns the format of a particular image in a sequence.", 
        "name": "Imagick::getImageFormat", 
        "params": [], 
        "path": "php/imagick.getimageformat", 
        "syntax": "string Imagick::getImageFormat ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGamma": {
        "descr": "Gets the image gamma.", 
        "name": "Imagick::getImageGamma", 
        "params": [], 
        "path": "php/imagick.getimagegamma", 
        "syntax": "float Imagick::getImageGamma ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGeometry": {
        "descr": "Returns the width and height as an associative array.", 
        "name": "Imagick::getImageGeometry", 
        "params": [], 
        "path": "php/imagick.getimagegeometry", 
        "syntax": "array Imagick::getImageGeometry ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGravity": {
        "descr": "Gets the current gravity value of the image. Unlike Imagick::getGravity(), this method returns the gravity defined for the current image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::getImageGravity", 
        "params": [], 
        "path": "php/imagick.getimagegravity", 
        "syntax": "int Imagick::getImageGravity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGreenPrimary": {
        "descr": "Returns the chromaticity green primary point. Returns an array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageGreenPrimary", 
        "params": [], 
        "path": "php/imagick.getimagegreenprimary", 
        "syntax": "array Imagick::getImageGreenPrimary ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageHeight": {
        "descr": "Returns the image height.", 
        "name": "Imagick::getImageHeight", 
        "params": [], 
        "path": "php/imagick.getimageheight", 
        "syntax": "int Imagick::getImageHeight ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageHistogram": {
        "descr": "Returns the image histogram as an array of ImagickPixel objects.", 
        "name": "Imagick::getImageHistogram", 
        "params": [], 
        "path": "php/imagick.getimagehistogram", 
        "syntax": "array Imagick::getImageHistogram ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageIndex": {
        "descr": "Returns the index of the current active image within the Imagick object. This method has been deprecated. See Imagick::getIteratorIndex().", 
        "name": "Imagick::getImageIndex", 
        "params": [], 
        "path": "php/imagick.getimageindex", 
        "syntax": "int Imagick::getImageIndex ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageInterlaceScheme": {
        "descr": "Gets the image interlace scheme.", 
        "name": "Imagick::getImageInterlaceScheme", 
        "params": [], 
        "path": "php/imagick.getimageinterlacescheme", 
        "syntax": "int Imagick::getImageInterlaceScheme ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageInterpolateMethod": {
        "descr": "Returns the interpolation method for the specified image. The method is one of the Imagick::INTERPOLATE_* constants.", 
        "name": "Imagick::getImageInterpolateMethod", 
        "params": [], 
        "path": "php/imagick.getimageinterpolatemethod", 
        "syntax": "int Imagick::getImageInterpolateMethod ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageIterations": {
        "descr": "Gets the image iterations.", 
        "name": "Imagick::getImageIterations", 
        "params": [], 
        "path": "php/imagick.getimageiterations", 
        "syntax": "int Imagick::getImageIterations ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageLength": {
        "descr": "Returns the image length in bytes", 
        "name": "Imagick::getImageLength", 
        "params": [], 
        "path": "php/imagick.getimagelength", 
        "syntax": "int Imagick::getImageLength ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMagickLicense": {
        "descr": "Returns a string containing the ImageMagick license", 
        "name": "Imagick::getImageMagickLicense", 
        "params": [], 
        "path": "php/imagick.getimagemagicklicense", 
        "syntax": "string Imagick::getImageMagickLicense ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMatte": {
        "descr": "Returns TRUE if the image has a matte channel otherwise false. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getImageMatte", 
        "params": [], 
        "path": "php/imagick.getimagematte", 
        "syntax": "bool Imagick::getImageMatte ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMatteColor": {
        "descr": "Returns the image matte color.", 
        "name": "Imagick::getImageMatteColor", 
        "params": [], 
        "path": "php/imagick.getimagemattecolor", 
        "syntax": "ImagickPixel Imagick::getImageMatteColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageOrientation": {
        "descr": "Gets the image orientation. The return value is one of the orientation constants.", 
        "name": "Imagick::getImageOrientation", 
        "params": [], 
        "path": "php/imagick.getimageorientation", 
        "syntax": "int Imagick::getImageOrientation ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagePage": {
        "descr": "Returns the page geometry associated with the image in an array with the keys \"width\", \"height\", \"x\", and \"y\".", 
        "name": "Imagick::getImagePage", 
        "params": [], 
        "path": "php/imagick.getimagepage", 
        "syntax": "array Imagick::getImagePage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagePixelColor": {
        "descr": "Returns the color of the specified pixel.", 
        "name": "Imagick::getImagePixelColor", 
        "params": [
            {
                "descr": "The x-coordinate of the pixel", 
                "name": "x"
            }, 
            {
                "descr": "The y-coordinate of the pixel", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimagepixelcolor", 
        "syntax": "ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProfile": {
        "descr": "Returns the named image profile.", 
        "name": "Imagick::getImageProfile", 
        "params": [
            {
                "descr": "The name of the profile to return.", 
                "name": "name"
            }
        ], 
        "path": "php/imagick.getimageprofile", 
        "syntax": "string Imagick::getImageProfile ( string $name )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProfiles": {
        "descr": "Returns all associated profiles that match the pattern. If TRUE is passed as second parameter only the profile names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageProfiles", 
        "params": [
            {
                "descr": "The pattern for profile names.", 
                "name": "pattern"
            }, 
            {
                "descr": "Whether to return only profile names. ", 
                "name": "only_names"
            }
        ], 
        "path": "php/imagick.getimageprofiles", 
        "syntax": "array Imagick::getImageProfiles ([ string $pattern = \"*\" [, bool $only_names = true ]] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProperties": {
        "descr": "Returns all associated properties that match the pattern. If TRUE is passed as second parameter only the property names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageProperties", 
        "params": [
            {
                "descr": "The pattern for property names.", 
                "name": "pattern"
            }, 
            {
                "descr": "Whether to return only property names. ", 
                "name": "only_names"
            }
        ], 
        "path": "php/imagick.getimageproperties", 
        "syntax": "array Imagick::getImageProperties ([ string $pattern = \"*\" [, bool $only_names = true ]] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProperty": {
        "descr": "Returns the named image property. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::getImageProperty", 
        "params": [
            {
                "descr": "name of the property (for example Exif:DateTime)", 
                "name": "name"
            }
        ], 
        "path": "php/imagick.getimageproperty", 
        "syntax": "string Imagick::getImageProperty ( string $name )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRedPrimary": {
        "descr": "Returns the chromaticity red primary point as an array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageRedPrimary", 
        "params": [], 
        "path": "php/imagick.getimageredprimary", 
        "syntax": "array Imagick::getImageRedPrimary ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRegion": {
        "descr": "Extracts a region of the image and returns it as a new Imagick object.", 
        "name": "Imagick::getImageRegion", 
        "params": [
            {
                "descr": "The width of the extracted region.", 
                "name": "width"
            }, 
            {
                "descr": "The height of the extracted region.", 
                "name": "height"
            }, 
            {
                "descr": "X-coordinate of the top-left corner of the extracted region.", 
                "name": "x"
            }, 
            {
                "descr": "Y-coordinate of the top-left corner of the extracted region.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimageregion", 
        "syntax": "Imagick Imagick::getImageRegion ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRenderingIntent": {
        "descr": "Gets the image rendering intent.", 
        "name": "Imagick::getImageRenderingIntent", 
        "params": [], 
        "path": "php/imagick.getimagerenderingintent", 
        "syntax": "int Imagick::getImageRenderingIntent ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageResolution": {
        "descr": "Gets the image X and Y resolution.", 
        "name": "Imagick::getImageResolution", 
        "params": [], 
        "path": "php/imagick.getimageresolution", 
        "syntax": "array Imagick::getImageResolution ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageScene": {
        "descr": "Gets the image scene.", 
        "name": "Imagick::getImageScene", 
        "params": [], 
        "path": "php/imagick.getimagescene", 
        "syntax": "int Imagick::getImageScene ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageSignature": {
        "descr": "Generates an SHA-256 message digest for the image pixel stream.", 
        "name": "Imagick::getImageSignature", 
        "params": [], 
        "path": "php/imagick.getimagesignature", 
        "syntax": "string Imagick::getImageSignature ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageSize": {
        "descr": "Returns the image length in bytes. Deprecated in favour of Imagick::getImageLength()", 
        "name": "Imagick::getImageSize", 
        "params": [], 
        "path": "php/imagick.getimagesize", 
        "syntax": "int Imagick::getImageSize ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageTicksPerSecond": {
        "descr": "Gets the image ticks-per-second.", 
        "name": "Imagick::getImageTicksPerSecond", 
        "params": [], 
        "path": "php/imagick.getimagetickspersecond", 
        "syntax": "int Imagick::getImageTicksPerSecond ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageTotalInkDensity": {
        "descr": "Gets the image total ink density.", 
        "name": "Imagick::getImageTotalInkDensity", 
        "params": [], 
        "path": "php/imagick.getimagetotalinkdensity", 
        "syntax": "float Imagick::getImageTotalInkDensity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageType": {
        "descr": "Gets the potential image type.", 
        "name": "Imagick::getImageType", 
        "params": [], 
        "path": "php/imagick.getimagetype", 
        "syntax": "int Imagick::getImageType ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageUnits": {
        "descr": "Gets the image units of resolution.", 
        "name": "Imagick::getImageUnits", 
        "params": [], 
        "path": "php/imagick.getimageunits", 
        "syntax": "int Imagick::getImageUnits ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageVirtualPixelMethod": {
        "descr": "Returns the virtual pixel method for the specified image.", 
        "name": "Imagick::getImageVirtualPixelMethod", 
        "params": [], 
        "path": "php/imagick.getimagevirtualpixelmethod", 
        "syntax": "int Imagick::getImageVirtualPixelMethod ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageWhitePoint": {
        "descr": "Returns the chromaticity white point as an associative array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageWhitePoint", 
        "params": [], 
        "path": "php/imagick.getimagewhitepoint", 
        "syntax": "array Imagick::getImageWhitePoint ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageWidth": {
        "descr": "Returns the image width.", 
        "name": "Imagick::getImageWidth", 
        "params": [], 
        "path": "php/imagick.getimagewidth", 
        "syntax": "int Imagick::getImageWidth ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagesBlob": {
        "descr": "Implements direct to memory image formats. It returns all image sequences as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().", 
        "name": "Imagick::getImagesBlob", 
        "params": [], 
        "path": "php/imagick.getimagesblob", 
        "syntax": "string Imagick::getImagesBlob ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getInterlaceScheme": {
        "descr": "Gets the object interlace scheme.", 
        "name": "Imagick::getInterlaceScheme", 
        "params": [], 
        "path": "php/imagick.getinterlacescheme", 
        "syntax": "int Imagick::getInterlaceScheme ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getIteratorIndex": {
        "descr": "Returns the index of the current active image within the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getIteratorIndex", 
        "params": [], 
        "path": "php/imagick.getiteratorindex", 
        "syntax": "int Imagick::getIteratorIndex ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getNumberImages": {
        "descr": "Returns the number of images associated with Imagick object.", 
        "name": "Imagick::getNumberImages", 
        "params": [], 
        "path": "php/imagick.getnumberimages", 
        "syntax": "int Imagick::getNumberImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getOption": {
        "descr": "Returns a value associated within the object for the specified key.", 
        "name": "Imagick::getOption", 
        "params": [
            {
                "descr": "The name of the option", 
                "name": "key"
            }
        ], 
        "path": "php/imagick.getoption", 
        "syntax": "string Imagick::getOption ( string $key )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPackageName": {
        "descr": "Returns the ImageMagick package name.", 
        "name": "Imagick::getPackageName", 
        "params": [], 
        "path": "php/imagick.getpackagename", 
        "syntax": "string Imagick::getPackageName ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPage": {
        "descr": "Returns the page geometry associated with the Imagick object in an associative array with the keys \"width\", \"height\", \"x\", and \"y\".", 
        "name": "Imagick::getPage", 
        "params": [], 
        "path": "php/imagick.getpage", 
        "syntax": "array Imagick::getPage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPixelIterator": {
        "descr": "Returns a MagickPixelIterator.", 
        "name": "Imagick::getPixelIterator", 
        "params": [], 
        "path": "php/imagick.getpixeliterator", 
        "syntax": "ImagickPixelIterator Imagick::getPixelIterator ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPixelRegionIterator": {
        "descr": "Get an ImagickPixelIterator for an image section.", 
        "name": "Imagick::getPixelRegionIterator", 
        "params": [
            {
                "descr": "The x-coordinate of the region.", 
                "name": "x"
            }, 
            {
                "descr": "The y-coordinate of the region.", 
                "name": "y"
            }, 
            {
                "descr": "The width of the region.", 
                "name": "columns"
            }, 
            {
                "descr": "The height of the region.", 
                "name": "rows"
            }
        ], 
        "path": "php/imagick.getpixelregioniterator", 
        "syntax": "ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPointSize": {
        "descr": "Returns the objects point size property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::getPointSize", 
        "params": [], 
        "path": "php/imagick.getpointsize", 
        "syntax": "float Imagick::getPointSize ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getQuantumDepth": {
        "descr": "Returns the Imagick quantum depth as a string.", 
        "name": "Imagick::getQuantumDepth", 
        "params": [], 
        "path": "php/imagick.getquantumdepth", 
        "syntax": "array Imagick::getQuantumDepth ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getQuantumRange": {
        "descr": "Returns the Imagick quantum range as a string.", 
        "name": "Imagick::getQuantumRange", 
        "params": [], 
        "path": "php/imagick.getquantumrange", 
        "syntax": "array Imagick::getQuantumRange ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getReleaseDate": {
        "descr": "Returns the ImageMagick release date as a string.", 
        "name": "Imagick::getReleaseDate", 
        "params": [], 
        "path": "php/imagick.getreleasedate", 
        "syntax": "string Imagick::getReleaseDate ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getResource": {
        "descr": "Returns the specified resource's memory usage in megabytes.", 
        "name": "Imagick::getResource", 
        "params": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }
        ], 
        "path": "php/imagick.getresource", 
        "syntax": "int Imagick::getResource ( int $type )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getResourceLimit": {
        "descr": "Returns the specified resource limit.", 
        "name": "Imagick::getResourceLimit", 
        "params": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }
        ], 
        "path": "php/imagick.getresourcelimit", 
        "syntax": "int Imagick::getResourceLimit ( int $type )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSamplingFactors": {
        "descr": "Gets the horizontal and vertical sampling factor.", 
        "name": "Imagick::getSamplingFactors", 
        "params": [], 
        "path": "php/imagick.getsamplingfactors", 
        "syntax": "array Imagick::getSamplingFactors ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSize": {
        "descr": "Returns the size associated with the Imagick object as an array with the keys \"columns\" and \"rows\".", 
        "name": "Imagick::getSize", 
        "params": [], 
        "path": "php/imagick.getsize", 
        "syntax": "array Imagick::getSize ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSizeOffset": {
        "descr": "Returns the size offset associated with the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getSizeOffset", 
        "params": [], 
        "path": "php/imagick.getsizeoffset", 
        "syntax": "int Imagick::getSizeOffset ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getVersion": {
        "descr": "Returns the ImageMagick API version as a string and as a number.", 
        "name": "Imagick::getVersion", 
        "params": [], 
        "path": "php/imagick.getversion", 
        "syntax": "array Imagick::getVersion ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::haldClutImage": {
        "descr": "Replaces colors in the image using a Hald lookup table. Hald images can be created using HALD color coder.", 
        "name": "Imagick::haldClutImage", 
        "params": [
            {
                "descr": "Imagick object containing the Hald lookup image.", 
                "name": "clut"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.haldclutimage", 
        "syntax": "public bool Imagick::haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::hasNextImage": {
        "descr": "Returns TRUE if the object has more images when traversing the list in the forward direction.", 
        "name": "Imagick::hasNextImage", 
        "params": [], 
        "path": "php/imagick.hasnextimage", 
        "syntax": "bool Imagick::hasNextImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::hasPreviousImage": {
        "descr": "Returns TRUE if the object has more images when traversing the list in the reverse direction", 
        "name": "Imagick::hasPreviousImage", 
        "params": [], 
        "path": "php/imagick.haspreviousimage", 
        "syntax": "bool Imagick::hasPreviousImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::identifyImage": {
        "descr": "Identifies an image and returns the attributes. Attributes include the image width, height, size, and others.", 
        "name": "Imagick::identifyImage", 
        "params": [], 
        "path": "php/imagick.identifyimage", 
        "syntax": "array Imagick::identifyImage ([ bool $appendRawOutput = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::implodeImage": {
        "descr": "Creates a new image that is a copy of an existing one with the image pixels \"imploded\" by the specified percentage.", 
        "name": "Imagick::implodeImage", 
        "params": [
            {
                "descr": "The radius of the implode", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.implodeimage", 
        "syntax": "bool Imagick::implodeImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::importImagePixels": {
        "descr": "Imports pixels from an array into an image. The map is usually 'RGB'. This method imposes the following constraints for the parameters: amount of pixels in the array must match width x height x length of the map. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::importImagePixels", 
        "params": [
            {
                "descr": "The image x position", 
                "name": "x"
            }, 
            {
                "descr": "The image y position", 
                "name": "y"
            }, 
            {
                "descr": "The image width", 
                "name": "width"
            }, 
            {
                "descr": "The image height", 
                "name": "height"
            }, 
            {
                "descr": "Map of pixel ordering as a string. ", 
                "name": "map"
            }, 
            {
                "descr": "The pixel storage method. Refer to this list of pixel constants.", 
                "name": "storage"
            }, 
            {
                "descr": "The array of pixels", 
                "name": "pixels"
            }
        ], 
        "path": "php/imagick.importimagepixels", 
        "syntax": "public bool Imagick::importImagePixels ( int $x , int $y , int $width , int $height , string $map , int $storage , array $pixels )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::labelImage": {
        "descr": "Adds a label to an image.", 
        "name": "Imagick::labelImage", 
        "params": [
            {
                "descr": "The label to add", 
                "name": "label"
            }
        ], 
        "path": "php/imagick.labelimage", 
        "syntax": "bool Imagick::labelImage ( string $label )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::levelImage": {
        "descr": "Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.", 
        "name": "Imagick::levelImage", 
        "params": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The gamma value", 
                "name": "gamma"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.levelimage", 
        "syntax": "bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::linearStretchImage": {
        "descr": "Stretches with saturation the image intensity.", 
        "name": "Imagick::linearStretchImage", 
        "params": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }
        ], 
        "path": "php/imagick.linearstretchimage", 
        "syntax": "bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::liquidRescaleImage": {
        "descr": "This method scales the images using liquid rescaling method. This method is an implementation of a technique called seam carving. In order for this method to work as expected ImageMagick must be compiled with liblqr support. This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::liquidRescaleImage", 
        "params": [
            {
                "descr": "The width of the target size", 
                "name": "width"
            }, 
            {
                "descr": "The height of the target size", 
                "name": "height"
            }, 
            {
                "descr": "How much the seam can traverse on x-axis. ", 
                "name": "delta_x"
            }, 
            {
                "descr": "Introduces a bias for non-straight seams. ", 
                "name": "rigidity"
            }
        ], 
        "path": "php/imagick.liquidrescaleimage", 
        "syntax": "bool Imagick::liquidRescaleImage ( int $width , int $height , float $delta_x , float $rigidity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::magnifyImage": {
        "descr": "Is a convenience method that scales an image proportionally to twice its original size.", 
        "name": "Imagick::magnifyImage", 
        "params": [], 
        "path": "php/imagick.magnifyimage", 
        "syntax": "bool Imagick::magnifyImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mapImage": {
        "descr": "", 
        "name": "Imagick::mapImage", 
        "params": [], 
        "path": "php/imagick.mapimage", 
        "syntax": "bool Imagick::mapImage ( Imagick $map , bool $dither )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::matteFloodfillImage": {
        "descr": "Changes the transparency value of any pixel that matches target and is an immediate neighbor. If the method FillToBorderMethod is specified, the transparency value is changed for any neighbor pixel that does not match the bordercolor member of image.", 
        "name": "Imagick::matteFloodfillImage", 
        "params": [
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }, 
            {
                "descr": "An ImagickPixel object or string representing the border color.", 
                "name": "bordercolor"
            }, 
            {
                "descr": "The starting x coordinate of the operation.", 
                "name": "x"
            }, 
            {
                "descr": "The starting y coordinate of the operation.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.mattefloodfillimage", 
        "syntax": "bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::medianFilterImage": {
        "descr": "Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.", 
        "name": "Imagick::medianFilterImage", 
        "params": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.medianfilterimage", 
        "syntax": "bool Imagick::medianFilterImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mergeImageLayers": {
        "descr": "Merges image layers into one. This method is useful when working with image formats that use multiple layers such as PSD. The merging is controlled using the layer_method which defines how the layers are merged. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::mergeImageLayers", 
        "params": [
            {
                "descr": "One of the Imagick::LAYERMETHOD_* constants", 
                "name": "layer_method"
            }
        ], 
        "path": "php/imagick.mergeimagelayers", 
        "syntax": "bool Imagick::mergeImageLayers ( int $layer_method )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::minifyImage": {
        "descr": "Is a convenience method that scales an image proportionally to one-half its original size", 
        "name": "Imagick::minifyImage", 
        "params": [], 
        "path": "php/imagick.minifyimage", 
        "syntax": "bool Imagick::minifyImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::modulateImage": {
        "descr": "Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.", 
        "name": "Imagick::modulateImage", 
        "params": [], 
        "path": "php/imagick.modulateimage", 
        "syntax": "bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::montageImage": {
        "descr": "Creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.", 
        "name": "Imagick::montageImage", 
        "params": [
            {
                "descr": "The font name, size, and color are obtained from this object.", 
                "name": "draw"
            }, 
            {
                "descr": "The number of tiles per row and page (e.g. ", 
                "name": "tile_geometry"
            }, 
            {
                "descr": "Preferred image size and border size of each thumbnail (e.g. ", 
                "name": "thumbnail_geometry"
            }, 
            {
                "descr": "Thumbnail framing mode, see Montage Mode constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Surround the image with an ornamental border (e.g. ", 
                "name": "frame"
            }
        ], 
        "path": "php/imagick.montageimage", 
        "syntax": "Imagick Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::morphImages": {
        "descr": "Method morphs a set of images. Both the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next.", 
        "name": "Imagick::morphImages", 
        "params": [
            {
                "descr": "The number of in-between images to generate.", 
                "name": "number_frames"
            }
        ], 
        "path": "php/imagick.morphimages", 
        "syntax": "Imagick Imagick::morphImages ( int $number_frames )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mosaicImages": {
        "descr": "Inlays an image sequence to form a single coherent picture. It returns a wand with each image in the sequence composited at the location defined by the page offset of the image.", 
        "name": "Imagick::mosaicImages", 
        "params": [], 
        "path": "php/imagick.mosaicimages", 
        "syntax": "Imagick Imagick::mosaicImages ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::motionBlurImage": {
        "descr": "Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.", 
        "name": "Imagick::motionBlurImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.motionblurimage", 
        "syntax": "bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::negateImage": {
        "descr": "Negates the colors in the reference image. The Grayscale option means that only grayscale values within the image are negated.", 
        "name": "Imagick::negateImage", 
        "params": [
            {
                "descr": "Whether to only negate grayscale pixels within the image.", 
                "name": "gray"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.negateimage", 
        "syntax": "bool Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::newImage": {
        "descr": "Creates a new image and associates ImagickPixel value as background color", 
        "name": "Imagick::newImage", 
        "params": [
            {
                "descr": "Columns in the new image", 
                "name": "cols"
            }, 
            {
                "descr": "Rows in the new image", 
                "name": "rows"
            }, 
            {
                "descr": "The background color used for this image", 
                "name": "background"
            }, 
            {
                "descr": "Image format. This parameter was added in Imagick version 2.0.1.", 
                "name": "format"
            }
        ], 
        "path": "php/imagick.newimage", 
        "syntax": "bool Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::newPseudoImage": {
        "descr": "Creates a new image using ImageMagick pseudo-formats.", 
        "name": "Imagick::newPseudoImage", 
        "params": [
            {
                "descr": "columns in the new image", 
                "name": "columns"
            }, 
            {
                "descr": "rows in the new image", 
                "name": "rows"
            }, 
            {
                "descr": "string containing pseudo image definition.", 
                "name": "pseudoString"
            }
        ], 
        "path": "php/imagick.newpseudoimage", 
        "syntax": "bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::nextImage": {
        "descr": "Associates the next image in the image list with an Imagick object.", 
        "name": "Imagick::nextImage", 
        "params": [], 
        "path": "php/imagick.nextimage", 
        "syntax": "bool Imagick::nextImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::normalizeImage": {
        "descr": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.", 
        "name": "Imagick::normalizeImage", 
        "params": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.normalizeimage", 
        "syntax": "bool Imagick::normalizeImage ([ int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::oilPaintImage": {
        "descr": "Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.", 
        "name": "Imagick::oilPaintImage", 
        "params": [
            {
                "descr": "The radius of the circular neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.oilpaintimage", 
        "syntax": "bool Imagick::oilPaintImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::opaquePaintImage": {
        "descr": "Changes any pixel that matches color with the color defined by fill. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::opaquePaintImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string containing the color to change", 
                "name": "target"
            }, 
            {
                "descr": "The replacement color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.opaquepaintimage", 
        "syntax": "bool Imagick::opaquePaintImage ( mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::optimizeImageLayers": {
        "descr": "Compares each image the GIF disposed forms of the previous image in the sequence. From this it attempts to select the smallest cropped image to replace each frame, while preserving the results of the animation. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::optimizeImageLayers", 
        "params": [], 
        "path": "php/imagick.optimizeimagelayers", 
        "syntax": "bool Imagick::optimizeImageLayers ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::orderedPosterizeImage": {
        "descr": "Performs an ordered dither based on a number of pre-defined dithering threshold maps, but over multiple intensity levels, which can be different for different channels, according to the input arguments. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.", 
        "name": "Imagick::orderedPosterizeImage", 
        "params": [
            {
                "descr": "A string containing the name of the threshold dither map to use", 
                "name": "threshold_map"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.orderedposterizeimage", 
        "syntax": "bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintFloodfillImage": {
        "descr": "Changes the color value of any pixel that matches target and is an immediate neighbor. As of ImageMagick 6.3.8 this method has been deprecated and Imagick::floodfillPaintImage() should be used instead.", 
        "name": "Imagick::paintFloodfillImage", 
        "params": [
            {
                "descr": "ImagickPixel object or a string containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color for the purposes of the floodfill.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object or a string containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.paintfloodfillimage", 
        "syntax": "bool Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintOpaqueImage": {
        "descr": "Changes any pixel that matches color with the color defined by fill.", 
        "name": "Imagick::paintOpaqueImage", 
        "params": [
            {
                "descr": "Change this target color to the fill color within the image. ", 
                "name": "target"
            }, 
            {
                "descr": "An ImagickPixel object or a string representing the fill color.", 
                "name": "fill"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.paintopaqueimage", 
        "syntax": "bool Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintTransparentImage": {
        "descr": "Changes any pixel that matches color with the color defined by fill.", 
        "name": "Imagick::paintTransparentImage", 
        "params": [
            {
                "descr": "Change this target color to specified opacity value within the image.", 
                "name": "target"
            }, 
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagick.painttransparentimage", 
        "syntax": "bool Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImage": {
        "descr": "This method can be used to query image width, height, size, and format without reading the whole image in to memory.", 
        "name": "Imagick::pingImage", 
        "params": [
            {
                "descr": "The filename to read the information from.", 
                "name": "filename"
            }
        ], 
        "path": "php/imagick.pingimage", 
        "syntax": "bool Imagick::pingImage ( string $filename )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImageBlob": {
        "descr": "This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::pingImageBlob", 
        "params": [
            {
                "descr": "A string containing the image.", 
                "name": "image"
            }
        ], 
        "path": "php/imagick.pingimageblob", 
        "syntax": "bool Imagick::pingImageBlob ( string $image )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImageFile": {
        "descr": "This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::pingImageFile", 
        "params": [
            {
                "descr": "An open filehandle to the image.", 
                "name": "filehandle"
            }, 
            {
                "descr": "Optional filename for this image.", 
                "name": "fileName"
            }
        ], 
        "path": "php/imagick.pingimagefile", 
        "syntax": "bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::polaroidImage": {
        "descr": "Simulates a Polaroid picture. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::polaroidImage", 
        "params": [
            {
                "descr": "The polaroid properties", 
                "name": "properties"
            }, 
            {
                "descr": "The polaroid angle", 
                "name": "angle"
            }
        ], 
        "path": "php/imagick.polaroidimage", 
        "syntax": "bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::posterizeImage": {
        "descr": "Reduces the image to a limited number of color level.", 
        "name": "Imagick::posterizeImage", 
        "params": [], 
        "path": "php/imagick.posterizeimage", 
        "syntax": "bool Imagick::posterizeImage ( int $levels , bool $dither )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::previewImages": {
        "descr": "Tiles 9 thumbnails of the specified image with an image processing operation applied at varying strengths. This is helpful to quickly pin-point an appropriate parameter for an image processing operation.", 
        "name": "Imagick::previewImages", 
        "params": [
            {
                "descr": "Preview type. See Preview type constants", 
                "name": "preview"
            }
        ], 
        "path": "php/imagick.previewimages", 
        "syntax": "bool Imagick::previewImages ( int $preview )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::previousImage": {
        "descr": "Assocates the previous image in an image list with the Imagick object.", 
        "name": "Imagick::previousImage", 
        "params": [], 
        "path": "php/imagick.previousimage", 
        "syntax": "bool Imagick::previousImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::profileImage": {
        "descr": "Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.", 
        "name": "Imagick::profileImage", 
        "params": [], 
        "path": "php/imagick.profileimage", 
        "syntax": "bool Imagick::profileImage ( string $name , string $profile )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::quantizeImage": {
        "descr": "", 
        "name": "Imagick::quantizeImage", 
        "params": [], 
        "path": "php/imagick.quantizeimage", 
        "syntax": "bool Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::quantizeImages": {
        "descr": "", 
        "name": "Imagick::quantizeImages", 
        "params": [], 
        "path": "php/imagick.quantizeimages", 
        "syntax": "bool Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFontMetrics": {
        "descr": "Returns a multi-dimensional array representing the font metrics.", 
        "name": "Imagick::queryFontMetrics", 
        "params": [
            {
                "descr": "ImagickDraw object containing font properties", 
                "name": "properties"
            }, 
            {
                "descr": "The text", 
                "name": "text"
            }, 
            {
                "descr": "Multiline parameter. If left empty it is autodetected", 
                "name": "multiline"
            }
        ], 
        "path": "php/imagick.queryfontmetrics", 
        "syntax": "array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFonts": {
        "descr": "Returns the configured fonts.", 
        "name": "Imagick::queryFonts", 
        "params": [
            {
                "descr": "The query pattern", 
                "name": "pattern"
            }
        ], 
        "path": "php/imagick.queryfonts", 
        "syntax": "array Imagick::queryFonts ([ string $pattern = \"*\" ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFormats": {
        "descr": "Returns formats supported by Imagick.", 
        "name": "Imagick::queryFormats", 
        "params": [], 
        "path": "php/imagick.queryformats", 
        "syntax": "array Imagick::queryFormats ([ string $pattern = \"*\" ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::radialBlurImage": {
        "descr": "Radial blurs an image.", 
        "name": "Imagick::radialBlurImage", 
        "params": [], 
        "path": "php/imagick.radialblurimage", 
        "syntax": "bool Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::raiseImage": {
        "descr": "Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.", 
        "name": "Imagick::raiseImage", 
        "params": [], 
        "path": "php/imagick.raiseimage", 
        "syntax": "bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::randomThresholdImage": {
        "descr": "Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::randomThresholdImage", 
        "params": [
            {
                "descr": "The low point", 
                "name": "low"
            }, 
            {
                "descr": "The high point", 
                "name": "high"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.randomthresholdimage", 
        "syntax": "bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImage": {
        "descr": "Reads image from filename", 
        "name": "Imagick::readImage", 
        "params": [], 
        "path": "php/imagick.readimage", 
        "syntax": "bool Imagick::readImage ( string $filename )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImageBlob": {
        "descr": "Reads image from a binary string", 
        "name": "Imagick::readImageBlob", 
        "params": [], 
        "path": "php/imagick.readimageblob", 
        "syntax": "bool Imagick::readImageBlob ( string $image [, string $filename ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImageFile": {
        "descr": "Reads image from open filehandle", 
        "name": "Imagick::readImageFile", 
        "params": [], 
        "path": "php/imagick.readimagefile", 
        "syntax": "bool Imagick::readImageFile ( resource $filehandle [, string $fileName = null ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::recolorImage": {
        "descr": "Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::recolorImage", 
        "params": [
            {
                "descr": "The matrix containing the color values", 
                "name": "matrix"
            }
        ], 
        "path": "php/imagick.recolorimage", 
        "syntax": "bool Imagick::recolorImage ( array $matrix )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::reduceNoiseImage": {
        "descr": "Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius for you.", 
        "name": "Imagick::reduceNoiseImage", 
        "params": [], 
        "path": "php/imagick.reducenoiseimage", 
        "syntax": "bool Imagick::reduceNoiseImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::remapImage": {
        "descr": "Replaces colors an image with those defined by replacement. The colors are replaced with the closest possible color. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::remapImage", 
        "params": [
            {
                "descr": "An Imagick object containing the replacement colors", 
                "name": "replacement"
            }, 
            {
                "descr": "Refer to this list of dither method constants", 
                "name": "DITHER"
            }
        ], 
        "path": "php/imagick.remapimage", 
        "syntax": "public bool Imagick::remapImage ( Imagick $replacement , int $DITHER )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::removeImage": {
        "descr": "Removes an image from the image list.", 
        "name": "Imagick::removeImage", 
        "params": [], 
        "path": "php/imagick.removeimage", 
        "syntax": "bool Imagick::removeImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::removeImageProfile": {
        "descr": "Removes the named image profile and returns it.", 
        "name": "Imagick::removeImageProfile", 
        "params": [], 
        "path": "php/imagick.removeimageprofile", 
        "syntax": "string Imagick::removeImageProfile ( string $name )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::render": {
        "descr": "Renders all preceding drawing commands.", 
        "name": "Imagick::render", 
        "params": [], 
        "path": "php/imagick.render", 
        "syntax": "bool Imagick::render ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resampleImage": {
        "descr": "Resample image to desired resolution.", 
        "name": "Imagick::resampleImage", 
        "params": [], 
        "path": "php/imagick.resampleimage", 
        "syntax": "bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resetImagePage": {
        "descr": "The page definition as a string. The string is in format WxH+x+y. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::resetImagePage", 
        "params": [
            {
                "descr": "The page definition. For example 7168x5147+0+0", 
                "name": "page"
            }
        ], 
        "path": "php/imagick.resetimagepage", 
        "syntax": "bool Imagick::resetImagePage ( string $page )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resizeImage": {
        "descr": "Scales an image to the desired dimensions with a filter.", 
        "name": "Imagick::resizeImage", 
        "params": [
            {
                "descr": "Width of the image", 
                "name": "columns"
            }, 
            {
                "descr": "Height of the image", 
                "name": "rows"
            }, 
            {
                "descr": "Refer to the list of filter constants.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where > 1 is blurry, < 1 is sharp.", 
                "name": "blur"
            }, 
            {
                "descr": "Optional fit parameter.", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.resizeimage", 
        "syntax": "bool Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::rollImage": {
        "descr": "Offsets an image as defined by x and y.", 
        "name": "Imagick::rollImage", 
        "params": [
            {
                "descr": "The X offset.", 
                "name": "x"
            }, 
            {
                "descr": "The Y offset.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.rollimage", 
        "syntax": "bool Imagick::rollImage ( int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::rotateImage": {
        "descr": "Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.", 
        "name": "Imagick::rotateImage", 
        "params": [
            {
                "descr": "The background color", 
                "name": "background"
            }, 
            {
                "descr": "The number of degrees to rotate the image", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagick.rotateimage", 
        "syntax": "bool Imagick::rotateImage ( mixed $background , float $degrees )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::roundCorners": {
        "descr": "Rounds image corners. The first two parameters control the amount of rounding and the three last parameters can be used to fine-tune the rounding process. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::roundCorners", 
        "params": [
            {
                "descr": "x rounding", 
                "name": "x_rounding"
            }, 
            {
                "descr": "y rounding", 
                "name": "y_rounding"
            }, 
            {
                "descr": "stroke width", 
                "name": "stroke_width"
            }, 
            {
                "descr": "image displace", 
                "name": "displace"
            }, 
            {
                "descr": "size correction", 
                "name": "size_correction"
            }
        ], 
        "path": "php/imagick.roundcorners", 
        "syntax": "bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sampleImage": {
        "descr": "Scales an image to the desired dimensions with pixel sampling. Unlike other scaling methods, this method does not introduce any additional color into the scaled image.", 
        "name": "Imagick::sampleImage", 
        "params": [], 
        "path": "php/imagick.sampleimage", 
        "syntax": "bool Imagick::sampleImage ( int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::scaleImage": {
        "descr": "Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.", 
        "name": "Imagick::scaleImage", 
        "params": [], 
        "path": "php/imagick.scaleimage", 
        "syntax": "bool Imagick::scaleImage ( int $cols , int $rows [, bool $bestfit = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::segmentImage": {
        "descr": "Analyses the image and identifies units that are similar. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::segmentImage", 
        "params": [
            {
                "descr": "One of the COLORSPACE constants.", 
                "name": "COLORSPACE"
            }, 
            {
                "descr": "A percentage describing minimum number of pixels contained in hexedra before it is considered valid.", 
                "name": "cluster_threshold"
            }, 
            {
                "descr": "Eliminates noise from the histogram.", 
                "name": "smooth_threshold"
            }, 
            {
                "descr": "Whether to output detailed information about recognised classes.", 
                "name": "verbose"
            }
        ], 
        "path": "php/imagick.segmentimage", 
        "syntax": "public bool Imagick::segmentImage ( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::separateImageChannel": {
        "descr": "Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.", 
        "name": "Imagick::separateImageChannel", 
        "params": [], 
        "path": "php/imagick.separateimagechannel", 
        "syntax": "bool Imagick::separateImageChannel ( int $channel )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sepiaToneImage": {
        "descr": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by sepia toning. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning. A threshold of 80 is a good starting point for a reasonable tone.", 
        "name": "Imagick::sepiaToneImage", 
        "params": [], 
        "path": "php/imagick.sepiatoneimage", 
        "syntax": "bool Imagick::sepiaToneImage ( float $threshold )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setBackgroundColor": {
        "descr": "Sets the object's default background color.", 
        "name": "Imagick::setBackgroundColor", 
        "params": [], 
        "path": "php/imagick.setbackgroundcolor", 
        "syntax": "bool Imagick::setBackgroundColor ( mixed $background )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setColorspace": {
        "descr": "Sets the global colorspace value for the object. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::setColorspace", 
        "params": [
            {
                "descr": "One of the COLORSPACE constants", 
                "name": "COLORSPACE"
            }
        ], 
        "path": "php/imagick.setcolorspace", 
        "syntax": "bool Imagick::setColorspace ( int $COLORSPACE )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setCompression": {
        "descr": "Sets the object's default compression type", 
        "name": "Imagick::setCompression", 
        "params": [], 
        "path": "php/imagick.setcompression", 
        "syntax": "bool Imagick::setCompression ( int $compression )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setCompressionQuality": {
        "descr": "Sets the object's default compression quality.", 
        "name": "Imagick::setCompressionQuality", 
        "params": [], 
        "path": "php/imagick.setcompressionquality", 
        "syntax": "bool Imagick::setCompressionQuality ( int $quality )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFilename": {
        "descr": "Sets the filename before you read or write an image file.", 
        "name": "Imagick::setFilename", 
        "params": [], 
        "path": "php/imagick.setfilename", 
        "syntax": "bool Imagick::setFilename ( string $filename )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFirstIterator": {
        "descr": "Sets the Imagick iterator to the first image.", 
        "name": "Imagick::setFirstIterator", 
        "params": [], 
        "path": "php/imagick.setfirstiterator", 
        "syntax": "bool Imagick::setFirstIterator ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFont": {
        "descr": "Sets object's font property. This method can be used for example to set font for caption: pseudo-format. The font needs to be configured in ImageMagick confiration or a file by the name of font must exist. This method should not be confused with ImagickDraw::setFont() which sets the font for a specific ImagickDraw object. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::setFont", 
        "params": [
            {
                "descr": "Font name or a filename", 
                "name": "font"
            }
        ], 
        "path": "php/imagick.setfont", 
        "syntax": "bool Imagick::setFont ( string $font )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFormat": {
        "descr": "Sets the format of the Imagick object.", 
        "name": "Imagick::setFormat", 
        "params": [], 
        "path": "php/imagick.setformat", 
        "syntax": "bool Imagick::setFormat ( string $format )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setGravity": {
        "descr": "Sets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::setGravity", 
        "params": [
            {
                "descr": "The gravity property. Refer to the list of gravity constants.", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagick.setgravity", 
        "syntax": "bool Imagick::setGravity ( int $gravity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImage": {
        "descr": "Replaces the current image sequence with the image from replace object.", 
        "name": "Imagick::setImage", 
        "params": [
            {
                "descr": "The replace Imagick object", 
                "name": "replace"
            }
        ], 
        "path": "php/imagick.setimage", 
        "syntax": "bool Imagick::setImage ( Imagick $replace )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageAlphaChannel": {
        "descr": "Activate or deactivate image alpha channel. The mode is one of the Imagick::ALPHACHANNEL_* constants. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::setImageAlphaChannel", 
        "params": [
            {
                "descr": "One of the Imagick::ALPHACHANNEL_* constants", 
                "name": "mode"
            }
        ], 
        "path": "php/imagick.setimagealphachannel", 
        "syntax": "bool Imagick::setImageAlphaChannel ( int $mode )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageArtifact": {
        "descr": "Associates an artifact with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::setImageArtifact", 
        "params": [
            {
                "descr": "The name of the artifact", 
                "name": "artifact"
            }, 
            {
                "descr": "The value of the artifact", 
                "name": "value"
            }
        ], 
        "path": "php/imagick.setimageartifact", 
        "syntax": "bool Imagick::setImageArtifact ( string $artifact , string $value )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBackgroundColor": {
        "descr": "Sets the image background color.", 
        "name": "Imagick::setImageBackgroundColor", 
        "params": [], 
        "path": "php/imagick.setimagebackgroundcolor", 
        "syntax": "bool Imagick::setImageBackgroundColor ( mixed $background )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBias": {
        "descr": "Sets the image bias for any method that convolves an image (e.g. Imagick::ConvolveImage()).", 
        "name": "Imagick::setImageBias", 
        "params": [], 
        "path": "php/imagick.setimagebias", 
        "syntax": "bool Imagick::setImageBias ( float $bias )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBluePrimary": {
        "descr": "Sets the image chromaticity blue primary point.", 
        "name": "Imagick::setImageBluePrimary", 
        "params": [], 
        "path": "php/imagick.setimageblueprimary", 
        "syntax": "bool Imagick::setImageBluePrimary ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBorderColor": {
        "descr": "Sets the image border color.", 
        "name": "Imagick::setImageBorderColor", 
        "params": [
            {
                "descr": "The border color", 
                "name": "border"
            }
        ], 
        "path": "php/imagick.setimagebordercolor", 
        "syntax": "bool Imagick::setImageBorderColor ( mixed $border )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageChannelDepth": {
        "descr": "Sets the depth of a particular image channel.", 
        "name": "Imagick::setImageChannelDepth", 
        "params": [], 
        "path": "php/imagick.setimagechanneldepth", 
        "syntax": "bool Imagick::setImageChannelDepth ( int $channel , int $depth )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageClipMask": {
        "descr": "Sets image clip mask from another Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::setImageClipMask", 
        "params": [
            {
                "descr": "The Imagick object containing the clip mask", 
                "name": "clip_mask"
            }
        ], 
        "path": "php/imagick.setimageclipmask", 
        "syntax": "bool Imagick::setImageClipMask ( Imagick $clip_mask )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageColormapColor": {
        "descr": "Sets the color of the specified colormap index.", 
        "name": "Imagick::setImageColormapColor", 
        "params": [], 
        "path": "php/imagick.setimagecolormapcolor", 
        "syntax": "bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageColorspace": {
        "descr": "Sets the image colorspace.", 
        "name": "Imagick::setImageColorspace", 
        "params": [
            {
                "descr": "One of the COLORSPACE constants", 
                "name": "colorspace"
            }
        ], 
        "path": "php/imagick.setimagecolorspace", 
        "syntax": "bool Imagick::setImageColorspace ( int $colorspace )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompose": {
        "descr": "Sets the image composite operator, useful for specifying how to composite the image thumbnail when using the Imagick::montageImage() method.", 
        "name": "Imagick::setImageCompose", 
        "params": [], 
        "path": "php/imagick.setimagecompose", 
        "syntax": "bool Imagick::setImageCompose ( int $compose )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompression": {
        "descr": "", 
        "name": "Imagick::setImageCompression", 
        "params": [
            {
                "descr": "One of the COMPRESSION constants", 
                "name": "compression"
            }
        ], 
        "path": "php/imagick.setimagecompression", 
        "syntax": "bool Imagick::setImageCompression ( int $compression )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompressionQuality": {
        "descr": "Sets the image compression quality.", 
        "name": "Imagick::setImageCompressionQuality", 
        "params": [
            {
                "descr": "The image compression quality as an integer", 
                "name": "quality"
            }
        ], 
        "path": "php/imagick.setimagecompressionquality", 
        "syntax": "bool Imagick::setImageCompressionQuality ( int $quality )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDelay": {
        "descr": "Sets the image delay. For an animated image this is the amount of time that this frame of the image should be displayed for, before displaying the next frame.", 
        "name": "Imagick::setImageDelay", 
        "params": [
            {
                "descr": "The amount of time expressed in 'ticks' that the image should be displayed for. ", 
                "name": "delay"
            }
        ], 
        "path": "php/imagick.setimagedelay", 
        "syntax": "bool Imagick::setImageDelay ( int $delay )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDepth": {
        "descr": "Sets the image depth.", 
        "name": "Imagick::setImageDepth", 
        "params": [], 
        "path": "php/imagick.setimagedepth", 
        "syntax": "bool Imagick::setImageDepth ( int $depth )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDispose": {
        "descr": "Sets the image disposal method.", 
        "name": "Imagick::setImageDispose", 
        "params": [], 
        "path": "php/imagick.setimagedispose", 
        "syntax": "bool Imagick::setImageDispose ( int $dispose )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageExtent": {
        "descr": "Sets the image size (i.e. columns & rows).", 
        "name": "Imagick::setImageExtent", 
        "params": [], 
        "path": "php/imagick.setimageextent", 
        "syntax": "bool Imagick::setImageExtent ( int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageFilename": {
        "descr": "Sets the filename of a particular image in a sequence.", 
        "name": "Imagick::setImageFilename", 
        "params": [], 
        "path": "php/imagick.setimagefilename", 
        "syntax": "bool Imagick::setImageFilename ( string $filename )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageFormat": {
        "descr": "Sets the format of a particular image in a sequence.", 
        "name": "Imagick::setImageFormat", 
        "params": [
            {
                "descr": "String presentation of the image format. ", 
                "name": "format"
            }
        ], 
        "path": "php/imagick.setimageformat", 
        "syntax": "bool Imagick::setImageFormat ( string $format )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGamma": {
        "descr": "Sets the image gamma.", 
        "name": "Imagick::setImageGamma", 
        "params": [], 
        "path": "php/imagick.setimagegamma", 
        "syntax": "bool Imagick::setImageGamma ( float $gamma )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGravity": {
        "descr": "Sets the gravity property for the current image. This method can be used to set the gravity property for a single image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::setImageGravity", 
        "params": [
            {
                "descr": "The gravity property. Refer to the list of gravity constants.", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagick.setimagegravity", 
        "syntax": "bool Imagick::setImageGravity ( int $gravity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGreenPrimary": {
        "descr": "Sets the image chromaticity green primary point.", 
        "name": "Imagick::setImageGreenPrimary", 
        "params": [], 
        "path": "php/imagick.setimagegreenprimary", 
        "syntax": "bool Imagick::setImageGreenPrimary ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageIndex": {
        "descr": "Set the iterator to the position in the image list specified with the index parameter.", 
        "name": "Imagick::setImageIndex", 
        "params": [
            {
                "descr": "The position to set the iterator to", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.setimageindex", 
        "syntax": "bool Imagick::setImageIndex ( int $index )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageInterlaceScheme": {
        "descr": "Sets the image compression.", 
        "name": "Imagick::setImageInterlaceScheme", 
        "params": [], 
        "path": "php/imagick.setimageinterlacescheme", 
        "syntax": "bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageInterpolateMethod": {
        "descr": "Sets the image interpolate pixel method.", 
        "name": "Imagick::setImageInterpolateMethod", 
        "params": [
            {
                "descr": "The method is one of the Imagick::INTERPOLATE_* constants", 
                "name": "method"
            }
        ], 
        "path": "php/imagick.setimageinterpolatemethod", 
        "syntax": "bool Imagick::setImageInterpolateMethod ( int $method )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageIterations": {
        "descr": "Sets the number of iterations an animated image is repeated.", 
        "name": "Imagick::setImageIterations", 
        "params": [
            {
                "descr": "The number of iterations the image should loop over. ", 
                "name": "iterations"
            }
        ], 
        "path": "php/imagick.setimageiterations", 
        "syntax": "bool Imagick::setImageIterations ( int $iterations )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageMatte": {
        "descr": "Sets the image matte channel. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setImageMatte", 
        "params": [
            {
                "descr": "True activates the matte channel and false disables it.", 
                "name": "matte"
            }
        ], 
        "path": "php/imagick.setimagematte", 
        "syntax": "bool Imagick::setImageMatte ( bool $matte )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageMatteColor": {
        "descr": "Sets the image matte color.", 
        "name": "Imagick::setImageMatteColor", 
        "params": [], 
        "path": "php/imagick.setimagemattecolor", 
        "syntax": "bool Imagick::setImageMatteColor ( mixed $matte )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageOpacity": {
        "descr": "Sets the image to the specified opacity level. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer. This method operates on all channels, which means that for example opacity value of 0.5 will set all transparent areas to partially opaque. To add transparency to areas that are not already transparent use Imagick::evaluateImage()", 
        "name": "Imagick::setImageOpacity", 
        "params": [
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagick.setimageopacity", 
        "syntax": "bool Imagick::setImageOpacity ( float $opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageOrientation": {
        "descr": "Sets the image orientation.", 
        "name": "Imagick::setImageOrientation", 
        "params": [
            {
                "descr": "One of the orientation constants", 
                "name": "orientation"
            }
        ], 
        "path": "php/imagick.setimageorientation", 
        "syntax": "bool Imagick::setImageOrientation ( int $orientation )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImagePage": {
        "descr": "Sets the page geometry of the image.", 
        "name": "Imagick::setImagePage", 
        "params": [], 
        "path": "php/imagick.setimagepage", 
        "syntax": "bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageProfile": {
        "descr": "Adds a named profile to the Imagick object. If a profile with the same name already exists, it is replaced. This method differs from the Imagick::ProfileImage() method in that it does not apply any CMS color profiles.", 
        "name": "Imagick::setImageProfile", 
        "params": [], 
        "path": "php/imagick.setimageprofile", 
        "syntax": "bool Imagick::setImageProfile ( string $name , string $profile )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageProperty": {
        "descr": "Sets a named property to the image. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::setImageProperty", 
        "params": [], 
        "path": "php/imagick.setimageproperty", 
        "syntax": "bool Imagick::setImageProperty ( string $name , string $value )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageRedPrimary": {
        "descr": "Sets the image chromaticity red primary point.", 
        "name": "Imagick::setImageRedPrimary", 
        "params": [], 
        "path": "php/imagick.setimageredprimary", 
        "syntax": "bool Imagick::setImageRedPrimary ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageRenderingIntent": {
        "descr": "Sets the image rendering intent.", 
        "name": "Imagick::setImageRenderingIntent", 
        "params": [], 
        "path": "php/imagick.setimagerenderingintent", 
        "syntax": "bool Imagick::setImageRenderingIntent ( int $rendering_intent )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageResolution": {
        "descr": "Sets the image resolution.", 
        "name": "Imagick::setImageResolution", 
        "params": [], 
        "path": "php/imagick.setimageresolution", 
        "syntax": "bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageScene": {
        "descr": "Sets the image scene.", 
        "name": "Imagick::setImageScene", 
        "params": [], 
        "path": "php/imagick.setimagescene", 
        "syntax": "bool Imagick::setImageScene ( int $scene )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageTicksPerSecond": {
        "descr": "Adjust the amount of time that a frame of an animated image is displayed for.", 
        "name": "Imagick::setImageTicksPerSecond", 
        "params": [
            {
                "descr": "The duration for which an image should be displayed expressed in ticks per second.", 
                "name": "ticks_per_second"
            }
        ], 
        "path": "php/imagick.setimagetickspersecond", 
        "syntax": "bool Imagick::setImageTicksPerSecond ( int $ticks_per_second )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageType": {
        "descr": "Sets the image type.", 
        "name": "Imagick::setImageType", 
        "params": [], 
        "path": "php/imagick.setimagetype", 
        "syntax": "bool Imagick::setImageType ( int $image_type )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageUnits": {
        "descr": "Sets the image units of resolution.", 
        "name": "Imagick::setImageUnits", 
        "params": [], 
        "path": "php/imagick.setimageunits", 
        "syntax": "bool Imagick::setImageUnits ( int $units )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageVirtualPixelMethod": {
        "descr": "Sets the image virtual pixel method.", 
        "name": "Imagick::setImageVirtualPixelMethod", 
        "params": [], 
        "path": "php/imagick.setimagevirtualpixelmethod", 
        "syntax": "bool Imagick::setImageVirtualPixelMethod ( int $method )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageWhitePoint": {
        "descr": "Sets the image chromaticity white point.", 
        "name": "Imagick::setImageWhitePoint", 
        "params": [], 
        "path": "php/imagick.setimagewhitepoint", 
        "syntax": "bool Imagick::setImageWhitePoint ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setInterlaceScheme": {
        "descr": "Sets the image compression.", 
        "name": "Imagick::setInterlaceScheme", 
        "params": [], 
        "path": "php/imagick.setinterlacescheme", 
        "syntax": "bool Imagick::setInterlaceScheme ( int $interlace_scheme )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setIteratorIndex": {
        "descr": "Set the iterator to the position in the image list specified with the index parameter. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setIteratorIndex", 
        "params": [
            {
                "descr": "The position to set the iterator to", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.setiteratorindex", 
        "syntax": "bool Imagick::setIteratorIndex ( int $index )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setLastIterator": {
        "descr": "Sets the Imagick iterator to the last image.", 
        "name": "Imagick::setLastIterator", 
        "params": [], 
        "path": "php/imagick.setlastiterator", 
        "syntax": "bool Imagick::setLastIterator ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setOption": {
        "descr": "Associates one or more options with the wand.", 
        "name": "Imagick::setOption", 
        "params": [], 
        "path": "php/imagick.setoption", 
        "syntax": "bool Imagick::setOption ( string $key , string $value )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setPage": {
        "descr": "Sets the page geometry of the Imagick object.", 
        "name": "Imagick::setPage", 
        "params": [], 
        "path": "php/imagick.setpage", 
        "syntax": "bool Imagick::setPage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setPointSize": {
        "descr": "Sets object's point size property. This method can be used for example to set font size for caption: pseudo-format. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::setPointSize", 
        "params": [
            {
                "descr": "Point size", 
                "name": "point_size"
            }
        ], 
        "path": "php/imagick.setpointsize", 
        "syntax": "bool Imagick::setPointSize ( float $point_size )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setResolution": {
        "descr": "Sets the image resolution.", 
        "name": "Imagick::setResolution", 
        "params": [
            {
                "descr": "The horizontal resolution.", 
                "name": "x_resolution"
            }, 
            {
                "descr": "The vertical resolution.", 
                "name": "y_resolution"
            }
        ], 
        "path": "php/imagick.setresolution", 
        "syntax": "bool Imagick::setResolution ( float $x_resolution , float $y_resolution )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setResourceLimit": {
        "descr": "This method is used to modify the resource limits of the underlying ImageMagick library.", 
        "name": "Imagick::setResourceLimit", 
        "params": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }, 
            {
                "descr": "The resource limit. The unit depends on the type of the resource being limited.", 
                "name": "limit"
            }
        ], 
        "path": "php/imagick.setresourcelimit", 
        "syntax": "bool Imagick::setResourceLimit ( int $type , int $limit )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSamplingFactors": {
        "descr": "Sets the image sampling factors.", 
        "name": "Imagick::setSamplingFactors", 
        "params": [], 
        "path": "php/imagick.setsamplingfactors", 
        "syntax": "bool Imagick::setSamplingFactors ( array $factors )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSize": {
        "descr": "Sets the size of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.", 
        "name": "Imagick::setSize", 
        "params": [], 
        "path": "php/imagick.setsize", 
        "syntax": "bool Imagick::setSize ( int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSizeOffset": {
        "descr": "Sets the size and offset of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setSizeOffset", 
        "params": [
            {
                "descr": "The width in pixels.", 
                "name": "columns"
            }, 
            {
                "descr": "The height in pixels.", 
                "name": "rows"
            }, 
            {
                "descr": "The image offset.", 
                "name": "offset"
            }
        ], 
        "path": "php/imagick.setsizeoffset", 
        "syntax": "bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setType": {
        "descr": "Sets the image type attribute.", 
        "name": "Imagick::setType", 
        "params": [], 
        "path": "php/imagick.settype", 
        "syntax": "bool Imagick::setType ( int $image_type )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shadeImage": {
        "descr": "Shines a distant light on an image to create a three-dimensional effect. You control the positioning of the light with azimuth and elevation; azimuth is measured in degrees off the x axis and elevation is measured in pixels above the Z axis. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::shadeImage", 
        "params": [
            {
                "descr": "A value other than zero shades the intensity of each pixel.", 
                "name": "gray"
            }, 
            {
                "descr": "Defines the light source direction.", 
                "name": "azimuth"
            }, 
            {
                "descr": "Defines the light source direction.", 
                "name": "elevation"
            }
        ], 
        "path": "php/imagick.shadeimage", 
        "syntax": "bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shadowImage": {
        "descr": "Simulates an image shadow.", 
        "name": "Imagick::shadowImage", 
        "params": [], 
        "path": "php/imagick.shadowimage", 
        "syntax": "bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sharpenImage": {
        "descr": "Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and Imagick::sharpenImage() selects a suitable radius for you.", 
        "name": "Imagick::sharpenImage", 
        "params": [], 
        "path": "php/imagick.sharpenimage", 
        "syntax": "bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shaveImage": {
        "descr": "Shaves pixels from the image edges. It allocates the memory necessary for the new Image structure and returns a pointer to the new image.", 
        "name": "Imagick::shaveImage", 
        "params": [], 
        "path": "php/imagick.shaveimage", 
        "syntax": "bool Imagick::shaveImage ( int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shearImage": {
        "descr": "Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.", 
        "name": "Imagick::shearImage", 
        "params": [
            {
                "descr": "The background color", 
                "name": "background"
            }, 
            {
                "descr": "The number of degrees to shear on the x axis", 
                "name": "x_shear"
            }, 
            {
                "descr": "The number of degrees to shear on the y axis", 
                "name": "y_shear"
            }
        ], 
        "path": "php/imagick.shearimage", 
        "syntax": "bool Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sigmoidalContrastImage": {
        "descr": "Adjusts the contrast of an image with a non-linear sigmoidal contrast algorithm. Increase the contrast of the image using a sigmoidal transfer function without saturating highlights or shadows. Contrast indicates how much to increase the contrast (0 is none; 3 is typical; 20 is pushing it); mid-point indicates where midtones fall in the resultant image (0 is white; 50 is middle-gray; 100 is black). Set sharpen to TRUE to increase the image contrast otherwise the contrast is reduced.", 
        "name": "Imagick::sigmoidalContrastImage", 
        "params": [], 
        "path": "php/imagick.sigmoidalcontrastimage", 
        "syntax": "bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sketchImage": {
        "descr": "Simulates a pencil sketch. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::sketchImage() selects a suitable radius for you. Angle gives the angle of the blurring motion. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::sketchImage", 
        "params": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }
        ], 
        "path": "php/imagick.sketchimage", 
        "syntax": "bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::solarizeImage": {
        "descr": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.", 
        "name": "Imagick::solarizeImage", 
        "params": [], 
        "path": "php/imagick.solarizeimage", 
        "syntax": "bool Imagick::solarizeImage ( int $threshold )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sparseColorImage": {
        "descr": "Given the arguments array containing numeric values this method interpolates the colors found at those coordinates across the whole image using sparse_method. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::sparseColorImage", 
        "params": [
            {
                "descr": "Refer to this list of sparse method constants", 
                "name": "SPARSE_METHOD"
            }, 
            {
                "descr": "An array containing the coordinates. ", 
                "name": "arguments"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "CHANNEL"
            }
        ], 
        "path": "php/imagick.sparsecolorimage", 
        "syntax": "public bool Imagick::sparseColorImage ( int $SPARSE_METHOD , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::spliceImage": {
        "descr": "Splices a solid color into the image.", 
        "name": "Imagick::spliceImage", 
        "params": [], 
        "path": "php/imagick.spliceimage", 
        "syntax": "bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::spreadImage": {
        "descr": "Special effects method that randomly displaces each pixel in a block defined by the radius parameter.", 
        "name": "Imagick::spreadImage", 
        "params": [], 
        "path": "php/imagick.spreadimage", 
        "syntax": "bool Imagick::spreadImage ( float $radius )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::steganoImage": {
        "descr": "Hides a digital watermark within the image. Recover the hidden watermark later to prove that the authenticity of an image. Offset defines the start position within the image to hide the watermark.", 
        "name": "Imagick::steganoImage", 
        "params": [], 
        "path": "php/imagick.steganoimage", 
        "syntax": "Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::stereoImage": {
        "descr": "Composites two images and produces a single image that is the composite of a left and right image of a stereo pair.", 
        "name": "Imagick::stereoImage", 
        "params": [], 
        "path": "php/imagick.stereoimage", 
        "syntax": "bool Imagick::stereoImage ( Imagick $offset_wand )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::stripImage": {
        "descr": "Strips an image of all profiles and comments.", 
        "name": "Imagick::stripImage", 
        "params": [], 
        "path": "php/imagick.stripimage", 
        "syntax": "bool Imagick::stripImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::swirlImage": {
        "descr": "Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.", 
        "name": "Imagick::swirlImage", 
        "params": [], 
        "path": "php/imagick.swirlimage", 
        "syntax": "bool Imagick::swirlImage ( float $degrees )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::textureImage": {
        "descr": "Repeatedly tiles the texture image across and down the image canvas.", 
        "name": "Imagick::textureImage", 
        "params": [], 
        "path": "php/imagick.textureimage", 
        "syntax": "bool Imagick::textureImage ( Imagick $texture_wand )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::thresholdImage": {
        "descr": "Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.", 
        "name": "Imagick::thresholdImage", 
        "params": [], 
        "path": "php/imagick.thresholdimage", 
        "syntax": "bool Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::thumbnailImage": {
        "descr": "Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.", 
        "name": "Imagick::thumbnailImage", 
        "params": [
            {
                "descr": "Image width", 
                "name": "columns"
            }, 
            {
                "descr": "Image height", 
                "name": "rows"
            }, 
            {
                "descr": "Whether to force maximum values", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.thumbnailimage", 
        "syntax": "bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $bestfit = false [, bool $fill = false ]] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::tintImage": {
        "descr": "Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white and at its maximum for the midtones. The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).", 
        "name": "Imagick::tintImage", 
        "params": [], 
        "path": "php/imagick.tintimage", 
        "syntax": "bool Imagick::tintImage ( mixed $tint , mixed $opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transformImage": {
        "descr": "A convenience method for setting crop size and the image geometry from strings. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transformImage", 
        "params": [
            {
                "descr": "A crop geometry string. This geometry defines a subregion of the image to crop.", 
                "name": "crop"
            }, 
            {
                "descr": "An image geometry string. This geometry defines the final size of the image.", 
                "name": "geometry"
            }
        ], 
        "path": "php/imagick.transformimage", 
        "syntax": "Imagick Imagick::transformImage ( string $crop , string $geometry )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transparentPaintImage": {
        "descr": "Paints pixels matching the target color transparent. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::transparentPaintImage", 
        "params": [
            {
                "descr": "The target color to paint", 
                "name": "target"
            }, 
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }
        ], 
        "path": "php/imagick.transparentpaintimage", 
        "syntax": "bool Imagick::transparentPaintImage ( mixed $target , float $alpha , float $fuzz , bool $invert )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transposeImage": {
        "descr": "Creates a vertical mirror image by reflecting the pixels around the central x-axis while rotating them 90-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transposeImage", 
        "params": [], 
        "path": "php/imagick.transposeimage", 
        "syntax": "bool Imagick::transposeImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transverseImage": {
        "descr": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis while rotating them 270-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transverseImage", 
        "params": [], 
        "path": "php/imagick.transverseimage", 
        "syntax": "bool Imagick::transverseImage ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::trimImage": {
        "descr": "Remove edges that are the background color from the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::trimImage", 
        "params": [
            {
                "descr": "By default target must match a particular pixel color exactly. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagick.trimimage", 
        "syntax": "bool Imagick::trimImage ( float $fuzz )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::uniqueImageColors": {
        "descr": "Discards all but one of any pixel color. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::uniqueImageColors", 
        "params": [], 
        "path": "php/imagick.uniqueimagecolors", 
        "syntax": "bool Imagick::uniqueImageColors ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::unsharpMaskImage": {
        "descr": "Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::UnsharpMaskImage() selects a suitable radius for you.", 
        "name": "Imagick::unsharpMaskImage", 
        "params": [], 
        "path": "php/imagick.unsharpmaskimage", 
        "syntax": "bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::valid": {
        "descr": "Checks if the current item is valid.", 
        "name": "Imagick::valid", 
        "params": [], 
        "path": "php/imagick.valid", 
        "syntax": "bool Imagick::valid ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::vignetteImage": {
        "descr": "Softens the edges of the image in vignette style. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::vignetteImage", 
        "params": [
            {
                "descr": "The black point.", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "X offset of the ellipse", 
                "name": "x"
            }, 
            {
                "descr": "Y offset of the ellipse", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.vignetteimage", 
        "syntax": "bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::waveImage": {
        "descr": "Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::waveImage", 
        "params": [
            {
                "descr": "The amplitude of the wave.", 
                "name": "amplitude"
            }, 
            {
                "descr": "The length of the wave.", 
                "name": "length"
            }
        ], 
        "path": "php/imagick.waveimage", 
        "syntax": "bool Imagick::waveImage ( float $amplitude , float $length )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::whiteThresholdImage": {
        "descr": "Is like Imagick::ThresholdImage() but force all pixels above the threshold into white while leaving all pixels below the threshold unchanged.", 
        "name": "Imagick::whiteThresholdImage", 
        "params": [], 
        "path": "php/imagick.whitethresholdimage", 
        "syntax": "bool Imagick::whiteThresholdImage ( mixed $threshold )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImage": {
        "descr": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Imagick::readImage() or Imagick::setImageFilename().", 
        "name": "Imagick::writeImage", 
        "params": [
            {
                "descr": "Filename where to write the image. ", 
                "name": "filename"
            }
        ], 
        "path": "php/imagick.writeimage", 
        "syntax": "bool Imagick::writeImage ([ string $filename = NULL ] )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImageFile": {
        "descr": "Writes the image sequence to an open filehandle. The handle must be opened with for example fopen. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::writeImageFile", 
        "params": [
            {
                "descr": "Filehandle where to write the image", 
                "name": "filehandle"
            }
        ], 
        "path": "php/imagick.writeimagefile", 
        "syntax": "bool Imagick::writeImageFile ( resource $filehandle )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImages": {
        "descr": "Writes an image or image sequence.", 
        "name": "Imagick::writeImages", 
        "params": [], 
        "path": "php/imagick.writeimages", 
        "syntax": "bool Imagick::writeImages ( string $filename , bool $adjoin )", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImagesFile": {
        "descr": "Writes all image frames into an open filehandle. This method can be used to write animated gifs or other multiframe images into open filehandle. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::writeImagesFile", 
        "params": [
            {
                "descr": "Filehandle where to write the images", 
                "name": "filehandle"
            }
        ], 
        "path": "php/imagick.writeimagesfile", 
        "syntax": "bool Imagick::writeImagesFile ( resource $filehandle )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw": {
        "descr": "", 
        "name": "ImagickDraw", 
        "params": [], 
        "path": "php/class.imagickdraw", 
        "syntax": "bool affine ( array $affine )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::__construct": {
        "descr": "", 
        "name": "ImagickDraw::__construct", 
        "params": [], 
        "path": "php/imagickdraw.construct", 
        "syntax": "ImagickDraw::__construct ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::affine": {
        "descr": "", 
        "name": "ImagickDraw::affine", 
        "params": [
            {
                "descr": "Affine matrix parameters", 
                "name": "affine"
            }
        ], 
        "path": "php/imagickdraw.affine", 
        "syntax": "bool ImagickDraw::affine ( array $affine )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::annotation": {
        "descr": "", 
        "name": "ImagickDraw::annotation", 
        "params": [
            {
                "descr": "The x coordinate where text is drawn", 
                "name": "x"
            }, 
            {
                "descr": "The y coordinate where text is drawn", 
                "name": "y"
            }, 
            {
                "descr": "The text to draw on the image", 
                "name": "text"
            }
        ], 
        "path": "php/imagickdraw.annotation", 
        "syntax": "bool ImagickDraw::annotation ( float $x , float $y , string $text )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::arc": {
        "descr": "", 
        "name": "ImagickDraw::arc", 
        "params": [
            {
                "descr": "Starting x ordinate of bounding rectangle", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate of bounding rectangle", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate of bounding rectangle", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate of bounding rectangle", 
                "name": "ey"
            }, 
            {
                "descr": "starting degrees of rotation", 
                "name": "sd"
            }, 
            {
                "descr": "ending degrees of rotation", 
                "name": "ed"
            }
        ], 
        "path": "php/imagickdraw.arc", 
        "syntax": "bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::bezier": {
        "descr": "", 
        "name": "ImagickDraw::bezier", 
        "params": [
            {
                "descr": "Multidimensional array like array( array( 'x' => 1, 'y' => 2 ), array( 'x' => 3, 'y' => 4 ) )", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.bezier", 
        "syntax": "bool ImagickDraw::bezier ( array $coordinates )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::circle": {
        "descr": "", 
        "name": "ImagickDraw::circle", 
        "params": [
            {
                "descr": "origin x coordinate", 
                "name": "ox"
            }, 
            {
                "descr": "origin y coordinate", 
                "name": "oy"
            }, 
            {
                "descr": "perimeter x coordinate", 
                "name": "px"
            }, 
            {
                "descr": "perimeter y coordinate", 
                "name": "py"
            }
        ], 
        "path": "php/imagickdraw.circle", 
        "syntax": "bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::clear": {
        "descr": "", 
        "name": "ImagickDraw::clear", 
        "params": [], 
        "path": "php/imagickdraw.clear", 
        "syntax": "bool ImagickDraw::clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::clone": {
        "descr": "", 
        "name": "ImagickDraw::clone", 
        "params": [], 
        "path": "php/imagickdraw.clone", 
        "syntax": "ImagickDraw ImagickDraw::clone ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::color": {
        "descr": "", 
        "name": "ImagickDraw::color", 
        "params": [
            {
                "descr": "x coordinate of the paint", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the paint", 
                "name": "y"
            }, 
            {
                "descr": "one of the PAINT_ constants", 
                "name": "paintMethod"
            }
        ], 
        "path": "php/imagickdraw.color", 
        "syntax": "bool ImagickDraw::color ( float $x , float $y , int $paintMethod )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::comment": {
        "descr": "", 
        "name": "ImagickDraw::comment", 
        "params": [
            {
                "descr": "The comment string to add to vector output stream", 
                "name": "comment"
            }
        ], 
        "path": "php/imagickdraw.comment", 
        "syntax": "bool ImagickDraw::comment ( string $comment )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::composite": {
        "descr": "", 
        "name": "ImagickDraw::composite", 
        "params": [
            {
                "descr": "composition operator. One of COMPOSITE_ constants", 
                "name": "compose"
            }, 
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y"
            }, 
            {
                "descr": "width of the composition image", 
                "name": "width"
            }, 
            {
                "descr": "height of the composition image", 
                "name": "height"
            }, 
            {
                "descr": "the Imagick object where composition image is taken from", 
                "name": "compositeWand"
            }
        ], 
        "path": "php/imagickdraw.composite", 
        "syntax": "bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::destroy": {
        "descr": "", 
        "name": "ImagickDraw::destroy", 
        "params": [], 
        "path": "php/imagickdraw.destroy", 
        "syntax": "bool ImagickDraw::destroy ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::ellipse": {
        "descr": "", 
        "name": "ImagickDraw::ellipse", 
        "params": [], 
        "path": "php/imagickdraw.ellipse", 
        "syntax": "bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipPath": {
        "descr": "", 
        "name": "ImagickDraw::getClipPath", 
        "params": [], 
        "path": "php/imagickdraw.getclippath", 
        "syntax": "string ImagickDraw::getClipPath ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipRule": {
        "descr": "", 
        "name": "ImagickDraw::getClipRule", 
        "params": [], 
        "path": "php/imagickdraw.getcliprule", 
        "syntax": "int ImagickDraw::getClipRule ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipUnits": {
        "descr": "", 
        "name": "ImagickDraw::getClipUnits", 
        "params": [], 
        "path": "php/imagickdraw.getclipunits", 
        "syntax": "int ImagickDraw::getClipUnits ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillColor": {
        "descr": "", 
        "name": "ImagickDraw::getFillColor", 
        "params": [], 
        "path": "php/imagickdraw.getfillcolor", 
        "syntax": "ImagickPixel ImagickDraw::getFillColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillOpacity": {
        "descr": "", 
        "name": "ImagickDraw::getFillOpacity", 
        "params": [], 
        "path": "php/imagickdraw.getfillopacity", 
        "syntax": "float ImagickDraw::getFillOpacity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillRule": {
        "descr": "", 
        "name": "ImagickDraw::getFillRule", 
        "params": [], 
        "path": "php/imagickdraw.getfillrule", 
        "syntax": "int ImagickDraw::getFillRule ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFont": {
        "descr": "", 
        "name": "ImagickDraw::getFont", 
        "params": [], 
        "path": "php/imagickdraw.getfont", 
        "syntax": "string ImagickDraw::getFont ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontFamily": {
        "descr": "", 
        "name": "ImagickDraw::getFontFamily", 
        "params": [], 
        "path": "php/imagickdraw.getfontfamily", 
        "syntax": "string ImagickDraw::getFontFamily ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontSize": {
        "descr": "", 
        "name": "ImagickDraw::getFontSize", 
        "params": [], 
        "path": "php/imagickdraw.getfontsize", 
        "syntax": "float ImagickDraw::getFontSize ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontStyle": {
        "descr": "", 
        "name": "ImagickDraw::getFontStyle", 
        "params": [], 
        "path": "php/imagickdraw.getfontstyle", 
        "syntax": "int ImagickDraw::getFontStyle ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontWeight": {
        "descr": "", 
        "name": "ImagickDraw::getFontWeight", 
        "params": [], 
        "path": "php/imagickdraw.getfontweight", 
        "syntax": "int ImagickDraw::getFontWeight ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getGravity": {
        "descr": "", 
        "name": "ImagickDraw::getGravity", 
        "params": [], 
        "path": "php/imagickdraw.getgravity", 
        "syntax": "int ImagickDraw::getGravity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeAntialias": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeAntialias", 
        "params": [], 
        "path": "php/imagickdraw.getstrokeantialias", 
        "syntax": "bool ImagickDraw::getStrokeAntialias ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeColor": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeColor", 
        "params": [], 
        "path": "php/imagickdraw.getstrokecolor", 
        "syntax": "ImagickPixel ImagickDraw::getStrokeColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeDashArray": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeDashArray", 
        "params": [], 
        "path": "php/imagickdraw.getstrokedasharray", 
        "syntax": "array ImagickDraw::getStrokeDashArray ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeDashOffset": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeDashOffset", 
        "params": [], 
        "path": "php/imagickdraw.getstrokedashoffset", 
        "syntax": "float ImagickDraw::getStrokeDashOffset ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeLineCap": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeLineCap", 
        "params": [], 
        "path": "php/imagickdraw.getstrokelinecap", 
        "syntax": "int ImagickDraw::getStrokeLineCap ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeLineJoin": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeLineJoin", 
        "params": [], 
        "path": "php/imagickdraw.getstrokelinejoin", 
        "syntax": "int ImagickDraw::getStrokeLineJoin ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeMiterLimit": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeMiterLimit", 
        "params": [], 
        "path": "php/imagickdraw.getstrokemiterlimit", 
        "syntax": "int ImagickDraw::getStrokeMiterLimit ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeOpacity": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeOpacity", 
        "params": [], 
        "path": "php/imagickdraw.getstrokeopacity", 
        "syntax": "float ImagickDraw::getStrokeOpacity ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeWidth": {
        "descr": "", 
        "name": "ImagickDraw::getStrokeWidth", 
        "params": [], 
        "path": "php/imagickdraw.getstrokewidth", 
        "syntax": "float ImagickDraw::getStrokeWidth ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextAlignment": {
        "descr": "", 
        "name": "ImagickDraw::getTextAlignment", 
        "params": [], 
        "path": "php/imagickdraw.gettextalignment", 
        "syntax": "int ImagickDraw::getTextAlignment ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextAntialias": {
        "descr": "", 
        "name": "ImagickDraw::getTextAntialias", 
        "params": [], 
        "path": "php/imagickdraw.gettextantialias", 
        "syntax": "bool ImagickDraw::getTextAntialias ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextDecoration": {
        "descr": "", 
        "name": "ImagickDraw::getTextDecoration", 
        "params": [], 
        "path": "php/imagickdraw.gettextdecoration", 
        "syntax": "int ImagickDraw::getTextDecoration ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextEncoding": {
        "descr": "", 
        "name": "ImagickDraw::getTextEncoding", 
        "params": [], 
        "path": "php/imagickdraw.gettextencoding", 
        "syntax": "string ImagickDraw::getTextEncoding ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextUnderColor": {
        "descr": "", 
        "name": "ImagickDraw::getTextUnderColor", 
        "params": [], 
        "path": "php/imagickdraw.gettextundercolor", 
        "syntax": "ImagickPixel ImagickDraw::getTextUnderColor ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getVectorGraphics": {
        "descr": "", 
        "name": "ImagickDraw::getVectorGraphics", 
        "params": [], 
        "path": "php/imagickdraw.getvectorgraphics", 
        "syntax": "string ImagickDraw::getVectorGraphics ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::line": {
        "descr": "", 
        "name": "ImagickDraw::line", 
        "params": [
            {
                "descr": "starting x coordinate", 
                "name": "sx"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "sy"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "ex"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "ey"
            }
        ], 
        "path": "php/imagickdraw.line", 
        "syntax": "bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::matte": {
        "descr": "", 
        "name": "ImagickDraw::matte", 
        "params": [
            {
                "descr": "x coordinate of the matte", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the matte", 
                "name": "y"
            }, 
            {
                "descr": "PAINT_ constant", 
                "name": "paintMethod"
            }
        ], 
        "path": "php/imagickdraw.matte", 
        "syntax": "bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathClose": {
        "descr": "", 
        "name": "ImagickDraw::pathClose", 
        "params": [], 
        "path": "php/imagickdraw.pathclose", 
        "syntax": "bool ImagickDraw::pathClose ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToAbsolute", 
        "params": [
            {
                "descr": "x coordinate of the first control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the first control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the first control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the curve end", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the curve end", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoabsolute", 
        "syntax": "bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierAbsolute", 
        "params": [
            {
                "descr": "x coordinate of the control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the end point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the end point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbezierabsolute", 
        "syntax": "bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierRelative", 
        "params": [
            {
                "descr": "starting x coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbezierrelative", 
        "syntax": "bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute", 
        "params": [
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbeziersmoothabsolute", 
        "syntax": "bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative", 
        "params": [
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbeziersmoothrelative", 
        "syntax": "bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToRelative", 
        "params": [
            {
                "descr": "x coordinate of starting control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of starting control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of ending control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of ending control point", 
                "name": "y2"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetorelative", 
        "syntax": "bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToSmoothAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToSmoothAbsolute", 
        "params": [
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the second control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the ending point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the ending point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetosmoothabsolute", 
        "syntax": "bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToSmoothRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathCurveToSmoothRelative", 
        "params": [
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the second control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the ending point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the ending point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetosmoothrelative", 
        "syntax": "bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathEllipticArcAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathEllipticArcAbsolute", 
        "params": [
            {
                "descr": "x radius", 
                "name": "rx"
            }, 
            {
                "descr": "y radius", 
                "name": "ry"
            }, 
            {
                "descr": "x axis rotation", 
                "name": "x_axis_rotation"
            }, 
            {
                "descr": "large arc flag", 
                "name": "large_arc_flag"
            }, 
            {
                "descr": "sweep flag", 
                "name": "sweep_flag"
            }, 
            {
                "descr": "x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathellipticarcabsolute", 
        "syntax": "bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathEllipticArcRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathEllipticArcRelative", 
        "params": [
            {
                "descr": "x radius", 
                "name": "rx"
            }, 
            {
                "descr": "y radius", 
                "name": "ry"
            }, 
            {
                "descr": "x axis rotation", 
                "name": "x_axis_rotation"
            }, 
            {
                "descr": "large arc flag", 
                "name": "large_arc_flag"
            }, 
            {
                "descr": "sweep flag", 
                "name": "sweep_flag"
            }, 
            {
                "descr": "x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathellipticarcrelative", 
        "syntax": "bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathFinish": {
        "descr": "", 
        "name": "ImagickDraw::pathFinish", 
        "params": [], 
        "path": "php/imagickdraw.pathfinish", 
        "syntax": "bool ImagickDraw::pathFinish ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToAbsolute", 
        "params": [
            {
                "descr": "starting x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoabsolute", 
        "syntax": "bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToHorizontalAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToHorizontalAbsolute", 
        "params": [
            {
                "descr": "x coordinate", 
                "name": "x"
            }
        ], 
        "path": "php/imagickdraw.pathlinetohorizontalabsolute", 
        "syntax": "bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToHorizontalRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToHorizontalRelative", 
        "params": [
            {
                "descr": "x coordinate", 
                "name": "x"
            }
        ], 
        "path": "php/imagickdraw.pathlinetohorizontalrelative", 
        "syntax": "bool ImagickDraw::pathLineToHorizontalRelative ( float $x )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToRelative", 
        "params": [
            {
                "descr": "starting x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetorelative", 
        "syntax": "bool ImagickDraw::pathLineToRelative ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToVerticalAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToVerticalAbsolute", 
        "params": [
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoverticalabsolute", 
        "syntax": "bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToVerticalRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathLineToVerticalRelative", 
        "params": [
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoverticalrelative", 
        "syntax": "bool ImagickDraw::pathLineToVerticalRelative ( float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathMoveToAbsolute": {
        "descr": "", 
        "name": "ImagickDraw::pathMoveToAbsolute", 
        "params": [
            {
                "descr": "x coordinate of the starting point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the starting point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathmovetoabsolute", 
        "syntax": "bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathMoveToRelative": {
        "descr": "", 
        "name": "ImagickDraw::pathMoveToRelative", 
        "params": [
            {
                "descr": "target x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "target y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathmovetorelative", 
        "syntax": "bool ImagickDraw::pathMoveToRelative ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathStart": {
        "descr": "", 
        "name": "ImagickDraw::pathStart", 
        "params": [], 
        "path": "php/imagickdraw.pathstart", 
        "syntax": "bool ImagickDraw::pathStart ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::point": {
        "descr": "", 
        "name": "ImagickDraw::point", 
        "params": [
            {
                "descr": "point's x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "point's y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.point", 
        "syntax": "bool ImagickDraw::point ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::polygon": {
        "descr": "", 
        "name": "ImagickDraw::polygon", 
        "params": [
            {
                "descr": "multidimensional array like array( array( 'x' => 3, 'y' => 4 ), array( 'x' => 2, 'y' => 6 ) );", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.polygon", 
        "syntax": "bool ImagickDraw::polygon ( array $coordinates )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::polyline": {
        "descr": "", 
        "name": "ImagickDraw::polyline", 
        "params": [
            {
                "descr": "array of x and y coordinates: array( array( 'x' => 4, 'y' => 6 ), array( 'x' => 8, 'y' => 10 ) )", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.polyline", 
        "syntax": "bool ImagickDraw::polyline ( array $coordinates )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pop": {
        "descr": "", 
        "name": "ImagickDraw::pop", 
        "params": [], 
        "path": "php/imagickdraw.pop", 
        "syntax": "bool ImagickDraw::pop ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popClipPath": {
        "descr": "", 
        "name": "ImagickDraw::popClipPath", 
        "params": [], 
        "path": "php/imagickdraw.popclippath", 
        "syntax": "bool ImagickDraw::popClipPath ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popDefs": {
        "descr": "", 
        "name": "ImagickDraw::popDefs", 
        "params": [], 
        "path": "php/imagickdraw.popdefs", 
        "syntax": "bool ImagickDraw::popDefs ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popPattern": {
        "descr": "", 
        "name": "ImagickDraw::popPattern", 
        "params": [], 
        "path": "php/imagickdraw.poppattern", 
        "syntax": "bool ImagickDraw::popPattern ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::push": {
        "descr": "", 
        "name": "ImagickDraw::push", 
        "params": [], 
        "path": "php/imagickdraw.push", 
        "syntax": "bool ImagickDraw::push ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushClipPath": {
        "descr": "", 
        "name": "ImagickDraw::pushClipPath", 
        "params": [
            {
                "descr": "Clip mask Id", 
                "name": "clip_mask_id"
            }
        ], 
        "path": "php/imagickdraw.pushclippath", 
        "syntax": "bool ImagickDraw::pushClipPath ( string $clip_mask_id )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushDefs": {
        "descr": "", 
        "name": "ImagickDraw::pushDefs", 
        "params": [], 
        "path": "php/imagickdraw.pushdefs", 
        "syntax": "bool ImagickDraw::pushDefs ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushPattern": {
        "descr": "", 
        "name": "ImagickDraw::pushPattern", 
        "params": [
            {
                "descr": "the pattern Id", 
                "name": "pattern_id"
            }, 
            {
                "descr": "x coordinate of the top-left corner", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the top-left corner", 
                "name": "y"
            }, 
            {
                "descr": "width of the pattern", 
                "name": "width"
            }, 
            {
                "descr": "height of the pattern", 
                "name": "height"
            }
        ], 
        "path": "php/imagickdraw.pushpattern", 
        "syntax": "bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::rectangle": {
        "descr": "", 
        "name": "ImagickDraw::rectangle", 
        "params": [
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the bottom right corner", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the bottom right corner", 
                "name": "y2"
            }
        ], 
        "path": "php/imagickdraw.rectangle", 
        "syntax": "bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::render": {
        "descr": "", 
        "name": "ImagickDraw::render", 
        "params": [], 
        "path": "php/imagickdraw.render", 
        "syntax": "bool ImagickDraw::render ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::rotate": {
        "descr": "", 
        "name": "ImagickDraw::rotate", 
        "params": [
            {
                "descr": "degrees to rotate", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.rotate", 
        "syntax": "bool ImagickDraw::rotate ( float $degrees )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::roundRectangle": {
        "descr": "", 
        "name": "ImagickDraw::roundRectangle", 
        "params": [
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the bottom right", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the bottom right", 
                "name": "y2"
            }, 
            {
                "descr": "x rounding", 
                "name": "rx"
            }, 
            {
                "descr": "y rounding", 
                "name": "ry"
            }
        ], 
        "path": "php/imagickdraw.roundrectangle", 
        "syntax": "bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::scale": {
        "descr": "", 
        "name": "ImagickDraw::scale", 
        "params": [
            {
                "descr": "horizontal factor", 
                "name": "x"
            }, 
            {
                "descr": "vertical factor", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.scale", 
        "syntax": "bool ImagickDraw::scale ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipPath": {
        "descr": "", 
        "name": "ImagickDraw::setClipPath", 
        "params": [
            {
                "descr": "the clipping path name", 
                "name": "clip_mask"
            }
        ], 
        "path": "php/imagickdraw.setclippath", 
        "syntax": "bool ImagickDraw::setClipPath ( string $clip_mask )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipRule": {
        "descr": "", 
        "name": "ImagickDraw::setClipRule", 
        "params": [
            {
                "descr": "FILLRULE_ constant", 
                "name": "fill_rule"
            }
        ], 
        "path": "php/imagickdraw.setcliprule", 
        "syntax": "bool ImagickDraw::setClipRule ( int $fill_rule )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipUnits": {
        "descr": "", 
        "name": "ImagickDraw::setClipUnits", 
        "params": [
            {
                "descr": "the number of clip units", 
                "name": "clip_units"
            }
        ], 
        "path": "php/imagickdraw.setclipunits", 
        "syntax": "bool ImagickDraw::setClipUnits ( int $clip_units )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillAlpha": {
        "descr": "", 
        "name": "ImagickDraw::setFillAlpha", 
        "params": [
            {
                "descr": "fill alpha", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagickdraw.setfillalpha", 
        "syntax": "bool ImagickDraw::setFillAlpha ( float $opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillColor": {
        "descr": "", 
        "name": "ImagickDraw::setFillColor", 
        "params": [
            {
                "descr": "ImagickPixel to use to set the color", 
                "name": "fill_pixel"
            }
        ], 
        "path": "php/imagickdraw.setfillcolor", 
        "syntax": "bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillOpacity": {
        "descr": "", 
        "name": "ImagickDraw::setFillOpacity", 
        "params": [
            {
                "descr": "the fill opacity", 
                "name": "fillOpacity"
            }
        ], 
        "path": "php/imagickdraw.setfillopacity", 
        "syntax": "bool ImagickDraw::setFillOpacity ( float $fillOpacity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillPatternURL": {
        "descr": "", 
        "name": "ImagickDraw::setFillPatternURL", 
        "params": [
            {
                "descr": "URL to use to obtain fill pattern.", 
                "name": "fill_url"
            }
        ], 
        "path": "php/imagickdraw.setfillpatternurl", 
        "syntax": "bool ImagickDraw::setFillPatternURL ( string $fill_url )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillRule": {
        "descr": "", 
        "name": "ImagickDraw::setFillRule", 
        "params": [
            {
                "descr": "FILLRULE_ constant", 
                "name": "fill_rule"
            }
        ], 
        "path": "php/imagickdraw.setfillrule", 
        "syntax": "bool ImagickDraw::setFillRule ( int $fill_rule )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFont": {
        "descr": "", 
        "name": "ImagickDraw::setFont", 
        "params": [], 
        "path": "php/imagickdraw.setfont", 
        "syntax": "bool ImagickDraw::setFont ( string $font_name )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontFamily": {
        "descr": "", 
        "name": "ImagickDraw::setFontFamily", 
        "params": [
            {
                "descr": "the font family", 
                "name": "font_family"
            }
        ], 
        "path": "php/imagickdraw.setfontfamily", 
        "syntax": "bool ImagickDraw::setFontFamily ( string $font_family )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontSize": {
        "descr": "", 
        "name": "ImagickDraw::setFontSize", 
        "params": [
            {
                "descr": "the point size", 
                "name": "pointsize"
            }
        ], 
        "path": "php/imagickdraw.setfontsize", 
        "syntax": "bool ImagickDraw::setFontSize ( float $pointsize )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontStretch": {
        "descr": "", 
        "name": "ImagickDraw::setFontStretch", 
        "params": [
            {
                "descr": "STRETCH_ constant", 
                "name": "fontStretch"
            }
        ], 
        "path": "php/imagickdraw.setfontstretch", 
        "syntax": "bool ImagickDraw::setFontStretch ( int $fontStretch )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontStyle": {
        "descr": "", 
        "name": "ImagickDraw::setFontStyle", 
        "params": [
            {
                "descr": "STYLETYPE_ constant", 
                "name": "style"
            }
        ], 
        "path": "php/imagickdraw.setfontstyle", 
        "syntax": "bool ImagickDraw::setFontStyle ( int $style )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontWeight": {
        "descr": "", 
        "name": "ImagickDraw::setFontWeight", 
        "params": [], 
        "path": "php/imagickdraw.setfontweight", 
        "syntax": "bool ImagickDraw::setFontWeight ( int $font_weight )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setGravity": {
        "descr": "", 
        "name": "ImagickDraw::setGravity", 
        "params": [
            {
                "descr": "GRAVITY_ constant", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagickdraw.setgravity", 
        "syntax": "bool ImagickDraw::setGravity ( int $gravity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeAlpha": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeAlpha", 
        "params": [
            {
                "descr": "opacity", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagickdraw.setstrokealpha", 
        "syntax": "bool ImagickDraw::setStrokeAlpha ( float $opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeAntialias": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeAntialias", 
        "params": [
            {
                "descr": "the antialias setting", 
                "name": "stroke_antialias"
            }
        ], 
        "path": "php/imagickdraw.setstrokeantialias", 
        "syntax": "bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeColor": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeColor", 
        "params": [
            {
                "descr": "the stroke color", 
                "name": "stroke_pixel"
            }
        ], 
        "path": "php/imagickdraw.setstrokecolor", 
        "syntax": "bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeDashArray": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeDashArray", 
        "params": [
            {
                "descr": "array of floats", 
                "name": "dashArray"
            }
        ], 
        "path": "php/imagickdraw.setstrokedasharray", 
        "syntax": "bool ImagickDraw::setStrokeDashArray ( array $dashArray )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeDashOffset": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeDashOffset", 
        "params": [
            {
                "descr": "dash offset", 
                "name": "dash_offset"
            }
        ], 
        "path": "php/imagickdraw.setstrokedashoffset", 
        "syntax": "bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeLineCap": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeLineCap", 
        "params": [
            {
                "descr": "LINECAP_ constant", 
                "name": "linecap"
            }
        ], 
        "path": "php/imagickdraw.setstrokelinecap", 
        "syntax": "bool ImagickDraw::setStrokeLineCap ( int $linecap )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeLineJoin": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeLineJoin", 
        "params": [
            {
                "descr": "LINEJOIN_ constant", 
                "name": "linejoin"
            }
        ], 
        "path": "php/imagickdraw.setstrokelinejoin", 
        "syntax": "bool ImagickDraw::setStrokeLineJoin ( int $linejoin )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeMiterLimit": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeMiterLimit", 
        "params": [
            {
                "descr": "the miter limit", 
                "name": "miterlimit"
            }
        ], 
        "path": "php/imagickdraw.setstrokemiterlimit", 
        "syntax": "bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeOpacity": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeOpacity", 
        "params": [
            {
                "descr": "stroke opacity. 1.0 is fully opaque", 
                "name": "stroke_opacity"
            }
        ], 
        "path": "php/imagickdraw.setstrokeopacity", 
        "syntax": "bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokePatternURL": {
        "descr": "", 
        "name": "ImagickDraw::setStrokePatternURL", 
        "params": [
            {
                "descr": "stroke URL", 
                "name": "stroke_url"
            }
        ], 
        "path": "php/imagickdraw.setstrokepatternurl", 
        "syntax": "bool ImagickDraw::setStrokePatternURL ( string $stroke_url )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeWidth": {
        "descr": "", 
        "name": "ImagickDraw::setStrokeWidth", 
        "params": [
            {
                "descr": "stroke width", 
                "name": "stroke_width"
            }
        ], 
        "path": "php/imagickdraw.setstrokewidth", 
        "syntax": "bool ImagickDraw::setStrokeWidth ( float $stroke_width )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextAlignment": {
        "descr": "", 
        "name": "ImagickDraw::setTextAlignment", 
        "params": [
            {
                "descr": "ALIGN_ constant", 
                "name": "alignment"
            }
        ], 
        "path": "php/imagickdraw.settextalignment", 
        "syntax": "bool ImagickDraw::setTextAlignment ( int $alignment )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextAntialias": {
        "descr": "", 
        "name": "ImagickDraw::setTextAntialias", 
        "params": [], 
        "path": "php/imagickdraw.settextantialias", 
        "syntax": "bool ImagickDraw::setTextAntialias ( bool $antiAlias )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextDecoration": {
        "descr": "", 
        "name": "ImagickDraw::setTextDecoration", 
        "params": [
            {
                "descr": "DECORATION_ constant", 
                "name": "decoration"
            }
        ], 
        "path": "php/imagickdraw.settextdecoration", 
        "syntax": "bool ImagickDraw::setTextDecoration ( int $decoration )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextEncoding": {
        "descr": "", 
        "name": "ImagickDraw::setTextEncoding", 
        "params": [
            {
                "descr": "the encoding name", 
                "name": "encoding"
            }
        ], 
        "path": "php/imagickdraw.settextencoding", 
        "syntax": "bool ImagickDraw::setTextEncoding ( string $encoding )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextUnderColor": {
        "descr": "", 
        "name": "ImagickDraw::setTextUnderColor", 
        "params": [
            {
                "descr": "the under color", 
                "name": "under_color"
            }
        ], 
        "path": "php/imagickdraw.settextundercolor", 
        "syntax": "bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setVectorGraphics": {
        "descr": "", 
        "name": "ImagickDraw::setVectorGraphics", 
        "params": [
            {
                "descr": "xml containing the vector graphics", 
                "name": "xml"
            }
        ], 
        "path": "php/imagickdraw.setvectorgraphics", 
        "syntax": "bool ImagickDraw::setVectorGraphics ( string $xml )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setViewbox": {
        "descr": "", 
        "name": "ImagickDraw::setViewbox", 
        "params": [
            {
                "descr": "left x coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "left y coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "right x coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "right y coordinate", 
                "name": "y2"
            }
        ], 
        "path": "php/imagickdraw.setviewbox", 
        "syntax": "bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::skewX": {
        "descr": "", 
        "name": "ImagickDraw::skewX", 
        "params": [
            {
                "descr": "degrees to skew", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.skewx", 
        "syntax": "bool ImagickDraw::skewX ( float $degrees )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::skewY": {
        "descr": "", 
        "name": "ImagickDraw::skewY", 
        "params": [
            {
                "descr": "degrees to skew", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.skewy", 
        "syntax": "bool ImagickDraw::skewY ( float $degrees )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::translate": {
        "descr": "", 
        "name": "ImagickDraw::translate", 
        "params": [
            {
                "descr": "horizontal translation", 
                "name": "x"
            }, 
            {
                "descr": "vertical translation", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.translate", 
        "syntax": "bool ImagickDraw::translate ( float $x , float $y )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel": {
        "descr": "", 
        "name": "ImagickPixel", 
        "params": [], 
        "path": "php/class.imagickpixel", 
        "syntax": "bool clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::__construct": {
        "descr": "", 
        "name": "ImagickPixel::__construct", 
        "params": [
            {
                "descr": "The optional color string to use as the initial value of this object.", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.construct", 
        "syntax": "ImagickPixel::__construct ([ string $color ] )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::clear": {
        "descr": "", 
        "name": "ImagickPixel::clear", 
        "params": [], 
        "path": "php/imagickpixel.clear", 
        "syntax": "bool ImagickPixel::clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::destroy": {
        "descr": "", 
        "name": "ImagickPixel::destroy", 
        "params": [], 
        "path": "php/imagickpixel.destroy", 
        "syntax": "bool ImagickPixel::destroy ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColor": {
        "descr": "Returns the color described by the ImagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.", 
        "name": "ImagickPixel::getColor", 
        "params": [
            {
                "descr": "Normalize the color values", 
                "name": "normalized"
            }
        ], 
        "path": "php/imagickpixel.getcolor", 
        "syntax": "array ImagickPixel::getColor ([ bool $normalized = false ] )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorAsString": {
        "descr": "Returns the color of the ImagickPixel object as a string.", 
        "name": "ImagickPixel::getColorAsString", 
        "params": [], 
        "path": "php/imagickpixel.getcolorasstring", 
        "syntax": "string ImagickPixel::getColorAsString ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorCount": {
        "descr": "", 
        "name": "ImagickPixel::getColorCount", 
        "params": [], 
        "path": "php/imagickpixel.getcolorcount", 
        "syntax": "int ImagickPixel::getColorCount ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorValue": {
        "descr": "Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.", 
        "name": "ImagickPixel::getColorValue", 
        "params": [
            {
                "descr": "The color to get the value of, specified as one of the Imagick color constants. ", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.getcolorvalue", 
        "syntax": "float ImagickPixel::getColorValue ( int $color )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getHSL": {
        "descr": "Returns the normalized HSL color described by the ImagickPixel object, with each of the three values as floating point numbers between 0.0 and 1.0.", 
        "name": "ImagickPixel::getHSL", 
        "params": [], 
        "path": "php/imagickpixel.gethsl", 
        "syntax": "array ImagickPixel::getHSL ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::isPixelSimilar": {
        "descr": "Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. This method replaces ImagickPixel::isSimilar() and correctly normalises the fuzz value to ImageMagick QuantumRange.", 
        "name": "ImagickPixel::isPixelSimilar", 
        "params": [
            {
                "descr": "The ImagickPixel object to compare this object against.", 
                "name": "color"
            }, 
            {
                "descr": "The maximum distance within which to consider these colors as similar. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagickpixel.ispixelsimilar", 
        "syntax": "bool ImagickPixel::isPixelSimilar ( ImagickPixel $color , float $fuzz )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::isSimilar": {
        "descr": "", 
        "name": "ImagickPixel::isSimilar", 
        "params": [
            {
                "descr": "The ImagickPixel object to compare this object against.", 
                "name": "color"
            }, 
            {
                "descr": "The maximum distance within which to consider these colors as similar. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagickpixel.issimilar", 
        "syntax": "bool ImagickPixel::isSimilar ( ImagickPixel $color , float $fuzz )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setColor": {
        "descr": "", 
        "name": "ImagickPixel::setColor", 
        "params": [
            {
                "descr": "The color definition to use in order to initialise the ImagickPixel object.", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.setcolor", 
        "syntax": "bool ImagickPixel::setColor ( string $color )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setColorValue": {
        "descr": "Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to an ImagickPixel object.", 
        "name": "ImagickPixel::setColorValue", 
        "params": [
            {
                "descr": "One of the Imagick color constants e.g. ", 
                "name": "color"
            }, 
            {
                "descr": "The value to set this channel to, ranging from 0 to 1.", 
                "name": "value"
            }
        ], 
        "path": "php/imagickpixel.setcolorvalue", 
        "syntax": "bool ImagickPixel::setColorValue ( int $color , float $value )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setHSL": {
        "descr": "Sets the color described by the ImagickPixel object using normalized values for hue, saturation and luminosity.", 
        "name": "ImagickPixel::setHSL", 
        "params": [
            {
                "descr": "The normalized value for hue, described as a fractional arc (between 0 and 1) of the hue circle, where the zero value is red.", 
                "name": "hue"
            }, 
            {
                "descr": "The normalized value for saturation, with 1 as full saturation.", 
                "name": "saturation"
            }, 
            {
                "descr": "The normalized value for luminosity, on a scale from black at 0 to white at 1, with the full HS value at 0.5 luminosity.", 
                "name": "luminosity"
            }
        ], 
        "path": "php/imagickpixel.sethsl", 
        "syntax": "bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator": {
        "descr": "", 
        "name": "ImagickPixelIterator", 
        "params": [], 
        "path": "php/class.imagickpixeliterator", 
        "syntax": "bool clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::__construct": {
        "descr": "", 
        "name": "ImagickPixelIterator::__construct", 
        "params": [], 
        "path": "php/imagickpixeliterator.construct", 
        "syntax": "ImagickPixelIterator::__construct ( Imagick $wand )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::clear": {
        "descr": "", 
        "name": "ImagickPixelIterator::clear", 
        "params": [], 
        "path": "php/imagickpixeliterator.clear", 
        "syntax": "bool ImagickPixelIterator::clear ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::destroy": {
        "descr": "", 
        "name": "ImagickPixelIterator::destroy", 
        "params": [], 
        "path": "php/imagickpixeliterator.destroy", 
        "syntax": "bool ImagickPixelIterator::destroy ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getCurrentIteratorRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::getCurrentIteratorRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.getcurrentiteratorrow", 
        "syntax": "array ImagickPixelIterator::getCurrentIteratorRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getIteratorRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::getIteratorRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.getiteratorrow", 
        "syntax": "int ImagickPixelIterator::getIteratorRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getNextIteratorRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::getNextIteratorRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.getnextiteratorrow", 
        "syntax": "array ImagickPixelIterator::getNextIteratorRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getPreviousIteratorRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::getPreviousIteratorRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.getpreviousiteratorrow", 
        "syntax": "array ImagickPixelIterator::getPreviousIteratorRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::newPixelIterator": {
        "descr": "", 
        "name": "ImagickPixelIterator::newPixelIterator", 
        "params": [], 
        "path": "php/imagickpixeliterator.newpixeliterator", 
        "syntax": "bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::newPixelRegionIterator": {
        "descr": "", 
        "name": "ImagickPixelIterator::newPixelRegionIterator", 
        "params": [], 
        "path": "php/imagickpixeliterator.newpixelregioniterator", 
        "syntax": "bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::resetIterator": {
        "descr": "", 
        "name": "ImagickPixelIterator::resetIterator", 
        "params": [], 
        "path": "php/imagickpixeliterator.resetiterator", 
        "syntax": "bool ImagickPixelIterator::resetIterator ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorFirstRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::setIteratorFirstRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.setiteratorfirstrow", 
        "syntax": "bool ImagickPixelIterator::setIteratorFirstRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorLastRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::setIteratorLastRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.setiteratorlastrow", 
        "syntax": "bool ImagickPixelIterator::setIteratorLastRow ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorRow": {
        "descr": "", 
        "name": "ImagickPixelIterator::setIteratorRow", 
        "params": [], 
        "path": "php/imagickpixeliterator.setiteratorrow", 
        "syntax": "bool ImagickPixelIterator::setIteratorRow ( int $row )", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::syncIterator": {
        "descr": "", 
        "name": "ImagickPixelIterator::syncIterator", 
        "params": [], 
        "path": "php/imagickpixeliterator.synciterator", 
        "syntax": "bool ImagickPixelIterator::syncIterator ( void )", 
        "type": "Image/ImageMagick"
    }, 
    "InfiniteIterator": {
        "descr": "", 
        "name": "InfiniteIterator", 
        "params": [], 
        "path": "php/class.infiniteiterator", 
        "syntax": "public __construct ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "InfiniteIterator::__construct": {
        "descr": "Constructs an InfiniteIterator from an Iterator.", 
        "name": "InfiniteIterator::__construct", 
        "params": [
            {
                "descr": "The iterator to infinitely iterate over.", 
                "name": "iterator"
            }
        ], 
        "path": "php/infiniteiterator.construct", 
        "syntax": "public InfiniteIterator::__construct ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "InfiniteIterator::next": {
        "descr": "Moves the inner Iterator forward to its next element if there is one, otherwise rewinds the inner Iterator back to the beginning.", 
        "name": "InfiniteIterator::next", 
        "params": [], 
        "path": "php/infiniteiterator.next", 
        "syntax": "public void InfiniteIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "IntlBreakIterator": {
        "descr": "", 
        "name": "IntlBreakIterator", 
        "params": [], 
        "path": "php/class.intlbreakiterator", 
        "syntax": "private __construct ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::__construct": {
        "descr": "", 
        "name": "IntlBreakIterator::__construct", 
        "params": [], 
        "path": "php/intlbreakiterator.construct", 
        "syntax": "private IntlBreakIterator::__construct ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createCharacterInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createCharacterInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createcharacterinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createCharacterInstance ([ string $\"locale\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createCodePointInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createCodePointInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createcodepointinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createCodePointInstance ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createLineInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createLineInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createlineinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createLineInstance ([ string $\"locale\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createSentenceInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createSentenceInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createsentenceinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createSentenceInstance ([ string $\"locale\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createTitleInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createTitleInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createtitleinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createTitleInstance ([ string $\"locale\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createWordInstance": {
        "descr": "", 
        "name": "IntlBreakIterator::createWordInstance", 
        "params": [], 
        "path": "php/intlbreakiterator.createwordinstance", 
        "syntax": "public static ReturnType IntlBreakIterator::createWordInstance ([ string $\"locale\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::current": {
        "descr": "", 
        "name": "IntlBreakIterator::current", 
        "params": [], 
        "path": "php/intlbreakiterator.current", 
        "syntax": "public ReturnType IntlBreakIterator::current ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::first": {
        "descr": "", 
        "name": "IntlBreakIterator::first", 
        "params": [], 
        "path": "php/intlbreakiterator.first", 
        "syntax": "public ReturnType IntlBreakIterator::first ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::following": {
        "descr": "", 
        "name": "IntlBreakIterator::following", 
        "params": [], 
        "path": "php/intlbreakiterator.following", 
        "syntax": "public ReturnType IntlBreakIterator::following ( string $\"offset\" )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getErrorCode": {
        "descr": "Procedural style:", 
        "name": "IntlBreakIterator::getErrorCode", 
        "params": [], 
        "path": "php/intlbreakiterator.geterrorcode", 
        "syntax": "public ReturnType IntlBreakIterator::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getErrorMessage": {
        "descr": "Procedural style:", 
        "name": "IntlBreakIterator::getErrorMessage", 
        "params": [], 
        "path": "php/intlbreakiterator.geterrormessage", 
        "syntax": "public ReturnType IntlBreakIterator::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getLocale": {
        "descr": "", 
        "name": "IntlBreakIterator::getLocale", 
        "params": [], 
        "path": "php/intlbreakiterator.getlocale", 
        "syntax": "public ReturnType IntlBreakIterator::getLocale ( string $\"locale_type\" )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getPartsIterator": {
        "descr": "", 
        "name": "IntlBreakIterator::getPartsIterator", 
        "params": [], 
        "path": "php/intlbreakiterator.getpartsiterator", 
        "syntax": "public ReturnType IntlBreakIterator::getPartsIterator ([ string $\"key_type\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getText": {
        "descr": "", 
        "name": "IntlBreakIterator::getText", 
        "params": [], 
        "path": "php/intlbreakiterator.gettext", 
        "syntax": "public ReturnType IntlBreakIterator::getText ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::isBoundary": {
        "descr": "", 
        "name": "IntlBreakIterator::isBoundary", 
        "params": [], 
        "path": "php/intlbreakiterator.isboundary", 
        "syntax": "public ReturnType IntlBreakIterator::isBoundary ( string $\"offset\" )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::last": {
        "descr": "", 
        "name": "IntlBreakIterator::last", 
        "params": [], 
        "path": "php/intlbreakiterator.last", 
        "syntax": "public ReturnType IntlBreakIterator::last ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::next": {
        "descr": "", 
        "name": "IntlBreakIterator::next", 
        "params": [], 
        "path": "php/intlbreakiterator.next", 
        "syntax": "public ReturnType IntlBreakIterator::next ([ string $\"offset\" ] )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::preceding": {
        "descr": "", 
        "name": "IntlBreakIterator::preceding", 
        "params": [], 
        "path": "php/intlbreakiterator.preceding", 
        "syntax": "public ReturnType IntlBreakIterator::preceding ( string $\"offset\" )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::previous": {
        "descr": "", 
        "name": "IntlBreakIterator::previous", 
        "params": [], 
        "path": "php/intlbreakiterator.previous", 
        "syntax": "public ReturnType IntlBreakIterator::previous ( void )", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::setText": {
        "descr": "", 
        "name": "IntlBreakIterator::setText", 
        "params": [], 
        "path": "php/intlbreakiterator.settext", 
        "syntax": "public ReturnType IntlBreakIterator::setText ( string $\"text\" )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar": {
        "descr": "", 
        "name": "IntlCalendar", 
        "params": [], 
        "path": "php/class.intlcalendar", 
        "syntax": "public bool add ( int $field , int $amount )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::__construct": {
        "descr": "A private constructor for disallowing instantiation with the new operator.", 
        "name": "IntlCalendar::__construct", 
        "params": [], 
        "path": "php/intlcalendar.construct", 
        "syntax": "private IntlCalendar::__construct ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::add": {
        "descr": "Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates).", 
        "name": "IntlCalendar::add", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The signed amount to add to the current field. ", 
                "name": "amount"
            }
        ], 
        "path": "php/intlcalendar.add", 
        "syntax": "public bool IntlCalendar::add ( int $field , int $amount )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::after": {
        "descr": "Returns whether this object\u02bcs time succeeds the argument\u02bcs time.", 
        "name": "IntlCalendar::after", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar whose time will be checked against the primary object\u02bcs time.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.after", 
        "syntax": "public bool IntlCalendar::after ( IntlCalendar $other )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::before": {
        "descr": "Returns whether this object\u02bcs time precedes the argument\u02bcs time.", 
        "name": "IntlCalendar::before", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar whose time will be checked against the primary object\u02bcs time.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.before", 
        "syntax": "public bool IntlCalendar::before ( IntlCalendar $other )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::clear": {
        "descr": "Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to 0, though given the field\u02bcs low priority, its value may have been internally set to another value by the time the field has finished been queried.", 
        "name": "IntlCalendar::clear", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.clear", 
        "syntax": "public bool IntlCalendar::clear ([ int $field = NULL ] )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::createInstance": {
        "descr": "Given a timezone and locale, this method creates an IntlCalendar object. This factory method may return a subclass of IntlCalendar.", 
        "name": "IntlCalendar::createInstance", 
        "params": [
            {
                "descr": "The timezone to use.    NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get().     An IntlTimeZone, which will be used directly.     A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICU\u02bcs database, not PHP\u02bcs.     A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.", 
                "name": "timeZone"
            }, 
            {
                "descr": "A locale to use or NULL to use the default locale.", 
                "name": "locale"
            }
        ], 
        "path": "php/intlcalendar.createinstance", 
        "syntax": "public static IntlCalendar IntlCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = \"\" ]] )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::equals": {
        "descr": "Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.", 
        "name": "IntlCalendar::equals", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar to compare with the primary object.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.equals", 
        "syntax": "public bool IntlCalendar::equals ( IntlCalendar $other )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::fieldDifference": {
        "descr": "Return the difference between the given time and the time this object is set to, with respect to the quantity specified the field parameter.", 
        "name": "IntlCalendar::fieldDifference", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The time against which to compare the quantity represented by the field. ", 
                "name": "when"
            }, 
            {
                "descr": "The field that represents the quantity being compared. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.fielddifference", 
        "syntax": "public int IntlCalendar::fieldDifference ( float $when , int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::fromDateTime": {
        "descr": "Creates an IntlCalendar object either from a DateTime object or from a string from which a DateTime object can be built.", 
        "name": "IntlCalendar::fromDateTime", 
        "params": [
            {
                "descr": "A DateTime object or a string that can be passed to DateTime::__construct().", 
                "name": "dateTime"
            }
        ], 
        "path": "php/intlcalendar.fromdatetime", 
        "syntax": "public static IntlCalendar IntlCalendar::fromDateTime ( mixed $dateTime )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::get": {
        "descr": "Gets the value for a specific field.", 
        "name": "IntlCalendar::get", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.get", 
        "syntax": "public int IntlCalendar::get ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getActualMaximum": {
        "descr": "Returns a field\u02bcs relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the smallest relative maximum for the field and would increment it until reaching the global maximum or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively.", 
        "name": "IntlCalendar::getActualMaximum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getactualmaximum", 
        "syntax": "public int IntlCalendar::getActualMaximum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getActualMinimum": {
        "descr": "Returns a field\u02bcs relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the greatest relative minimum for the field and would decrement it until reaching the global minimum or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively.", 
        "name": "IntlCalendar::getActualMinimum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getactualminimum", 
        "syntax": "public int IntlCalendar::getActualMinimum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getAvailableLocales": {
        "descr": "Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.", 
        "name": "IntlCalendar::getAvailableLocales", 
        "params": [], 
        "path": "php/intlcalendar.getavailablelocales", 
        "syntax": "public static array IntlCalendar::getAvailableLocales ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getDayOfWeekType": {
        "descr": "Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND), a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE).", 
        "name": "IntlCalendar::getDayOfWeekType", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.getdayofweektype", 
        "syntax": "public int IntlCalendar::getDayOfWeekType ( int $dayOfWeek )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getErrorCode": {
        "descr": "Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural\u2012style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure().", 
        "name": "IntlCalendar::getErrorCode", 
        "params": [
            {
                "descr": "The calendar object, on the procedural style interface.", 
                "name": "calendar"
            }
        ], 
        "path": "php/intlcalendar.geterrorcode", 
        "syntax": "public int IntlCalendar::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getErrorMessage": {
        "descr": "Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.", 
        "name": "IntlCalendar::getErrorMessage", 
        "params": [
            {
                "descr": "The calendar object, on the procedural style interface.", 
                "name": "calendar"
            }
        ], 
        "path": "php/intlcalendar.geterrormessage", 
        "syntax": "public string IntlCalendar::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getFirstDayOfWeek": {
        "descr": "The week day deemed to start a week, either the default value for this locale or the value set with IntlCalendar::setFirstDayOfWeek().", 
        "name": "IntlCalendar::getFirstDayOfWeek", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getfirstdayofweek", 
        "syntax": "public int IntlCalendar::getFirstDayOfWeek ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getGreatestMinimum": {
        "descr": "Returns the largest local minimum for a field. This should be a value larger or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn larger or equal to that returned by IntlCalendar::getMinimum(). All these three functions return the same value for the Gregorian calendar.", 
        "name": "IntlCalendar::getGreatestMinimum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getgreatestminimum", 
        "syntax": "public int IntlCalendar::getGreatestMinimum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getKeywordValuesForLocale": {
        "descr": "For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the 'calendar' keyword is supported.", 
        "name": "IntlCalendar::getKeywordValuesForLocale", 
        "params": [
            {
                "descr": "The locale keyword for which relevant values are to be queried. ", 
                "name": "key"
            }, 
            {
                "descr": "The locale onto which the keyword/value pair are to be appended.", 
                "name": "locale"
            }, 
            {
                "descr": "Whether to show only the values commonly used for the specified locale.", 
                "name": "commonlyUsed"
            }
        ], 
        "path": "php/intlcalendar.getkeywordvaluesforlocale", 
        "syntax": "public static Iterator IntlCalendar::getKeywordValuesForLocale ( string $key , string $locale , boolean $commonlyUsed )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getLeastMaximum": {
        "descr": "Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by IntlCalendar::getActualMaxmimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getMaximum().", 
        "name": "IntlCalendar::getLeastMaximum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getleastmaximum", 
        "syntax": "public int IntlCalendar::getLeastMaximum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getLocale": {
        "descr": "Returns the locale used by this calendar object.", 
        "name": "IntlCalendar::getLocale", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "Whether to fetch the actual locale (the locale from which the calendar data originates, with Locale::ACTUAL_LOCALE) or the valid locale, i.e., the most specific locale supported by ICU relatively to the requested locale \u2013 see Locale::VALID_LOCALE. From the most general to the most specific, the locales are ordered in this fashion \u2013 actual locale, valid locale, requested locale.", 
                "name": "localeType"
            }
        ], 
        "path": "php/intlcalendar.getlocale", 
        "syntax": "public string IntlCalendar::getLocale ( int $localeType )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMaximum": {
        "descr": "Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by IntlCalendar::getActualMaximum(), which is in its turn larger or equal to that returned by IntlCalendar::getLeastMaximum().", 
        "name": "IntlCalendar::getMaximum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getmaximum", 
        "syntax": "public int IntlCalendar::getMaximum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMinimalDaysInFirstWeek": {
        "descr": "Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year\u02bcs last week.", 
        "name": "IntlCalendar::getMinimalDaysInFirstWeek", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getminimaldaysinfirstweek", 
        "syntax": "public int IntlCalendar::getMinimalDaysInFirstWeek ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMinimum": {
        "descr": "Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getGreatestMinimum(). For the Gregorian calendar, these three functions always return the same value (for each field).", 
        "name": "IntlCalendar::getMinimum", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getminimum", 
        "syntax": "public int IntlCalendar::getMinimum ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getNow": {
        "descr": "The number of milliseconds that have passed since the reference date. This number is derived from the system time.", 
        "name": "IntlCalendar::getNow", 
        "params": [], 
        "path": "php/intlcalendar.getnow", 
        "syntax": "public static float IntlCalendar::getNow ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getRepeatedWallTimeOption": {
        "descr": "Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST.", 
        "name": "IntlCalendar::getRepeatedWallTimeOption", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getrepeatedwalltimeoption", 
        "syntax": "public int IntlCalendar::getRepeatedWallTimeOption ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getSkippedWallTimeOption": {
        "descr": "Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST.", 
        "name": "IntlCalendar::getSkippedWallTimeOption", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getskippedwalltimeoption", 
        "syntax": "public int IntlCalendar::getSkippedWallTimeOption ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getTime": {
        "descr": "Returns the time associated with this object, expressed as the number of milliseconds since the epoch.", 
        "name": "IntlCalendar::getTime", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettime", 
        "syntax": "public float IntlCalendar::getTime ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getTimeZone": {
        "descr": "Returns the IntlTimeZone object associated with this calendar.", 
        "name": "IntlCalendar::getTimeZone", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettimezone", 
        "syntax": "public IntlTimeZone IntlCalendar::getTimeZone ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getType": {
        "descr": "A string describing the type of this calendar. This is one of the valid values for the calendar keyword value 'calendar'.", 
        "name": "IntlCalendar::getType", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettype", 
        "syntax": "public string IntlCalendar::getType ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getWeekendTransition": {
        "descr": "Returns the number of milliseconds after midnight at which the weekend begins or ends.", 
        "name": "IntlCalendar::getWeekendTransition", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.getweekendtransition", 
        "syntax": "public int IntlCalendar::getWeekendTransition ( string $dayOfWeek )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::inDaylightTime": {
        "descr": "Whether, for the instant represented by this object and for this object\u02bcs timezone, daylight saving time is in place.", 
        "name": "IntlCalendar::inDaylightTime", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.indaylighttime", 
        "syntax": "public bool IntlCalendar::inDaylightTime ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isEquivalentTo": {
        "descr": "Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the timezone, whether the lenient mode is set, the repeated and skipped wall time settings, the days of the week when the weekend starts and ceases and the times where such transitions occur. It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.", 
        "name": "IntlCalendar::isEquivalentTo", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The other calendar against which the comparison is to be made.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.isequivalentto", 
        "syntax": "public bool IntlCalendar::isEquivalentTo ( IntlCalendar $other )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isLenient": {
        "descr": "Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.", 
        "name": "IntlCalendar::isLenient", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.islenient", 
        "syntax": "public bool IntlCalendar::isLenient ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isSet": {
        "descr": "Returns whether a field is set (as opposed to clear). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.", 
        "name": "IntlCalendar::isSet", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.isset", 
        "syntax": "public bool IntlCalendar::isSet ( int $field )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isWeekend": {
        "descr": "Returns whether either the obejct\u02bcs current time or the provided timestamp occur during a weekend in this object\u02bcs calendar system.", 
        "name": "IntlCalendar::isWeekend", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "An optional timestamp representing the number of milliseconds since the epoch, excluding leap seconds. ", 
                "name": "date"
            }
        ], 
        "path": "php/intlcalendar.isweekend", 
        "syntax": "public bool IntlCalendar::isWeekend ([ float $date = NULL ] )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::roll": {
        "descr": "Adds a (signed) amount to a field. The difference with respect to IntlCalendar::add() is that when the field value overflows, it does not carry into more significant fields.", 
        "name": "IntlCalendar::roll", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The (signed) amount to add to the field, TRUE for rolling up (adding 1), or FALSE for rolling down (subtracting 1).", 
                "name": "amountOrUpOrDown"
            }
        ], 
        "path": "php/intlcalendar.roll", 
        "syntax": "public bool IntlCalendar::roll ( int $field , mixed $amountOrUpOrDown )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::set": {
        "descr": "Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the lenient mode.", 
        "name": "IntlCalendar::set", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The new value of the given field.", 
                "name": "value"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_YEAR.", 
                "name": "year"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_MONTH.", 
                "name": "month"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_DAY_OF_MONTH. ", 
                "name": "dayOfMonth"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_HOUR_OF_DAY.", 
                "name": "hour"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_MINUTE.", 
                "name": "minute"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_SECOND.", 
                "name": "second"
            }
        ], 
        "path": "php/intlcalendar.set", 
        "syntax": "public bool IntlCalendar::set ( int $field , int $value )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setFirstDayOfWeek": {
        "descr": "Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR and IntlCalendar::FIELD_YEAR_WOY.", 
        "name": "IntlCalendar::setFirstDayOfWeek", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.setfirstdayofweek", 
        "syntax": "public bool IntlCalendar::setFirstDayOfWeek ( int $dayOfWeek )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setLenient": {
        "descr": "Defines whether the calendar is \u2018lenient mode\u2019. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of IntlCalendar::add() (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.", 
        "name": "IntlCalendar::setLenient", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "Use TRUE to activate the lenient mode; FALSE otherwise.", 
                "name": "isLenient"
            }
        ], 
        "path": "php/intlcalendar.setlenient", 
        "syntax": "public ReturnType IntlCalendar::setLenient ( string $isLenient )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setMinimalDaysInFirstWeek": {
        "descr": "Sets the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year\u02bcs last week.", 
        "name": "IntlCalendar::setMinimalDaysInFirstWeek", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The number of minimal days to set.", 
                "name": "minimalDays"
            }
        ], 
        "path": "php/intlcalendar.setminimaldaysinfirstweek", 
        "syntax": "public bool IntlCalendar::setMinimalDaysInFirstWeek ( int $minimalDays )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setRepeatedWallTimeOption": {
        "descr": "Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST (take the post-DST instant). The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs during DST).", 
        "name": "IntlCalendar::setRepeatedWallTimeOption", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::WALLTIME_FIRST or IntlCalendar::WALLTIME_LAST.", 
                "name": "wallTimeOption"
            }
        ], 
        "path": "php/intlcalendar.setrepeatedwalltimeoption", 
        "syntax": "public bool IntlCalendar::setRepeatedWallTimeOption ( int $wallTimeOption )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setSkippedWallTimeOption": {
        "descr": "Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST (same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID (same instant as when DST begins).", 
        "name": "IntlCalendar::setSkippedWallTimeOption", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::WALLTIME_FIRST, IntlCalendar::WALLTIME_LAST or IntlCalendar::WALLTIME_NEXT_VALID.", 
                "name": "wallTimeOption"
            }
        ], 
        "path": "php/intlcalendar.setskippedwalltimeoption", 
        "syntax": "public bool IntlCalendar::setSkippedWallTimeOption ( int $wallTimeOption )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setTime": {
        "descr": "Sets the instant represented by this object. The instant is represented by a float whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.", 
        "name": "IntlCalendar::setTime", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "An instant represented by the number of number of milliseconds between such instant and the epoch, ignoring leap seconds.", 
                "name": "date"
            }
        ], 
        "path": "php/intlcalendar.settime", 
        "syntax": "public bool IntlCalendar::setTime ( float $date )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setTimeZone": {
        "descr": "Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.", 
        "name": "IntlCalendar::setTimeZone", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The new timezone to be used by this calendar. ", 
                "name": "timeZone"
            }
        ], 
        "path": "php/intlcalendar.settimezone", 
        "syntax": "public bool IntlCalendar::setTimeZone ( mixed $timeZone )", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::toDateTime": {
        "descr": "Create a DateTime object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being DateTime\u02bcs timezone will be backed by PHP\u02bcs timezone while IntlCalendar\u02bcs timezone is backed by ICU\u02bcs).", 
        "name": "IntlCalendar::toDateTime", 
        "params": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.todatetime", 
        "syntax": "public DateTime IntlCalendar::toDateTime ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCodePointBreakIterator": {
        "descr": "", 
        "name": "IntlCodePointBreakIterator", 
        "params": [], 
        "path": "php/class.intlcodepointbreakiterator", 
        "syntax": "public ReturnType getLastCodePoint ( void )", 
        "type": "Internationalization"
    }, 
    "IntlCodePointBreakIterator::getLastCodePoint": {
        "descr": "", 
        "name": "IntlCodePointBreakIterator::getLastCodePoint", 
        "params": [], 
        "path": "php/intlcodepointbreakiterator.getlastcodepoint", 
        "syntax": "public ReturnType IntlCodePointBreakIterator::getLastCodePoint ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter": {
        "descr": "", 
        "name": "IntlDateFormatter", 
        "params": [], 
        "path": "php/class.intldateformatter", 
        "syntax": "public static IntlDateFormatter create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '' ]]] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::create": {
        "descr": "Create a date formatter.", 
        "name": "IntlDateFormatter::create", 
        "params": [
            {
                "descr": "Locale to use when formatting or parsing or NULL to use the value specified in the ini setting intl.default_locale.", 
                "name": "locale"
            }, 
            {
                "descr": "Date type to use (none, short, medium, long, full). ", 
                "name": "datetype"
            }, 
            {
                "descr": "Time type to use (none, short, medium, long, full). ", 
                "name": "timetype"
            }, 
            {
                "descr": "Time zone ID. The default (and the one used if NULL is given) is the one returned by date_default_timezone_get() or, if applicable, that of the IntlCalendar object passed for the calendar parameter. ", 
                "name": "timezone"
            }, 
            {
                "descr": "Calendar to use for formatting or parsing. ", 
                "name": "calendar"
            }, 
            {
                "descr": "Optional pattern to use when formatting or parsing. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/intldateformatter.create", 
        "syntax": "public static IntlDateFormatter IntlDateFormatter::create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '' ]]] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::format": {
        "descr": "Formats the time value as a string.", 
        "name": "IntlDateFormatter::format", 
        "params": [
            {
                "descr": "The date formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "Value to format. This may be a DateTime object, an IntlCalendar object, a numeric type representing a (possibly fractional) number of seconds since epoch or an array in the format output by localtime().   If a DateTime or an IntlCalendar object is passed, its timezone is not considered. The object will be formatted using the formater\u02bcs configured timezone. If one wants to use the timezone of the object to be formatted, IntlDateFormatter::setTimeZone() must be called before with the object\u02bcs timezone. Alternatively, the static function IntlDateFormatter::formatObject() may be used instead.", 
                "name": "value"
            }
        ], 
        "path": "php/intldateformatter.format", 
        "syntax": "public string IntlDateFormatter::format ( mixed $value )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::formatObject": {
        "descr": "This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object.", 
        "name": "IntlDateFormatter::formatObject", 
        "params": [
            {
                "descr": "An object of type IntlCalendar or DateTime. ", 
                "name": "object"
            }, 
            {
                "descr": "How to format the date/time. This can either be an array with two elements (first the date style, then the time style, these being one of the constants IntlDateFormatter::NONE, IntlDateFormatter::SHORT, IntlDateFormatter::MEDIUM, IntlDateFormatter::LONG, IntlDateFormatter::FULL), a long with the value of one of these constants (in which case it will be used both for the time and the date) or a string with the format described in \u00bb the ICU documentation. If NULL, the default style will be used.", 
                "name": "format"
            }, 
            {
                "descr": "The locale to use, or NULL to use the default one.", 
                "name": "locale"
            }
        ], 
        "path": "php/intldateformatter.formatobject", 
        "syntax": "public static string IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getCalendar": {
        "descr": "Procedural style", 
        "name": "IntlDateFormatter::getCalendar", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getcalendar", 
        "syntax": "int IntlDateFormatter::getCalendar ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getCalendarObject": {
        "descr": "Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.", 
        "name": "IntlDateFormatter::getCalendarObject", 
        "params": [], 
        "path": "php/intldateformatter.getcalendarobject", 
        "syntax": "public IntlCalendar IntlDateFormatter::getCalendarObject ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getDateType": {
        "descr": "Returns date type used by the formatter.", 
        "name": "IntlDateFormatter::getDateType", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getdatetype", 
        "syntax": "public int IntlDateFormatter::getDateType ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getErrorCode": {
        "descr": "Get the error code from last operation. Returns error code from the last number formatting operation.", 
        "name": "IntlDateFormatter::getErrorCode", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.geterrorcode", 
        "syntax": "public int IntlDateFormatter::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getErrorMessage": {
        "descr": "Get the error text from the last operation.", 
        "name": "IntlDateFormatter::getErrorMessage", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.geterrormessage", 
        "syntax": "public string IntlDateFormatter::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getLocale": {
        "descr": "Get locale used by the formatter.", 
        "name": "IntlDateFormatter::getLocale", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). ", 
                "name": "hich"
            }
        ], 
        "path": "php/intldateformatter.getlocale", 
        "syntax": "public string IntlDateFormatter::getLocale ([ int $which ] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getPattern": {
        "descr": "Get pattern used by the formatter.", 
        "name": "IntlDateFormatter::getPattern", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getpattern", 
        "syntax": "public string IntlDateFormatter::getPattern ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeType": {
        "descr": "Return time type used by the formatter.", 
        "name": "IntlDateFormatter::getTimeType", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.gettimetype", 
        "syntax": "public int IntlDateFormatter::getTimeType ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeZone": {
        "descr": "Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.", 
        "name": "IntlDateFormatter::getTimeZone", 
        "params": [], 
        "path": "php/intldateformatter.gettimezone", 
        "syntax": "public IntlTimeZone IntlDateFormatter::getTimeZone ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeZoneId": {
        "descr": "Get the timezone-id used for the IntlDateFormatter.", 
        "name": "IntlDateFormatter::getTimeZoneId", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.gettimezoneid", 
        "syntax": "public string IntlDateFormatter::getTimeZoneId ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::isLenient": {
        "descr": "Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.", 
        "name": "IntlDateFormatter::isLenient", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.islenient", 
        "syntax": "public bool IntlDateFormatter::isLenient ( void )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::localtime": {
        "descr": "Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.", 
        "name": "IntlDateFormatter::localtime", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "string to convert to a time", 
                "name": "value"
            }, 
            {
                "descr": "Position at which to start the parsing in $value (zero-based). ", 
                "name": "position"
            }
        ], 
        "path": "php/intldateformatter.localtime", 
        "syntax": "public array IntlDateFormatter::localtime ( string $value [, int &$position ] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::parse": {
        "descr": "Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.", 
        "name": "IntlDateFormatter::parse", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "string to convert to a time", 
                "name": "value"
            }, 
            {
                "descr": "Position at which to start the parsing in $value (zero-based). ", 
                "name": "position"
            }
        ], 
        "path": "php/intldateformatter.parse", 
        "syntax": "public int IntlDateFormatter::parse ( string $value [, int &$position ] )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setCalendar": {
        "descr": "Sets the calendar or calendar type used by the formatter.", 
        "name": "IntlDateFormatter::setCalendar", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "This can either be: the calendar type to use (default is IntlDateFormatter::GREGORIAN, which is also used if NULL is specified) or an IntlCalendar object. ", 
                "name": "which"
            }
        ], 
        "path": "php/intldateformatter.setcalendar", 
        "syntax": "bool IntlDateFormatter::setCalendar ( mixed $which )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setLenient": {
        "descr": "Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values (\"February 30th\") are not accepted.", 
        "name": "IntlDateFormatter::setLenient", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "Sets whether the parser is lenient or not, default is TRUE (lenient).", 
                "name": "lenient"
            }
        ], 
        "path": "php/intldateformatter.setlenient", 
        "syntax": "public bool IntlDateFormatter::setLenient ( bool $lenient )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setPattern": {
        "descr": "Set the pattern used for the IntlDateFormatter.", 
        "name": "IntlDateFormatter::setPattern", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "New pattern string to use. Possible patterns are documented at \u00bb http://userguide.icu-project.org/formatparse/datetime.", 
                "name": "pattern"
            }
        ], 
        "path": "php/intldateformatter.setpattern", 
        "syntax": "public bool IntlDateFormatter::setPattern ( string $pattern )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setTimeZone": {
        "descr": "Sets the timezone that will be used when formatting dates or times with this object.", 
        "name": "IntlDateFormatter::setTimeZone", 
        "params": [
            {
                "descr": "The timezone to use for this formatter. ", 
                "name": "zone"
            }
        ], 
        "path": "php/intldateformatter.settimezone", 
        "syntax": "public boolean IntlDateFormatter::setTimeZone ( mixed $zone )", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setTimeZoneId": {
        "descr": "Sets the time zone to use.", 
        "name": "IntlDateFormatter::setTimeZoneId", 
        "params": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "The time zone ID string of the time zone to use. ", 
                "name": "zone"
            }
        ], 
        "path": "php/intldateformatter.settimezoneid", 
        "syntax": "public bool IntlDateFormatter::setTimeZoneId ( string $zone )", 
        "type": "Internationalization"
    }, 
    "IntlException": {
        "descr": "", 
        "name": "IntlException", 
        "params": [], 
        "path": "php/class.intlexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator": {
        "descr": "", 
        "name": "IntlIterator", 
        "params": [], 
        "path": "php/class.intliterator", 
        "syntax": "public ReturnType current ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator::current": {
        "descr": "", 
        "name": "IntlIterator::current", 
        "params": [], 
        "path": "php/intliterator.current", 
        "syntax": "public ReturnType IntlIterator::current ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator::key": {
        "descr": "", 
        "name": "IntlIterator::key", 
        "params": [], 
        "path": "php/intliterator.key", 
        "syntax": "public ReturnType IntlIterator::key ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator::next": {
        "descr": "", 
        "name": "IntlIterator::next", 
        "params": [], 
        "path": "php/intliterator.next", 
        "syntax": "public ReturnType IntlIterator::next ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator::rewind": {
        "descr": "", 
        "name": "IntlIterator::rewind", 
        "params": [], 
        "path": "php/intliterator.rewind", 
        "syntax": "public ReturnType IntlIterator::rewind ( void )", 
        "type": "Internationalization"
    }, 
    "IntlIterator::valid": {
        "descr": "", 
        "name": "IntlIterator::valid", 
        "params": [], 
        "path": "php/intliterator.valid", 
        "syntax": "public ReturnType IntlIterator::valid ( void )", 
        "type": "Internationalization"
    }, 
    "IntlPartsIterator": {
        "descr": "", 
        "name": "IntlPartsIterator", 
        "params": [], 
        "path": "php/class.intlpartsiterator", 
        "syntax": "public ReturnType getBreakIterator ( void )", 
        "type": "Internationalization"
    }, 
    "IntlPartsIterator::getBreakIterator": {
        "descr": "", 
        "name": "IntlPartsIterator::getBreakIterator", 
        "params": [], 
        "path": "php/intlpartsiterator.getbreakiterator", 
        "syntax": "public ReturnType IntlPartsIterator::getBreakIterator ( void )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator", 
        "params": [], 
        "path": "php/class.intlrulebasedbreakiterator", 
        "syntax": "public __construct ( string $rules [, string $areCompiled ] )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::__construct": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator::__construct", 
        "params": [], 
        "path": "php/intlrulebasedbreakiterator.construct", 
        "syntax": "public IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getBinaryRules": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator::getBinaryRules", 
        "params": [], 
        "path": "php/intlrulebasedbreakiterator.getbinaryrules", 
        "syntax": "public ReturnType IntlRuleBasedBreakIterator::getBinaryRules ( void )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRuleStatus": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator::getRuleStatus", 
        "params": [], 
        "path": "php/intlrulebasedbreakiterator.getrulestatus", 
        "syntax": "public ReturnType IntlRuleBasedBreakIterator::getRuleStatus ( void )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRuleStatusVec": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator::getRuleStatusVec", 
        "params": [], 
        "path": "php/intlrulebasedbreakiterator.getrulestatusvec", 
        "syntax": "public ReturnType IntlRuleBasedBreakIterator::getRuleStatusVec ( void )", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRules": {
        "descr": "", 
        "name": "IntlRuleBasedBreakIterator::getRules", 
        "params": [], 
        "path": "php/intlrulebasedbreakiterator.getrules", 
        "syntax": "public ReturnType IntlRuleBasedBreakIterator::getRules ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone": {
        "descr": "", 
        "name": "IntlTimeZone", 
        "params": [], 
        "path": "php/class.intltimezone", 
        "syntax": "public static integer countEquivalentIDs ( string $zoneId )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::countEquivalentIDs": {
        "descr": "", 
        "name": "IntlTimeZone::countEquivalentIDs", 
        "params": [], 
        "path": "php/intltimezone.countequivalentids", 
        "syntax": "public static integer IntlTimeZone::countEquivalentIDs ( string $zoneId )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createDefault": {
        "descr": "", 
        "name": "IntlTimeZone::createDefault", 
        "params": [], 
        "path": "php/intltimezone.createdefault", 
        "syntax": "public static IntlTimeZone IntlTimeZone::createDefault ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createEnumeration": {
        "descr": "", 
        "name": "IntlTimeZone::createEnumeration", 
        "params": [], 
        "path": "php/intltimezone.createenumeration", 
        "syntax": "public static IntlIterator IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createTimeZone": {
        "descr": "", 
        "name": "IntlTimeZone::createTimeZone", 
        "params": [], 
        "path": "php/intltimezone.createtimezone", 
        "syntax": "public static IntlTimeZone IntlTimeZone::createTimeZone ( string $zoneId )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::fromDateTimeZone": {
        "descr": "", 
        "name": "IntlTimeZone::fromDateTimeZone", 
        "params": [], 
        "path": "php/intltimezone.fromdatetimezone", 
        "syntax": "public static IntlTimeZone IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getCanonicalID": {
        "descr": "", 
        "name": "IntlTimeZone::getCanonicalID", 
        "params": [], 
        "path": "php/intltimezone.getcanonicalid", 
        "syntax": "public static string IntlTimeZone::getCanonicalID ( string $zoneId [, bool &$isSystemID ] )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getDSTSavings": {
        "descr": "", 
        "name": "IntlTimeZone::getDSTSavings", 
        "params": [], 
        "path": "php/intltimezone.getdstsavings", 
        "syntax": "public integer IntlTimeZone::getDSTSavings ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getDisplayName": {
        "descr": "", 
        "name": "IntlTimeZone::getDisplayName", 
        "params": [], 
        "path": "php/intltimezone.getdisplayname", 
        "syntax": "public string IntlTimeZone::getDisplayName ([ bool $isDaylight [, integer $style [, string $locale ]]] )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getEquivalentID": {
        "descr": "", 
        "name": "IntlTimeZone::getEquivalentID", 
        "params": [], 
        "path": "php/intltimezone.getequivalentid", 
        "syntax": "public static string IntlTimeZone::getEquivalentID ( string $zoneId , integer $index )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getErrorCode": {
        "descr": "Procedural style:", 
        "name": "IntlTimeZone::getErrorCode", 
        "params": [], 
        "path": "php/intltimezone.geterrorcode", 
        "syntax": "public integer IntlTimeZone::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getErrorMessage": {
        "descr": "Procedural style:", 
        "name": "IntlTimeZone::getErrorMessage", 
        "params": [], 
        "path": "php/intltimezone.geterrormessage", 
        "syntax": "public string IntlTimeZone::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getGMT": {
        "descr": "", 
        "name": "IntlTimeZone::getGMT", 
        "params": [], 
        "path": "php/intltimezone.getgmt", 
        "syntax": "public static IntlTimeZone IntlTimeZone::getGMT ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getID": {
        "descr": "", 
        "name": "IntlTimeZone::getID", 
        "params": [], 
        "path": "php/intltimezone.getid", 
        "syntax": "public string IntlTimeZone::getID ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getOffset": {
        "descr": "", 
        "name": "IntlTimeZone::getOffset", 
        "params": [], 
        "path": "php/intltimezone.getoffset", 
        "syntax": "public integer IntlTimeZone::getOffset ( float $date , bool $local , integer &$rawOffset , integer &$dstOffset )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getRawOffset": {
        "descr": "", 
        "name": "IntlTimeZone::getRawOffset", 
        "params": [], 
        "path": "php/intltimezone.getrawoffset", 
        "syntax": "public integer IntlTimeZone::getRawOffset ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getTZDataVersion": {
        "descr": "", 
        "name": "IntlTimeZone::getTZDataVersion", 
        "params": [], 
        "path": "php/intltimezone.gettzdataversion", 
        "syntax": "public static string IntlTimeZone::getTZDataVersion ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::hasSameRules": {
        "descr": "", 
        "name": "IntlTimeZone::hasSameRules", 
        "params": [], 
        "path": "php/intltimezone.hassamerules", 
        "syntax": "public bool IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::toDateTimeZone": {
        "descr": "", 
        "name": "IntlTimeZone::toDateTimeZone", 
        "params": [], 
        "path": "php/intltimezone.todatetimezone", 
        "syntax": "public DateTimeZone IntlTimeZone::toDateTimeZone ( void )", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::useDaylightTime": {
        "descr": "", 
        "name": "IntlTimeZone::useDaylightTime", 
        "params": [], 
        "path": "php/intltimezone.usedaylighttime", 
        "syntax": "public bool IntlTimeZone::useDaylightTime ( void )", 
        "type": "Internationalization"
    }, 
    "InvalidArgumentException": {
        "descr": "", 
        "name": "InvalidArgumentException", 
        "params": [], 
        "path": "php/class.invalidargumentexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "Iterator (interface": {
        "descr": "", 
        "name": "Iterator (interface", 
        "params": [], 
        "path": "php/class.iterator", 
        "syntax": "abstract public mixed current ( void )", 
        "type": "Classes and Functions"
    }, 
    "Iterator::current": {
        "descr": "Returns the current element.", 
        "name": "Iterator::current", 
        "params": [], 
        "path": "php/iterator.current", 
        "syntax": "abstract public mixed Iterator::current ( void )", 
        "type": "Classes and Functions"
    }, 
    "Iterator::key": {
        "descr": "Returns the key of the current element.", 
        "name": "Iterator::key", 
        "params": [], 
        "path": "php/iterator.key", 
        "syntax": "abstract public scalar Iterator::key ( void )", 
        "type": "Classes and Functions"
    }, 
    "Iterator::next": {
        "descr": "Moves the current position to the next element.", 
        "name": "Iterator::next", 
        "params": [], 
        "path": "php/iterator.next", 
        "syntax": "abstract public void Iterator::next ( void )", 
        "type": "Classes and Functions"
    }, 
    "Iterator::rewind": {
        "descr": "Rewinds back to the first element of the Iterator.", 
        "name": "Iterator::rewind", 
        "params": [], 
        "path": "php/iterator.rewind", 
        "syntax": "abstract public void Iterator::rewind ( void )", 
        "type": "Classes and Functions"
    }, 
    "Iterator::valid": {
        "descr": "This method is called after Iterator::rewind() and Iterator::next() to check if the current position is valid.", 
        "name": "Iterator::valid", 
        "params": [], 
        "path": "php/iterator.valid", 
        "syntax": "abstract public boolean Iterator::valid ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorAggregate (interface": {
        "descr": "", 
        "name": "IteratorAggregate (interface", 
        "params": [], 
        "path": "php/class.iteratoraggregate", 
        "syntax": "abstract public Traversable getIterator ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorAggregate::getIterator": {
        "descr": "Returns an external iterator.", 
        "name": "IteratorAggregate::getIterator", 
        "params": [], 
        "path": "php/iteratoraggregate.getiterator", 
        "syntax": "abstract public Traversable IteratorAggregate::getIterator ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator": {
        "descr": "", 
        "name": "IteratorIterator", 
        "params": [], 
        "path": "php/class.iteratoriterator", 
        "syntax": "public __construct ( Traversable $iterator )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::__construct": {
        "descr": "Creates an iterator from anything that is traversable.", 
        "name": "IteratorIterator::__construct", 
        "params": [
            {
                "descr": "The traversable iterator.", 
                "name": "iterator"
            }
        ], 
        "path": "php/iteratoriterator.construct", 
        "syntax": "public IteratorIterator::__construct ( Traversable $iterator )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::current": {
        "descr": "Get the value of the current element.", 
        "name": "IteratorIterator::current", 
        "params": [], 
        "path": "php/iteratoriterator.current", 
        "syntax": "public mixed IteratorIterator::current ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::getInnerIterator": {
        "descr": "Get the inner iterator.", 
        "name": "IteratorIterator::getInnerIterator", 
        "params": [], 
        "path": "php/iteratoriterator.getinneriterator", 
        "syntax": "public Traversable IteratorIterator::getInnerIterator ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::key": {
        "descr": "Get the key of the current element.", 
        "name": "IteratorIterator::key", 
        "params": [], 
        "path": "php/iteratoriterator.key", 
        "syntax": "public scalar IteratorIterator::key ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::next": {
        "descr": "Forward to the next element.", 
        "name": "IteratorIterator::next", 
        "params": [], 
        "path": "php/iteratoriterator.next", 
        "syntax": "public void IteratorIterator::next ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::rewind": {
        "descr": "Rewinds to the first element.", 
        "name": "IteratorIterator::rewind", 
        "params": [], 
        "path": "php/iteratoriterator.rewind", 
        "syntax": "public void IteratorIterator::rewind ( void )", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::valid": {
        "descr": "Checks if the iterator is valid.", 
        "name": "IteratorIterator::valid", 
        "params": [], 
        "path": "php/iteratoriterator.valid", 
        "syntax": "public bool IteratorIterator::valid ( void )", 
        "type": "Classes and Functions"
    }, 
    "JDDayOfWeek": {
        "descr": "Returns the day of the week. Can return a string or an integer depending on the mode.", 
        "name": "JDDayOfWeek", 
        "params": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }, 
            {
                "descr": "Calendar week modes Mode Meaning 0 (Default)  Return the day number as an int (0=Sunday, 1=Monday, etc)  1  Returns string containing the day of week (English-Gregorian)  2  Return a string containing the abbreviated day of week (English-Gregorian)", 
                "name": "mode"
            }
        ], 
        "path": "php/function.jddayofweek", 
        "syntax": "mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )", 
        "type": "Date and Time"
    }, 
    "JDMonthName": {
        "descr": "Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.", 
        "name": "JDMonthName", 
        "params": [
            {
                "descr": "The Julian Day to operate on", 
                "name": "jday"
            }, 
            {
                "descr": "The calendar to take the month name from", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.jdmonthname", 
        "syntax": "string jdmonthname ( int $julianday , int $mode )", 
        "type": "Date and Time"
    }, 
    "JDToFrench": {
        "descr": "Converts a Julian Day Count to the French Republican Calendar.", 
        "name": "JDToFrench", 
        "params": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtofrench", 
        "syntax": "string jdtofrench ( int $juliandaycount )", 
        "type": "Date and Time"
    }, 
    "JDToGregorian": {
        "descr": "Converts Julian Day Count to a string containing the Gregorian date in the format of \"month/day/year\".", 
        "name": "JDToGregorian", 
        "params": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtogregorian", 
        "syntax": "string jdtogregorian ( int $julianday )", 
        "type": "Date and Time"
    }, 
    "JDToJulian": {
        "descr": "Converts Julian Day Count to a string containing the Julian Calendar Date in the format of \"month/day/year\".", 
        "name": "JDToJulian", 
        "params": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtojulian", 
        "syntax": "string jdtojulian ( int $julianday )", 
        "type": "Date and Time"
    }, 
    "JewishToJD": {
        "descr": "Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.", 
        "name": "JewishToJD", 
        "params": [
            {
                "descr": "The month as a number from 1 to 13", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 30", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between 1 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.jewishtojd", 
        "syntax": "int jewishtojd ( int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "JsonSerializable (interface": {
        "descr": "", 
        "name": "JsonSerializable (interface", 
        "params": [], 
        "path": "php/class.jsonserializable", 
        "syntax": "abstract public mixed jsonSerialize ( void )", 
        "type": "JSON"
    }, 
    "JsonSerializable::jsonSerialize": {
        "descr": "Serializes the object to a value that can be serialized natively by json_encode().", 
        "name": "JsonSerializable::jsonSerialize", 
        "params": [], 
        "path": "php/jsonserializable.jsonserialize", 
        "syntax": "abstract public mixed JsonSerializable::jsonSerialize ( void )", 
        "type": "JSON"
    }, 
    "JulianToJD": {
        "descr": "Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.", 
        "name": "JulianToJD", 
        "params": [
            {
                "descr": "The month as a number from 1 (for January) to 12 (for December)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 31", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between -4713 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.juliantojd", 
        "syntax": "int juliantojd ( int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "LengthException": {
        "descr": "", 
        "name": "LengthException", 
        "params": [], 
        "path": "php/class.lengthexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "LimitIterator": {
        "descr": "", 
        "name": "LimitIterator", 
        "params": [], 
        "path": "php/class.limititerator", 
        "syntax": "public __construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::__construct": {
        "descr": "Constructs a new LimitIterator from an iterator with a given starting offset and maximum count.", 
        "name": "LimitIterator::__construct", 
        "params": [
            {
                "descr": "The Iterator to limit.", 
                "name": "iterator"
            }, 
            {
                "descr": "Optional offset of the limit.", 
                "name": "offset"
            }, 
            {
                "descr": "Optional count of the limit.", 
                "name": "count"
            }
        ], 
        "path": "php/limititerator.construct", 
        "syntax": "public LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::current": {
        "descr": "Gets the current element of the inner Iterator.", 
        "name": "LimitIterator::current", 
        "params": [], 
        "path": "php/limititerator.current", 
        "syntax": "public mixed LimitIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::getInnerIterator": {
        "descr": "Gets the inner Iterator.", 
        "name": "LimitIterator::getInnerIterator", 
        "params": [], 
        "path": "php/limititerator.getinneriterator", 
        "syntax": "public Iterator LimitIterator::getInnerIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::getPosition": {
        "descr": "Gets the current zero-based position of the inner Iterator.", 
        "name": "LimitIterator::getPosition", 
        "params": [], 
        "path": "php/limititerator.getposition", 
        "syntax": "public int LimitIterator::getPosition ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::key": {
        "descr": "Gets the key for the current item in the inner Iterator.", 
        "name": "LimitIterator::key", 
        "params": [], 
        "path": "php/limititerator.key", 
        "syntax": "public mixed LimitIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::next": {
        "descr": "Moves the iterator forward.", 
        "name": "LimitIterator::next", 
        "params": [], 
        "path": "php/limititerator.next", 
        "syntax": "public void LimitIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::rewind": {
        "descr": "Rewinds the iterator to the starting offset specified in LimitIterator::__construct().", 
        "name": "LimitIterator::rewind", 
        "params": [], 
        "path": "php/limititerator.rewind", 
        "syntax": "public void LimitIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::seek": {
        "descr": "Moves the iterator to the offset specified by position.", 
        "name": "LimitIterator::seek", 
        "params": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/limititerator.seek", 
        "syntax": "public int LimitIterator::seek ( int $position )", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::valid": {
        "descr": "Checks whether the current element is valid.", 
        "name": "LimitIterator::valid", 
        "params": [], 
        "path": "php/limititerator.valid", 
        "syntax": "public bool LimitIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Locale": {
        "descr": "", 
        "name": "Locale", 
        "params": [], 
        "path": "php/class.locale", 
        "syntax": "public static string acceptFromHttp ( string $header )", 
        "type": "Internationalization"
    }, 
    "Locale::acceptFromHttp": {
        "descr": "Tries to find locale that can satisfy the language list that is requested by the HTTP \"Accept-Language\" header.", 
        "name": "Locale::acceptFromHttp", 
        "params": [
            {
                "descr": "The string containing the \"Accept-Language\" header according to format in RFC 2616.", 
                "name": "header"
            }
        ], 
        "path": "php/locale.acceptfromhttp", 
        "syntax": "public static string Locale::acceptFromHttp ( string $header )", 
        "type": "Internationalization"
    }, 
    "Locale::canonicalize": {
        "descr": "", 
        "name": "Locale::canonicalize", 
        "params": [], 
        "path": "php/locale.canonicalize", 
        "syntax": "public static string Locale::canonicalize ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::composeLocale": {
        "descr": "Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.", 
        "name": "Locale::composeLocale", 
        "params": [
            {
                "descr": "an array containing a list of key-value pairs, where the keys identify the particular locale ID subtags, and the values are the associated subtag values. ", 
                "name": "subtags"
            }
        ], 
        "path": "php/locale.composelocale", 
        "syntax": "public static string Locale::composeLocale ( array $subtags )", 
        "type": "Internationalization"
    }, 
    "Locale::filterMatches": {
        "descr": "Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm", 
        "name": "Locale::filterMatches", 
        "params": [
            {
                "descr": "The language tag to check", 
                "name": "langtag"
            }, 
            {
                "descr": "The language range to check against", 
                "name": "locale"
            }, 
            {
                "descr": "If true, the arguments will be converted to canonical form before matching.", 
                "name": "canonicalize"
            }
        ], 
        "path": "php/locale.filtermatches", 
        "syntax": "public static bool Locale::filterMatches ( string $langtag , string $locale [, bool $canonicalize = false ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getAllVariants": {
        "descr": "Gets the variants for the input locale", 
        "name": "Locale::getAllVariants", 
        "params": [
            {
                "descr": "The locale to extract the variants from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getallvariants", 
        "syntax": "public static array Locale::getAllVariants ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::getDefault": {
        "descr": "Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().", 
        "name": "Locale::getDefault", 
        "params": [], 
        "path": "php/locale.getdefault", 
        "syntax": "public static string Locale::getDefault ( void )", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayLanguage": {
        "descr": "Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayLanguage", 
        "params": [
            {
                "descr": "The locale to return a display language for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the language name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplaylanguage", 
        "syntax": "public static string Locale::getDisplayLanguage ( string $locale [, string $in_locale ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayName": {
        "descr": "Returns an appropriately localized display name for the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayName", 
        "params": [
            {
                "descr": "The locale to return a display name for.", 
                "name": "locale"
            }, 
            {
                "descr": "optional format locale", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayname", 
        "syntax": "public static string Locale::getDisplayName ( string $locale [, string $in_locale ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayRegion": {
        "descr": "Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayRegion", 
        "params": [
            {
                "descr": "The locale to return a display region for.", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the region name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayregion", 
        "syntax": "public static string Locale::getDisplayRegion ( string $locale [, string $in_locale ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayScript": {
        "descr": "Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayScript", 
        "params": [
            {
                "descr": "The locale to return a display script for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the script name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayscript", 
        "syntax": "public static string Locale::getDisplayScript ( string $locale [, string $in_locale ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayVariant": {
        "descr": "Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayVariant", 
        "params": [
            {
                "descr": "The locale to return a display variant for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the variant name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayvariant", 
        "syntax": "public static string Locale::getDisplayVariant ( string $locale [, string $in_locale ] )", 
        "type": "Internationalization"
    }, 
    "Locale::getKeywords": {
        "descr": "Gets the keywords for the input locale.", 
        "name": "Locale::getKeywords", 
        "params": [
            {
                "descr": "The locale to extract the keywords from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getkeywords", 
        "syntax": "public static array Locale::getKeywords ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::getPrimaryLanguage": {
        "descr": "Gets the primary language for the input locale", 
        "name": "Locale::getPrimaryLanguage", 
        "params": [
            {
                "descr": "The locale to extract the primary language code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getprimarylanguage", 
        "syntax": "public static string Locale::getPrimaryLanguage ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::getRegion": {
        "descr": "Gets the region for the input locale.", 
        "name": "Locale::getRegion", 
        "params": [
            {
                "descr": "The locale to extract the region code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getregion", 
        "syntax": "public static string Locale::getRegion ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::getScript": {
        "descr": "Gets the script for the input locale.", 
        "name": "Locale::getScript", 
        "params": [
            {
                "descr": "The locale to extract the script code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getscript", 
        "syntax": "public static string Locale::getScript ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::lookup": {
        "descr": "Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.", 
        "name": "Locale::lookup", 
        "params": [
            {
                "descr": "An array containing a list of language tags to compare to locale. ", 
                "name": "langtag"
            }, 
            {
                "descr": "The locale to use as the language range when matching.", 
                "name": "locale"
            }, 
            {
                "descr": "If true, the arguments will be converted to canonical form before matching.", 
                "name": "canonicalize"
            }, 
            {
                "descr": "The locale to use if no match is found.", 
                "name": "default"
            }
        ], 
        "path": "php/locale.lookup", 
        "syntax": "public static string Locale::lookup ( array $langtag , string $locale [, bool $canonicalize = false [, string $default ]] )", 
        "type": "Internationalization"
    }, 
    "Locale::parseLocale": {
        "descr": "Returns a key-value array of locale ID subtag elements.", 
        "name": "Locale::parseLocale", 
        "params": [
            {
                "descr": "The locale to extract the subtag array from. ", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.parselocale", 
        "syntax": "public static array Locale::parseLocale ( string $locale )", 
        "type": "Internationalization"
    }, 
    "Locale::setDefault": {
        "descr": "Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.", 
        "name": "Locale::setDefault", 
        "params": [
            {
                "descr": "Is a BCP 47 compliant language tag containing the", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.setdefault", 
        "syntax": "public static bool Locale::setDefault ( string $locale )", 
        "type": "Internationalization"
    }, 
    "LogicException": {
        "descr": "", 
        "name": "LogicException", 
        "params": [], 
        "path": "php/class.logicexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "Memcached": {
        "descr": "", 
        "name": "Memcached", 
        "params": [], 
        "path": "php/class.memcached", 
        "syntax": "public bool add ( string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::add": {
        "descr": "Memcached::add() is similar to Memcached::set(), but the operation fails if the key already exists on the server.", 
        "name": "Memcached::add", 
        "params": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.add", 
        "syntax": "public bool Memcached::add ( string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::addByKey": {
        "descr": "Memcached::addByKey() is functionally equivalent to Memcached::add(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::addByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.addbykey", 
        "syntax": "public bool Memcached::addByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::addServer": {
        "descr": "Memcached::addServer() adds the specified server to the server pool. No connection is established to the server at this time, but if you are using consistent key distribution option (via Memcached::DISTRIBUTION_CONSISTENT or Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data structures will have to be updated. Thus, if you need to add multiple servers, it is better to use Memcached::addServers() as the update then happens only once.", 
        "name": "Memcached::addServer", 
        "params": [
            {
                "descr": "The hostname of the memcache server. ", 
                "name": "host"
            }, 
            {
                "descr": "The port on which memcache is running. ", 
                "name": "port"
            }, 
            {
                "descr": "The weight of the server relative to the total weight of all the servers in the pool. ", 
                "name": "weight"
            }
        ], 
        "path": "php/memcached.addserver", 
        "syntax": "public bool Memcached::addServer ( string $host , int $port [, int $weight = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::addServers": {
        "descr": "Memcached::addServers() adds servers to the server pool. Each entry in servers is supposed to be an array containing hostname, port, and, optionally, weight of the server. No connection is established to the servers at this time.", 
        "name": "Memcached::addServers", 
        "params": [
            {
                "descr": "Array of the servers to add to the pool.", 
                "name": "array"
            }
        ], 
        "path": "php/memcached.addservers", 
        "syntax": "public bool Memcached::addServers ( array $servers )", 
        "type": "Memcached"
    }, 
    "Memcached::append": {
        "descr": "Memcached::append() appends the given value string to the value of an existing item. The reason that value is forced to be a string is that appending mixed types is not well-defined.", 
        "name": "Memcached::append", 
        "params": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The string to append.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.append", 
        "syntax": "public bool Memcached::append ( string $key , string $value )", 
        "type": "Memcached"
    }, 
    "Memcached::appendByKey": {
        "descr": "Memcached::appendByKey() is functionally equivalent to Memcached::append(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::appendByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The string to append.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.appendbykey", 
        "syntax": "public bool Memcached::appendByKey ( string $server_key , string $key , string $value )", 
        "type": "Memcached"
    }, 
    "Memcached::cas": {
        "descr": "Memcached::cas() performs a \"check and set\" operation, so that the item will be stored only if no other client has updated it since it was last fetched by this client. The check is done via the cas_token parameter which is a unique 64-bit value assigned to the existing item by memcache. See the documentation for Memcached::get*() methods for how to obtain this token. Note that the token is represented as a double due to the limitations of PHP's integer space.", 
        "name": "Memcached::cas", 
        "params": [
            {
                "descr": "Unique value associated with the existing item. ", 
                "name": "cas_token"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.cas", 
        "syntax": "public bool Memcached::cas ( float $cas_token , string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::casByKey": {
        "descr": "Memcached::casByKey() is functionally equivalent to Memcached::cas(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::casByKey", 
        "params": [
            {
                "descr": "Unique value associated with the existing item. ", 
                "name": "cas_token"
            }, 
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.casbykey", 
        "syntax": "public bool Memcached::casByKey ( float $cas_token , string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::decrement": {
        "descr": "Memcached::decrement() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrement() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::decrement", 
        "params": [
            {
                "descr": "The key of the item to decrement.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to decrement the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.decrement", 
        "syntax": "public int Memcached::decrement ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "type": "Memcached"
    }, 
    "Memcached::decrementByKey": {
        "descr": "Memcached::decrementByKey() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrementByKey() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::decrementByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to decrement.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to decrement the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.decrementbykey", 
        "syntax": "public int Memcached::decrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "type": "Memcached"
    }, 
    "Memcached::delete": {
        "descr": "Memcached::delete() deletes the key from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for this key. For this amount of time, the item is put into a delete queue, which means that it won't possible to retrieve it by the get command, but add and replace command with this key will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with this key will succeed).", 
        "name": "Memcached::delete", 
        "params": [
            {
                "descr": "The key to be deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the item.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.delete", 
        "syntax": "public bool Memcached::delete ( string $key [, int $time = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::deleteByKey": {
        "descr": "Memcached::deleteByKey() is functionally equivalent to Memcached::delete(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::deleteByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key to be deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the item.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletebykey", 
        "syntax": "public bool Memcached::deleteByKey ( string $server_key , string $key [, int $time = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::deleteMulti": {
        "descr": "Memcached::deleteMulti() deletes the array of keys from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for these keys. For this amount of time, the item is put into a delete queue, which means that it won't be possible to retrieve it by the get command, but add and replace command with these keys will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with these keys will succeed).", 
        "name": "Memcached::deleteMulti", 
        "params": [
            {
                "descr": "The keys to be deleted.", 
                "name": "keys"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the items.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletemulti", 
        "syntax": "public bool Memcached::deleteMulti ( array $keys [, int $time = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::deleteMultiByKey": {
        "descr": "Memcached::deleteMultiByKey() is functionally equivalent to Memcached::deleteMulti(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::deleteMultiByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The keys to be deleted.", 
                "name": "keys"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the items.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletemultibykey", 
        "syntax": "public bool Memcached::deleteMultiByKey ( string $server_key , array $keys [, int $time = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::fetch": {
        "descr": "Memcached::fetch() retrieves the next result from the last request.", 
        "name": "Memcached::fetch", 
        "params": [], 
        "path": "php/memcached.fetch", 
        "syntax": "public array Memcached::fetch ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::fetchAll": {
        "descr": "Memcached::fetchAll() retrieves all the remaining results from the last request.", 
        "name": "Memcached::fetchAll", 
        "params": [], 
        "path": "php/memcached.fetchall", 
        "syntax": "public array Memcached::fetchAll ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::flush": {
        "descr": "Memcached::flush() invalidates all existing cache items immediately (by default) or after the delay specified. After invalidation none of the items will be returned in response to a retrieval command (unless it's stored again under the same key after Memcached::flush() has invalidated the items). The flush does not actually free all the memory taken up by the existing items; that will happen gradually as new items are stored.", 
        "name": "Memcached::flush", 
        "params": [
            {
                "descr": "Numer of seconds to wait before invalidating the items.", 
                "name": "delay"
            }
        ], 
        "path": "php/memcached.flush", 
        "syntax": "public bool Memcached::flush ([ int $delay = 0 ] )", 
        "type": "Memcached"
    }, 
    "Memcached::get": {
        "descr": "Memcached::get() returns the item that was previously stored under the key. If the item is found and cas_token variable is provided, it will contain the CAS token value for the item. See Memcached::cas() for how to use CAS tokens. Read-through caching callback may be specified via cache_cb parameter.", 
        "name": "Memcached::get", 
        "params": [
            {
                "descr": "The key of the item to retrieve.", 
                "name": "key"
            }, 
            {
                "descr": "Read-through caching callback or NULL.", 
                "name": "cache_cb"
            }, 
            {
                "descr": "The variable to store the CAS token in.", 
                "name": "cas_token"
            }
        ], 
        "path": "php/memcached.get", 
        "syntax": "public mixed Memcached::get ( string $key [, callable $cache_cb [, float &$cas_token ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getAllKeys": {
        "descr": "Memcached::getAllKeys() queries each memcache server and retrieves an array of all keys stored on them at that point in time. This is not an atomic operation, so it isn't a truly consistent snapshot of the keys at point in time. As memcache doesn't guarantee to return all keys you also cannot assume that all keys have been returned.", 
        "name": "Memcached::getAllKeys", 
        "params": [], 
        "path": "php/memcached.getallkeys", 
        "syntax": "public array Memcached::getAllKeys ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::getByKey": {
        "descr": "Memcached::getByKey() is functionally equivalent to Memcached::get(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::getByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to fetch.", 
                "name": "key"
            }, 
            {
                "descr": "Read-through caching callback or NULL", 
                "name": "cache_cb"
            }, 
            {
                "descr": "The variable to store the CAS token in.", 
                "name": "cas_token"
            }
        ], 
        "path": "php/memcached.getbykey", 
        "syntax": "public mixed Memcached::getByKey ( string $server_key , string $key [, callable $cache_cb [, float &$cas_token ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getDelayed": {
        "descr": "Memcached::getDelayed() issues a request to memcache for multiple items the keys of which are specified in the keys array. The method does not wait for response and returns right away. When you are ready to collect the items, call either Memcached::fetch() or Memcached::fetchAll(). If with_cas is true, the CAS token values will also be requested.", 
        "name": "Memcached::getDelayed", 
        "params": [
            {
                "descr": "Array of keys to request.", 
                "name": "keys"
            }, 
            {
                "descr": "Whether to request CAS token values also.", 
                "name": "with_cas"
            }, 
            {
                "descr": "The result callback or NULL.", 
                "name": "value_cb"
            }
        ], 
        "path": "php/memcached.getdelayed", 
        "syntax": "public bool Memcached::getDelayed ( array $keys [, bool $with_cas [, callable $value_cb ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getDelayedByKey": {
        "descr": "Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::getDelayedByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "Array of keys to request.", 
                "name": "keys"
            }, 
            {
                "descr": "Whether to request CAS token values also.", 
                "name": "with_cas"
            }, 
            {
                "descr": "The result callback or NULL.", 
                "name": "value_cb"
            }
        ], 
        "path": "php/memcached.getdelayedbykey", 
        "syntax": "public bool Memcached::getDelayedByKey ( string $server_key , array $keys [, bool $with_cas [, callable $value_cb ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getMulti": {
        "descr": "Memcached::getMulti() is similar to Memcached::get(), but instead of a single key item, it retrieves multiple items the keys of which are specified in the keys array. If cas_tokens variable is provided, it is filled with the CAS token values for the found items.", 
        "name": "Memcached::getMulti", 
        "params": [
            {
                "descr": "Array of keys to retrieve.", 
                "name": "keys"
            }, 
            {
                "descr": "The variable to store the CAS tokens for the found items.", 
                "name": "cas_tokens"
            }, 
            {
                "descr": "The flags for the get operation.", 
                "name": "flags"
            }
        ], 
        "path": "php/memcached.getmulti", 
        "syntax": "public mixed Memcached::getMulti ( array $keys [, array &$cas_tokens [, int $flags ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getMultiByKey": {
        "descr": "Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::getMultiByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "Array of keys to retrieve.", 
                "name": "keys"
            }, 
            {
                "descr": "The variable to store the CAS tokens for the found items.", 
                "name": "cas_tokens"
            }, 
            {
                "descr": "The flags for the get operation.", 
                "name": "flags"
            }
        ], 
        "path": "php/memcached.getmultibykey", 
        "syntax": "public array Memcached::getMultiByKey ( string $server_key , array $keys [, string &$cas_tokens [, int $flags ]] )", 
        "type": "Memcached"
    }, 
    "Memcached::getOption": {
        "descr": "This method returns the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information.", 
        "name": "Memcached::getOption", 
        "params": [
            {
                "descr": "One of the Memcached::OPT_* constants.", 
                "name": "option"
            }
        ], 
        "path": "php/memcached.getoption", 
        "syntax": "public mixed Memcached::getOption ( int $option )", 
        "type": "Memcached"
    }, 
    "Memcached::getResultCode": {
        "descr": "Memcached::getResultCode() returns one of the Memcached::RES_* constants that is the result of the last executed Memcached method.", 
        "name": "Memcached::getResultCode", 
        "params": [], 
        "path": "php/memcached.getresultcode", 
        "syntax": "public int Memcached::getResultCode ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::getResultMessage": {
        "descr": "Memcached::getResultMessage() returns a string that describes the result code of the last executed Memcached method.", 
        "name": "Memcached::getResultMessage", 
        "params": [], 
        "path": "php/memcached.getresultmessage", 
        "syntax": "public string Memcached::getResultMessage ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::getServerByKey": {
        "descr": "Memcached::getServerByKey() returns the server that would be selected by a particular server_key in all the Memcached::*ByKey() operations.", 
        "name": "Memcached::getServerByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }
        ], 
        "path": "php/memcached.getserverbykey", 
        "syntax": "public array Memcached::getServerByKey ( string $server_key )", 
        "type": "Memcached"
    }, 
    "Memcached::getServerList": {
        "descr": "Memcached::getServerList() returns the list of all servers that are in its server pool.", 
        "name": "Memcached::getServerList", 
        "params": [], 
        "path": "php/memcached.getserverlist", 
        "syntax": "public array Memcached::getServerList ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::getStats": {
        "descr": "Memcached::getStats() returns an array containing the state of all available memcache servers. See \u00bb memcache protocol specification for details on these statistics.", 
        "name": "Memcached::getStats", 
        "params": [], 
        "path": "php/memcached.getstats", 
        "syntax": "public array Memcached::getStats ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::getVersion": {
        "descr": "Memcached::getVersion() returns an array containing the version info for all available memcache servers.", 
        "name": "Memcached::getVersion", 
        "params": [], 
        "path": "php/memcached.getversion", 
        "syntax": "public array Memcached::getVersion ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::increment": {
        "descr": "Memcached::increment() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::increment() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::increment", 
        "params": [
            {
                "descr": "The key of the item to increment.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to increment the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.increment", 
        "syntax": "public int Memcached::increment ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "type": "Memcached"
    }, 
    "Memcached::incrementByKey": {
        "descr": "Memcached::incrementByKey() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::incrementByKey() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::incrementByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to increment.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to increment the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.incrementbykey", 
        "syntax": "public int Memcached::incrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "type": "Memcached"
    }, 
    "Memcached::isPersistent": {
        "descr": "Memcached::isPersistent() checks if the connections to the memcache servers are persistent connections.", 
        "name": "Memcached::isPersistent", 
        "params": [], 
        "path": "php/memcached.ispersistent", 
        "syntax": "public bool Memcached::isPersistent ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::isPristine": {
        "descr": "Memcached::isPristine() checks if the Memcache instance was recently created.", 
        "name": "Memcached::isPristine", 
        "params": [], 
        "path": "php/memcached.ispristine", 
        "syntax": "public bool Memcached::isPristine ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::prepend": {
        "descr": "Memcached::prepend() prepends the given value string to the value of an existing item. The reason that value is forced to be a string is that prepending mixed types is not well-defined.", 
        "name": "Memcached::prepend", 
        "params": [
            {
                "descr": "The key of the item to prepend the data to.", 
                "name": "key"
            }, 
            {
                "descr": "The string to prepend.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.prepend", 
        "syntax": "public bool Memcached::prepend ( string $key , string $value )", 
        "type": "Memcached"
    }, 
    "Memcached::prependByKey": {
        "descr": "Memcached::prependByKey() is functionally equivalent to Memcached::prepend(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::prependByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to prepend the data to.", 
                "name": "key"
            }, 
            {
                "descr": "The string to prepend.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.prependbykey", 
        "syntax": "public bool Memcached::prependByKey ( string $server_key , string $key , string $value )", 
        "type": "Memcached"
    }, 
    "Memcached::quit": {
        "descr": "Memcached::quit() closes any open connections to the memcache servers.", 
        "name": "Memcached::quit", 
        "params": [], 
        "path": "php/memcached.quit", 
        "syntax": "public bool Memcached::quit ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::replace": {
        "descr": "Memcached::replace() is similar to Memcached::set(), but the operation fails if the key does not exist on the server.", 
        "name": "Memcached::replace", 
        "params": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.replace", 
        "syntax": "public bool Memcached::replace ( string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::replaceByKey": {
        "descr": "Memcached::replaceByKey() is functionally equivalent to Memcached::replace(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::replaceByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.replacebykey", 
        "syntax": "public bool Memcached::replaceByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::resetServerList": {
        "descr": "Memcached::resetserverlist() removes all memcache servers from the known server list, reseting it back to empty.", 
        "name": "Memcached::resetServerList", 
        "params": [], 
        "path": "php/memcached.resetserverlist", 
        "syntax": "public bool Memcached::resetServerList ( void )", 
        "type": "Memcached"
    }, 
    "Memcached::set": {
        "descr": "Memcached::set() stores the value on a memcache server under the specified key. The expiration parameter can be used to control when the value is considered expired.", 
        "name": "Memcached::set", 
        "params": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.set", 
        "syntax": "public bool Memcached::set ( string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::setByKey": {
        "descr": "Memcached::setByKey() is functionally equivalent to Memcached::set(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::setByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setbykey", 
        "syntax": "public bool Memcached::setByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::setMulti": {
        "descr": "Memcached::setMulti() is similar to Memcached::set(), but instead of a single key/value item, it works on multiple items specified in items. The expiration time applies to all the items at once.", 
        "name": "Memcached::setMulti", 
        "params": [
            {
                "descr": "An array of key/value pairs to store on the server.", 
                "name": "items"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setmulti", 
        "syntax": "public bool Memcached::setMulti ( array $items [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::setMultiByKey": {
        "descr": "Memcached::setMultiByKey() is functionally equivalent to Memcached::setMulti(), except that the free-form server_key can be used to map the keys from items to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::setMultiByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "An array of key/value pairs to store on the server.", 
                "name": "items"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setmultibykey", 
        "syntax": "public bool Memcached::setMultiByKey ( string $server_key , array $items [, int $expiration ] )", 
        "type": "Memcached"
    }, 
    "Memcached::setOption": {
        "descr": "This method sets the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information.", 
        "name": "Memcached::setOption", 
        "params": [], 
        "path": "php/memcached.setoption", 
        "syntax": "public bool Memcached::setOption ( int $option , mixed $value )", 
        "type": "Memcached"
    }, 
    "Memcached::setOptions": {
        "descr": "Memcached::setOptions() is a variation of the Memcached::setOption() that takes an array of options to be set.", 
        "name": "Memcached::setOptions", 
        "params": [
            {
                "descr": "An associative array of options where the key is the option to set and the value is the new value for the option.", 
                "name": "options"
            }
        ], 
        "path": "php/memcached.setoptions", 
        "syntax": "public bool Memcached::setOptions ( array $options )", 
        "type": "Memcached"
    }, 
    "Memcached::setSaslAuthData": {
        "descr": "Memcached::setSaslAuthData() sets the username and password that should be used for SASL authentication with the memcache servers.", 
        "name": "Memcached::setSaslAuthData", 
        "params": [
            {
                "descr": "The username to use for authenticaiton.", 
                "name": "username"
            }, 
            {
                "descr": "The password to use for authenticaiton.", 
                "name": "password"
            }
        ], 
        "path": "php/memcached.setsaslauthdata", 
        "syntax": "public void Memcached::setSaslAuthData ( string $username , string $password )", 
        "type": "Memcached"
    }, 
    "Memcached::touch": {
        "descr": "Memcached::touch() sets a new expiration value on the given key.", 
        "name": "Memcached::touch", 
        "params": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.touch", 
        "syntax": "public bool Memcached::touch ( string $key , int $expiration )", 
        "type": "Memcached"
    }, 
    "Memcached::touchByKey": {
        "descr": "Memcached::touchByKey() is functionally equivalent to Memcached::touch(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::touchByKey", 
        "params": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.touchbykey", 
        "syntax": "public bool Memcached::touchByKey ( string $server_key , string $key , int $expiration )", 
        "type": "Memcached"
    }, 
    "MemcachedException": {
        "descr": "", 
        "name": "MemcachedException", 
        "params": [], 
        "path": "php/class.memcachedexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Memcached"
    }, 
    "MessageFormatter": {
        "descr": "", 
        "name": "MessageFormatter", 
        "params": [], 
        "path": "php/class.messageformatter", 
        "syntax": "public static MessageFormatter create ( string $locale , string $pattern )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::create": {
        "descr": "Constructs a new Message Formatter", 
        "name": "MessageFormatter::create", 
        "params": [
            {
                "descr": "The locale to use when formatting arguments", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern string to stick arguments into. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/messageformatter.create", 
        "syntax": "public static MessageFormatter MessageFormatter::create ( string $locale , string $pattern )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::format": {
        "descr": "Format the message by substituting the data into the format string according to the locale rules", 
        "name": "MessageFormatter::format", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "Arguments to insert into the format string", 
                "name": "args"
            }
        ], 
        "path": "php/messageformatter.format", 
        "syntax": "public string MessageFormatter::format ( array $args )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::formatMessage": {
        "descr": "Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.", 
        "name": "MessageFormatter::formatMessage", 
        "params": [
            {
                "descr": "The locale to use for formatting locale-dependent parts", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern string to insert things into. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The array of values to insert into the format string", 
                "name": "args"
            }
        ], 
        "path": "php/messageformatter.formatmessage", 
        "syntax": "public static string MessageFormatter::formatMessage ( string $locale , string $pattern , array $args )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getErrorCode": {
        "descr": "Get the error code from last operation.", 
        "name": "MessageFormatter::getErrorCode", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.geterrorcode", 
        "syntax": "public int MessageFormatter::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getErrorMessage": {
        "descr": "Get the error text from the last operation.", 
        "name": "MessageFormatter::getErrorMessage", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.geterrormessage", 
        "syntax": "public string MessageFormatter::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getLocale": {
        "descr": "Get the locale for which the formatter was created.", 
        "name": "MessageFormatter::getLocale", 
        "params": [
            {
                "descr": "The formatter resource", 
                "name": "formatter"
            }
        ], 
        "path": "php/messageformatter.getlocale", 
        "syntax": "public string MessageFormatter::getLocale ( void )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getPattern": {
        "descr": "Get the pattern used by the formatter", 
        "name": "MessageFormatter::getPattern", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.getpattern", 
        "syntax": "public string MessageFormatter::getPattern ( void )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::parse": {
        "descr": "Parses input string and return any extracted items as an array.", 
        "name": "MessageFormatter::parse", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "The string to parse", 
                "name": "value"
            }
        ], 
        "path": "php/messageformatter.parse", 
        "syntax": "public array MessageFormatter::parse ( string $value )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::parseMessage": {
        "descr": "Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.", 
        "name": "MessageFormatter::parseMessage", 
        "params": [
            {
                "descr": "The locale to use for parsing locale-dependent parts", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern with which to parse the value.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string to parse, conforming to the pattern.", 
                "name": "source"
            }
        ], 
        "path": "php/messageformatter.parsemessage", 
        "syntax": "public static array MessageFormatter::parseMessage ( string $locale , string $pattern , string $source )", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::setPattern": {
        "descr": "Set the pattern used by the formatter", 
        "name": "MessageFormatter::setPattern", 
        "params": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "The pattern string to use in this message formatter. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/messageformatter.setpattern", 
        "syntax": "public bool MessageFormatter::setPattern ( string $pattern )", 
        "type": "Internationalization"
    }, 
    "MultipleIterator": {
        "descr": "", 
        "name": "MultipleIterator", 
        "params": [], 
        "path": "php/class.multipleiterator", 
        "syntax": "public void attachIterator ( Iterator $iterator [, string $infos ] )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::attachIterator": {
        "descr": "Attaches iterator information.", 
        "name": "MultipleIterator::attachIterator", 
        "params": [
            {
                "descr": "The new iterator to attach.", 
                "name": "iterator"
            }, 
            {
                "descr": "The associative information for the Iterator, which must be an integer, a string, or NULL.", 
                "name": "infos"
            }
        ], 
        "path": "php/multipleiterator.attachiterator", 
        "syntax": "public void MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ] )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::containsIterator": {
        "descr": "Checks if an iterator is attached or not.", 
        "name": "MultipleIterator::containsIterator", 
        "params": [
            {
                "descr": "The iterator to check.", 
                "name": "iterator"
            }
        ], 
        "path": "php/multipleiterator.containsiterator", 
        "syntax": "public void MultipleIterator::containsIterator ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::countIterators": {
        "descr": "Gets the number of attached iterator instances.", 
        "name": "MultipleIterator::countIterators", 
        "params": [], 
        "path": "php/multipleiterator.countiterators", 
        "syntax": "public void MultipleIterator::countIterators ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::current": {
        "descr": "Get the registered iterator instances current() result.", 
        "name": "MultipleIterator::current", 
        "params": [], 
        "path": "php/multipleiterator.current", 
        "syntax": "public array MultipleIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::detachIterator": {
        "descr": "Detaches an iterator.", 
        "name": "MultipleIterator::detachIterator", 
        "params": [
            {
                "descr": "The iterator to detach.", 
                "name": "iterator"
            }
        ], 
        "path": "php/multipleiterator.detachiterator", 
        "syntax": "public void MultipleIterator::detachIterator ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::getFlags": {
        "descr": "Gets information about the flags.", 
        "name": "MultipleIterator::getFlags", 
        "params": [], 
        "path": "php/multipleiterator.getflags", 
        "syntax": "public void MultipleIterator::getFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::key": {
        "descr": "Get the registered iterator instances key() result.", 
        "name": "MultipleIterator::key", 
        "params": [], 
        "path": "php/multipleiterator.key", 
        "syntax": "public array MultipleIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::next": {
        "descr": "Moves all attached iterator instances forward.", 
        "name": "MultipleIterator::next", 
        "params": [], 
        "path": "php/multipleiterator.next", 
        "syntax": "public void MultipleIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::rewind": {
        "descr": "Rewinds all attached iterator instances.", 
        "name": "MultipleIterator::rewind", 
        "params": [], 
        "path": "php/multipleiterator.rewind", 
        "syntax": "public void MultipleIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::setFlags": {
        "descr": "Sets flags.", 
        "name": "MultipleIterator::setFlags", 
        "params": [
            {
                "descr": "The flags to set, according to the Flag Constants", 
                "name": "flags"
            }
        ], 
        "path": "php/multipleiterator.setflags", 
        "syntax": "public void MultipleIterator::setFlags ( int $flags )", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::valid": {
        "descr": "Checks the validity of sub iterators.", 
        "name": "MultipleIterator::valid", 
        "params": [], 
        "path": "php/multipleiterator.valid", 
        "syntax": "public void MultipleIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Mutex": {
        "descr": "", 
        "name": "Mutex", 
        "params": [], 
        "path": "php/class.mutex", 
        "syntax": "final public static long create ([  boolean $lock  ] )", 
        "type": "Process Control"
    }, 
    "Mutex::create": {
        "descr": "Create, and optionally lock a new Mutex for the caller", 
        "name": "Mutex::create", 
        "params": [
            {
                "descr": "Setting lock to true will lock the Mutex for the caller before returning the handle", 
                "name": "lock"
            }
        ], 
        "path": "php/mutex.create", 
        "syntax": "final public static long Mutex::create ([  boolean $lock  ] )", 
        "type": "Process Control"
    }, 
    "Mutex::destroy": {
        "descr": "Destroying Mutex handles must be carried out explicitly by the programmer when they are finished with the Mutex handle.", 
        "name": "Mutex::destroy", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Mutex::create(). ", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.destroy", 
        "syntax": "final public static boolean Mutex::destroy (  long $mutex  )", 
        "type": "Process Control"
    }, 
    "Mutex::lock": {
        "descr": "Attempt to lock the Mutex for the caller.", 
        "name": "Mutex::lock", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.lock", 
        "syntax": "final public static boolean Mutex::lock (  long $mutex  )", 
        "type": "Process Control"
    }, 
    "Mutex::trylock": {
        "descr": "Attempt to lock the Mutex for the caller without blocking if the Mutex is owned (locked) by another Thread.", 
        "name": "Mutex::trylock", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.trylock", 
        "syntax": "final public static boolean Mutex::trylock (  long $mutex  )", 
        "type": "Process Control"
    }, 
    "Mutex::unlock": {
        "descr": "Attempts to unlock the Mutex for the caller, optionally destroying the Mutex handle. The calling thread should own the Mutex at the time of the call.", 
        "name": "Mutex::unlock", 
        "params": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }, 
            {
                "descr": "When true pthreads will destroy the Mutex after a successful unlock.", 
                "name": "destroy"
            }
        ], 
        "path": "php/mutex.unlock", 
        "syntax": "final public static boolean Mutex::unlock (  long $mutex  [,  boolean $destroy  ] )", 
        "type": "Process Control"
    }, 
    "NoRewindIterator": {
        "descr": "", 
        "name": "NoRewindIterator", 
        "params": [], 
        "path": "php/class.norewinditerator", 
        "syntax": "public __construct ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::__construct": {
        "descr": "Constructs a NoRewindIterator.", 
        "name": "NoRewindIterator::__construct", 
        "params": [
            {
                "descr": "The iterator being used.", 
                "name": "iterator"
            }
        ], 
        "path": "php/norewinditerator.construct", 
        "syntax": "public NoRewindIterator::__construct ( Iterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::current": {
        "descr": "Gets the current value.", 
        "name": "NoRewindIterator::current", 
        "params": [], 
        "path": "php/norewinditerator.current", 
        "syntax": "public mixed NoRewindIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::getInnerIterator": {
        "descr": "Gets the inner iterator, that was passed in to NoRewindIterator.", 
        "name": "NoRewindIterator::getInnerIterator", 
        "params": [], 
        "path": "php/norewinditerator.getinneriterator", 
        "syntax": "public iterator NoRewindIterator::getInnerIterator ( void )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::key": {
        "descr": "Gets the current key.", 
        "name": "NoRewindIterator::key", 
        "params": [], 
        "path": "php/norewinditerator.key", 
        "syntax": "public mixed NoRewindIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::next": {
        "descr": "Forwards to the next element.", 
        "name": "NoRewindIterator::next", 
        "params": [], 
        "path": "php/norewinditerator.next", 
        "syntax": "public void NoRewindIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::rewind": {
        "descr": "Prevents the rewind operation on the inner iterator.", 
        "name": "NoRewindIterator::rewind", 
        "params": [], 
        "path": "php/norewinditerator.rewind", 
        "syntax": "public void NoRewindIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::valid": {
        "descr": "Checks whether the iterator is valid.", 
        "name": "NoRewindIterator::valid", 
        "params": [], 
        "path": "php/norewinditerator.valid", 
        "syntax": "public bool NoRewindIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Normalizer": {
        "descr": "", 
        "name": "Normalizer", 
        "params": [], 
        "path": "php/class.normalizer", 
        "syntax": "public static bool isNormalized ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "type": "Internationalization"
    }, 
    "Normalizer::isNormalized": {
        "descr": "Checks if the provided string is already in the specified normalization form.", 
        "name": "Normalizer::isNormalized", 
        "params": [
            {
                "descr": "The input string to normalize", 
                "name": "input"
            }, 
            {
                "descr": "One of the normalization forms.", 
                "name": "form"
            }
        ], 
        "path": "php/normalizer.isnormalized", 
        "syntax": "public static bool Normalizer::isNormalized ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "type": "Internationalization"
    }, 
    "Normalizer::normalize": {
        "descr": "Normalizes the input provided and returns the normalized string", 
        "name": "Normalizer::normalize", 
        "params": [
            {
                "descr": "The input string to normalize", 
                "name": "input"
            }, 
            {
                "descr": "One of the normalization forms.", 
                "name": "form"
            }
        ], 
        "path": "php/normalizer.normalize", 
        "syntax": "public static string Normalizer::normalize ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter": {
        "descr": "", 
        "name": "NumberFormatter", 
        "params": [], 
        "path": "php/class.numberformatter", 
        "syntax": "public static NumberFormatter create ( string $locale , int $style [, string $pattern ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::create": {
        "descr": "Creates a number formatter.", 
        "name": "NumberFormatter::create", 
        "params": [
            {
                "descr": "Locale in which the number would be formatted (locale name, e.g. ", 
                "name": "locale"
            }, 
            {
                "descr": "Style of the formatting, one of the  format style constants. ", 
                "name": "style"
            }, 
            {
                "descr": "Pattern string if the chosen style requires a pattern.", 
                "name": "pattern"
            }
        ], 
        "path": "php/numberformatter.create", 
        "syntax": "public static NumberFormatter NumberFormatter::create ( string $locale , int $style [, string $pattern ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::format": {
        "descr": "Format a numeric value according to the formatter rules.", 
        "name": "NumberFormatter::format", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The value to format. Can be integer or float, other values will be converted to a numeric value.", 
                "name": "value"
            }, 
            {
                "descr": "The  formatting type to use.", 
                "name": "type"
            }
        ], 
        "path": "php/numberformatter.format", 
        "syntax": "public string NumberFormatter::format ( number $value [, int $type ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::formatCurrency": {
        "descr": "Format the currency value according to the formatter rules.", 
        "name": "NumberFormatter::formatCurrency", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The numeric currency value.", 
                "name": "value"
            }, 
            {
                "descr": "The 3-letter ISO 4217 currency code indicating the currency to use.", 
                "name": "currency"
            }
        ], 
        "path": "php/numberformatter.formatcurrency", 
        "syntax": "public string NumberFormatter::formatCurrency ( float $value , string $currency )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getAttribute": {
        "descr": "Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.", 
        "name": "NumberFormatter::getAttribute", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  numeric attribute constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.getattribute", 
        "syntax": "public int NumberFormatter::getAttribute ( int $attr )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getErrorCode": {
        "descr": "Get error code from the last function performed by the formatter.", 
        "name": "NumberFormatter::getErrorCode", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.geterrorcode", 
        "syntax": "public int NumberFormatter::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getErrorMessage": {
        "descr": "Get error message from the last function performed by the formatter.", 
        "name": "NumberFormatter::getErrorMessage", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.geterrormessage", 
        "syntax": "public string NumberFormatter::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getLocale": {
        "descr": "Get formatter locale name.", 
        "name": "NumberFormatter::getLocale", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). ", 
                "name": "type"
            }
        ], 
        "path": "php/numberformatter.getlocale", 
        "syntax": "public string NumberFormatter::getLocale ([ int $type ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getPattern": {
        "descr": "Extract pattern used by the formatter.", 
        "name": "NumberFormatter::getPattern", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.getpattern", 
        "syntax": "public string NumberFormatter::getPattern ( void )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getSymbol": {
        "descr": "Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.", 
        "name": "NumberFormatter::getSymbol", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Symbol specifier, one of the  format symbol constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.getsymbol", 
        "syntax": "public string NumberFormatter::getSymbol ( int $attr )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getTextAttribute": {
        "descr": "Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.", 
        "name": "NumberFormatter::getTextAttribute", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  text attribute constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.gettextattribute", 
        "syntax": "public string NumberFormatter::getTextAttribute ( int $attr )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::parse": {
        "descr": "Parse a string into a number using the current formatter rules.", 
        "name": "NumberFormatter::parse", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The  formatting type to use. By default, NumberFormatter::TYPE_DOUBLE is used.", 
                "name": "type"
            }, 
            {
                "descr": "Offset in the string at which to begin parsing. ", 
                "name": "position"
            }
        ], 
        "path": "php/numberformatter.parse", 
        "syntax": "public mixed NumberFormatter::parse ( string $value [, int $type [, int &$position ]] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::parseCurrency": {
        "descr": "Parse a string into a double and a currency using the current formatter.", 
        "name": "NumberFormatter::parseCurrency", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Parameter to receive the currency name (3-letter ISO 4217 currency code).", 
                "name": "currency"
            }, 
            {
                "descr": "Offset in the string at which to begin parsing. ", 
                "name": "position"
            }
        ], 
        "path": "php/numberformatter.parsecurrency", 
        "syntax": "public float NumberFormatter::parseCurrency ( string $value , string &$currency [, int &$position ] )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setAttribute": {
        "descr": "Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.", 
        "name": "NumberFormatter::setAttribute", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  numeric attribute constants.", 
                "name": "attr"
            }, 
            {
                "descr": "The attribute value.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.setattribute", 
        "syntax": "public bool NumberFormatter::setAttribute ( int $attr , int $value )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setPattern": {
        "descr": "Set the pattern used by the formatter. Can not be used on a rule-based formatter.", 
        "name": "NumberFormatter::setPattern", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Pattern in syntax described in \u00bb ICU DecimalFormat documentation.", 
                "name": "pattern"
            }
        ], 
        "path": "php/numberformatter.setpattern", 
        "syntax": "public bool NumberFormatter::setPattern ( string $pattern )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setSymbol": {
        "descr": "Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.", 
        "name": "NumberFormatter::setSymbol", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Symbol specifier, one of the  format symbol constants.", 
                "name": "attr"
            }, 
            {
                "descr": "Text for the symbol.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.setsymbol", 
        "syntax": "public bool NumberFormatter::setSymbol ( int $attr , string $value )", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setTextAttribute": {
        "descr": "Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.", 
        "name": "NumberFormatter::setTextAttribute", 
        "params": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the text attribute constants.", 
                "name": "attr"
            }, 
            {
                "descr": "Text for the attribute value.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.settextattribute", 
        "syntax": "public bool NumberFormatter::setTextAttribute ( int $attr , string $value )", 
        "type": "Internationalization"
    }, 
    "OAuth": {
        "descr": "", 
        "name": "OAuth", 
        "params": [], 
        "path": "php/class.oauth", 
        "syntax": "public __construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )", 
        "type": "OAuth"
    }, 
    "OAuth::__construct": {
        "descr": "Creates a new OAuth object", 
        "name": "OAuth::__construct", 
        "params": [
            {
                "descr": "The consumer key provided by the service provider.", 
                "name": "consumer_key"
            }, 
            {
                "descr": "The consumer secret provided by the service provider.", 
                "name": "consumer_secret"
            }, 
            {
                "descr": "This optional parameter defines which signature method to use, by default it is OAUTH_SIG_METHOD_HMACSHA1 (HMAC-SHA1).", 
                "name": "signature_method"
            }, 
            {
                "descr": "This optional parameter defines how to pass the OAuth parameters to a consumer, by default it is OAUTH_AUTH_TYPE_AUTHORIZATION (in the Authorization header).", 
                "name": "auth_type"
            }
        ], 
        "path": "php/oauth.construct", 
        "syntax": "public OAuth::__construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )", 
        "type": "OAuth"
    }, 
    "OAuth::__destruct": {
        "descr": "The destructor.", 
        "name": "OAuth::__destruct", 
        "params": [], 
        "path": "php/oauth.destruct", 
        "syntax": "public void OAuth::__destruct ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::disableDebug": {
        "descr": "Turns off verbose request information (off by default). Alternatively, the debug property can be set to a FALSE value to turn debug off.", 
        "name": "OAuth::disableDebug", 
        "params": [], 
        "path": "php/oauth.disabledebug", 
        "syntax": "public bool OAuth::disableDebug ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::disableRedirects": {
        "descr": "Disable redirects from being followed automatically, thus allowing the request to be manually redirected.", 
        "name": "OAuth::disableRedirects", 
        "params": [], 
        "path": "php/oauth.disableredirects", 
        "syntax": "public bool OAuth::disableRedirects ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::disableSSLChecks": {
        "descr": "Turns off the usual SSL peer certificate and host checks, this is not for production environments. Alternatively, the sslChecks member can be set to FALSE to turn SSL checks off.", 
        "name": "OAuth::disableSSLChecks", 
        "params": [], 
        "path": "php/oauth.disablesslchecks", 
        "syntax": "public bool OAuth::disableSSLChecks ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::enableDebug": {
        "descr": "Turns on verbose request information useful for debugging, the debug information is stored in the debugInfo member. Alternatively, the debug member can be set to a non-FALSE value to turn debug on.", 
        "name": "OAuth::enableDebug", 
        "params": [], 
        "path": "php/oauth.enabledebug", 
        "syntax": "public bool OAuth::enableDebug ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::enableRedirects": {
        "descr": "Follow and sign redirects automatically, which is enabled by default.", 
        "name": "OAuth::enableRedirects", 
        "params": [], 
        "path": "php/oauth.enableredirects", 
        "syntax": "public bool OAuth::enableRedirects ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::enableSSLChecks": {
        "descr": "Turns on the usual SSL peer certificate and host checks (enabled by default). Alternatively, the sslChecks member can be set to a non-FALSE value to turn SSL checks off.", 
        "name": "OAuth::enableSSLChecks", 
        "params": [], 
        "path": "php/oauth.enablesslchecks", 
        "syntax": "public bool OAuth::enableSSLChecks ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::fetch": {
        "descr": "Fetch a resource.", 
        "name": "OAuth::fetch", 
        "params": [
            {
                "descr": "URL to the OAuth protected resource.", 
                "name": "protected_resource_url"
            }, 
            {
                "descr": "Extra parameters to send with the request for the resource.", 
                "name": "extra_parameters"
            }, 
            {
                "descr": "One of the OAUTH_HTTP_METHOD_* OAUTH constants, which includes GET, POST, PUT, HEAD, or DELETE. ", 
                "name": "http_method"
            }, 
            {
                "descr": "HTTP client headers (such as User-Agent, Accept, etc.)", 
                "name": "http_headers"
            }
        ], 
        "path": "php/oauth.fetch", 
        "syntax": "public mixed OAuth::fetch ( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]] )", 
        "type": "OAuth"
    }, 
    "OAuth::generateSignature": {
        "descr": "Generate a signature based on the final HTTP method, URL and a string/array of parameters.", 
        "name": "OAuth::generateSignature", 
        "params": [
            {
                "descr": "HTTP method for request", 
                "name": "http_method"
            }, 
            {
                "descr": "URL for request", 
                "name": "url"
            }, 
            {
                "descr": "String or array of additional parameters.", 
                "name": "extra_parameters"
            }
        ], 
        "path": "php/oauth.generatesignature", 
        "syntax": "public string OAuth::generateSignature ( string $http_method , string $url [, mixed $extra_parameters ] )", 
        "type": "OAuth"
    }, 
    "OAuth::getAccessToken": {
        "descr": "Fetch an access token, secret and any additional response parameters from the service provider.", 
        "name": "OAuth::getAccessToken", 
        "params": [
            {
                "descr": "URL to the access token API.", 
                "name": "access_token_url"
            }, 
            {
                "descr": "Authorization session handle, this parameter does not have any citation in the core OAuth 1.0 specification but may be implemented by large providers. ", 
                "name": "auth_session_handle"
            }, 
            {
                "descr": "For service providers which support 1.0a, a verifier_token must be passed while exchanging the request token for the access token. ", 
                "name": "verifier_token"
            }
        ], 
        "path": "php/oauth.getaccesstoken", 
        "syntax": "public array OAuth::getAccessToken ( string $access_token_url [, string $auth_session_handle [, string $verifier_token ]] )", 
        "type": "OAuth"
    }, 
    "OAuth::getCAPath": {
        "descr": "Gets the Certificate Authority information, which includes the ca_path and ca_info set by OAuth::setCaPath().", 
        "name": "OAuth::getCAPath", 
        "params": [], 
        "path": "php/oauth.getcapath", 
        "syntax": "public array OAuth::getCAPath ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponse": {
        "descr": "Get the raw response of the most recent request.", 
        "name": "OAuth::getLastResponse", 
        "params": [], 
        "path": "php/oauth.getlastresponse", 
        "syntax": "public string OAuth::getLastResponse ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponseHeaders": {
        "descr": "Get headers for last response.", 
        "name": "OAuth::getLastResponseHeaders", 
        "params": [], 
        "path": "php/oauth.getlastresponseheaders", 
        "syntax": "public string OAuth::getLastResponseHeaders ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponseInfo": {
        "descr": "Get HTTP information about the last response.", 
        "name": "OAuth::getLastResponseInfo", 
        "params": [], 
        "path": "php/oauth.getlastresponseinfo", 
        "syntax": "public array OAuth::getLastResponseInfo ( void )", 
        "type": "OAuth"
    }, 
    "OAuth::getRequestHeader": {
        "descr": "Generate OAuth header string signature based on the final HTTP method, URL and a string/array of parameters", 
        "name": "OAuth::getRequestHeader", 
        "params": [
            {
                "descr": "HTTP method for request.", 
                "name": "http_method"
            }, 
            {
                "descr": "URL for request.", 
                "name": "url"
            }, 
            {
                "descr": "String or array of additional parameters.", 
                "name": "extra_parameters"
            }
        ], 
        "path": "php/oauth.getrequestheader", 
        "syntax": "public string OAuth::getRequestHeader ( string $http_method , string $url [, mixed $extra_parameters ] )", 
        "type": "OAuth"
    }, 
    "OAuth::getRequestToken": {
        "descr": "Fetch a request token, secret and any additional response parameters from the service provider.", 
        "name": "OAuth::getRequestToken", 
        "params": [
            {
                "descr": "URL to the request token API.", 
                "name": "request_token_url"
            }, 
            {
                "descr": "OAuth callback URL. If callback_url is passed and is an empty value, it is set to \"oob\" to address the OAuth 2009.1 advisory.", 
                "name": "callback_url"
            }
        ], 
        "path": "php/oauth.getrequesttoken", 
        "syntax": "public array OAuth::getRequestToken ( string $request_token_url [, string $callback_url ] )", 
        "type": "OAuth"
    }, 
    "OAuth::setAuthType": {
        "descr": "Set where the OAuth parameters should be passed.", 
        "name": "OAuth::setAuthType", 
        "params": [
            {
                "descr": "auth_type can be one of the following flags (in order of decreasing preference as per OAuth 1.0 section 5.2):  OAUTH_AUTH_TYPE_AUTHORIZATION   Pass the OAuth parameters in the HTTP Authorization header.", 
                "name": "auth_type"
            }, 
            {
                "descr": "Append the OAuth parameters to the HTTP POST request body.", 
                "name": "OAUTH_AUTH_TYPE_FORM"
            }, 
            {
                "descr": "Append the OAuth parameters to the request URI.", 
                "name": "OAUTH_AUTH_TYPE_URI"
            }, 
            {
                "descr": "None.", 
                "name": "OAUTH_AUTH_TYPE_NONE"
            }
        ], 
        "path": "php/oauth.setauthtype", 
        "syntax": "public mixed OAuth::setAuthType ( int $auth_type )", 
        "type": "OAuth"
    }, 
    "OAuth::setCAPath": {
        "descr": "Sets the Certificate Authority (CA), both for path and info.", 
        "name": "OAuth::setCAPath", 
        "params": [
            {
                "descr": "The CA Path being set.", 
                "name": "ca_path"
            }, 
            {
                "descr": "The CA Info being set.", 
                "name": "ca_info"
            }
        ], 
        "path": "php/oauth.setcapath", 
        "syntax": "public mixed OAuth::setCAPath ([ string $ca_path [, string $ca_info ]] )", 
        "type": "OAuth"
    }, 
    "OAuth::setNonce": {
        "descr": "Sets the nonce for all subsequent requests.", 
        "name": "OAuth::setNonce", 
        "params": [
            {
                "descr": "The value for oauth_nonce.", 
                "name": "nonce"
            }
        ], 
        "path": "php/oauth.setnonce", 
        "syntax": "public mixed OAuth::setNonce ( string $nonce )", 
        "type": "OAuth"
    }, 
    "OAuth::setRSACertificate": {
        "descr": "Sets the RSA certificate.", 
        "name": "OAuth::setRSACertificate", 
        "params": [
            {
                "descr": "The RSA certificate.", 
                "name": "cert"
            }
        ], 
        "path": "php/oauth.setrsacertificate", 
        "syntax": "public mixed OAuth::setRSACertificate ( string $cert )", 
        "type": "OAuth"
    }, 
    "OAuth::setRequestEngine": {
        "descr": "Sets the Request Engine, that will be sending the HTTP requests.", 
        "name": "OAuth::setRequestEngine", 
        "params": [
            {
                "descr": "The desired request engine. Set to OAUTH_REQENGINE_STREAMS to use PHP Streams, or OAUTH_REQENGINE_CURL to use Curl.", 
                "name": "reqengine"
            }
        ], 
        "path": "php/oauth.setrequestengine", 
        "syntax": "public void OAuth::setRequestEngine ( int $reqengine )", 
        "type": "OAuth"
    }, 
    "OAuth::setSSLChecks": {
        "descr": "Tweak specific SSL checks for requests.", 
        "name": "OAuth::setSSLChecks", 
        "params": [], 
        "path": "php/oauth.setsslchecks", 
        "syntax": "public bool OAuth::setSSLChecks ( int $sslcheck )", 
        "type": "OAuth"
    }, 
    "OAuth::setTimestamp": {
        "descr": "Sets the OAuth timestamp for subsequent requests.", 
        "name": "OAuth::setTimestamp", 
        "params": [
            {
                "descr": "The timestamp.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/oauth.settimestamp", 
        "syntax": "public mixed OAuth::setTimestamp ( string $timestamp )", 
        "type": "OAuth"
    }, 
    "OAuth::setToken": {
        "descr": "Set the token and secret for subsequent requests.", 
        "name": "OAuth::setToken", 
        "params": [
            {
                "descr": "The OAuth token.", 
                "name": "token"
            }, 
            {
                "descr": "The OAuth token secret.", 
                "name": "token_secret"
            }
        ], 
        "path": "php/oauth.settoken", 
        "syntax": "public bool OAuth::setToken ( string $token , string $token_secret )", 
        "type": "OAuth"
    }, 
    "OAuth::setVersion": {
        "descr": "Sets the OAuth version for subsequent requests", 
        "name": "OAuth::setVersion", 
        "params": [
            {
                "descr": "OAuth version, default value is always \"1.0\"", 
                "name": "version"
            }
        ], 
        "path": "php/oauth.setversion", 
        "syntax": "public bool OAuth::setVersion ( string $version )", 
        "type": "OAuth"
    }, 
    "OAuthException": {
        "descr": "", 
        "name": "OAuthException", 
        "params": [], 
        "path": "php/class.oauthexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "OAuth"
    }, 
    "OAuthProvider": {
        "descr": "", 
        "name": "OAuthProvider", 
        "params": [], 
        "path": "php/class.oauthprovider", 
        "syntax": "final public bool addRequiredParameter ( string $req_params )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::__construct": {
        "descr": "Initiates a new OAuthProvider object.", 
        "name": "OAuthProvider::__construct", 
        "params": [
            {
                "descr": "Setting these optional parameters is limited to the CLI SAPI.", 
                "name": "params_array"
            }
        ], 
        "path": "php/oauthprovider.construct", 
        "syntax": "public OAuthProvider::__construct ([ array $params_array ] )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::addRequiredParameter": {
        "descr": "Add required oauth provider parameters.", 
        "name": "OAuthProvider::addRequiredParameter", 
        "params": [
            {
                "descr": "The required parameters.", 
                "name": "req_params"
            }
        ], 
        "path": "php/oauthprovider.addrequiredparameter", 
        "syntax": "final public bool OAuthProvider::addRequiredParameter ( string $req_params )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::callTimestampNonceHandler": {
        "descr": "Calls the registered timestamp handler callback function, which is set with OAuthProvider::timestampNonceHandler().", 
        "name": "OAuthProvider::callTimestampNonceHandler", 
        "params": [], 
        "path": "php/oauthprovider.calltimestampnoncehandler", 
        "syntax": "public void OAuthProvider::callTimestampNonceHandler ( void )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::callconsumerHandler": {
        "descr": "Calls the registered consumer handler callback function, which is set with OAuthProvider::consumerHandler().", 
        "name": "OAuthProvider::callconsumerHandler", 
        "params": [], 
        "path": "php/oauthprovider.callconsumerhandler", 
        "syntax": "public void OAuthProvider::callconsumerHandler ( void )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::calltokenHandler": {
        "descr": "Calls the registered token handler callback function, which is set with OAuthProvider::tokenHandler().", 
        "name": "OAuthProvider::calltokenHandler", 
        "params": [], 
        "path": "php/oauthprovider.calltokenhandler", 
        "syntax": "public void OAuthProvider::calltokenHandler ( void )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::checkOAuthRequest": {
        "descr": "Checks an OAuth request.", 
        "name": "OAuthProvider::checkOAuthRequest", 
        "params": [
            {
                "descr": "The optional URI, or endpoint.", 
                "name": "uri"
            }, 
            {
                "descr": "The HTTP method. Optionally pass in one of the OAUTH_HTTP_METHOD_* OAuth constants.", 
                "name": "method"
            }
        ], 
        "path": "php/oauthprovider.checkoauthrequest", 
        "syntax": "public void OAuthProvider::checkOAuthRequest ([ string $uri [, string $method ]] )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::consumerHandler": {
        "descr": "Sets the consumer handler callback, which will later be called with OAuthProvider::callConsumerHandler().", 
        "name": "OAuthProvider::consumerHandler", 
        "params": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.consumerhandler", 
        "syntax": "public void OAuthProvider::consumerHandler ( callable $callback_function )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::generateToken": {
        "descr": "Generates a string of pseudo-random bytes.", 
        "name": "OAuthProvider::generateToken", 
        "params": [
            {
                "descr": "The desired token length, in terms of bytes.", 
                "name": "size"
            }, 
            {
                "descr": "Setting to TRUE means /dev/random will be used for entropy, as otherwise the non-blocking /dev/urandom is used. ", 
                "name": "strong"
            }
        ], 
        "path": "php/oauthprovider.generatetoken", 
        "syntax": "final public static string OAuthProvider::generateToken ( int $size [, bool $strong = false ] )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::is2LeggedEndpoint": {
        "descr": "The 2-legged flow, or request signing. It does not require a token.", 
        "name": "OAuthProvider::is2LeggedEndpoint", 
        "params": [], 
        "path": "php/oauthprovider.is2leggedendpoint", 
        "syntax": "public void OAuthProvider::is2LeggedEndpoint ( mixed $params_array )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::isRequestTokenEndpoint": {
        "descr": "", 
        "name": "OAuthProvider::isRequestTokenEndpoint", 
        "params": [
            {
                "descr": "Sets whether or not it will issue a request token, thus determining if OAuthProvider::tokenHandler() needs to be called.", 
                "name": "will_issue_request_token"
            }
        ], 
        "path": "php/oauthprovider.isrequesttokenendpoint", 
        "syntax": "public void OAuthProvider::isRequestTokenEndpoint ( bool $will_issue_request_token )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::removeRequiredParameter": {
        "descr": "Removes a required parameter.", 
        "name": "OAuthProvider::removeRequiredParameter", 
        "params": [
            {
                "descr": "The required parameter to be removed.", 
                "name": "req_params"
            }
        ], 
        "path": "php/oauthprovider.removerequiredparameter", 
        "syntax": "final public bool OAuthProvider::removeRequiredParameter ( string $req_params )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::reportProblem": {
        "descr": "Pass in a problem as an OAuthException, with possible problems listed in the OAuth constants section.", 
        "name": "OAuthProvider::reportProblem", 
        "params": [
            {
                "descr": "The OAuthException.", 
                "name": "oauthexception"
            }
        ], 
        "path": "php/oauthprovider.reportproblem", 
        "syntax": "final public static string OAuthProvider::reportProblem ( string $oauthexception [, bool $send_headers = true ] )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::setParam": {
        "descr": "Sets a parameter.", 
        "name": "OAuthProvider::setParam", 
        "params": [
            {
                "descr": "The parameter key.", 
                "name": "param_key"
            }, 
            {
                "descr": "The optional parameter value.", 
                "name": "param_val"
            }
        ], 
        "path": "php/oauthprovider.setparam", 
        "syntax": "final public bool OAuthProvider::setParam ( string $param_key [, mixed $param_val ] )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::setRequestTokenPath": {
        "descr": "Sets the request tokens path.", 
        "name": "OAuthProvider::setRequestTokenPath", 
        "params": [
            {
                "descr": "The path.", 
                "name": "path"
            }
        ], 
        "path": "php/oauthprovider.setrequesttokenpath", 
        "syntax": "final public bool OAuthProvider::setRequestTokenPath ( string $path )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::timestampNonceHandler": {
        "descr": "Sets the timestamp nonce handler callback, which will later be called with OAuthProvider::callTimestampNonceHandler(). Errors related to timestamp/nonce are thrown to this callback.", 
        "name": "OAuthProvider::timestampNonceHandler", 
        "params": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.timestampnoncehandler", 
        "syntax": "public void OAuthProvider::timestampNonceHandler ( callable $callback_function )", 
        "type": "OAuth"
    }, 
    "OAuthProvider::tokenHandler": {
        "descr": "Sets the token handler callback, which will later be called with OAuthProvider::callTokenHandler().", 
        "name": "OAuthProvider::tokenHandler", 
        "params": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.tokenhandler", 
        "syntax": "public void OAuthProvider::tokenHandler ( callable $callback_function )", 
        "type": "OAuth"
    }, 
    "OutOfBoundsException": {
        "descr": "", 
        "name": "OutOfBoundsException", 
        "params": [], 
        "path": "php/class.outofboundsexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "OutOfRangeException": {
        "descr": "", 
        "name": "OutOfRangeException", 
        "params": [], 
        "path": "php/class.outofrangeexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "OuterIterator (interface": {
        "descr": "", 
        "name": "OuterIterator (interface", 
        "params": [], 
        "path": "php/class.outeriterator", 
        "syntax": "public Iterator getInnerIterator ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "OuterIterator::getInnerIterator": {
        "descr": "Returns the inner iterator for the current iterator entry.", 
        "name": "OuterIterator::getInnerIterator", 
        "params": [], 
        "path": "php/outeriterator.getinneriterator", 
        "syntax": "public Iterator OuterIterator::getInnerIterator ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "OverflowException": {
        "descr": "", 
        "name": "OverflowException", 
        "params": [], 
        "path": "php/class.overflowexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "PDO": {
        "descr": "", 
        "name": "PDO", 
        "params": [], 
        "path": "php/class.pdo", 
        "syntax": "public bool beginTransaction ( void )", 
        "type": "Database"
    }, 
    "PDO::beginTransaction": {
        "descr": "Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling PDO::commit(). Calling PDO::rollBack() will roll back all changes to the database and return the connection to autocommit mode.", 
        "name": "PDO::beginTransaction", 
        "params": [], 
        "path": "php/pdo.begintransaction", 
        "syntax": "public bool PDO::beginTransaction ( void )", 
        "type": "Database"
    }, 
    "PDO::commit": {
        "descr": "Commits a transaction, returning the database connection to autocommit mode until the next call to PDO::beginTransaction() starts a new transaction.", 
        "name": "PDO::commit", 
        "params": [], 
        "path": "php/pdo.commit", 
        "syntax": "public bool PDO::commit ( void )", 
        "type": "Database"
    }, 
    "PDO::errorCode": {
        "descr": "", 
        "name": "PDO::errorCode", 
        "params": [], 
        "path": "php/pdo.errorcode", 
        "syntax": "public mixed PDO::errorCode ( void )", 
        "type": "Database"
    }, 
    "PDO::errorInfo": {
        "descr": "", 
        "name": "PDO::errorInfo", 
        "params": [], 
        "path": "php/pdo.errorinfo", 
        "syntax": "public array PDO::errorInfo ( void )", 
        "type": "Database"
    }, 
    "PDO::exec": {
        "descr": "PDO::exec() executes an SQL statement in a single function call, returning the number of rows affected by the statement.", 
        "name": "PDO::exec", 
        "params": [
            {
                "descr": "The SQL statement to prepare and execute. ", 
                "name": "statement"
            }
        ], 
        "path": "php/pdo.exec", 
        "syntax": "public int PDO::exec ( string $statement )", 
        "type": "Database"
    }, 
    "PDO::getAttribute": {
        "descr": "This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to PDOStatement::getAttribute().", 
        "name": "PDO::getAttribute", 
        "params": [
            {
                "descr": "One of the PDO::ATTR_* constants. ", 
                "name": "attribute"
            }
        ], 
        "path": "php/pdo.getattribute", 
        "syntax": "public mixed PDO::getAttribute ( int $attribute )", 
        "type": "Database"
    }, 
    "PDO::getAvailableDrivers": {
        "descr": "This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().", 
        "name": "PDO::getAvailableDrivers", 
        "params": [], 
        "path": "php/pdo.getavailabledrivers", 
        "syntax": "public static array PDO::getAvailableDrivers ( void )", 
        "type": "Database"
    }, 
    "PDO::inTransaction": {
        "descr": "Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.", 
        "name": "PDO::inTransaction", 
        "params": [], 
        "path": "php/pdo.intransaction", 
        "syntax": "public bool PDO::inTransaction ( void )", 
        "type": "Database"
    }, 
    "PDO::lastInsertId": {
        "descr": "Returns the ID of the last inserted row, or the last value from a sequence object, depending on the underlying driver. For example, PDO_PGSQL requires you to specify the name of a sequence object for the name parameter.", 
        "name": "PDO::lastInsertId", 
        "params": [
            {
                "descr": "Name of the sequence object from which the ID should be returned.", 
                "name": "name"
            }
        ], 
        "path": "php/pdo.lastinsertid", 
        "syntax": "public string PDO::lastInsertId ([ string $name = NULL ] )", 
        "type": "Database"
    }, 
    "PDO::prepare": {
        "descr": "Prepares an SQL statement to be executed by the PDOStatement::execute() method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use both named and question mark parameter markers within the same SQL statement; pick one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query.", 
        "name": "PDO::prepare", 
        "params": [
            {
                "descr": "This must be a valid SQL statement for the target database server.", 
                "name": "statement"
            }, 
            {
                "descr": "This array holds one or more key=>value pairs to set attribute values for the PDOStatement object that this method returns. ", 
                "name": "driver_options"
            }
        ], 
        "path": "php/pdo.prepare", 
        "syntax": "public PDOStatement PDO::prepare ( string $statement [, array $driver_options = array() ] )", 
        "type": "Database"
    }, 
    "PDO::query": {
        "descr": "PDO::query() executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object.", 
        "name": "PDO::query", 
        "params": [
            {
                "descr": "The SQL statement to prepare and execute. ", 
                "name": "statement"
            }
        ], 
        "path": "php/pdo.query", 
        "syntax": "public PDOStatement PDO::query ( string $statement )", 
        "type": "Database"
    }, 
    "PDO::quote": {
        "descr": "PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver.", 
        "name": "PDO::quote", 
        "params": [
            {
                "descr": "The string to be quoted.", 
                "name": "string"
            }, 
            {
                "descr": "Provides a data type hint for drivers that have alternate quoting styles.", 
                "name": "parameter_type"
            }
        ], 
        "path": "php/pdo.quote", 
        "syntax": "public string PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ] )", 
        "type": "Database"
    }, 
    "PDO::rollBack": {
        "descr": "Rolls back the current transaction, as initiated by PDO::beginTransaction(). A PDOException will be thrown if no transaction is active.", 
        "name": "PDO::rollBack", 
        "params": [], 
        "path": "php/pdo.rollback", 
        "syntax": "public bool PDO::rollBack ( void )", 
        "type": "Database"
    }, 
    "PDO::setAttribute": {
        "descr": "Sets an attribute on the database handle. Some of the available generic attributes are listed below; some drivers may make use of additional driver specific attributes.", 
        "name": "PDO::setAttribute", 
        "params": [], 
        "path": "php/pdo.setattribute", 
        "syntax": "public bool PDO::setAttribute ( int $attribute , mixed $value )", 
        "type": "Database"
    }, 
    "PDOException": {
        "descr": "", 
        "name": "PDOException", 
        "params": [], 
        "path": "php/class.pdoexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Database"
    }, 
    "PDOStatement": {
        "descr": "", 
        "name": "PDOStatement", 
        "params": [], 
        "path": "php/class.pdostatement", 
        "syntax": "public bool bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )", 
        "type": "Database"
    }, 
    "PDOStatement::bindColumn": {
        "descr": "PDOStatement::bindColumn() arranges to have a particular variable bound to a given column in the result-set from a query. Each call to PDOStatement::fetch() or PDOStatement::fetchAll() will update all the variables that are bound to columns.", 
        "name": "PDOStatement::bindColumn", 
        "params": [
            {
                "descr": "Number of the column (1-indexed) or name of the column in the result set. ", 
                "name": "column"
            }, 
            {
                "descr": "Name of the PHP variable to which the column will be bound.", 
                "name": "param"
            }, 
            {
                "descr": "Data type of the parameter, specified by the PDO::PARAM_* constants.", 
                "name": "type"
            }, 
            {
                "descr": "A hint for pre-allocation.", 
                "name": "maxlen"
            }, 
            {
                "descr": "Optional parameter(s) for the driver.", 
                "name": "driverdata"
            }
        ], 
        "path": "php/pdostatement.bindcolumn", 
        "syntax": "public bool PDOStatement::bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )", 
        "type": "Database"
    }, 
    "PDOStatement::bindParam": {
        "descr": "Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike PDOStatement::bindValue(), the variable is bound as a reference and will only be evaluated at the time that PDOStatement::execute() is called.", 
        "name": "PDOStatement::bindParam", 
        "params": [
            {
                "descr": "Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. ", 
                "name": "parameter"
            }, 
            {
                "descr": "Name of the PHP variable to bind to the SQL statement parameter.", 
                "name": "variable"
            }, 
            {
                "descr": "Explicit data type for the parameter using the PDO::PARAM_* constants. ", 
                "name": "data_type"
            }, 
            {
                "descr": "Length of the data type. To indicate that a parameter is an OUT parameter from a stored procedure, you must explicitly set the length.", 
                "name": "length"
            }
        ], 
        "path": "php/pdostatement.bindparam", 
        "syntax": "public bool PDOStatement::bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] )", 
        "type": "Database"
    }, 
    "PDOStatement::bindValue": {
        "descr": "Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.", 
        "name": "PDOStatement::bindValue", 
        "params": [
            {
                "descr": "Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. ", 
                "name": "parameter"
            }, 
            {
                "descr": "The value to bind to the parameter.", 
                "name": "value"
            }, 
            {
                "descr": "Explicit data type for the parameter using the PDO::PARAM_* constants.", 
                "name": "data_type"
            }
        ], 
        "path": "php/pdostatement.bindvalue", 
        "syntax": "public bool PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] )", 
        "type": "Database"
    }, 
    "PDOStatement::closeCursor": {
        "descr": "PDOStatement::closeCursor() frees up the connection to the server so that other SQL statements may be issued, but leaves the statement in a state that enables it to be executed again.", 
        "name": "PDOStatement::closeCursor", 
        "params": [], 
        "path": "php/pdostatement.closecursor", 
        "syntax": "public bool PDOStatement::closeCursor ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::columnCount": {
        "descr": "Use PDOStatement::columnCount() to return the number of columns in the result set represented by the PDOStatement object.", 
        "name": "PDOStatement::columnCount", 
        "params": [], 
        "path": "php/pdostatement.columncount", 
        "syntax": "public int PDOStatement::columnCount ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::debugDumpParams": {
        "descr": "Dumps the informations contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters, with their name, type (paramtype) as an integer, their key name or position, the value, and the position in the query (if this is supported by the PDO driver, otherwise, it will be -1).", 
        "name": "PDOStatement::debugDumpParams", 
        "params": [], 
        "path": "php/pdostatement.debugdumpparams", 
        "syntax": "public void PDOStatement::debugDumpParams ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::errorCode": {
        "descr": "", 
        "name": "PDOStatement::errorCode", 
        "params": [], 
        "path": "php/pdostatement.errorcode", 
        "syntax": "public string PDOStatement::errorCode ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::errorInfo": {
        "descr": "", 
        "name": "PDOStatement::errorInfo", 
        "params": [], 
        "path": "php/pdostatement.errorinfo", 
        "syntax": "public array PDOStatement::errorInfo ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::execute": {
        "descr": "Execute the prepared statement. If the prepared statement included parameter markers, you must either:", 
        "name": "PDOStatement::execute", 
        "params": [
            {
                "descr": "An array of values with as many elements as there are bound parameters in the SQL statement being executed. ", 
                "name": "input_parameters"
            }
        ], 
        "path": "php/pdostatement.execute", 
        "syntax": "public bool PDOStatement::execute ([ array $input_parameters ] )", 
        "type": "Database"
    }, 
    "PDOStatement::fetch": {
        "descr": "Fetches a row from a result set associated with a PDOStatement object. The fetch_style parameter determines how PDO returns the row.", 
        "name": "PDOStatement::fetch", 
        "params": [
            {
                "descr": "Controls how the next row will be returned to the caller. ", 
                "name": "fetch_style"
            }, 
            {
                "descr": "For a PDOStatement object representing a scrollable cursor, this value determines which row will be returned to the caller. ", 
                "name": "cursor_orientation"
            }, 
            {
                "descr": "For a PDOStatement object representing a scrollable cursor for which the cursor_orientation parameter is set to PDO::FETCH_ORI_ABS, this value specifies the absolute number of the row in the result set that shall be fetched.   For a PDOStatement object representing a scrollable cursor for which the cursor_orientation parameter is set to PDO::FETCH_ORI_REL, this value specifies the row to fetch relative to the cursor position before PDOStatement::fetch() was called.", 
                "name": "offset"
            }
        ], 
        "path": "php/pdostatement.fetch", 
        "syntax": "public mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] )", 
        "type": "Database"
    }, 
    "PDOStatement::fetchAll": {
        "descr": "", 
        "name": "PDOStatement::fetchAll", 
        "params": [
            {
                "descr": "Controls the contents of the returned array as documented in PDOStatement::fetch(). ", 
                "name": "fetch_style"
            }, 
            {
                "descr": "This argument have a different meaning depending on the value of the fetch_style parameter:   PDO::FETCH_COLUMN: Returns the indicated 0-indexed column. ", 
                "name": "fetch_argument"
            }, 
            {
                "descr": "Arguments of custom class constructor when the fetch_style parameter is PDO::FETCH_CLASS.", 
                "name": "ctor_args"
            }
        ], 
        "path": "php/pdostatement.fetchall", 
        "syntax": "public array PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )", 
        "type": "Database"
    }, 
    "PDOStatement::fetchColumn": {
        "descr": "Returns a single column from the next row of a result set or FALSE if there are no more rows.", 
        "name": "PDOStatement::fetchColumn", 
        "params": [
            {
                "descr": "0-indexed number of the column you wish to retrieve from the row. ", 
                "name": "column_number"
            }
        ], 
        "path": "php/pdostatement.fetchcolumn", 
        "syntax": "public string PDOStatement::fetchColumn ([ int $column_number = 0 ] )", 
        "type": "Database"
    }, 
    "PDOStatement::fetchObject": {
        "descr": "Fetches the next row and returns it as an object. This function is an alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or PDO::FETCH_OBJ style.", 
        "name": "PDOStatement::fetchObject", 
        "params": [
            {
                "descr": "Name of the created class.", 
                "name": "class_name"
            }, 
            {
                "descr": "Elements of this array are passed to the constructor.", 
                "name": "ctor_args"
            }
        ], 
        "path": "php/pdostatement.fetchobject", 
        "syntax": "public mixed PDOStatement::fetchObject ([ string $class_name = \"stdClass\" [, array $ctor_args ]] )", 
        "type": "Database"
    }, 
    "PDOStatement::getAttribute": {
        "descr": "Gets an attribute of the statement. Currently, no generic attributes exist but only driver specific:", 
        "name": "PDOStatement::getAttribute", 
        "params": [], 
        "path": "php/pdostatement.getattribute", 
        "syntax": "public mixed PDOStatement::getAttribute ( int $attribute )", 
        "type": "Database"
    }, 
    "PDOStatement::getColumnMeta": {
        "descr": "", 
        "name": "PDOStatement::getColumnMeta", 
        "params": [
            {
                "descr": "The 0-indexed column in the result set.", 
                "name": "column"
            }
        ], 
        "path": "php/pdostatement.getcolumnmeta", 
        "syntax": "public array PDOStatement::getColumnMeta ( int $column )", 
        "type": "Database"
    }, 
    "PDOStatement::nextRowset": {
        "descr": "Some database servers support stored procedures that return more than one rowset (also known as a result set). PDOStatement::nextRowset() enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset.", 
        "name": "PDOStatement::nextRowset", 
        "params": [], 
        "path": "php/pdostatement.nextrowset", 
        "syntax": "public bool PDOStatement::nextRowset ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::rowCount": {
        "descr": "PDOStatement::rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding PDOStatement object.", 
        "name": "PDOStatement::rowCount", 
        "params": [], 
        "path": "php/pdostatement.rowcount", 
        "syntax": "public int PDOStatement::rowCount ( void )", 
        "type": "Database"
    }, 
    "PDOStatement::setAttribute": {
        "descr": "Sets an attribute on the statement. Currently, no generic attributes are set but only driver specific:", 
        "name": "PDOStatement::setAttribute", 
        "params": [], 
        "path": "php/pdostatement.setattribute", 
        "syntax": "public bool PDOStatement::setAttribute ( int $attribute , mixed $value )", 
        "type": "Database"
    }, 
    "PDOStatement::setFetchMode": {
        "descr": "", 
        "name": "PDOStatement::setFetchMode", 
        "params": [
            {
                "descr": "The fetch mode must be one of the PDO::FETCH_* constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Column number.", 
                "name": "colno"
            }, 
            {
                "descr": "Class name.", 
                "name": "classname"
            }, 
            {
                "descr": "Constructor arguments.", 
                "name": "ctorargs"
            }, 
            {
                "descr": "Object.", 
                "name": "object"
            }
        ], 
        "path": "php/pdostatement.setfetchmode", 
        "syntax": "public bool PDOStatement::setFetchMode ( int $mode )", 
        "type": "Database"
    }, 
    "ParentIterator": {
        "descr": "", 
        "name": "ParentIterator", 
        "params": [], 
        "path": "php/class.parentiterator", 
        "syntax": "public bool accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::__construct": {
        "descr": "Constructs a ParentIterator on an iterator.", 
        "name": "ParentIterator::__construct", 
        "params": [
            {
                "descr": "The iterator being constructed upon.", 
                "name": "iterator"
            }
        ], 
        "path": "php/parentiterator.construct", 
        "syntax": "public ParentIterator::__construct ( RecursiveIterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::accept": {
        "descr": "Determines if the current element has children.", 
        "name": "ParentIterator::accept", 
        "params": [], 
        "path": "php/parentiterator.accept", 
        "syntax": "public bool ParentIterator::accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::getChildren": {
        "descr": "Get the inner iterator's children contained in a ParentIterator.", 
        "name": "ParentIterator::getChildren", 
        "params": [], 
        "path": "php/parentiterator.getchildren", 
        "syntax": "public ParentIterator ParentIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::hasChildren": {
        "descr": "Check whether the inner iterator's current element has children.", 
        "name": "ParentIterator::hasChildren", 
        "params": [], 
        "path": "php/parentiterator.haschildren", 
        "syntax": "public bool ParentIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::next": {
        "descr": "Moves the iterator forward.", 
        "name": "ParentIterator::next", 
        "params": [], 
        "path": "php/parentiterator.next", 
        "syntax": "public void ParentIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::rewind": {
        "descr": "Rewinds the iterator.", 
        "name": "ParentIterator::rewind", 
        "params": [], 
        "path": "php/parentiterator.rewind", 
        "syntax": "public void ParentIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RangeException": {
        "descr": "", 
        "name": "RangeException", 
        "params": [], 
        "path": "php/class.rangeexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "RecursiveArrayIterator": {
        "descr": "", 
        "name": "RecursiveArrayIterator", 
        "params": [], 
        "path": "php/class.recursivearrayiterator", 
        "syntax": "public RecursiveArrayIterator getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveArrayIterator::getChildren": {
        "descr": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveArrayIterator::getChildren", 
        "params": [], 
        "path": "php/recursivearrayiterator.getchildren", 
        "syntax": "public RecursiveArrayIterator RecursiveArrayIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveArrayIterator::hasChildren": {
        "descr": "Returns whether current entry is an array or an object for which an iterator can be obtained via RecursiveArrayIterator::getChildren().", 
        "name": "RecursiveArrayIterator::hasChildren", 
        "params": [], 
        "path": "php/recursivearrayiterator.haschildren", 
        "syntax": "public bool RecursiveArrayIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator": {
        "descr": "", 
        "name": "RecursiveCachingIterator", 
        "params": [], 
        "path": "php/class.recursivecachingiterator", 
        "syntax": "public __construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::__construct": {
        "descr": "Constructs a new RecursiveCachingIterator, which consists of a passed in iterator.", 
        "name": "RecursiveCachingIterator::__construct", 
        "params": [
            {
                "descr": "The iterator being used.", 
                "name": "iterator"
            }, 
            {
                "descr": "The flags. Use CALL_TOSTRING to call RecursiveCachingIterator::__toString() for every element (the default), and/or CATCH_GET_CHILD to catch exceptions when trying to get children.", 
                "name": "flags"
            }
        ], 
        "path": "php/recursivecachingiterator.construct", 
        "syntax": "public RecursiveCachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::getChildren": {
        "descr": "", 
        "name": "RecursiveCachingIterator::getChildren", 
        "params": [], 
        "path": "php/recursivecachingiterator.getchildren", 
        "syntax": "public RecursiveCachingIterator RecursiveCachingIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::hasChildren": {
        "descr": "", 
        "name": "RecursiveCachingIterator::hasChildren", 
        "params": [], 
        "path": "php/recursivecachingiterator.haschildren", 
        "syntax": "public bool RecursiveCachingIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator": {
        "descr": "", 
        "name": "RecursiveCallbackFilterIterator", 
        "params": [], 
        "path": "php/class.recursivecallbackfilteriterator", 
        "syntax": "public RecursiveCallbackFilterIterator getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator::getChildren": {
        "descr": "Fetches the filtered children of the inner iterator.", 
        "name": "RecursiveCallbackFilterIterator::getChildren", 
        "params": [], 
        "path": "php/recursivecallbackfilteriterator.getchildren", 
        "syntax": "public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator::hasChildren": {
        "descr": "Returns TRUE if the current element has children, FALSE otherwise.", 
        "name": "RecursiveCallbackFilterIterator::hasChildren", 
        "params": [], 
        "path": "php/recursivecallbackfilteriterator.haschildren", 
        "syntax": "public void RecursiveCallbackFilterIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator", 
        "params": [], 
        "path": "php/class.recursivedirectoryiterator", 
        "syntax": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::__construct": {
        "descr": "Constructs a RecursiveDirectoryIterator() for the provided path.", 
        "name": "RecursiveDirectoryIterator::__construct", 
        "params": [
            {
                "descr": "The path of the directory to be iterated over.", 
                "name": "path"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }
        ], 
        "path": "php/recursivedirectoryiterator.construct", 
        "syntax": "public RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getChildren": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator::getChildren", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.getchildren", 
        "syntax": "public mixed RecursiveDirectoryIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getSubPath": {
        "descr": "Gets the sub path.", 
        "name": "RecursiveDirectoryIterator::getSubPath", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.getsubpath", 
        "syntax": "public string RecursiveDirectoryIterator::getSubPath ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getSubPathname": {
        "descr": "Gets the sub path and filename.", 
        "name": "RecursiveDirectoryIterator::getSubPathname", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.getsubpathname", 
        "syntax": "public string RecursiveDirectoryIterator::getSubPathname ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::hasChildren": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator::hasChildren", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.haschildren", 
        "syntax": "public bool RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = false ] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::key": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator::key", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.key", 
        "syntax": "public string RecursiveDirectoryIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::next": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator::next", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.next", 
        "syntax": "public void RecursiveDirectoryIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::rewind": {
        "descr": "", 
        "name": "RecursiveDirectoryIterator::rewind", 
        "params": [], 
        "path": "php/recursivedirectoryiterator.rewind", 
        "syntax": "public void RecursiveDirectoryIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator": {
        "descr": "", 
        "name": "RecursiveFilterIterator", 
        "params": [], 
        "path": "php/class.recursivefilteriterator", 
        "syntax": "public __construct ( RecursiveIterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::__construct": {
        "descr": "Create a RecursiveFilterIterator from a RecursiveIterator.", 
        "name": "RecursiveFilterIterator::__construct", 
        "params": [
            {
                "descr": "The RecursiveIterator to be filtered.", 
                "name": "iterator"
            }
        ], 
        "path": "php/recursivefilteriterator.construct", 
        "syntax": "public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::getChildren": {
        "descr": "Return the inner iterator's children contained in a RecursiveFilterIterator.", 
        "name": "RecursiveFilterIterator::getChildren", 
        "params": [], 
        "path": "php/recursivefilteriterator.getchildren", 
        "syntax": "public void RecursiveFilterIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::hasChildren": {
        "descr": "Check whether the inner iterator's current element has children.", 
        "name": "RecursiveFilterIterator::hasChildren", 
        "params": [], 
        "path": "php/recursivefilteriterator.haschildren", 
        "syntax": "public void RecursiveFilterIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveIterator (interface": {
        "descr": "", 
        "name": "RecursiveIterator (interface", 
        "params": [], 
        "path": "php/class.recursiveiterator", 
        "syntax": "public RecursiveIterator getChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIterator::getChildren": {
        "descr": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveIterator::getChildren", 
        "params": [], 
        "path": "php/recursiveiterator.getchildren", 
        "syntax": "public RecursiveIterator RecursiveIterator::getChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIterator::hasChildren": {
        "descr": "Returns if an iterator can be created for the current entry. RecursiveIterator::getChildren().", 
        "name": "RecursiveIterator::hasChildren", 
        "params": [], 
        "path": "php/recursiveiterator.haschildren", 
        "syntax": "public bool RecursiveIterator::hasChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator": {
        "descr": "", 
        "name": "RecursiveIteratorIterator", 
        "params": [], 
        "path": "php/class.recursiveiteratoriterator", 
        "syntax": "public void beginChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::__construct": {
        "descr": "Creates a RecursiveIteratorIterator from a RecursiveIterator.", 
        "name": "RecursiveIteratorIterator::__construct", 
        "params": [
            {
                "descr": "The iterator being constructed from. ", 
                "name": "iterator"
            }, 
            {
                "descr": "Optional mode. Possible values are  RecursiveIteratorIterator::LEAVES_ONLY - The default. ", 
                "name": "mode"
            }, 
            {
                "descr": "Optional flag. Possible values are RecursiveIteratorIterator::CATCH_GET_CHILD which will then ignore exceptions thrown in calls to RecursiveIteratorIterator::getChildren().", 
                "name": "flags"
            }
        ], 
        "path": "php/recursiveiteratoriterator.construct", 
        "syntax": "public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::beginChildren": {
        "descr": "Is called after calling RecursiveIteratorIterator::getChildren(), and its associated RecursiveIteratorIterator::rewind().", 
        "name": "RecursiveIteratorIterator::beginChildren", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.beginchildren", 
        "syntax": "public void RecursiveIteratorIterator::beginChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::beginIteration": {
        "descr": "Called when iteration begins (after the first RecursiveIteratorIterator::rewind() call.", 
        "name": "RecursiveIteratorIterator::beginIteration", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.beginiteration", 
        "syntax": "public void RecursiveIteratorIterator::beginIteration ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::callGetChildren": {
        "descr": "Get children of the current element.", 
        "name": "RecursiveIteratorIterator::callGetChildren", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.callgetchildren", 
        "syntax": "public RecursiveIterator RecursiveIteratorIterator::callGetChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::callHasChildren": {
        "descr": "Called for each element to test whether it has children.", 
        "name": "RecursiveIteratorIterator::callHasChildren", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.callhaschildren", 
        "syntax": "public bool RecursiveIteratorIterator::callHasChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::current": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::current", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.current", 
        "syntax": "public mixed RecursiveIteratorIterator::current ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::endChildren": {
        "descr": "Called when end recursing one level.", 
        "name": "RecursiveIteratorIterator::endChildren", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.endchildren", 
        "syntax": "public void RecursiveIteratorIterator::endChildren ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::endIteration": {
        "descr": "Called when the iteration ends (when RecursiveIteratorIterator::valid() first returns FALSE.", 
        "name": "RecursiveIteratorIterator::endIteration", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.enditeration", 
        "syntax": "public void RecursiveIteratorIterator::endIteration ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getDepth": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::getDepth", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.getdepth", 
        "syntax": "public int RecursiveIteratorIterator::getDepth ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getInnerIterator": {
        "descr": "Gets the current active sub iterator.", 
        "name": "RecursiveIteratorIterator::getInnerIterator", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.getinneriterator", 
        "syntax": "public iterator RecursiveIteratorIterator::getInnerIterator ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getMaxDepth": {
        "descr": "Gets the maximum allowable depth.", 
        "name": "RecursiveIteratorIterator::getMaxDepth", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.getmaxdepth", 
        "syntax": "public mixed RecursiveIteratorIterator::getMaxDepth ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getSubIterator": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::getSubIterator", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.getsubiterator", 
        "syntax": "public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ] )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::key": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::key", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.key", 
        "syntax": "public mixed RecursiveIteratorIterator::key ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::next": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::next", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.next", 
        "syntax": "public void RecursiveIteratorIterator::next ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::nextElement": {
        "descr": "Called when the next element is available.", 
        "name": "RecursiveIteratorIterator::nextElement", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.nextelement", 
        "syntax": "public void RecursiveIteratorIterator::nextElement ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::rewind": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::rewind", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.rewind", 
        "syntax": "public void RecursiveIteratorIterator::rewind ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::setMaxDepth": {
        "descr": "Set the maximum allowed depth.", 
        "name": "RecursiveIteratorIterator::setMaxDepth", 
        "params": [
            {
                "descr": "The maximum allowed depth. -1 is used for any depth.", 
                "name": "max_depth"
            }
        ], 
        "path": "php/recursiveiteratoriterator.setmaxdepth", 
        "syntax": "public void RecursiveIteratorIterator::setMaxDepth ([ string $max_depth = -1 ] )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::valid": {
        "descr": "", 
        "name": "RecursiveIteratorIterator::valid", 
        "params": [], 
        "path": "php/recursiveiteratoriterator.valid", 
        "syntax": "public bool RecursiveIteratorIterator::valid ( void )", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveRegexIterator": {
        "descr": "", 
        "name": "RecursiveRegexIterator", 
        "params": [], 
        "path": "php/class.recursiveregexiterator", 
        "syntax": "public RecursiveRegexIterator getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveRegexIterator::getChildren": {
        "descr": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveRegexIterator::getChildren", 
        "params": [], 
        "path": "php/recursiveregexiterator.getchildren", 
        "syntax": "public RecursiveRegexIterator RecursiveRegexIterator::getChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveRegexIterator::hasChildren": {
        "descr": "Returns whether an iterator can be obtained for the current entry. This iterator can be obtained via RecursiveRegexIterator::getChildren().", 
        "name": "RecursiveRegexIterator::hasChildren", 
        "params": [], 
        "path": "php/recursiveregexiterator.haschildren", 
        "syntax": "public bool RecursiveRegexIterator::hasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator": {
        "descr": "", 
        "name": "RecursiveTreeIterator", 
        "params": [], 
        "path": "php/class.recursivetreeiterator", 
        "syntax": "public void beginChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::__construct": {
        "descr": "Constructs a new RecursiveTreeIterator from the supplied recursive iterator.", 
        "name": "RecursiveTreeIterator::__construct", 
        "params": [
            {
                "descr": "The RecursiveIterator or IteratorAggregate to iterate over.", 
                "name": "it"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }, 
            {
                "descr": "Flags to affect the behavior of the RecursiveCachingIterator used internally.", 
                "name": "caching_it_flags"
            }, 
            {
                "descr": "Flags to affect the behavior of the RecursiveIteratorIterator used internally.", 
                "name": "mode"
            }
        ], 
        "path": "php/recursivetreeiterator.construct", 
        "syntax": "public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::beginChildren": {
        "descr": "Called when recursing one level down.", 
        "name": "RecursiveTreeIterator::beginChildren", 
        "params": [], 
        "path": "php/recursivetreeiterator.beginchildren", 
        "syntax": "public void RecursiveTreeIterator::beginChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::beginIteration": {
        "descr": "Called when iteration begins (after the first RecursiveTreeIterator::rewind() call).", 
        "name": "RecursiveTreeIterator::beginIteration", 
        "params": [], 
        "path": "php/recursivetreeiterator.beginiteration", 
        "syntax": "public RecursiveIterator RecursiveTreeIterator::beginIteration ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::callGetChildren": {
        "descr": "Gets children of the current element.", 
        "name": "RecursiveTreeIterator::callGetChildren", 
        "params": [], 
        "path": "php/recursivetreeiterator.callgetchildren", 
        "syntax": "public RecursiveIterator RecursiveTreeIterator::callGetChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::callHasChildren": {
        "descr": "Called for each element to test whether it has children.", 
        "name": "RecursiveTreeIterator::callHasChildren", 
        "params": [], 
        "path": "php/recursivetreeiterator.callhaschildren", 
        "syntax": "public bool RecursiveTreeIterator::callHasChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::current": {
        "descr": "Gets the current element prefixed and postfixed.", 
        "name": "RecursiveTreeIterator::current", 
        "params": [], 
        "path": "php/recursivetreeiterator.current", 
        "syntax": "public string RecursiveTreeIterator::current ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::endChildren": {
        "descr": "Called when end recursing one level.", 
        "name": "RecursiveTreeIterator::endChildren", 
        "params": [], 
        "path": "php/recursivetreeiterator.endchildren", 
        "syntax": "public void RecursiveTreeIterator::endChildren ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::endIteration": {
        "descr": "Called when the iteration ends (when RecursiveTreeIterator::valid() first returns FALSE)", 
        "name": "RecursiveTreeIterator::endIteration", 
        "params": [], 
        "path": "php/recursivetreeiterator.enditeration", 
        "syntax": "public void RecursiveTreeIterator::endIteration ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getEntry": {
        "descr": "Gets the part of the tree built for the current element.", 
        "name": "RecursiveTreeIterator::getEntry", 
        "params": [], 
        "path": "php/recursivetreeiterator.getentry", 
        "syntax": "public string RecursiveTreeIterator::getEntry ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getPostfix": {
        "descr": "Gets the string to place after the current element.", 
        "name": "RecursiveTreeIterator::getPostfix", 
        "params": [], 
        "path": "php/recursivetreeiterator.getpostfix", 
        "syntax": "public void RecursiveTreeIterator::getPostfix ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getPrefix": {
        "descr": "Gets the string to place in front of current element", 
        "name": "RecursiveTreeIterator::getPrefix", 
        "params": [], 
        "path": "php/recursivetreeiterator.getprefix", 
        "syntax": "public string RecursiveTreeIterator::getPrefix ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::key": {
        "descr": "Gets the current key prefixed and postfixed.", 
        "name": "RecursiveTreeIterator::key", 
        "params": [], 
        "path": "php/recursivetreeiterator.key", 
        "syntax": "public string RecursiveTreeIterator::key ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::next": {
        "descr": "Moves forward to the next element.", 
        "name": "RecursiveTreeIterator::next", 
        "params": [], 
        "path": "php/recursivetreeiterator.next", 
        "syntax": "public void RecursiveTreeIterator::next ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::nextElement": {
        "descr": "Called when the next element is available.", 
        "name": "RecursiveTreeIterator::nextElement", 
        "params": [], 
        "path": "php/recursivetreeiterator.nextelement", 
        "syntax": "public void RecursiveTreeIterator::nextElement ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::rewind": {
        "descr": "Rewinds the iterator to the first element of the top level inner iterator.", 
        "name": "RecursiveTreeIterator::rewind", 
        "params": [], 
        "path": "php/recursivetreeiterator.rewind", 
        "syntax": "public void RecursiveTreeIterator::rewind ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::setPrefixPart": {
        "descr": "Sets a part of the prefix used in the graphic tree.", 
        "name": "RecursiveTreeIterator::setPrefixPart", 
        "params": [
            {
                "descr": "One of the RecursiveTreeIterator::PREFIX_* constants.", 
                "name": "part"
            }, 
            {
                "descr": "The value to assign to the part of the prefix specified in part.", 
                "name": "value"
            }
        ], 
        "path": "php/recursivetreeiterator.setprefixpart", 
        "syntax": "public void RecursiveTreeIterator::setPrefixPart ( int $part , string $value )", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::valid": {
        "descr": "Check whether the current position is valid.", 
        "name": "RecursiveTreeIterator::valid", 
        "params": [], 
        "path": "php/recursivetreeiterator.valid", 
        "syntax": "public bool RecursiveTreeIterator::valid ( void )", 
        "type": "SPL/Iterators"
    }, 
    "Reflection": {
        "descr": "", 
        "name": "Reflection", 
        "params": [], 
        "path": "php/class.reflection", 
        "syntax": "public static string export ( Reflector $reflector [, bool $return = false ] )", 
        "type": "Reflection"
    }, 
    "Reflection::export": {
        "descr": "Exports a reflection.", 
        "name": "Reflection::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "reflector"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflection.export", 
        "syntax": "public static string Reflection::export ( Reflector $reflector [, bool $return = false ] )", 
        "type": "Reflection"
    }, 
    "Reflection::getModifierNames": {
        "descr": "Gets modifier names.", 
        "name": "Reflection::getModifierNames", 
        "params": [
            {
                "descr": "The modifiers to get, which is from a numeric value.", 
                "name": "modifiers"
            }
        ], 
        "path": "php/reflection.getmodifiernames", 
        "syntax": "public static array Reflection::getModifierNames ( int $modifiers )", 
        "type": "Reflection"
    }, 
    "ReflectionClass": {
        "descr": "", 
        "name": "ReflectionClass", 
        "params": [], 
        "path": "php/class.reflectionclass", 
        "syntax": "public __construct ( mixed $argument )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::__construct": {
        "descr": "Constructs a new ReflectionClass object.", 
        "name": "ReflectionClass::__construct", 
        "params": [
            {
                "descr": "Either a string containing the name of the class to reflect, or an object.", 
                "name": "argument"
            }
        ], 
        "path": "php/reflectionclass.construct", 
        "syntax": "public ReflectionClass::__construct ( mixed $argument )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::__toString": {
        "descr": "Returns the string representation of the ReflectionClass object.", 
        "name": "ReflectionClass::__toString", 
        "params": [], 
        "path": "php/reflectionclass.tostring", 
        "syntax": "public string ReflectionClass::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::export": {
        "descr": "Exports a reflected class.", 
        "name": "ReflectionClass::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionclass.export", 
        "syntax": "public static string ReflectionClass::export ( mixed $argument [, bool $return = false ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstant": {
        "descr": "Gets the defined constant.", 
        "name": "ReflectionClass::getConstant", 
        "params": [
            {
                "descr": "Name of the constant.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getconstant", 
        "syntax": "public mixed ReflectionClass::getConstant ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstants": {
        "descr": "Gets defined constants from a class.", 
        "name": "ReflectionClass::getConstants", 
        "params": [], 
        "path": "php/reflectionclass.getconstants", 
        "syntax": "public array ReflectionClass::getConstants ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstructor": {
        "descr": "Gets the constructor of the reflected class.", 
        "name": "ReflectionClass::getConstructor", 
        "params": [], 
        "path": "php/reflectionclass.getconstructor", 
        "syntax": "public ReflectionMethod ReflectionClass::getConstructor ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getDefaultProperties": {
        "descr": "Gets default properties from a class (including inherited properties).", 
        "name": "ReflectionClass::getDefaultProperties", 
        "params": [], 
        "path": "php/reflectionclass.getdefaultproperties", 
        "syntax": "public array ReflectionClass::getDefaultProperties ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getDocComment": {
        "descr": "Gets doc comments from a class.", 
        "name": "ReflectionClass::getDocComment", 
        "params": [], 
        "path": "php/reflectionclass.getdoccomment", 
        "syntax": "public string ReflectionClass::getDocComment ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getEndLine": {
        "descr": "Gets end line number from a user-defined class definition.", 
        "name": "ReflectionClass::getEndLine", 
        "params": [], 
        "path": "php/reflectionclass.getendline", 
        "syntax": "public int ReflectionClass::getEndLine ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getExtension": {
        "descr": "Gets a ReflectionExtension object for the extension which defined the class.", 
        "name": "ReflectionClass::getExtension", 
        "params": [], 
        "path": "php/reflectionclass.getextension", 
        "syntax": "public ReflectionExtension ReflectionClass::getExtension ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getExtensionName": {
        "descr": "Gets the name of the extension which defined the class.", 
        "name": "ReflectionClass::getExtensionName", 
        "params": [], 
        "path": "php/reflectionclass.getextensionname", 
        "syntax": "public string ReflectionClass::getExtensionName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getFileName": {
        "descr": "Gets the filename of the file in which the class has been defined.", 
        "name": "ReflectionClass::getFileName", 
        "params": [], 
        "path": "php/reflectionclass.getfilename", 
        "syntax": "public string ReflectionClass::getFileName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getInterfaceNames": {
        "descr": "Get the interface names.", 
        "name": "ReflectionClass::getInterfaceNames", 
        "params": [], 
        "path": "php/reflectionclass.getinterfacenames", 
        "syntax": "public array ReflectionClass::getInterfaceNames ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getInterfaces": {
        "descr": "Gets the interfaces.", 
        "name": "ReflectionClass::getInterfaces", 
        "params": [], 
        "path": "php/reflectionclass.getinterfaces", 
        "syntax": "public array ReflectionClass::getInterfaces ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getMethod": {
        "descr": "Gets a ReflectionMethod for a class method.", 
        "name": "ReflectionClass::getMethod", 
        "params": [
            {
                "descr": "The method name to reflect.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getmethod", 
        "syntax": "public ReflectionMethod ReflectionClass::getMethod ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getMethods": {
        "descr": "Gets an array of methods for the class.", 
        "name": "ReflectionClass::getMethods", 
        "params": [
            {
                "descr": "Filter the results to include only methods with certain attributes. ", 
                "name": "filter"
            }
        ], 
        "path": "php/reflectionclass.getmethods", 
        "syntax": "public array ReflectionClass::getMethods ([ int $filter ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getModifiers": {
        "descr": "Returns a bitfield of the access modifiers for this class.", 
        "name": "ReflectionClass::getModifiers", 
        "params": [], 
        "path": "php/reflectionclass.getmodifiers", 
        "syntax": "public int ReflectionClass::getModifiers ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getName": {
        "descr": "Gets the class name.", 
        "name": "ReflectionClass::getName", 
        "params": [], 
        "path": "php/reflectionclass.getname", 
        "syntax": "public string ReflectionClass::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getNamespaceName": {
        "descr": "Gets the namespace name.", 
        "name": "ReflectionClass::getNamespaceName", 
        "params": [], 
        "path": "php/reflectionclass.getnamespacename", 
        "syntax": "public string ReflectionClass::getNamespaceName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getParentClass": {
        "descr": "", 
        "name": "ReflectionClass::getParentClass", 
        "params": [], 
        "path": "php/reflectionclass.getparentclass", 
        "syntax": "public object ReflectionClass::getParentClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getProperties": {
        "descr": "Retrieves reflected properties.", 
        "name": "ReflectionClass::getProperties", 
        "params": [
            {
                "descr": "The optional filter, for filtering desired property types. ", 
                "name": "filter"
            }
        ], 
        "path": "php/reflectionclass.getproperties", 
        "syntax": "public array ReflectionClass::getProperties ([ int $filter ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getProperty": {
        "descr": "Gets a ReflectionProperty for a class's property.", 
        "name": "ReflectionClass::getProperty", 
        "params": [
            {
                "descr": "The property name.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getproperty", 
        "syntax": "public ReflectionProperty ReflectionClass::getProperty ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getShortName": {
        "descr": "Gets the short name of the class, the part without the namespace.", 
        "name": "ReflectionClass::getShortName", 
        "params": [], 
        "path": "php/reflectionclass.getshortname", 
        "syntax": "public string ReflectionClass::getShortName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStartLine": {
        "descr": "Get the starting line number.", 
        "name": "ReflectionClass::getStartLine", 
        "params": [], 
        "path": "php/reflectionclass.getstartline", 
        "syntax": "public int ReflectionClass::getStartLine ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStaticProperties": {
        "descr": "Get the static properties.", 
        "name": "ReflectionClass::getStaticProperties", 
        "params": [], 
        "path": "php/reflectionclass.getstaticproperties", 
        "syntax": "public array ReflectionClass::getStaticProperties ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStaticPropertyValue": {
        "descr": "Gets the value of a static property on this class.", 
        "name": "ReflectionClass::getStaticPropertyValue", 
        "params": [
            {
                "descr": "The name of the static property for which to return a value.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getstaticpropertyvalue", 
        "syntax": "public mixed ReflectionClass::getStaticPropertyValue ( string $name [, mixed &$def_value ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraitAliases": {
        "descr": "", 
        "name": "ReflectionClass::getTraitAliases", 
        "params": [], 
        "path": "php/reflectionclass.gettraitaliases", 
        "syntax": "public array ReflectionClass::getTraitAliases ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraitNames": {
        "descr": "", 
        "name": "ReflectionClass::getTraitNames", 
        "params": [], 
        "path": "php/reflectionclass.gettraitnames", 
        "syntax": "public array ReflectionClass::getTraitNames ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraits": {
        "descr": "", 
        "name": "ReflectionClass::getTraits", 
        "params": [], 
        "path": "php/reflectionclass.gettraits", 
        "syntax": "public array ReflectionClass::getTraits ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasConstant": {
        "descr": "Checks whether the class has a specific constant defined or not.", 
        "name": "ReflectionClass::hasConstant", 
        "params": [
            {
                "descr": "The name of the constant being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasconstant", 
        "syntax": "public bool ReflectionClass::hasConstant ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasMethod": {
        "descr": "Checks whether a specific method is defined in a class.", 
        "name": "ReflectionClass::hasMethod", 
        "params": [
            {
                "descr": "Name of the method being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasmethod", 
        "syntax": "public bool ReflectionClass::hasMethod ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasProperty": {
        "descr": "Checks whether the specified property is defined.", 
        "name": "ReflectionClass::hasProperty", 
        "params": [
            {
                "descr": "Name of the property being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasproperty", 
        "syntax": "public bool ReflectionClass::hasProperty ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::implementsInterface": {
        "descr": "Checks whether it implements an interface.", 
        "name": "ReflectionClass::implementsInterface", 
        "params": [
            {
                "descr": "The interface name.", 
                "name": "interface"
            }
        ], 
        "path": "php/reflectionclass.implementsinterface", 
        "syntax": "public bool ReflectionClass::implementsInterface ( string $interface )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::inNamespace": {
        "descr": "Checks if this class is defined in a namespace.", 
        "name": "ReflectionClass::inNamespace", 
        "params": [], 
        "path": "php/reflectionclass.innamespace", 
        "syntax": "public bool ReflectionClass::inNamespace ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isAbstract": {
        "descr": "Checks if the class is abstract.", 
        "name": "ReflectionClass::isAbstract", 
        "params": [], 
        "path": "php/reflectionclass.isabstract", 
        "syntax": "public bool ReflectionClass::isAbstract ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isCloneable": {
        "descr": "Returns whether this class is cloneable.", 
        "name": "ReflectionClass::isCloneable", 
        "params": [], 
        "path": "php/reflectionclass.iscloneable", 
        "syntax": "public bool ReflectionClass::isCloneable ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isFinal": {
        "descr": "Checks if a class is final.", 
        "name": "ReflectionClass::isFinal", 
        "params": [], 
        "path": "php/reflectionclass.isfinal", 
        "syntax": "public bool ReflectionClass::isFinal ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInstance": {
        "descr": "Checks if an object is an instance of a class.", 
        "name": "ReflectionClass::isInstance", 
        "params": [
            {
                "descr": "The object being compared to.", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionclass.isinstance", 
        "syntax": "public bool ReflectionClass::isInstance ( object $object )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInstantiable": {
        "descr": "Checks if the class is instantiable.", 
        "name": "ReflectionClass::isInstantiable", 
        "params": [], 
        "path": "php/reflectionclass.isinstantiable", 
        "syntax": "public bool ReflectionClass::isInstantiable ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInterface": {
        "descr": "Checks whether the class is an interface.", 
        "name": "ReflectionClass::isInterface", 
        "params": [], 
        "path": "php/reflectionclass.isinterface", 
        "syntax": "public bool ReflectionClass::isInterface ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInternal": {
        "descr": "Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.", 
        "name": "ReflectionClass::isInternal", 
        "params": [], 
        "path": "php/reflectionclass.isinternal", 
        "syntax": "public bool ReflectionClass::isInternal ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isIterateable": {
        "descr": "Checks whether the class is iterateable.", 
        "name": "ReflectionClass::isIterateable", 
        "params": [], 
        "path": "php/reflectionclass.isiterateable", 
        "syntax": "public bool ReflectionClass::isIterateable ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isSubclassOf": {
        "descr": "Checks if the class is a subclass of a specified class or implements a specified interface.", 
        "name": "ReflectionClass::isSubclassOf", 
        "params": [
            {
                "descr": "The class name being checked against.", 
                "name": "class"
            }
        ], 
        "path": "php/reflectionclass.issubclassof", 
        "syntax": "public bool ReflectionClass::isSubclassOf ( string $class )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isTrait": {
        "descr": "", 
        "name": "ReflectionClass::isTrait", 
        "params": [], 
        "path": "php/reflectionclass.istrait", 
        "syntax": "public bool ReflectionClass::isTrait ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isUserDefined": {
        "descr": "Checks whether the class is user-defined, as opposed to internal.", 
        "name": "ReflectionClass::isUserDefined", 
        "params": [], 
        "path": "php/reflectionclass.isuserdefined", 
        "syntax": "public bool ReflectionClass::isUserDefined ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstance": {
        "descr": "Creates a new instance of the class. The given arguments are passed to the class constructor.", 
        "name": "ReflectionClass::newInstance", 
        "params": [
            {
                "descr": "Accepts a variable number of arguments which are passed to the class constructor, much like call_user_func().", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionclass.newinstance", 
        "syntax": "public object ReflectionClass::newInstance ( mixed $args [, mixed $... ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstanceArgs": {
        "descr": "Creates a new instance of the class, the given arguments are passed to the class constructor.", 
        "name": "ReflectionClass::newInstanceArgs", 
        "params": [
            {
                "descr": "The parameters to be passed to the class constructor as an array.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionclass.newinstanceargs", 
        "syntax": "public object ReflectionClass::newInstanceArgs ([ array $args ] )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstanceWithoutConstructor": {
        "descr": "Creates a new instance of the class without invoking the constructor.", 
        "name": "ReflectionClass::newInstanceWithoutConstructor", 
        "params": [], 
        "path": "php/reflectionclass.newinstancewithoutconstructor", 
        "syntax": "public object ReflectionClass::newInstanceWithoutConstructor ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionClass::setStaticPropertyValue": {
        "descr": "Sets static property value.", 
        "name": "ReflectionClass::setStaticPropertyValue", 
        "params": [
            {
                "descr": "Property name.", 
                "name": "name"
            }, 
            {
                "descr": "New property value.", 
                "name": "value"
            }
        ], 
        "path": "php/reflectionclass.setstaticpropertyvalue", 
        "syntax": "public void ReflectionClass::setStaticPropertyValue ( string $name , string $value )", 
        "type": "Reflection"
    }, 
    "ReflectionException": {
        "descr": "", 
        "name": "ReflectionException", 
        "params": [], 
        "path": "php/class.reflectionexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension": {
        "descr": "", 
        "name": "ReflectionExtension", 
        "params": [], 
        "path": "php/class.reflectionextension", 
        "syntax": "final private void __clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__clone": {
        "descr": "The clone method prevents an object from being cloned. Reflection objects cannot be cloned.", 
        "name": "ReflectionExtension::__clone", 
        "params": [], 
        "path": "php/reflectionextension.clone", 
        "syntax": "final private void ReflectionExtension::__clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__construct": {
        "descr": "Construct a ReflectionExtension object.", 
        "name": "ReflectionExtension::__construct", 
        "params": [
            {
                "descr": "Name of the extension.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionextension.construct", 
        "syntax": "public ReflectionExtension::__construct ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__toString": {
        "descr": "Exports a reflected extension and returns it as a string. This is the same as the ReflectionExtension::export() with the return set to TRUE.", 
        "name": "ReflectionExtension::__toString", 
        "params": [], 
        "path": "php/reflectionextension.tostring", 
        "syntax": "public string ReflectionExtension::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::export": {
        "descr": "Exports a reflected extension. The output format of this function is the same as the CLI argument --re [extension].", 
        "name": "ReflectionExtension::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionextension.export", 
        "syntax": "public static string ReflectionExtension::export ( string $name [, string $return = false ] )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getClassNames": {
        "descr": "Gets a listing of class names as defined in the extension.", 
        "name": "ReflectionExtension::getClassNames", 
        "params": [], 
        "path": "php/reflectionextension.getclassnames", 
        "syntax": "public array ReflectionExtension::getClassNames ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getClasses": {
        "descr": "Gets a list of classes from an extension.", 
        "name": "ReflectionExtension::getClasses", 
        "params": [], 
        "path": "php/reflectionextension.getclasses", 
        "syntax": "public array ReflectionExtension::getClasses ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getConstants": {
        "descr": "Get defined constants from an extension.", 
        "name": "ReflectionExtension::getConstants", 
        "params": [], 
        "path": "php/reflectionextension.getconstants", 
        "syntax": "public array ReflectionExtension::getConstants ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getDependencies": {
        "descr": "Gets dependencies, by listing both required and conflicting dependencies.", 
        "name": "ReflectionExtension::getDependencies", 
        "params": [], 
        "path": "php/reflectionextension.getdependencies", 
        "syntax": "public array ReflectionExtension::getDependencies ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getFunctions": {
        "descr": "Get defined functions from an extension.", 
        "name": "ReflectionExtension::getFunctions", 
        "params": [], 
        "path": "php/reflectionextension.getfunctions", 
        "syntax": "public array ReflectionExtension::getFunctions ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getINIEntries": {
        "descr": "Get the ini entries for an extension.", 
        "name": "ReflectionExtension::getINIEntries", 
        "params": [], 
        "path": "php/reflectionextension.getinientries", 
        "syntax": "public array ReflectionExtension::getINIEntries ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getName": {
        "descr": "Gets the extensions name.", 
        "name": "ReflectionExtension::getName", 
        "params": [], 
        "path": "php/reflectionextension.getname", 
        "syntax": "public string ReflectionExtension::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getVersion": {
        "descr": "Gets the version of the extension.", 
        "name": "ReflectionExtension::getVersion", 
        "params": [], 
        "path": "php/reflectionextension.getversion", 
        "syntax": "public string ReflectionExtension::getVersion ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::info": {
        "descr": "Prints out the \"phpinfo()\" snippet for the given extension.", 
        "name": "ReflectionExtension::info", 
        "params": [], 
        "path": "php/reflectionextension.info", 
        "syntax": "public void ReflectionExtension::info ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::isPersistent": {
        "descr": "", 
        "name": "ReflectionExtension::isPersistent", 
        "params": [], 
        "path": "php/reflectionextension.ispersistent", 
        "syntax": "public void ReflectionExtension::isPersistent ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::isTemporary": {
        "descr": "", 
        "name": "ReflectionExtension::isTemporary", 
        "params": [], 
        "path": "php/reflectionextension.istemporary", 
        "syntax": "public void ReflectionExtension::isTemporary ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction": {
        "descr": "", 
        "name": "ReflectionFunction", 
        "params": [], 
        "path": "php/class.reflectionfunction", 
        "syntax": "public __construct ( mixed $name )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::__construct": {
        "descr": "Constructs a ReflectionFunction object.", 
        "name": "ReflectionFunction::__construct", 
        "params": [
            {
                "descr": "The name of the function to reflect or a closure.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionfunction.construct", 
        "syntax": "public ReflectionFunction::__construct ( mixed $name )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::__toString": {
        "descr": "To string.", 
        "name": "ReflectionFunction::__toString", 
        "params": [], 
        "path": "php/reflectionfunction.tostring", 
        "syntax": "public string ReflectionFunction::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::export": {
        "descr": "Exports a Reflected function.", 
        "name": "ReflectionFunction::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionfunction.export", 
        "syntax": "public static string ReflectionFunction::export ( string $name [, string $return ] )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::getClosure": {
        "descr": "", 
        "name": "ReflectionFunction::getClosure", 
        "params": [], 
        "path": "php/reflectionfunction.getclosure", 
        "syntax": "public Closure ReflectionFunction::getClosure ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::invoke": {
        "descr": "Invokes a reflected function.", 
        "name": "ReflectionFunction::invoke", 
        "params": [
            {
                "descr": "The passed in argument list. It accepts a variable number of arguments which are passed to the function much like call_user_func() is.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionfunction.invoke", 
        "syntax": "public mixed ReflectionFunction::invoke ([ mixed $parameter [, mixed $... ]] )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::invokeArgs": {
        "descr": "Invokes the function and pass its arguments as array.", 
        "name": "ReflectionFunction::invokeArgs", 
        "params": [
            {
                "descr": "The passed arguments to the function as an array, much like call_user_func_array() works.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionfunction.invokeargs", 
        "syntax": "public mixed ReflectionFunction::invokeArgs ( array $args )", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::isDisabled": {
        "descr": "Checks if the function is disabled, via the disable_functions directive.", 
        "name": "ReflectionFunction::isDisabled", 
        "params": [], 
        "path": "php/reflectionfunction.isdisabled", 
        "syntax": "public bool ReflectionFunction::isDisabled ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract": {
        "descr": "", 
        "name": "ReflectionFunctionAbstract", 
        "params": [], 
        "path": "php/class.reflectionfunctionabstract", 
        "syntax": "final private void __clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::__clone": {
        "descr": "Clones a function.", 
        "name": "ReflectionFunctionAbstract::__clone", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.clone", 
        "syntax": "final private void ReflectionFunctionAbstract::__clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::__toString": {
        "descr": "To string.", 
        "name": "ReflectionFunctionAbstract::__toString", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.tostring", 
        "syntax": "abstract public void ReflectionFunctionAbstract::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getClosureScopeClass": {
        "descr": "", 
        "name": "ReflectionFunctionAbstract::getClosureScopeClass", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getclosurescopeclass", 
        "syntax": "public ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getClosureThis": {
        "descr": "", 
        "name": "ReflectionFunctionAbstract::getClosureThis", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getclosurethis", 
        "syntax": "public object ReflectionFunctionAbstract::getClosureThis ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getDocComment": {
        "descr": "Get a Doc comment from a function.", 
        "name": "ReflectionFunctionAbstract::getDocComment", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getdoccomment", 
        "syntax": "public string ReflectionFunctionAbstract::getDocComment ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getEndLine": {
        "descr": "Get the ending line number.", 
        "name": "ReflectionFunctionAbstract::getEndLine", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getendline", 
        "syntax": "public int ReflectionFunctionAbstract::getEndLine ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getExtension": {
        "descr": "Get the extension information of a function.", 
        "name": "ReflectionFunctionAbstract::getExtension", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getextension", 
        "syntax": "public ReflectionExtension ReflectionFunctionAbstract::getExtension ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getExtensionName": {
        "descr": "Get the extensions name.", 
        "name": "ReflectionFunctionAbstract::getExtensionName", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getextensionname", 
        "syntax": "public string ReflectionFunctionAbstract::getExtensionName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getFileName": {
        "descr": "Gets the file name from a user-defined function.", 
        "name": "ReflectionFunctionAbstract::getFileName", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getfilename", 
        "syntax": "public string ReflectionFunctionAbstract::getFileName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getName": {
        "descr": "Get the name of the function.", 
        "name": "ReflectionFunctionAbstract::getName", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getname", 
        "syntax": "public string ReflectionFunctionAbstract::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNamespaceName": {
        "descr": "Get the namespace name where the class is defined.", 
        "name": "ReflectionFunctionAbstract::getNamespaceName", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getnamespacename", 
        "syntax": "public string ReflectionFunctionAbstract::getNamespaceName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNumberOfParameters": {
        "descr": "Get the number of parameters that a function defines, both optional and required.", 
        "name": "ReflectionFunctionAbstract::getNumberOfParameters", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getnumberofparameters", 
        "syntax": "public int ReflectionFunctionAbstract::getNumberOfParameters ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNumberOfRequiredParameters": {
        "descr": "Get the number of required parameters that a function defines.", 
        "name": "ReflectionFunctionAbstract::getNumberOfRequiredParameters", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getnumberofrequiredparameters", 
        "syntax": "public int ReflectionFunctionAbstract::getNumberOfRequiredParameters ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getParameters": {
        "descr": "Get the parameters as an array of ReflectionParameter.", 
        "name": "ReflectionFunctionAbstract::getParameters", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getparameters", 
        "syntax": "public array ReflectionFunctionAbstract::getParameters ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getShortName": {
        "descr": "Get the short name of the function (without the namespace part).", 
        "name": "ReflectionFunctionAbstract::getShortName", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getshortname", 
        "syntax": "public string ReflectionFunctionAbstract::getShortName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getStartLine": {
        "descr": "Gets the starting line number of the function.", 
        "name": "ReflectionFunctionAbstract::getStartLine", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getstartline", 
        "syntax": "public int ReflectionFunctionAbstract::getStartLine ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getStaticVariables": {
        "descr": "Get the static variables.", 
        "name": "ReflectionFunctionAbstract::getStaticVariables", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.getstaticvariables", 
        "syntax": "public array ReflectionFunctionAbstract::getStaticVariables ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::inNamespace": {
        "descr": "Checks whether a function is defined in a namespace.", 
        "name": "ReflectionFunctionAbstract::inNamespace", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.innamespace", 
        "syntax": "public bool ReflectionFunctionAbstract::inNamespace ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isClosure": {
        "descr": "Checks whether it's a closure.", 
        "name": "ReflectionFunctionAbstract::isClosure", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.isclosure", 
        "syntax": "public bool ReflectionFunctionAbstract::isClosure ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isDeprecated": {
        "descr": "Checks whether the function is deprecated.", 
        "name": "ReflectionFunctionAbstract::isDeprecated", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.isdeprecated", 
        "syntax": "public bool ReflectionFunctionAbstract::isDeprecated ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isGenerator": {
        "descr": "", 
        "name": "ReflectionFunctionAbstract::isGenerator", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.isgenerator", 
        "syntax": "public bool ReflectionFunctionAbstract::isGenerator ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isInternal": {
        "descr": "Checks whether the function is internal, as opposed to user-defined.", 
        "name": "ReflectionFunctionAbstract::isInternal", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.isinternal", 
        "syntax": "public bool ReflectionFunctionAbstract::isInternal ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isUserDefined": {
        "descr": "Checks whether the function is user-defined, as opposed to internal.", 
        "name": "ReflectionFunctionAbstract::isUserDefined", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.isuserdefined", 
        "syntax": "public bool ReflectionFunctionAbstract::isUserDefined ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::returnsReference": {
        "descr": "Checks whether the function returns a reference.", 
        "name": "ReflectionFunctionAbstract::returnsReference", 
        "params": [], 
        "path": "php/reflectionfunctionabstract.returnsreference", 
        "syntax": "public bool ReflectionFunctionAbstract::returnsReference ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod": {
        "descr": "", 
        "name": "ReflectionMethod", 
        "params": [], 
        "path": "php/class.reflectionmethod", 
        "syntax": "public __construct ( mixed $class , string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::__construct": {
        "descr": "Constructs a new ReflectionMethod.", 
        "name": "ReflectionMethod::__construct", 
        "params": [
            {
                "descr": "Classname or object (instance of the class) that contains the method.", 
                "name": "class"
            }, 
            {
                "descr": "Name of the method.", 
                "name": "name"
            }, 
            {
                "descr": "Class name and method name delimited by ::.", 
                "name": "class_method"
            }
        ], 
        "path": "php/reflectionmethod.construct", 
        "syntax": "public ReflectionMethod::__construct ( mixed $class , string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::__toString": {
        "descr": "Returns the string representation of the Reflection method object.", 
        "name": "ReflectionMethod::__toString", 
        "params": [], 
        "path": "php/reflectionmethod.tostring", 
        "syntax": "public string ReflectionMethod::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::export": {
        "descr": "Exports a ReflectionMethod.", 
        "name": "ReflectionMethod::export", 
        "params": [
            {
                "descr": "The class name.", 
                "name": "class"
            }, 
            {
                "descr": "The name of the method.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionmethod.export", 
        "syntax": "public static string ReflectionMethod::export ( string $class , string $name [, bool $return = false ] )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getClosure": {
        "descr": "", 
        "name": "ReflectionMethod::getClosure", 
        "params": [
            {
                "descr": "Forbidden for static methods, required for other methods.", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionmethod.getclosure", 
        "syntax": "public Closure ReflectionMethod::getClosure ( object $object )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getDeclaringClass": {
        "descr": "Gets the declaring class for the reflected method.", 
        "name": "ReflectionMethod::getDeclaringClass", 
        "params": [], 
        "path": "php/reflectionmethod.getdeclaringclass", 
        "syntax": "public ReflectionClass ReflectionMethod::getDeclaringClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getModifiers": {
        "descr": "Returns a bitfield of the access modifiers for this method.", 
        "name": "ReflectionMethod::getModifiers", 
        "params": [], 
        "path": "php/reflectionmethod.getmodifiers", 
        "syntax": "public int ReflectionMethod::getModifiers ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getPrototype": {
        "descr": "Returns the methods prototype.", 
        "name": "ReflectionMethod::getPrototype", 
        "params": [], 
        "path": "php/reflectionmethod.getprototype", 
        "syntax": "public ReflectionMethod ReflectionMethod::getPrototype ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::invoke": {
        "descr": "Invokes a reflected method.", 
        "name": "ReflectionMethod::invoke", 
        "params": [
            {
                "descr": "The object to invoke the method on. ", 
                "name": "object"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the method. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/reflectionmethod.invoke", 
        "syntax": "public mixed ReflectionMethod::invoke ( object $object [, mixed $parameter [, mixed $... ]] )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::invokeArgs": {
        "descr": "Invokes the reflected method and pass its arguments as array.", 
        "name": "ReflectionMethod::invokeArgs", 
        "params": [
            {
                "descr": "The object to invoke the method on. ", 
                "name": "object"
            }, 
            {
                "descr": "The parameters to be passed to the function, as an array.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionmethod.invokeargs", 
        "syntax": "public mixed ReflectionMethod::invokeArgs ( object $object , array $args )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isAbstract": {
        "descr": "Checks if the method is abstract.", 
        "name": "ReflectionMethod::isAbstract", 
        "params": [], 
        "path": "php/reflectionmethod.isabstract", 
        "syntax": "public bool ReflectionMethod::isAbstract ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isConstructor": {
        "descr": "Checks if the method is a constructor.", 
        "name": "ReflectionMethod::isConstructor", 
        "params": [], 
        "path": "php/reflectionmethod.isconstructor", 
        "syntax": "public bool ReflectionMethod::isConstructor ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isDestructor": {
        "descr": "Checks if the method is a destructor.", 
        "name": "ReflectionMethod::isDestructor", 
        "params": [], 
        "path": "php/reflectionmethod.isdestructor", 
        "syntax": "public bool ReflectionMethod::isDestructor ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isFinal": {
        "descr": "Checks if the method is final.", 
        "name": "ReflectionMethod::isFinal", 
        "params": [], 
        "path": "php/reflectionmethod.isfinal", 
        "syntax": "public bool ReflectionMethod::isFinal ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isPrivate": {
        "descr": "Checks if the method is private.", 
        "name": "ReflectionMethod::isPrivate", 
        "params": [], 
        "path": "php/reflectionmethod.isprivate", 
        "syntax": "public bool ReflectionMethod::isPrivate ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isProtected": {
        "descr": "Checks if the method is protected.", 
        "name": "ReflectionMethod::isProtected", 
        "params": [], 
        "path": "php/reflectionmethod.isprotected", 
        "syntax": "public bool ReflectionMethod::isProtected ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isPublic": {
        "descr": "Checks if the method is public.", 
        "name": "ReflectionMethod::isPublic", 
        "params": [], 
        "path": "php/reflectionmethod.ispublic", 
        "syntax": "public bool ReflectionMethod::isPublic ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isStatic": {
        "descr": "Checks if the method is static.", 
        "name": "ReflectionMethod::isStatic", 
        "params": [], 
        "path": "php/reflectionmethod.isstatic", 
        "syntax": "public bool ReflectionMethod::isStatic ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::setAccessible": {
        "descr": "Sets a method to be accessible. For example, it may allow protected and private methods to be invoked.", 
        "name": "ReflectionMethod::setAccessible", 
        "params": [
            {
                "descr": "TRUE to allow accessibility, or FALSE.", 
                "name": "accessible"
            }
        ], 
        "path": "php/reflectionmethod.setaccessible", 
        "syntax": "public void ReflectionMethod::setAccessible ( bool $accessible )", 
        "type": "Reflection"
    }, 
    "ReflectionObject": {
        "descr": "", 
        "name": "ReflectionObject", 
        "params": [], 
        "path": "php/class.reflectionobject", 
        "syntax": "public __construct ( object $argument )", 
        "type": "Reflection"
    }, 
    "ReflectionObject::__construct": {
        "descr": "Constructs a ReflectionObject.", 
        "name": "ReflectionObject::__construct", 
        "params": [
            {
                "descr": "An object instance.", 
                "name": "argument"
            }
        ], 
        "path": "php/reflectionobject.construct", 
        "syntax": "public ReflectionObject::__construct ( object $argument )", 
        "type": "Reflection"
    }, 
    "ReflectionObject::export": {
        "descr": "Exports a reflection.", 
        "name": "ReflectionObject::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionobject.export", 
        "syntax": "public static string ReflectionObject::export ( string $argument [, bool $return ] )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter": {
        "descr": "", 
        "name": "ReflectionParameter", 
        "params": [], 
        "path": "php/class.reflectionparameter", 
        "syntax": "public bool allowsNull ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__clone": {
        "descr": "Clones.", 
        "name": "ReflectionParameter::__clone", 
        "params": [], 
        "path": "php/reflectionparameter.clone", 
        "syntax": "final private void ReflectionParameter::__clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__construct": {
        "descr": "Constructs a ReflectionParameter class.", 
        "name": "ReflectionParameter::__construct", 
        "params": [
            {
                "descr": "The function to reflect parameters from.", 
                "name": "function"
            }, 
            {
                "descr": "The parameter.", 
                "name": "parameter"
            }
        ], 
        "path": "php/reflectionparameter.construct", 
        "syntax": "public ReflectionParameter::__construct ( string $function , string $parameter )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__toString": {
        "descr": "To string.", 
        "name": "ReflectionParameter::__toString", 
        "params": [], 
        "path": "php/reflectionparameter.tostring", 
        "syntax": "public string ReflectionParameter::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::allowsNull": {
        "descr": "Checks whether the parameter allows NULL.", 
        "name": "ReflectionParameter::allowsNull", 
        "params": [], 
        "path": "php/reflectionparameter.allowsnull", 
        "syntax": "public bool ReflectionParameter::allowsNull ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::canBePassedByValue": {
        "descr": "", 
        "name": "ReflectionParameter::canBePassedByValue", 
        "params": [], 
        "path": "php/reflectionparameter.canbepassedbyvalue", 
        "syntax": "public bool ReflectionParameter::canBePassedByValue ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::export": {
        "descr": "Exports.", 
        "name": "ReflectionParameter::export", 
        "params": [
            {
                "descr": "The function name.", 
                "name": "function"
            }, 
            {
                "descr": "The parameter name.", 
                "name": "parameter"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionparameter.export", 
        "syntax": "public static string ReflectionParameter::export ( string $function , string $parameter [, bool $return ] )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getClass": {
        "descr": "Gets the class type hinted for the parameter as a ReflectionClass object.", 
        "name": "ReflectionParameter::getClass", 
        "params": [], 
        "path": "php/reflectionparameter.getclass", 
        "syntax": "public ReflectionClass ReflectionParameter::getClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDeclaringClass": {
        "descr": "Gets the declaring class.", 
        "name": "ReflectionParameter::getDeclaringClass", 
        "params": [], 
        "path": "php/reflectionparameter.getdeclaringclass", 
        "syntax": "public ReflectionClass ReflectionParameter::getDeclaringClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDeclaringFunction": {
        "descr": "Gets the declaring function.", 
        "name": "ReflectionParameter::getDeclaringFunction", 
        "params": [], 
        "path": "php/reflectionparameter.getdeclaringfunction", 
        "syntax": "public ReflectionFunctionAbstract ReflectionParameter::getDeclaringFunction ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDefaultValue": {
        "descr": "Gets the default value of the parameter for a user-defined function or method. If the parameter is not optional a ReflectionException will be thrown.", 
        "name": "ReflectionParameter::getDefaultValue", 
        "params": [], 
        "path": "php/reflectionparameter.getdefaultvalue", 
        "syntax": "public mixed ReflectionParameter::getDefaultValue ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDefaultValueConstantName": {
        "descr": "", 
        "name": "ReflectionParameter::getDefaultValueConstantName", 
        "params": [], 
        "path": "php/reflectionparameter.getdefaultvalueconstantname", 
        "syntax": "public string ReflectionParameter::getDefaultValueConstantName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getName": {
        "descr": "Gets the name of the parameter.", 
        "name": "ReflectionParameter::getName", 
        "params": [], 
        "path": "php/reflectionparameter.getname", 
        "syntax": "public string ReflectionParameter::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getPosition": {
        "descr": "Gets the position of the parameter.", 
        "name": "ReflectionParameter::getPosition", 
        "params": [], 
        "path": "php/reflectionparameter.getposition", 
        "syntax": "public int ReflectionParameter::getPosition ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isArray": {
        "descr": "Checks if the parameter expects an array.", 
        "name": "ReflectionParameter::isArray", 
        "params": [], 
        "path": "php/reflectionparameter.isarray", 
        "syntax": "public bool ReflectionParameter::isArray ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isCallable": {
        "descr": "", 
        "name": "ReflectionParameter::isCallable", 
        "params": [], 
        "path": "php/reflectionparameter.iscallable", 
        "syntax": "public bool ReflectionParameter::isCallable ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isDefaultValueAvailable": {
        "descr": "Checks if a default value for the parameter is available.", 
        "name": "ReflectionParameter::isDefaultValueAvailable", 
        "params": [], 
        "path": "php/reflectionparameter.isdefaultvalueavailable", 
        "syntax": "public bool ReflectionParameter::isDefaultValueAvailable ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isDefaultValueConstant": {
        "descr": "", 
        "name": "ReflectionParameter::isDefaultValueConstant", 
        "params": [], 
        "path": "php/reflectionparameter.isdefaultvalueconstant", 
        "syntax": "public bool ReflectionParameter::isDefaultValueConstant ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isOptional": {
        "descr": "Checks if the parameter is optional.", 
        "name": "ReflectionParameter::isOptional", 
        "params": [], 
        "path": "php/reflectionparameter.isoptional", 
        "syntax": "public bool ReflectionParameter::isOptional ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isPassedByReference": {
        "descr": "Checks if the parameter is passed in by reference.", 
        "name": "ReflectionParameter::isPassedByReference", 
        "params": [], 
        "path": "php/reflectionparameter.ispassedbyreference", 
        "syntax": "public bool ReflectionParameter::isPassedByReference ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty": {
        "descr": "", 
        "name": "ReflectionProperty", 
        "params": [], 
        "path": "php/class.reflectionproperty", 
        "syntax": "final private void __clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__clone": {
        "descr": "Clones.", 
        "name": "ReflectionProperty::__clone", 
        "params": [], 
        "path": "php/reflectionproperty.clone", 
        "syntax": "final private void ReflectionProperty::__clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__construct": {
        "descr": "", 
        "name": "ReflectionProperty::__construct", 
        "params": [
            {
                "descr": "The class name, that contains the property.", 
                "name": "class"
            }, 
            {
                "descr": "The name of the property being reflected.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionproperty.construct", 
        "syntax": "public ReflectionProperty::__construct ( mixed $class , string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__toString": {
        "descr": "To string.", 
        "name": "ReflectionProperty::__toString", 
        "params": [], 
        "path": "php/reflectionproperty.tostring", 
        "syntax": "public string ReflectionProperty::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::export": {
        "descr": "Exports a reflection.", 
        "name": "ReflectionProperty::export", 
        "params": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "The property name.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionproperty.export", 
        "syntax": "public static string ReflectionProperty::export ( mixed $class , string $name [, bool $return ] )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getDeclaringClass": {
        "descr": "Gets the declaring class.", 
        "name": "ReflectionProperty::getDeclaringClass", 
        "params": [], 
        "path": "php/reflectionproperty.getdeclaringclass", 
        "syntax": "public ReflectionClass ReflectionProperty::getDeclaringClass ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getDocComment": {
        "descr": "Gets the doc comment.", 
        "name": "ReflectionProperty::getDocComment", 
        "params": [], 
        "path": "php/reflectionproperty.getdoccomment", 
        "syntax": "public string ReflectionProperty::getDocComment ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getModifiers": {
        "descr": "Gets the modifiers.", 
        "name": "ReflectionProperty::getModifiers", 
        "params": [], 
        "path": "php/reflectionproperty.getmodifiers", 
        "syntax": "public int ReflectionProperty::getModifiers ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getName": {
        "descr": "Gets the properties name.", 
        "name": "ReflectionProperty::getName", 
        "params": [], 
        "path": "php/reflectionproperty.getname", 
        "syntax": "public string ReflectionProperty::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getValue": {
        "descr": "Gets the properties value.", 
        "name": "ReflectionProperty::getValue", 
        "params": [
            {
                "descr": "If the property is non-static an object must be provided to fetch the property from. ", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionproperty.getvalue", 
        "syntax": "public mixed ReflectionProperty::getValue ([ object $object ] )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isDefault": {
        "descr": "Checks whether the property is the default.", 
        "name": "ReflectionProperty::isDefault", 
        "params": [], 
        "path": "php/reflectionproperty.isdefault", 
        "syntax": "public bool ReflectionProperty::isDefault ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isPrivate": {
        "descr": "Checks whether the property is private.", 
        "name": "ReflectionProperty::isPrivate", 
        "params": [], 
        "path": "php/reflectionproperty.isprivate", 
        "syntax": "public bool ReflectionProperty::isPrivate ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isProtected": {
        "descr": "Checks whether the property is protected.", 
        "name": "ReflectionProperty::isProtected", 
        "params": [], 
        "path": "php/reflectionproperty.isprotected", 
        "syntax": "public bool ReflectionProperty::isProtected ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isPublic": {
        "descr": "Checks whether the property is public.", 
        "name": "ReflectionProperty::isPublic", 
        "params": [], 
        "path": "php/reflectionproperty.ispublic", 
        "syntax": "public bool ReflectionProperty::isPublic ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isStatic": {
        "descr": "Checks whether the property is static.", 
        "name": "ReflectionProperty::isStatic", 
        "params": [], 
        "path": "php/reflectionproperty.isstatic", 
        "syntax": "public bool ReflectionProperty::isStatic ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::setAccessible": {
        "descr": "Sets a property to be accessible. For example, it may allow protected and private properties to be accessed.", 
        "name": "ReflectionProperty::setAccessible", 
        "params": [
            {
                "descr": "TRUE to allow accessibility, or FALSE.", 
                "name": "accessible"
            }
        ], 
        "path": "php/reflectionproperty.setaccessible", 
        "syntax": "public void ReflectionProperty::setAccessible ( bool $accessible )", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::setValue": {
        "descr": "Sets (changes) the property's value.", 
        "name": "ReflectionProperty::setValue", 
        "params": [
            {
                "descr": "If the property is non-static an object must be provided to change the property on. ", 
                "name": "object"
            }, 
            {
                "descr": "The new value.", 
                "name": "value"
            }
        ], 
        "path": "php/reflectionproperty.setvalue", 
        "syntax": "public void ReflectionProperty::setValue ( object $object , mixed $value )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension": {
        "descr": "", 
        "name": "ReflectionZendExtension", 
        "params": [], 
        "path": "php/class.reflectionzendextension", 
        "syntax": "final private void __clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__clone": {
        "descr": "", 
        "name": "ReflectionZendExtension::__clone", 
        "params": [], 
        "path": "php/reflectionzendextension.clone", 
        "syntax": "final private void ReflectionZendExtension::__clone ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__construct": {
        "descr": "", 
        "name": "ReflectionZendExtension::__construct", 
        "params": [], 
        "path": "php/reflectionzendextension.construct", 
        "syntax": "public ReflectionZendExtension::__construct ( string $name )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__toString": {
        "descr": "", 
        "name": "ReflectionZendExtension::__toString", 
        "params": [], 
        "path": "php/reflectionzendextension.tostring", 
        "syntax": "public string ReflectionZendExtension::__toString ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::export": {
        "descr": "", 
        "name": "ReflectionZendExtension::export", 
        "params": [], 
        "path": "php/reflectionzendextension.export", 
        "syntax": "public static string ReflectionZendExtension::export ( string $name [, string $return ] )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getAuthor": {
        "descr": "", 
        "name": "ReflectionZendExtension::getAuthor", 
        "params": [], 
        "path": "php/reflectionzendextension.getauthor", 
        "syntax": "public string ReflectionZendExtension::getAuthor ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getCopyright": {
        "descr": "", 
        "name": "ReflectionZendExtension::getCopyright", 
        "params": [], 
        "path": "php/reflectionzendextension.getcopyright", 
        "syntax": "public string ReflectionZendExtension::getCopyright ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getName": {
        "descr": "", 
        "name": "ReflectionZendExtension::getName", 
        "params": [], 
        "path": "php/reflectionzendextension.getname", 
        "syntax": "public string ReflectionZendExtension::getName ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getURL": {
        "descr": "", 
        "name": "ReflectionZendExtension::getURL", 
        "params": [], 
        "path": "php/reflectionzendextension.geturl", 
        "syntax": "public string ReflectionZendExtension::getURL ( void )", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getVersion": {
        "descr": "", 
        "name": "ReflectionZendExtension::getVersion", 
        "params": [], 
        "path": "php/reflectionzendextension.getversion", 
        "syntax": "public string ReflectionZendExtension::getVersion ( void )", 
        "type": "Reflection"
    }, 
    "Reflector (interface": {
        "descr": "", 
        "name": "Reflector (interface", 
        "params": [], 
        "path": "php/class.reflector", 
        "syntax": "abstract public static string export ( void )", 
        "type": "Reflection"
    }, 
    "Reflector::__toString": {
        "descr": "To string.", 
        "name": "Reflector::__toString", 
        "params": [], 
        "path": "php/reflector.tostring", 
        "syntax": "abstract public string Reflector::__toString ( void )", 
        "type": "Reflection"
    }, 
    "Reflector::export": {
        "descr": "Exports.", 
        "name": "Reflector::export", 
        "params": [], 
        "path": "php/reflector.export", 
        "syntax": "abstract public static string Reflector::export ( void )", 
        "type": "Reflection"
    }, 
    "RegexIterator": {
        "descr": "", 
        "name": "RegexIterator", 
        "params": [], 
        "path": "php/class.regexiterator", 
        "syntax": "public bool accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::accept": {
        "descr": "Matches (string) RegexIterator::current() (or RegexIterator::key() if the RegexIterator::USE_KEY flag is set) against the regular expression.", 
        "name": "RegexIterator::accept", 
        "params": [], 
        "path": "php/regexiterator.accept", 
        "syntax": "public bool RegexIterator::accept ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getFlags": {
        "descr": "Returns the flags, see RegexIterator::setFlags() for a list of available flags.", 
        "name": "RegexIterator::getFlags", 
        "params": [], 
        "path": "php/regexiterator.getflags", 
        "syntax": "public int RegexIterator::getFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getMode": {
        "descr": "Returns the operation mode, see RegexIterator::setMode() for the list of operation modes.", 
        "name": "RegexIterator::getMode", 
        "params": [], 
        "path": "php/regexiterator.getmode", 
        "syntax": "public int RegexIterator::getMode ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getPregFlags": {
        "descr": "Returns the regular expression flags, see RegexIterator::__construct() for the list of flags.", 
        "name": "RegexIterator::getPregFlags", 
        "params": [], 
        "path": "php/regexiterator.getpregflags", 
        "syntax": "public int RegexIterator::getPregFlags ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getRegex": {
        "descr": "", 
        "name": "RegexIterator::getRegex", 
        "params": [], 
        "path": "php/regexiterator.getregex", 
        "syntax": "public string RegexIterator::getRegex ( void )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setFlags": {
        "descr": "Sets the flags.", 
        "name": "RegexIterator::setFlags", 
        "params": [
            {
                "descr": "The flags to set, a bitmask of class constants. ", 
                "name": "flags"
            }
        ], 
        "path": "php/regexiterator.setflags", 
        "syntax": "public void RegexIterator::setFlags ( int $flags )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setMode": {
        "descr": "Sets the operation mode.", 
        "name": "RegexIterator::setMode", 
        "params": [
            {
                "descr": "The operation mode.   The available modes are listed below. ", 
                "name": "mode"
            }
        ], 
        "path": "php/regexiterator.setmode", 
        "syntax": "public void RegexIterator::setMode ( int $mode )", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setPregFlags": {
        "descr": "Sets the regular expression flags.", 
        "name": "RegexIterator::setPregFlags", 
        "params": [
            {
                "descr": "The regular expression flags. See RegexIterator::__construct() for an overview of available flags.", 
                "name": "preg_flags"
            }
        ], 
        "path": "php/regexiterator.setpregflags", 
        "syntax": "public void RegexIterator::setPregFlags ( int $preg_flags )", 
        "type": "SPL/Iterators"
    }, 
    "ResourceBundle": {
        "descr": "", 
        "name": "ResourceBundle", 
        "params": [], 
        "path": "php/class.resourcebundle", 
        "syntax": "public int count ( void )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::count": {
        "descr": "Get the number of elements in the bundle.", 
        "name": "ResourceBundle::count", 
        "params": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.count", 
        "syntax": "public int ResourceBundle::count ( void )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::create": {
        "descr": "Creates a resource bundle.", 
        "name": "ResourceBundle::create", 
        "params": [
            {
                "descr": "Locale for which the resources should be loaded (locale name, e.g. ", 
                "name": "locale"
            }, 
            {
                "descr": "The directory where the data is stored or the name of the .dat file.", 
                "name": "bundlename"
            }, 
            {
                "descr": "Whether locale should match exactly or fallback to parent locale is allowed.", 
                "name": "fallback"
            }
        ], 
        "path": "php/resourcebundle.create", 
        "syntax": "public static ResourceBundle ResourceBundle::create ( string $locale , string $bundlename [, bool $fallback ] )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::get": {
        "descr": "Get the data from the bundle by index or string key.", 
        "name": "ResourceBundle::get", 
        "params": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }, 
            {
                "descr": "Data index, must be string or integer.", 
                "name": "index"
            }
        ], 
        "path": "php/resourcebundle.get", 
        "syntax": "public mixed ResourceBundle::get ( string|int $index )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getErrorCode": {
        "descr": "Get error code from the last function performed by the bundle object.", 
        "name": "ResourceBundle::getErrorCode", 
        "params": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.geterrorcode", 
        "syntax": "public int ResourceBundle::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getErrorMessage": {
        "descr": "Get error message from the last function performed by the bundle object.", 
        "name": "ResourceBundle::getErrorMessage", 
        "params": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.geterrormessage", 
        "syntax": "public string ResourceBundle::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getLocales": {
        "descr": "Get available locales from ResourceBundle name.", 
        "name": "ResourceBundle::getLocales", 
        "params": [
            {
                "descr": "Path of ResourceBundle for which to get available locales, or empty string for default locales list.", 
                "name": "bundlename"
            }
        ], 
        "path": "php/resourcebundle.locales", 
        "syntax": "public array ResourceBundle::getLocales ( string $bundlename )", 
        "type": "Internationalization"
    }, 
    "Runkit_Sandbox": {
        "descr": "options is an associative array containing any combination of the special ini options listed below.", 
        "name": "Runkit_Sandbox", 
        "params": [
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode = off, then safe_mode may be turned on for the sandbox environment. ", 
                "name": "safe_mode"
            }, 
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode_gid = on, then safe_mode_gid may be turned off for the sandbox environment. ", 
                "name": "safe_mode_gid"
            }, 
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with a safe_mode_include_dir, then a new safe_mode_include_dir may be set for sandbox environments below the currently defined value. safe_mode_include_dir may also be cleared to indicate that the bypass feature is disabled. If safe_mode_include_dir was blank in the outer script, but safe_mode was not enabled, then any arbitrary safe_mode_include_dir may be set while turning safe_mode on.", 
                "name": "safe_mode_include_dir"
            }, 
            {
                "descr": "open_basedir may be set to any path below the current setting of open_basedir. ", 
                "name": "open_basedir"
            }, 
            {
                "descr": "Like safe_mode, this setting can only be made more restrictive, in this case by setting it to FALSE when it is previously set to TRUE", 
                "name": "allow_url_fopen"
            }, 
            {
                "descr": "Comma separated list of functions to disable within the sandbox sub-interpreter. ", 
                "name": "disable_functions"
            }, 
            {
                "descr": "Comma separated list of classes to disable within the sandbox sub-interpreter. ", 
                "name": "disable_classes"
            }, 
            {
                "descr": "Comma separated list of variables to be treated as superglobals within the sandbox sub-interpreter. ", 
                "name": "runkit.superglobal"
            }, 
            {
                "descr": "Ini option runkit.internal_override may be disabled (but not re-enabled) within sandboxes.", 
                "name": "runkit.internal_override"
            }
        ], 
        "path": "php/runkit.sandbox", 
        "syntax": "void Runkit_Sandbox::__construct ([ array $options ] )", 
        "type": "Classes and Functions"
    }, 
    "Runkit_Sandbox_Parent": {
        "descr": "Instantiating the Runkit_Sandbox_Parent class from within a sandbox environment created from the Runkit_Sandbox class provides some (controlled) means for a sandbox child to access its parent.", 
        "name": "Runkit_Sandbox_Parent", 
        "params": [], 
        "path": "php/runkit.sandbox-parent", 
        "syntax": "void Runkit_Sandbox_Parent::__construct ( void )", 
        "type": "Classes and Functions"
    }, 
    "RuntimeException": {
        "descr": "", 
        "name": "RuntimeException", 
        "params": [], 
        "path": "php/class.runtimeexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "SQLite3": {
        "descr": "", 
        "name": "SQLite3", 
        "params": [], 
        "path": "php/class.sqlite3", 
        "syntax": "public bool busyTimeout ( int $msecs )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::__construct": {
        "descr": "Instantiates an SQLite3 object and opens a connection to an SQLite 3 database. If the build includes encryption, then it will attempt to use the key.", 
        "name": "SQLite3::__construct", 
        "params": [
            {
                "descr": "Path to the SQLite database, or :memory: to use in-memory database.", 
                "name": "filename"
            }, 
            {
                "descr": "Optional flags used to determine how to open the SQLite database. ", 
                "name": "flags"
            }, 
            {
                "descr": "An optional encryption key used when encrypting and decrypting an SQLite database.", 
                "name": "encryption_key"
            }
        ], 
        "path": "php/sqlite3.construct", 
        "syntax": "public SQLite3::__construct ( string $filename [, int $flags [, string $encryption_key ]] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::busyTimeout": {
        "descr": "Sets a busy handler that will sleep until the database is not locked or the timeout is reached.", 
        "name": "SQLite3::busyTimeout", 
        "params": [
            {
                "descr": "The milliseconds to sleep. Setting this value to a value less than or equal to zero, will turn off an already set timeout handler.", 
                "name": "msecs"
            }
        ], 
        "path": "php/sqlite3.busytimeout", 
        "syntax": "public bool SQLite3::busyTimeout ( int $msecs )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::changes": {
        "descr": "Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement.", 
        "name": "SQLite3::changes", 
        "params": [], 
        "path": "php/sqlite3.changes", 
        "syntax": "public int SQLite3::changes ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::close": {
        "descr": "Closes the database connection.", 
        "name": "SQLite3::close", 
        "params": [], 
        "path": "php/sqlite3.close", 
        "syntax": "public bool SQLite3::close ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createAggregate": {
        "descr": "Registers a PHP function or user-defined function for use as an SQL aggregate function for use within SQL statements.", 
        "name": "SQLite3::createAggregate", 
        "params": [
            {
                "descr": "Name of the SQL aggregate to be created or redefined.", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback for every item in the aggregate.", 
                "name": "step_callback"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback at the end of the aggregate data.", 
                "name": "final_callback"
            }, 
            {
                "descr": "The number of arguments that the SQL aggregate takes. ", 
                "name": "argument_count"
            }
        ], 
        "path": "php/sqlite3.createaggregate", 
        "syntax": "public bool SQLite3::createAggregate ( string $name , mixed $step_callback , mixed $final_callback [, int $argument_count = -1 ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createCollation": {
        "descr": "Registers a PHP function or user-defined function for use as a collating function within SQL statements.", 
        "name": "SQLite3::createCollation", 
        "params": [
            {
                "descr": "Name of the SQL collating function to be created or redefined", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the collation. ", 
                "name": "callback"
            }
        ], 
        "path": "php/sqlite3.createcollation", 
        "syntax": "public bool SQLite3::createCollation ( string $name , callable $callback )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createFunction": {
        "descr": "Registers a PHP function or user-defined function for use as an SQL scalar function for use within SQL statements.", 
        "name": "SQLite3::createFunction", 
        "params": [
            {
                "descr": "Name of the SQL function to be created or redefined.", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the SQL function.", 
                "name": "callback"
            }, 
            {
                "descr": "The number of arguments that the SQL function takes. ", 
                "name": "argument_count"
            }
        ], 
        "path": "php/sqlite3.createfunction", 
        "syntax": "public bool SQLite3::createFunction ( string $name , mixed $callback [, int $argument_count = -1 ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::escapeString": {
        "descr": "Returns a string that has been properly escaped for safe inclusion in an SQL statement.", 
        "name": "SQLite3::escapeString", 
        "params": [
            {
                "descr": "The string to be escaped.", 
                "name": "value"
            }
        ], 
        "path": "php/sqlite3.escapestring", 
        "syntax": "public static string SQLite3::escapeString ( string $value )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::exec": {
        "descr": "Executes a result-less query against a given database.", 
        "name": "SQLite3::exec", 
        "params": [
            {
                "descr": "The SQL query to execute (typically an INSERT, UPDATE, or DELETE query).", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.exec", 
        "syntax": "public bool SQLite3::exec ( string $query )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastErrorCode": {
        "descr": "Returns the numeric result code of the most recent failed SQLite request.", 
        "name": "SQLite3::lastErrorCode", 
        "params": [], 
        "path": "php/sqlite3.lasterrorcode", 
        "syntax": "public int SQLite3::lastErrorCode ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastErrorMsg": {
        "descr": "Returns English text describing the most recent failed SQLite request.", 
        "name": "SQLite3::lastErrorMsg", 
        "params": [], 
        "path": "php/sqlite3.lasterrormsg", 
        "syntax": "public string SQLite3::lastErrorMsg ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastInsertRowID": {
        "descr": "Returns the row ID of the most recent INSERT into the database.", 
        "name": "SQLite3::lastInsertRowID", 
        "params": [], 
        "path": "php/sqlite3.lastinsertrowid", 
        "syntax": "public int SQLite3::lastInsertRowID ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::loadExtension": {
        "descr": "Attempts to load an SQLite extension library.", 
        "name": "SQLite3::loadExtension", 
        "params": [
            {
                "descr": "The name of the library to load. ", 
                "name": "shared_library"
            }
        ], 
        "path": "php/sqlite3.loadextension", 
        "syntax": "public bool SQLite3::loadExtension ( string $shared_library )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::open": {
        "descr": "Opens an SQLite 3 Database. If the build includes encryption, then it will attempt to use the key.", 
        "name": "SQLite3::open", 
        "params": [
            {
                "descr": "Path to the SQLite database, or :memory: to use in-memory database.", 
                "name": "filename"
            }, 
            {
                "descr": "Optional flags used to determine how to open the SQLite database. ", 
                "name": "flags"
            }, 
            {
                "descr": "An optional encryption key used when encrypting and decrypting an SQLite database.", 
                "name": "encryption_key"
            }
        ], 
        "path": "php/sqlite3.open", 
        "syntax": "public void SQLite3::open ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key ]] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::prepare": {
        "descr": "Prepares an SQL statement for execution and returns an SQLite3Stmt object.", 
        "name": "SQLite3::prepare", 
        "params": [
            {
                "descr": "The SQL query to prepare.", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.prepare", 
        "syntax": "public SQLite3Stmt SQLite3::prepare ( string $query )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::query": {
        "descr": "Executes an SQL query, returning an SQLite3Result object if the query returns results.", 
        "name": "SQLite3::query", 
        "params": [
            {
                "descr": "The SQL query to execute.", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.query", 
        "syntax": "public SQLite3Result SQLite3::query ( string $query )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::querySingle": {
        "descr": "Executes a query and returns a single result.", 
        "name": "SQLite3::querySingle", 
        "params": [
            {
                "descr": "The SQL query to execute.", 
                "name": "query"
            }, 
            {
                "descr": "By default, querySingle() returns the value of the first column returned by the query. ", 
                "name": "entire_row"
            }
        ], 
        "path": "php/sqlite3.querysingle", 
        "syntax": "public mixed SQLite3::querySingle ( string $query [, bool $entire_row = false ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::version": {
        "descr": "Returns the SQLite3 library version as a string constant and as a number.", 
        "name": "SQLite3::version", 
        "params": [], 
        "path": "php/sqlite3.version", 
        "syntax": "public static array SQLite3::version ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result": {
        "descr": "", 
        "name": "SQLite3Result", 
        "params": [], 
        "path": "php/class.sqlite3result", 
        "syntax": "public string columnName ( int $column_number )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::columnName": {
        "descr": "Returns the name of the column specified by the column_number.", 
        "name": "SQLite3Result::columnName", 
        "params": [
            {
                "descr": "The numeric zero-based index of the column.", 
                "name": "column_number"
            }
        ], 
        "path": "php/sqlite3result.columnname", 
        "syntax": "public string SQLite3Result::columnName ( int $column_number )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::columnType": {
        "descr": "Returns the type of the column identified by column_number.", 
        "name": "SQLite3Result::columnType", 
        "params": [
            {
                "descr": "The numeric zero-based index of the column.", 
                "name": "column_number"
            }
        ], 
        "path": "php/sqlite3result.columntype", 
        "syntax": "public int SQLite3Result::columnType ( int $column_number )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::fetchArray": {
        "descr": "Fetches a result row as an associative or numerically indexed array or both. By default, fetches as both.", 
        "name": "SQLite3Result::fetchArray", 
        "params": [
            {
                "descr": "Controls how the next row will be returned to the caller. ", 
                "name": "mode"
            }
        ], 
        "path": "php/sqlite3result.fetcharray", 
        "syntax": "public array SQLite3Result::fetchArray ([ int $mode = SQLITE3_BOTH ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::finalize": {
        "descr": "Closes the result set.", 
        "name": "SQLite3Result::finalize", 
        "params": [], 
        "path": "php/sqlite3result.finalize", 
        "syntax": "public bool SQLite3Result::finalize ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::numColumns": {
        "descr": "Returns the number of columns in the result set.", 
        "name": "SQLite3Result::numColumns", 
        "params": [], 
        "path": "php/sqlite3result.numcolumns", 
        "syntax": "public int SQLite3Result::numColumns ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::reset": {
        "descr": "Resets the result set back to the first row.", 
        "name": "SQLite3Result::reset", 
        "params": [], 
        "path": "php/sqlite3result.reset", 
        "syntax": "public bool SQLite3Result::reset ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt": {
        "descr": "", 
        "name": "SQLite3Stmt", 
        "params": [], 
        "path": "php/class.sqlite3stmt", 
        "syntax": "public bool bindParam ( string $sql_param , mixed &$param [, int $type ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::bindParam": {
        "descr": "Binds a parameter to a statement variable.", 
        "name": "SQLite3Stmt::bindParam", 
        "params": [
            {
                "descr": "An string identifying the statement variable to which the parameter should be bound.", 
                "name": "sql_param"
            }, 
            {
                "descr": "The parameter to bind to a statement variable.", 
                "name": "param"
            }, 
            {
                "descr": "The data type of the parameter to bind. ", 
                "name": "type"
            }
        ], 
        "path": "php/sqlite3stmt.bindparam", 
        "syntax": "public bool SQLite3Stmt::bindParam ( string $sql_param , mixed &$param [, int $type ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::bindValue": {
        "descr": "Binds the value of a parameter to a statement variable.", 
        "name": "SQLite3Stmt::bindValue", 
        "params": [
            {
                "descr": "An string identifying the statement variable to which the value should be bound.", 
                "name": "sql_param"
            }, 
            {
                "descr": "The value to bind to a statement variable.", 
                "name": "value"
            }, 
            {
                "descr": "The data type of the value to bind. ", 
                "name": "type"
            }
        ], 
        "path": "php/sqlite3stmt.bindvalue", 
        "syntax": "public bool SQLite3Stmt::bindValue ( string $sql_param , mixed $value [, int $type ] )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::clear": {
        "descr": "Clears all current bound parameters.", 
        "name": "SQLite3Stmt::clear", 
        "params": [], 
        "path": "php/sqlite3stmt.clear", 
        "syntax": "public bool SQLite3Stmt::clear ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::close": {
        "descr": "Closes the prepared statement.", 
        "name": "SQLite3Stmt::close", 
        "params": [], 
        "path": "php/sqlite3stmt.close", 
        "syntax": "public bool SQLite3Stmt::close ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::execute": {
        "descr": "Executes a prepared statement and returns a result set object.", 
        "name": "SQLite3Stmt::execute", 
        "params": [], 
        "path": "php/sqlite3stmt.execute", 
        "syntax": "public SQLite3Result SQLite3Stmt::execute ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::paramCount": {
        "descr": "Returns the number of parameters within the prepared statement.", 
        "name": "SQLite3Stmt::paramCount", 
        "params": [], 
        "path": "php/sqlite3stmt.paramcount", 
        "syntax": "public int SQLite3Stmt::paramCount ( void )", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::reset": {
        "descr": "Resets the prepared statement to its state prior to execution. All bindings remain intact after reset.", 
        "name": "SQLite3Stmt::reset", 
        "params": [], 
        "path": "php/sqlite3stmt.reset", 
        "syntax": "public bool SQLite3Stmt::reset ( void )", 
        "type": "Database/SQLite"
    }, 
    "SeekableIterator (interface": {
        "descr": "", 
        "name": "SeekableIterator (interface", 
        "params": [], 
        "path": "php/class.seekableiterator", 
        "syntax": "abstract public void seek ( int $position )", 
        "type": "SPL/Interfaces"
    }, 
    "SeekableIterator::seek": {
        "descr": "Seeks to a given position in the iterator.", 
        "name": "SeekableIterator::seek", 
        "params": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/seekableiterator.seek", 
        "syntax": "abstract public void SeekableIterator::seek ( int $position )", 
        "type": "SPL/Interfaces"
    }, 
    "Serializable (interface": {
        "descr": "", 
        "name": "Serializable (interface", 
        "params": [], 
        "path": "php/class.serializable", 
        "syntax": "abstract public string serialize ( void )", 
        "type": "Classes and Functions"
    }, 
    "Serializable::serialize": {
        "descr": "Should return the string representation of the object.", 
        "name": "Serializable::serialize", 
        "params": [], 
        "path": "php/serializable.serialize", 
        "syntax": "abstract public string Serializable::serialize ( void )", 
        "type": "Classes and Functions"
    }, 
    "Serializable::unserialize": {
        "descr": "Called during unserialization of the object.", 
        "name": "Serializable::unserialize", 
        "params": [
            {
                "descr": "The string representation of the object.", 
                "name": "serialized"
            }
        ], 
        "path": "php/serializable.unserialize", 
        "syntax": "abstract public void Serializable::unserialize ( string $serialized )", 
        "type": "Classes and Functions"
    }, 
    "SessionHandler": {
        "descr": "", 
        "name": "SessionHandler", 
        "params": [], 
        "path": "php/class.sessionhandler", 
        "syntax": "public bool close ( void )", 
        "type": "Sessions"
    }, 
    "SessionHandler::close": {
        "descr": "Closes the current session. This method is automatically executed internally by PHP when closing the session, or explicitly via session_write_close() (which first calls the SessionHandler::write()).", 
        "name": "SessionHandler::close", 
        "params": [], 
        "path": "php/sessionhandler.close", 
        "syntax": "public bool SessionHandler::close ( void )", 
        "type": "Sessions"
    }, 
    "SessionHandler::destroy": {
        "descr": "Destroys a session. Called by internally by PHP with session_regenerate_id() (assuming the $destory is set to TRUE, by session_destroy() or when session_decode() fails.", 
        "name": "SessionHandler::destroy", 
        "params": [
            {
                "descr": "The session ID being destroyed.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.destroy", 
        "syntax": "public bool SessionHandler::destroy ( string $session_id )", 
        "type": "Sessions"
    }, 
    "SessionHandler::gc": {
        "descr": "Cleans up expired sessions. Called randomly by PHP internally when a session starts or when session_start() is invoked. The frequency this is called is based on the session.gc_divisor and session.gc_probability configuration directives.", 
        "name": "SessionHandler::gc", 
        "params": [
            {
                "descr": "Sessions that have not updated for the last maxlifetime seconds will be removed.", 
                "name": "maxlifetime"
            }
        ], 
        "path": "php/sessionhandler.gc", 
        "syntax": "public bool SessionHandler::gc ( int $maxlifetime )", 
        "type": "Sessions"
    }, 
    "SessionHandler::open": {
        "descr": "Create new session, or re-initialize existing session. Called internally by PHP when a session starts either automatically or when session_start() is invoked.", 
        "name": "SessionHandler::open", 
        "params": [
            {
                "descr": "The path where to store/retrieve the session.", 
                "name": "save_path"
            }, 
            {
                "descr": "The session id.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.open", 
        "syntax": "public bool SessionHandler::open ( string $save_path , string $session_id )", 
        "type": "Sessions"
    }, 
    "SessionHandler::read": {
        "descr": "Reads the session data from the session storage, and returns the result back to PHP for internal processing. This method is called automatically by PHP when a session is started (either automatically or explicity with session_start() and is preceeded by an internal call to the SessionHandler::open().", 
        "name": "SessionHandler::read", 
        "params": [
            {
                "descr": "The session id to read data for.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.read", 
        "syntax": "public string SessionHandler::read ( string $session_id )", 
        "type": "Sessions"
    }, 
    "SessionHandler::write": {
        "descr": "Writes the session data to the session storage. Called by normal PHP shutdown, by session_write_close(), or when session_register_shutdown() fails. PHP will call SessionHandler::close() immediately after this method returns.", 
        "name": "SessionHandler::write", 
        "params": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }, 
            {
                "descr": "The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. ", 
                "name": "session_data"
            }
        ], 
        "path": "php/sessionhandler.write", 
        "syntax": "public bool SessionHandler::write ( string $session_id , string $session_data )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface": {
        "descr": "", 
        "name": "SessionHandlerInterface", 
        "params": [], 
        "path": "php/class.sessionhandlerinterface", 
        "syntax": "abstract public bool close ( void )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::close": {
        "descr": "Closes the current session. This function is automatically executed when closing the session, or explicitly via session_write_close().", 
        "name": "SessionHandlerInterface::close", 
        "params": [], 
        "path": "php/sessionhandlerinterface.close", 
        "syntax": "abstract public bool SessionHandlerInterface::close ( void )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::destroy": {
        "descr": "Destroys a session. Called by session_regenerate_id() (with $destroy = TRUE), session_destroy() and when session_decode() fails.", 
        "name": "SessionHandlerInterface::destroy", 
        "params": [
            {
                "descr": "The session ID being destroyed.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandlerinterface.destroy", 
        "syntax": "abstract public bool SessionHandlerInterface::destroy ( string $session_id )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::gc": {
        "descr": "Cleans up expired sessions. Called by session_start(), based on session.gc_divisor, session.gc_probability and session.gc_lifetime settings.", 
        "name": "SessionHandlerInterface::gc", 
        "params": [
            {
                "descr": "Sessions that have not updated for the last maxlifetime seconds will be removed.", 
                "name": "maxlifetime"
            }
        ], 
        "path": "php/sessionhandlerinterface.gc", 
        "syntax": "abstract public bool SessionHandlerInterface::gc ( string $maxlifetime )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::open": {
        "descr": "Re-initialize existing session, or creates a new one. Called when a session starts or when session_start() is invoked.", 
        "name": "SessionHandlerInterface::open", 
        "params": [
            {
                "descr": "The path where to store/retrieve the session.", 
                "name": "save_path"
            }, 
            {
                "descr": "The session name.", 
                "name": "name"
            }
        ], 
        "path": "php/sessionhandlerinterface.open", 
        "syntax": "abstract public bool SessionHandlerInterface::open ( string $save_path , string $name )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::read": {
        "descr": "Reads the session data from the session storage, and returns the results. Called right after the session starts or when session_start() is called. Please note that before this method is called SessionHandlerInterface::open() is invoked.", 
        "name": "SessionHandlerInterface::read", 
        "params": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandlerinterface.read", 
        "syntax": "abstract public string SessionHandlerInterface::read ( string $session_id )", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::write": {
        "descr": "Writes the session data to the session storage. Called by session_write_close(), when session_register_shutdown() fails, or during a normal shutdown. Note: SessionHandlerInterface::close() is called immediately after this function.", 
        "name": "SessionHandlerInterface::write", 
        "params": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }, 
            {
                "descr": "The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. ", 
                "name": "session_data"
            }
        ], 
        "path": "php/sessionhandlerinterface.write", 
        "syntax": "abstract public bool SessionHandlerInterface::write ( string $session_id , string $session_data )", 
        "type": "Sessions"
    }, 
    "SimpleXMLElement": {
        "descr": "", 
        "name": "SimpleXMLElement", 
        "params": [], 
        "path": "php/class.simplexmlelement", 
        "syntax": "public void addAttribute ( string $name [, string $value [, string $namespace ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::__toString": {
        "descr": "Returns text content that is directly in this element. Does not return text content that is inside this element's children.", 
        "name": "SimpleXMLElement::__toString", 
        "params": [], 
        "path": "php/simplexmlelement.tostring", 
        "syntax": "public string SimpleXMLElement::__toString ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::addAttribute": {
        "descr": "Adds an attribute to the SimpleXML element.", 
        "name": "SimpleXMLElement::addAttribute", 
        "params": [
            {
                "descr": "The name of the attribute to add.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "If specified, the namespace to which the attribute belongs.", 
                "name": "namespace"
            }
        ], 
        "path": "php/simplexmlelement.addattribute", 
        "syntax": "public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::addChild": {
        "descr": "Adds a child element to the node and returns a SimpleXMLElement of the child.", 
        "name": "SimpleXMLElement::addChild", 
        "params": [
            {
                "descr": "The name of the child element to add.", 
                "name": "name"
            }, 
            {
                "descr": "If specified, the value of the child element.", 
                "name": "value"
            }, 
            {
                "descr": "If specified, the namespace to which the child element belongs.", 
                "name": "namespace"
            }
        ], 
        "path": "php/simplexmlelement.addchild", 
        "syntax": "public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::asXML": {
        "descr": "The asXML method formats the parent object's data in XML version 1.0.", 
        "name": "SimpleXMLElement::asXML", 
        "params": [
            {
                "descr": "If specified, the function writes the data to the file rather than returning it.", 
                "name": "filename"
            }
        ], 
        "path": "php/simplexmlelement.asxml", 
        "syntax": "public mixed SimpleXMLElement::asXML ([ string $filename ] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::attributes": {
        "descr": "This function provides the attributes and values defined within an xml tag.", 
        "name": "SimpleXMLElement::attributes", 
        "params": [
            {
                "descr": "An optional namespace for the retrieved attributes", 
                "name": "ns"
            }, 
            {
                "descr": "Default to FALSE", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/simplexmlelement.attributes", 
        "syntax": "public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::children": {
        "descr": "This method finds the children of an element. The result follows normal iteration rules.", 
        "name": "SimpleXMLElement::children", 
        "params": [
            {
                "descr": "An XML namespace.", 
                "name": "ns"
            }, 
            {
                "descr": "If is_prefix is TRUE, ns will be regarded as a prefix. ", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/simplexmlelement.children", 
        "syntax": "public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = false ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::count": {
        "descr": "This method counts the number of children of an element.", 
        "name": "SimpleXMLElement::count", 
        "params": [], 
        "path": "php/simplexmlelement.count", 
        "syntax": "public int SimpleXMLElement::count ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getDocNamespaces": {
        "descr": "Returns namespaces declared in document", 
        "name": "SimpleXMLElement::getDocNamespaces", 
        "params": [
            {
                "descr": "If specified, returns all namespaces declared in parent and child nodes. ", 
                "name": "recursive"
            }, 
            {
                "descr": "Allows you to recursively check namespaces under a child node instead of from the root of the XML doc.", 
                "name": "from_root"
            }
        ], 
        "path": "php/simplexmlelement.getdocnamespaces", 
        "syntax": "public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getName": {
        "descr": "Gets the name of the XML element.", 
        "name": "SimpleXMLElement::getName", 
        "params": [], 
        "path": "php/simplexmlelement.getname", 
        "syntax": "public string SimpleXMLElement::getName ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getNamespaces": {
        "descr": "Returns namespaces used in document", 
        "name": "SimpleXMLElement::getNamespaces", 
        "params": [
            {
                "descr": "If specified, returns all namespaces used in parent and child nodes. ", 
                "name": "recursive"
            }
        ], 
        "path": "php/simplexmlelement.getnamespaces", 
        "syntax": "public array SimpleXMLElement::getNamespaces ([ bool $recursive = false ] )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::registerXPathNamespace": {
        "descr": "Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the provider of the given XML document alters the namespace prefixes. registerXPathNamespace will create a prefix for the associated namespace, allowing one to access nodes in that namespace without the need to change code to allow for the new prefixes dictated by the provider.", 
        "name": "SimpleXMLElement::registerXPathNamespace", 
        "params": [
            {
                "descr": "The namespace prefix to use in the XPath query for the namespace given in ns.", 
                "name": "prefix"
            }, 
            {
                "descr": "The namespace to use for the XPath query. ", 
                "name": "ns"
            }
        ], 
        "path": "php/simplexmlelement.registerxpathnamespace", 
        "syntax": "public bool SimpleXMLElement::registerXPathNamespace ( string $prefix , string $ns )", 
        "type": "XML"
    }, 
    "SimpleXMLElement::xpath": {
        "descr": "The xpath method searches the SimpleXML node for children matching the XPath path.", 
        "name": "SimpleXMLElement::xpath", 
        "params": [
            {
                "descr": "An XPath path", 
                "name": "path"
            }
        ], 
        "path": "php/simplexmlelement.xpath", 
        "syntax": "public array SimpleXMLElement::xpath ( string $path )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator": {
        "descr": "", 
        "name": "SimpleXMLIterator", 
        "params": [], 
        "path": "php/class.simplexmliterator", 
        "syntax": "public mixed current ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::current": {
        "descr": "This method returns the current element as a SimpleXMLIterator object or NULL.", 
        "name": "SimpleXMLIterator::current", 
        "params": [], 
        "path": "php/simplexmliterator.current", 
        "syntax": "public mixed SimpleXMLIterator::current ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::getChildren": {
        "descr": "This method returns a SimpleXMLIterator object containing sub-elements of the current SimpleXMLIterator element.", 
        "name": "SimpleXMLIterator::getChildren", 
        "params": [], 
        "path": "php/simplexmliterator.getchildren", 
        "syntax": "public SimpleXMLIterator SimpleXMLIterator::getChildren ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::hasChildren": {
        "descr": "This method checks whether the current SimpleXMLIterator element has sub-elements.", 
        "name": "SimpleXMLIterator::hasChildren", 
        "params": [], 
        "path": "php/simplexmliterator.haschildren", 
        "syntax": "public bool SimpleXMLIterator::hasChildren ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::key": {
        "descr": "This method gets the XML tag name of the current element.", 
        "name": "SimpleXMLIterator::key", 
        "params": [], 
        "path": "php/simplexmliterator.key", 
        "syntax": "public mixed SimpleXMLIterator::key ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::next": {
        "descr": "This method moves the SimpleXMLIterator to the next element.", 
        "name": "SimpleXMLIterator::next", 
        "params": [], 
        "path": "php/simplexmliterator.next", 
        "syntax": "public void SimpleXMLIterator::next ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::rewind": {
        "descr": "This method rewinds the SimpleXMLIterator to the first element.", 
        "name": "SimpleXMLIterator::rewind", 
        "params": [], 
        "path": "php/simplexmliterator.rewind", 
        "syntax": "public void SimpleXMLIterator::rewind ( void )", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::valid": {
        "descr": "This method checks if the current element is valid after calls to SimpleXMLIterator::rewind() or SimpleXMLIterator::next().", 
        "name": "SimpleXMLIterator::valid", 
        "params": [], 
        "path": "php/simplexmliterator.valid", 
        "syntax": "public bool SimpleXMLIterator::valid ( void )", 
        "type": "XML"
    }, 
    "SoapClient": {
        "descr": "", 
        "name": "SoapClient", 
        "params": [], 
        "path": "php/class.soapclient", 
        "syntax": "public mixed __call ( string $function_name , string $arguments )", 
        "type": "SOAP"
    }, 
    "SoapClient::SoapClient": {
        "descr": "This constructor creates SoapClient objects in WSDL or non-WSDL mode.", 
        "name": "SoapClient::SoapClient", 
        "params": [
            {
                "descr": "URI of the WSDL file or NULL if working in non-WSDL mode. ", 
                "name": "wsdl"
            }, 
            {
                "descr": "An array of options. If working in WSDL mode, this parameter is optional. ", 
                "name": "options"
            }
        ], 
        "path": "php/soapclient.soapclient", 
        "syntax": "public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__call": {
        "descr": "Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the SoapClient object; in situations where this is not possible or additional options are needed, use SoapClient::__soapCall().", 
        "name": "SoapClient::__call", 
        "params": [], 
        "path": "php/soapclient.call", 
        "syntax": "public mixed SoapClient::__call ( string $function_name , string $arguments )", 
        "type": "SOAP"
    }, 
    "SoapClient::__construct": {
        "descr": "This function is an alias of: SoapClient::SoapClient()", 
        "name": "SoapClient::__construct", 
        "params": [], 
        "path": "php/soapclient.construct", 
        "syntax": "public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__doRequest": {
        "descr": "Performs SOAP request over HTTP.", 
        "name": "SoapClient::__doRequest", 
        "params": [
            {
                "descr": "The XML SOAP request.", 
                "name": "request"
            }, 
            {
                "descr": "The URL to request.", 
                "name": "location"
            }, 
            {
                "descr": "The SOAP action.", 
                "name": "action"
            }, 
            {
                "descr": "The SOAP version.", 
                "name": "version"
            }, 
            {
                "descr": "If one_way is set to 1, this method returns nothing. ", 
                "name": "one_way"
            }
        ], 
        "path": "php/soapclient.dorequest", 
        "syntax": "public string SoapClient::__doRequest ( string $request , string $location , string $action , int $version [, int $one_way = 0 ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getFunctions": {
        "descr": "Returns an array of functions described in the WSDL for the Web service.", 
        "name": "SoapClient::__getFunctions", 
        "params": [], 
        "path": "php/soapclient.getfunctions", 
        "syntax": "public array SoapClient::__getFunctions ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastRequest": {
        "descr": "Returns the XML sent in the last SOAP request.", 
        "name": "SoapClient::__getLastRequest", 
        "params": [], 
        "path": "php/soapclient.getlastrequest", 
        "syntax": "public string SoapClient::__getLastRequest ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastRequestHeaders": {
        "descr": "Returns the SOAP headers from the last request.", 
        "name": "SoapClient::__getLastRequestHeaders", 
        "params": [], 
        "path": "php/soapclient.getlastrequestheaders", 
        "syntax": "public string SoapClient::__getLastRequestHeaders ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastResponse": {
        "descr": "Returns the XML received in the last SOAP response.", 
        "name": "SoapClient::__getLastResponse", 
        "params": [], 
        "path": "php/soapclient.getlastresponse", 
        "syntax": "public string SoapClient::__getLastResponse ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastResponseHeaders": {
        "descr": "Returns the SOAP headers from the last response.", 
        "name": "SoapClient::__getLastResponseHeaders", 
        "params": [], 
        "path": "php/soapclient.getlastresponseheaders", 
        "syntax": "public string SoapClient::__getLastResponseHeaders ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__getTypes": {
        "descr": "Returns an array of types described in the WSDL for the Web service.", 
        "name": "SoapClient::__getTypes", 
        "params": [], 
        "path": "php/soapclient.gettypes", 
        "syntax": "public array SoapClient::__getTypes ( void )", 
        "type": "SOAP"
    }, 
    "SoapClient::__setCookie": {
        "descr": "Defines a cookie to be sent along with the SOAP requests.", 
        "name": "SoapClient::__setCookie", 
        "params": [
            {
                "descr": "The name of the cookie.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the cookie. If not specified, the cookie will be deleted.", 
                "name": "value"
            }
        ], 
        "path": "php/soapclient.setcookie", 
        "syntax": "public void SoapClient::__setCookie ( string $name [, string $value ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__setLocation": {
        "descr": "Sets the endpoint URL that will be touched by following SOAP requests. This is equivalent to specifying the location option when constructing the SoapClient.", 
        "name": "SoapClient::__setLocation", 
        "params": [
            {
                "descr": "The new endpoint URL.", 
                "name": "new_location"
            }
        ], 
        "path": "php/soapclient.setlocation", 
        "syntax": "public string SoapClient::__setLocation ([ string $new_location ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__setSoapHeaders": {
        "descr": "Defines headers to be sent along with the SOAP requests.", 
        "name": "SoapClient::__setSoapHeaders", 
        "params": [
            {
                "descr": "The headers to be set. It could be SoapHeader object or array of SoapHeader objects. ", 
                "name": "soapheaders"
            }
        ], 
        "path": "php/soapclient.setsoapheaders", 
        "syntax": "public bool SoapClient::__setSoapHeaders ([ mixed $soapheaders ] )", 
        "type": "SOAP"
    }, 
    "SoapClient::__soapCall": {
        "descr": "This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP functions can be called as methods of the SoapClient object. This method is useful in non-WSDL mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP Headers.", 
        "name": "SoapClient::__soapCall", 
        "params": [
            {
                "descr": "The name of the SOAP function to call.", 
                "name": "function_name"
            }, 
            {
                "descr": "An array of the arguments to pass to the function. ", 
                "name": "arguments"
            }, 
            {
                "descr": "An associative array of options to pass to the client. ", 
                "name": "options"
            }, 
            {
                "descr": "An array of headers to be sent along with the SOAP request.", 
                "name": "input_headers"
            }, 
            {
                "descr": "If supplied, this array will be filled with the headers from the SOAP response.", 
                "name": "output_headers"
            }
        ], 
        "path": "php/soapclient.soapcall", 
        "syntax": "public mixed SoapClient::__soapCall ( string $function_name , array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]] )", 
        "type": "SOAP"
    }, 
    "SoapFault": {
        "descr": "", 
        "name": "SoapFault", 
        "params": [], 
        "path": "php/class.soapfault", 
        "syntax": "__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "type": "SOAP"
    }, 
    "SoapFault::SoapFault": {
        "descr": "This class is used to send SOAP fault responses from the PHP handler. faultcode, faultstring, faultactor and detail are standard elements of a SOAP Fault.", 
        "name": "SoapFault::SoapFault", 
        "params": [
            {
                "descr": "The error code of the SoapFault.", 
                "name": "faultcode"
            }, 
            {
                "descr": "The error message of the SoapFault.", 
                "name": "faultstring"
            }, 
            {
                "descr": "A string identifying the actor that caused the error.", 
                "name": "faultactor"
            }, 
            {
                "descr": "More details about the cause of the error.", 
                "name": "detail"
            }, 
            {
                "descr": "Can be used to select the proper fault encoding from WSDL.", 
                "name": "faultname"
            }, 
            {
                "descr": "Can be used during SOAP header handling to report an error in the response header.", 
                "name": "headerfault"
            }
        ], 
        "path": "php/soapfault.soapfault", 
        "syntax": "SoapFault::SoapFault ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "type": "SOAP"
    }, 
    "SoapFault::__construct": {
        "descr": "This function is an alias of: SoapFault::SoapFault()", 
        "name": "SoapFault::__construct", 
        "params": [], 
        "path": "php/soapfault.construct", 
        "syntax": "SoapFault::__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "type": "SOAP"
    }, 
    "SoapFault::__toString": {
        "descr": "Returns a string representation of the SoapFault.", 
        "name": "SoapFault::__toString", 
        "params": [], 
        "path": "php/soapfault.tostring", 
        "syntax": "public string SoapFault::__toString ( void )", 
        "type": "SOAP"
    }, 
    "SoapHeader": {
        "descr": "", 
        "name": "SoapHeader", 
        "params": [], 
        "path": "php/class.soapheader", 
        "syntax": "__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )", 
        "type": "SOAP"
    }, 
    "SoapHeader::SoapHeader": {
        "descr": "Constructs a new SoapHeader object.", 
        "name": "SoapHeader::SoapHeader", 
        "params": [
            {
                "descr": "The namespace of the SOAP header element.", 
                "name": "namespace"
            }, 
            {
                "descr": "The name of the SoapHeader object.", 
                "name": "name"
            }, 
            {
                "descr": "A SOAP header's content. It can be a PHP value or a SoapVar object.", 
                "name": "data"
            }, 
            {
                "descr": "Value of the mustUnderstand attribute of the SOAP header element.", 
                "name": "mustUnderstand"
            }, 
            {
                "descr": "Value of the actor attribute of the SOAP header element.", 
                "name": "actor"
            }
        ], 
        "path": "php/soapheader.soapheader", 
        "syntax": "SoapHeader::SoapHeader ( string $namespace , string $name [, mixed $data [, bool $mustunderstand = false [, string $actor ]]] )", 
        "type": "SOAP"
    }, 
    "SoapHeader::__construct": {
        "descr": "This function is an alias of: SoapHeader::SoapHeader()", 
        "name": "SoapHeader::__construct", 
        "params": [], 
        "path": "php/soapheader.construct", 
        "syntax": "SoapHeader::__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )", 
        "type": "SOAP"
    }, 
    "SoapParam": {
        "descr": "", 
        "name": "SoapParam", 
        "params": [], 
        "path": "php/class.soapparam", 
        "syntax": "__construct ( mixed $data , string $name )", 
        "type": "SOAP"
    }, 
    "SoapParam::SoapParam": {
        "descr": "Constructs a new SoapParam object.", 
        "name": "SoapParam::SoapParam", 
        "params": [
            {
                "descr": "The data to pass or return. This parameter can be passed directly as PHP value, but in this case it will be named as paramN and the SOAP service may not understand it.", 
                "name": "data"
            }, 
            {
                "descr": "The parameter name.", 
                "name": "name"
            }
        ], 
        "path": "php/soapparam.soapparam", 
        "syntax": "SoapParam::SoapParam ( mixed $data , string $name )", 
        "type": "SOAP"
    }, 
    "SoapParam::__construct": {
        "descr": "This function is an alias of: SoapParam::SoapParam()", 
        "name": "SoapParam::__construct", 
        "params": [], 
        "path": "php/soapparam.construct", 
        "syntax": "SoapParam::__construct ( mixed $data , string $name )", 
        "type": "SOAP"
    }, 
    "SoapServer": {
        "descr": "", 
        "name": "SoapServer", 
        "params": [], 
        "path": "php/class.soapserver", 
        "syntax": "public void addFunction ( mixed $functions )", 
        "type": "SOAP"
    }, 
    "SoapServer::SoapServer": {
        "descr": "This constructor allows the creation of SoapServer objects in WSDL or non-WSDL mode.", 
        "name": "SoapServer::SoapServer", 
        "params": [
            {
                "descr": "To use the SoapServer in WSDL mode, pass the URI of a WSDL file. ", 
                "name": "wsdl"
            }, 
            {
                "descr": "Allow setting a default SOAP version (soap_version), internal character encoding (encoding), and actor URI (actor). ", 
                "name": "options"
            }
        ], 
        "path": "php/soapserver.soapserver", 
        "syntax": "public SoapServer::SoapServer ( mixed $wsdl [, array $options ] )", 
        "type": "SOAP"
    }, 
    "SoapServer::__construct": {
        "descr": "This function is an alias of: SoapServer::SoapServer()", 
        "name": "SoapServer::__construct", 
        "params": [], 
        "path": "php/soapserver.construct", 
        "syntax": "public SoapServer::__construct ( mixed $wsdl [, array $options ] )", 
        "type": "SOAP"
    }, 
    "SoapServer::addFunction": {
        "descr": "Exports one or more functions for remote clients", 
        "name": "SoapServer::addFunction", 
        "params": [
            {
                "descr": "To export one function, pass the function name into this parameter as a string. ", 
                "name": "functions"
            }
        ], 
        "path": "php/soapserver.addfunction", 
        "syntax": "public void SoapServer::addFunction ( mixed $functions )", 
        "type": "SOAP"
    }, 
    "SoapServer::addSoapHeader": {
        "descr": "Adds a SOAP header to be returned with the response to the current request.", 
        "name": "SoapServer::addSoapHeader", 
        "params": [
            {
                "descr": "The header to be returned.", 
                "name": "object"
            }
        ], 
        "path": "php/soapserver.addsoapheader", 
        "syntax": "public void SoapServer::addSoapHeader ( SoapHeader $object )", 
        "type": "SOAP"
    }, 
    "SoapServer::fault": {
        "descr": "Sends a response to the client of the current request indicating an error.", 
        "name": "SoapServer::fault", 
        "params": [
            {
                "descr": "The error code to return", 
                "name": "code"
            }, 
            {
                "descr": "A brief description of the error", 
                "name": "string"
            }, 
            {
                "descr": "A string identifying the actor that caused the fault.", 
                "name": "actor"
            }, 
            {
                "descr": "More details of the fault", 
                "name": "details"
            }, 
            {
                "descr": "The name of the fault. This can be used to select a name from a WSDL file.", 
                "name": "name"
            }
        ], 
        "path": "php/soapserver.fault", 
        "syntax": "public void SoapServer::fault ( string $code , string $string [, string $actor [, string $details [, string $name ]]] )", 
        "type": "SOAP"
    }, 
    "SoapServer::getFunctions": {
        "descr": "Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by SoapServer::addFunction() or SoapServer::setClass().", 
        "name": "SoapServer::getFunctions", 
        "params": [], 
        "path": "php/soapserver.getfunctions", 
        "syntax": "public array SoapServer::getFunctions ( void )", 
        "type": "SOAP"
    }, 
    "SoapServer::handle": {
        "descr": "Processes a SOAP request, calls necessary functions, and sends a response back.", 
        "name": "SoapServer::handle", 
        "params": [
            {
                "descr": "The SOAP request. If this argument is omitted, the request is assumed to be in the raw POST data of the HTTP request.", 
                "name": "soap_request"
            }
        ], 
        "path": "php/soapserver.handle", 
        "syntax": "public void SoapServer::handle ([ string $soap_request ] )", 
        "type": "SOAP"
    }, 
    "SoapServer::setClass": {
        "descr": "Exports all methods from specified class.", 
        "name": "SoapServer::setClass", 
        "params": [
            {
                "descr": "The name of the exported class.", 
                "name": "class_name"
            }, 
            {
                "descr": "These optional parameters will be passed to the default class constructor during object creation.", 
                "name": "args"
            }
        ], 
        "path": "php/soapserver.setclass", 
        "syntax": "public void SoapServer::setClass ( string $class_name [, mixed $args [, mixed $... ]] )", 
        "type": "SOAP"
    }, 
    "SoapServer::setObject": {
        "descr": "This sets a specific object as the handler for SOAP requests, rather than just a class as in SoapServer::setClass().", 
        "name": "SoapServer::setObject", 
        "params": [
            {
                "descr": "The object to handle the requests.", 
                "name": "object"
            }
        ], 
        "path": "php/soapserver.setobject", 
        "syntax": "public void SoapServer::setObject ( object $object )", 
        "type": "SOAP"
    }, 
    "SoapServer::setPersistence": {
        "descr": "This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing SoapServer::setClass().", 
        "name": "SoapServer::setPersistence", 
        "params": [
            {
                "descr": "One of the SOAP_PERSISTENCE_XXX constants. ", 
                "name": "mode"
            }
        ], 
        "path": "php/soapserver.setpersistence", 
        "syntax": "public void SoapServer::setPersistence ( int $mode )", 
        "type": "SOAP"
    }, 
    "SoapVar": {
        "descr": "", 
        "name": "SoapVar", 
        "params": [], 
        "path": "php/class.soapvar", 
        "syntax": "__construct ( string $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "type": "SOAP"
    }, 
    "SoapVar::SoapVar": {
        "descr": "Constructs a new SoapVar object.", 
        "name": "SoapVar::SoapVar", 
        "params": [
            {
                "descr": "The data to pass or return.", 
                "name": "data"
            }, 
            {
                "descr": "The encoding ID, one of the XSD_... ", 
                "name": "encoding"
            }, 
            {
                "descr": "The type name.", 
                "name": "type_name"
            }, 
            {
                "descr": "The type namespace.", 
                "name": "type_namespace"
            }, 
            {
                "descr": "The XML node name.", 
                "name": "node_name"
            }, 
            {
                "descr": "The XML node namespace.", 
                "name": "node_namespace"
            }
        ], 
        "path": "php/soapvar.soapvar", 
        "syntax": "SoapVar::SoapVar ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "type": "SOAP"
    }, 
    "SoapVar::__construct": {
        "descr": "This function is an alias of: SoapVar::SoapVar()", 
        "name": "SoapVar::__construct", 
        "params": [], 
        "path": "php/soapvar.construct", 
        "syntax": "SoapVar::__construct ( string $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "type": "SOAP"
    }, 
    "SolrClient": {
        "descr": "", 
        "name": "SolrClient", 
        "params": [], 
        "path": "php/class.solrclient", 
        "syntax": "public SolrUpdateResponse addDocument ( SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "type": "Solr"
    }, 
    "SolrClient::__construct": {
        "descr": "Constructor for the SolrClient object", 
        "name": "SolrClient::__construct", 
        "params": [
            {
                "descr": "This is an array containing one of the following keys :  - secure          (Boolean value indicating whether or not to connect in secure mode) - hostname        (The hostname for the Solr server) - port            (The port number) - path            (The path to solr) - wt              (The name of the response writer e.g. xml, phpnative) - login           (The username used for HTTP Authentication, if any) - password        (The HTTP Authentication password) - proxy_host      (The hostname for the proxy server, if any) - proxy_port      (The proxy port) - proxy_login     (The proxy username) - proxy_password  (The proxy password) - timeout         (This is maximum time in seconds allowed for the http data transfer operation. Default is 30 seconds) - ssl_cert        (File name to a PEM-formatted file containing the private key + private certificate (concatenated in that order) ) - ssl_key         (File name to a PEM-formatted private key file only) - ssl_keypassword (Password for private key) - ssl_cainfo      (Name of file holding one or more CA certificates to verify peer with) - ssl_capath      (Name of directory holding multiple CA certificates to verify peer with )  Please note the if the ssl_cert file only contains the private certificate, you have to specify a separate ssl_key file  The ssl_keypassword option is required if the ssl_cert or ssl_key options are set.", 
                "name": "clientOptions"
            }
        ], 
        "path": "php/solrclient.construct", 
        "syntax": "public SolrClient::__construct ( array $clientOptions )", 
        "type": "Solr"
    }, 
    "SolrClient::__destruct": {
        "descr": "Destructor", 
        "name": "SolrClient::__destruct", 
        "params": [], 
        "path": "php/solrclient.destruct", 
        "syntax": "public void SolrClient::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrClient::addDocument": {
        "descr": "This method adds a document to the index.", 
        "name": "SolrClient::addDocument", 
        "params": [
            {
                "descr": "The SolrInputDocument instance.", 
                "name": "doc"
            }, 
            {
                "descr": "If FALSE duplicates will be overwritten.", 
                "name": "allowDups"
            }, 
            {
                "descr": "Number of milliseconds within which to commit this document. ", 
                "name": "commitWithin"
            }
        ], 
        "path": "php/solrclient.adddocument", 
        "syntax": "public SolrUpdateResponse SolrClient::addDocument ( SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "type": "Solr"
    }, 
    "SolrClient::addDocuments": {
        "descr": "Adds a collection of documents to the index.", 
        "name": "SolrClient::addDocuments", 
        "params": [
            {
                "descr": "An array containing the collection of SolrInputDocument instances. ", 
                "name": "docs"
            }, 
            {
                "descr": "If FALSE duplicates will be overwritten.", 
                "name": "allowDups"
            }, 
            {
                "descr": "Number of milliseconds within which to commit the documents to the index. ", 
                "name": "commitWithin"
            }
        ], 
        "path": "php/solrclient.adddocuments", 
        "syntax": "public void SolrClient::addDocuments ( array $docs [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "type": "Solr"
    }, 
    "SolrClient::commit": {
        "descr": "This method finalizes all add/deletes made to the index.", 
        "name": "SolrClient::commit", 
        "params": [
            {
                "descr": "Optimizes down to at most this number of segments. ", 
                "name": "maxSegments"
            }, 
            {
                "descr": "Block until index changes are flushed to disk.", 
                "name": "waitFlush"
            }, 
            {
                "descr": "Block until a new searcher is opened and registered as the main query searcher, making the changes visible.", 
                "name": "waitSearcher"
            }
        ], 
        "path": "php/solrclient.commit", 
        "syntax": "public SolrUpdateResponse SolrClient::commit ([ int $maxSegments = \"1\" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )", 
        "type": "Solr"
    }, 
    "SolrClient::deleteById": {
        "descr": "Deletes the document with the specified ID. Where ID is the value of the uniqueKey field declared in the schema", 
        "name": "SolrClient::deleteById", 
        "params": [
            {
                "descr": "The value of the uniqueKey field declared in the schema", 
                "name": "id"
            }
        ], 
        "path": "php/solrclient.deletebyid", 
        "syntax": "public SolrUpdateResponse SolrClient::deleteById ( string $id )", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByIds": {
        "descr": "Deletes a collection of documents with the specified set of ids.", 
        "name": "SolrClient::deleteByIds", 
        "params": [
            {
                "descr": "An array of IDs representing the uniqueKey field declared in the schema for each document to be deleted. ", 
                "name": "ids"
            }
        ], 
        "path": "php/solrclient.deletebyids", 
        "syntax": "public SolrUpdateResponse SolrClient::deleteByIds ( array $ids )", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByQueries": {
        "descr": "Removes all documents matching any of the queries", 
        "name": "SolrClient::deleteByQueries", 
        "params": [
            {
                "descr": "The array of queries. This must be an actual php variable.", 
                "name": "queries"
            }
        ], 
        "path": "php/solrclient.deletebyqueries", 
        "syntax": "public SolrUpdateResponse SolrClient::deleteByQueries ( array $queries )", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByQuery": {
        "descr": "Deletes all documents matching the given query.", 
        "name": "SolrClient::deleteByQuery", 
        "params": [
            {
                "descr": "The query", 
                "name": "query"
            }
        ], 
        "path": "php/solrclient.deletebyquery", 
        "syntax": "public SolrUpdateResponse SolrClient::deleteByQuery ( string $query )", 
        "type": "Solr"
    }, 
    "SolrClient::getDebug": {
        "descr": "Returns the debug data for the last connection attempt", 
        "name": "SolrClient::getDebug", 
        "params": [], 
        "path": "php/solrclient.getdebug", 
        "syntax": "public string SolrClient::getDebug ( void )", 
        "type": "Solr"
    }, 
    "SolrClient::getOptions": {
        "descr": "Returns the client options set internally. Very useful for debugging. The values returned are readonly and can only be set when the object is instantiated.", 
        "name": "SolrClient::getOptions", 
        "params": [], 
        "path": "php/solrclient.getoptions", 
        "syntax": "public array SolrClient::getOptions ( void )", 
        "type": "Solr"
    }, 
    "SolrClient::optimize": {
        "descr": "Defragments the index for faster search performance.", 
        "name": "SolrClient::optimize", 
        "params": [
            {
                "descr": "Optimizes down to at most this number of segments. ", 
                "name": "maxSegments"
            }, 
            {
                "descr": "Block until index changes are flushed to disk.", 
                "name": "waitFlush"
            }, 
            {
                "descr": "Block until a new searcher is opened and registered as the main query searcher, making the changes visible.", 
                "name": "waitSearcher"
            }
        ], 
        "path": "php/solrclient.optimize", 
        "syntax": "public SolrUpdateResponse SolrClient::optimize ([ int $maxSegments = \"1\" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )", 
        "type": "Solr"
    }, 
    "SolrClient::ping": {
        "descr": "Checks if the Solr server is still alive. Sends a HEAD request to the Apache Solr server.", 
        "name": "SolrClient::ping", 
        "params": [], 
        "path": "php/solrclient.ping", 
        "syntax": "public SolrPingResponse SolrClient::ping ( void )", 
        "type": "Solr"
    }, 
    "SolrClient::query": {
        "descr": "Sends a query to the server.", 
        "name": "SolrClient::query", 
        "params": [
            {
                "descr": "A SolrParam object. It is recommended to use SolrQuery for advanced queries.", 
                "name": "query"
            }
        ], 
        "path": "php/solrclient.query", 
        "syntax": "public SolrQueryResponse SolrClient::query ( SolrParams $query )", 
        "type": "Solr"
    }, 
    "SolrClient::request": {
        "descr": "Sends a raw XML update request to the server", 
        "name": "SolrClient::request", 
        "params": [
            {
                "descr": "An XML string with the raw request to the server.", 
                "name": "raw_request"
            }
        ], 
        "path": "php/solrclient.request", 
        "syntax": "public void SolrClient::request ( string $raw_request )", 
        "type": "Solr"
    }, 
    "SolrClient::rollback": {
        "descr": "Rollbacks all add/deletes made to the index since the last commit. It neither calls any event listeners nor creates a new searcher.", 
        "name": "SolrClient::rollback", 
        "params": [], 
        "path": "php/solrclient.rollback", 
        "syntax": "public SolrUpdateResponse SolrClient::rollback ( void )", 
        "type": "Solr"
    }, 
    "SolrClient::setResponseWriter": {
        "descr": "Sets the response writer used to prepare the response from Solr", 
        "name": "SolrClient::setResponseWriter", 
        "params": [
            {
                "descr": "One of the following : - xml - phpnative", 
                "name": "responseWriter"
            }
        ], 
        "path": "php/solrclient.setresponsewriter", 
        "syntax": "public void SolrClient::setResponseWriter ( string $responseWriter )", 
        "type": "Solr"
    }, 
    "SolrClient::setServlet": {
        "descr": "Changes the specified servlet type to a new value", 
        "name": "SolrClient::setServlet", 
        "params": [
            {
                "descr": "One of the following : - SolrClient::SEARCH_SERVLET_TYPE - SolrClient::UPDATE_SERVLET_TYPE - SolrClient::THREADS_SERVLET_TYPE - SolrClient::PING_SERVLET_TYPE - SolrClient::TERMS_SERVLET_TYPE", 
                "name": "type"
            }, 
            {
                "descr": "The new value for the servlet", 
                "name": "value"
            }
        ], 
        "path": "php/solrclient.setservlet", 
        "syntax": "public bool SolrClient::setServlet ( int $type , string $value )", 
        "type": "Solr"
    }, 
    "SolrClient::threads": {
        "descr": "Checks the threads status", 
        "name": "SolrClient::threads", 
        "params": [], 
        "path": "php/solrclient.threads", 
        "syntax": "public void SolrClient::threads ( void )", 
        "type": "Solr"
    }, 
    "SolrClientException": {
        "descr": "", 
        "name": "SolrClientException", 
        "params": [], 
        "path": "php/class.solrclientexception", 
        "syntax": "public array getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrClientException::getInternalInfo": {
        "descr": "Returns internal information where the Exception was thrown.", 
        "name": "SolrClientException::getInternalInfo", 
        "params": [], 
        "path": "php/solrclientexception.getinternalinfo", 
        "syntax": "public array SolrClientException::getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument": {
        "descr": "", 
        "name": "SolrDocument", 
        "params": [], 
        "path": "php/class.solrdocument", 
        "syntax": "public bool addField ( string $fieldName , string $fieldValue )", 
        "type": "Solr"
    }, 
    "SolrDocument::__clone": {
        "descr": "Creates a copy of a SolrDocument object. Not to be called directly.", 
        "name": "SolrDocument::__clone", 
        "params": [], 
        "path": "php/solrdocument.clone", 
        "syntax": "public void SolrDocument::__clone ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::__construct": {
        "descr": "Constructor for SolrDocument", 
        "name": "SolrDocument::__construct", 
        "params": [], 
        "path": "php/solrdocument.construct", 
        "syntax": "public SolrDocument::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::__destruct": {
        "descr": "Destructor for SolrDocument.", 
        "name": "SolrDocument::__destruct", 
        "params": [], 
        "path": "php/solrdocument.destruct", 
        "syntax": "public void SolrDocument::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::__get": {
        "descr": "Magic method for accessing the field as a property.", 
        "name": "SolrDocument::__get", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.get", 
        "syntax": "public SolrDocumentField SolrDocument::__get ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::__isset": {
        "descr": "Checks if a field exists", 
        "name": "SolrDocument::__isset", 
        "params": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.isset", 
        "syntax": "public bool SolrDocument::__isset ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::__set": {
        "descr": "Adds another field to the document. Used to set the fields as new properties.", 
        "name": "SolrDocument::__set", 
        "params": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "Field value.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.set", 
        "syntax": "public bool SolrDocument::__set ( string $fieldName , string $fieldValue )", 
        "type": "Solr"
    }, 
    "SolrDocument::__unset": {
        "descr": "Removes a field from the document when the field is access as an object property.", 
        "name": "SolrDocument::__unset", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.unset", 
        "syntax": "public bool SolrDocument::__unset ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::addField": {
        "descr": "This method adds a field to the SolrDocument instance.", 
        "name": "SolrDocument::addField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value of the field.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.addfield", 
        "syntax": "public bool SolrDocument::addField ( string $fieldName , string $fieldValue )", 
        "type": "Solr"
    }, 
    "SolrDocument::clear": {
        "descr": "Resets the current object. Discards all the fields and resets the document boost to zero.", 
        "name": "SolrDocument::clear", 
        "params": [], 
        "path": "php/solrdocument.clear", 
        "syntax": "public bool SolrDocument::clear ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::current": {
        "descr": "Retrieves the current field", 
        "name": "SolrDocument::current", 
        "params": [], 
        "path": "php/solrdocument.current", 
        "syntax": "public SolrDocumentField SolrDocument::current ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::deleteField": {
        "descr": "Removes a field from the document.", 
        "name": "SolrDocument::deleteField", 
        "params": [
            {
                "descr": "Name of the field", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.deletefield", 
        "syntax": "public bool SolrDocument::deleteField ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::fieldExists": {
        "descr": "Checks if the requested field as a valid fieldname in the document.", 
        "name": "SolrDocument::fieldExists", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.fieldexists", 
        "syntax": "public bool SolrDocument::fieldExists ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::getField": {
        "descr": "Retrieves a field by name.", 
        "name": "SolrDocument::getField", 
        "params": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.getfield", 
        "syntax": "public SolrDocumentField SolrDocument::getField ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::getFieldCount": {
        "descr": "Returns the number of fields in this document. Multi-value fields are only counted once.", 
        "name": "SolrDocument::getFieldCount", 
        "params": [], 
        "path": "php/solrdocument.getfieldcount", 
        "syntax": "public int SolrDocument::getFieldCount ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::getFieldNames": {
        "descr": "Returns an array of fields names in the document.", 
        "name": "SolrDocument::getFieldNames", 
        "params": [], 
        "path": "php/solrdocument.getfieldnames", 
        "syntax": "public array SolrDocument::getFieldNames ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::getInputDocument": {
        "descr": "Returns a SolrInputDocument equivalent of the object. This is useful if one wishes to resubmit/update a document retrieved from a query.", 
        "name": "SolrDocument::getInputDocument", 
        "params": [], 
        "path": "php/solrdocument.getinputdocument", 
        "syntax": "public SolrInputDocument SolrDocument::getInputDocument ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::key": {
        "descr": "Retrieves the current key.", 
        "name": "SolrDocument::key", 
        "params": [], 
        "path": "php/solrdocument.key", 
        "syntax": "public string SolrDocument::key ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::merge": {
        "descr": "Merges source to the current SolrDocument.", 
        "name": "SolrDocument::merge", 
        "params": [
            {
                "descr": "The source document.", 
                "name": "sourceDoc"
            }, 
            {
                "descr": "If this is TRUE then fields with the same name in the destination document will be overwritten.", 
                "name": "overwrite"
            }
        ], 
        "path": "php/solrdocument.merge", 
        "syntax": "public bool SolrDocument::merge ( SolrDocument $sourceDoc [, bool $overwrite = true ] )", 
        "type": "Solr"
    }, 
    "SolrDocument::next": {
        "descr": "Moves the internal pointer to the next field.", 
        "name": "SolrDocument::next", 
        "params": [], 
        "path": "php/solrdocument.next", 
        "syntax": "public void SolrDocument::next ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetExists": {
        "descr": "Checks if a particular field exists. This is used when the object is treated as an array.", 
        "name": "SolrDocument::offsetExists", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetexists", 
        "syntax": "public bool SolrDocument::offsetExists ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetGet": {
        "descr": "This is used to retrieve the field when the object is treated as an array.", 
        "name": "SolrDocument::offsetGet", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetget", 
        "syntax": "public SolrDocumentField SolrDocument::offsetGet ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetSet": {
        "descr": "Used when the object is treated as an array to add a field to the document.", 
        "name": "SolrDocument::offsetSet", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value for this field.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.offsetset", 
        "syntax": "public void SolrDocument::offsetSet ( string $fieldName , string $fieldValue )", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetUnset": {
        "descr": "Removes a field from the document.", 
        "name": "SolrDocument::offsetUnset", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetunset", 
        "syntax": "public void SolrDocument::offsetUnset ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrDocument::reset": {
        "descr": "This is an alias to SolrDocument::clear()", 
        "name": "SolrDocument::reset", 
        "params": [], 
        "path": "php/solrdocument.reset", 
        "syntax": "public bool SolrDocument::reset ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::rewind": {
        "descr": "Resets the internal pointer to the beginning.", 
        "name": "SolrDocument::rewind", 
        "params": [], 
        "path": "php/solrdocument.rewind", 
        "syntax": "public void SolrDocument::rewind ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::serialize": {
        "descr": "Used for custom serialization.", 
        "name": "SolrDocument::serialize", 
        "params": [], 
        "path": "php/solrdocument.serialize", 
        "syntax": "public string SolrDocument::serialize ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::sort": {
        "descr": "", 
        "name": "SolrDocument::sort", 
        "params": [
            {
                "descr": "The sort criteria.", 
                "name": "sortOrderBy"
            }, 
            {
                "descr": "The sort direction.", 
                "name": "sortDirection"
            }
        ], 
        "path": "php/solrdocument.sort", 
        "syntax": "public bool SolrDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC ] )", 
        "type": "Solr"
    }, 
    "SolrDocument::toArray": {
        "descr": "Returns an array representation of the document.", 
        "name": "SolrDocument::toArray", 
        "params": [], 
        "path": "php/solrdocument.toarray", 
        "syntax": "public array SolrDocument::toArray ( void )", 
        "type": "Solr"
    }, 
    "SolrDocument::unserialize": {
        "descr": "Custom serialization of SolrDocument objects", 
        "name": "SolrDocument::unserialize", 
        "params": [
            {
                "descr": "An XML representation of the document.", 
                "name": "serialized"
            }
        ], 
        "path": "php/solrdocument.unserialize", 
        "syntax": "public void SolrDocument::unserialize ( string $serialized )", 
        "type": "Solr"
    }, 
    "SolrDocument::valid": {
        "descr": "Checks if the current position internally is still valid. It is used during foreach operations.", 
        "name": "SolrDocument::valid", 
        "params": [], 
        "path": "php/solrdocument.valid", 
        "syntax": "public bool SolrDocument::valid ( void )", 
        "type": "Solr"
    }, 
    "SolrDocumentField": {
        "descr": "", 
        "name": "SolrDocumentField", 
        "params": [], 
        "path": "php/class.solrdocumentfield", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrDocumentField::__construct": {
        "descr": "Constructor.", 
        "name": "SolrDocumentField::__construct", 
        "params": [], 
        "path": "php/solrdocumentfield.construct", 
        "syntax": "public SolrDocumentField::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrDocumentField::__destruct": {
        "descr": "Destructor.", 
        "name": "SolrDocumentField::__destruct", 
        "params": [], 
        "path": "php/solrdocumentfield.destruct", 
        "syntax": "public void SolrDocumentField::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrException": {
        "descr": "", 
        "name": "SolrException", 
        "params": [], 
        "path": "php/class.solrexception", 
        "syntax": "public array getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrException::getInternalInfo": {
        "descr": "Returns internal information where the Exception was thrown.", 
        "name": "SolrException::getInternalInfo", 
        "params": [], 
        "path": "php/solrexception.getinternalinfo", 
        "syntax": "public array SolrException::getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrGenericResponse": {
        "descr": "", 
        "name": "SolrGenericResponse", 
        "params": [], 
        "path": "php/class.solrgenericresponse", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrGenericResponse::__construct": {
        "descr": "Constructor", 
        "name": "SolrGenericResponse::__construct", 
        "params": [], 
        "path": "php/solrgenericresponse.construct", 
        "syntax": "public SolrGenericResponse::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrGenericResponse::__destruct": {
        "descr": "Destructor.", 
        "name": "SolrGenericResponse::__destruct", 
        "params": [], 
        "path": "php/solrgenericresponse.destruct", 
        "syntax": "public void SolrGenericResponse::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrIllegalArgumentException": {
        "descr": "", 
        "name": "SolrIllegalArgumentException", 
        "params": [], 
        "path": "php/class.solrillegalargumentexception", 
        "syntax": "public array getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrIllegalArgumentException::getInternalInfo": {
        "descr": "Returns internal information where the Exception was thrown.", 
        "name": "SolrIllegalArgumentException::getInternalInfo", 
        "params": [], 
        "path": "php/solrillegalargumentexception.getinternalinfo", 
        "syntax": "public array SolrIllegalArgumentException::getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrIllegalOperationException": {
        "descr": "", 
        "name": "SolrIllegalOperationException", 
        "params": [], 
        "path": "php/class.solrillegaloperationexception", 
        "syntax": "public array getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrIllegalOperationException::getInternalInfo": {
        "descr": "Returns internal information where the Exception was thrown.", 
        "name": "SolrIllegalOperationException::getInternalInfo", 
        "params": [], 
        "path": "php/solrillegaloperationexception.getinternalinfo", 
        "syntax": "public array SolrIllegalOperationException::getInternalInfo ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument": {
        "descr": "", 
        "name": "SolrInputDocument", 
        "params": [], 
        "path": "php/class.solrinputdocument", 
        "syntax": "public bool addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__clone": {
        "descr": "Should not be called directly. It is used to create a deep copy of a SolrInputDocument.", 
        "name": "SolrInputDocument::__clone", 
        "params": [], 
        "path": "php/solrinputdocument.clone", 
        "syntax": "public void SolrInputDocument::__clone ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__construct": {
        "descr": "Constructor.", 
        "name": "SolrInputDocument::__construct", 
        "params": [], 
        "path": "php/solrinputdocument.construct", 
        "syntax": "public SolrInputDocument::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__destruct": {
        "descr": "Destructor", 
        "name": "SolrInputDocument::__destruct", 
        "params": [], 
        "path": "php/solrinputdocument.destruct", 
        "syntax": "public void SolrInputDocument::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::addField": {
        "descr": "For multi-value fields, if a valid boost value is specified, the specified value will be multiplied by the current boost value for this field.", 
        "name": "SolrInputDocument::addField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value for the field.", 
                "name": "fieldValue"
            }, 
            {
                "descr": "The index time boost for the field. ", 
                "name": "fieldBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.addfield", 
        "syntax": "public bool SolrInputDocument::addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::clear": {
        "descr": "Resets the document by dropping all the fields and resets the document boost to zero.", 
        "name": "SolrInputDocument::clear", 
        "params": [], 
        "path": "php/solrinputdocument.clear", 
        "syntax": "public bool SolrInputDocument::clear ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::deleteField": {
        "descr": "Removes a field from the document.", 
        "name": "SolrInputDocument::deleteField", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.deletefield", 
        "syntax": "public bool SolrInputDocument::deleteField ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::fieldExists": {
        "descr": "Checks if a field exists", 
        "name": "SolrInputDocument::fieldExists", 
        "params": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.fieldexists", 
        "syntax": "public bool SolrInputDocument::fieldExists ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getBoost": {
        "descr": "Retrieves the current boost value for the document.", 
        "name": "SolrInputDocument::getBoost", 
        "params": [], 
        "path": "php/solrinputdocument.getboost", 
        "syntax": "public float SolrInputDocument::getBoost ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getField": {
        "descr": "Retrieves a field in the document.", 
        "name": "SolrInputDocument::getField", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.getfield", 
        "syntax": "public SolrDocumentField SolrInputDocument::getField ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldBoost": {
        "descr": "Retrieves the boost value for a particular field.", 
        "name": "SolrInputDocument::getFieldBoost", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.getfieldboost", 
        "syntax": "public float SolrInputDocument::getFieldBoost ( string $fieldName )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldCount": {
        "descr": "Returns the number of fields in the document.", 
        "name": "SolrInputDocument::getFieldCount", 
        "params": [], 
        "path": "php/solrinputdocument.getfieldcount", 
        "syntax": "public int SolrInputDocument::getFieldCount ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldNames": {
        "descr": "Returns an array containing all the fields in the document.", 
        "name": "SolrInputDocument::getFieldNames", 
        "params": [], 
        "path": "php/solrinputdocument.getfieldnames", 
        "syntax": "public array SolrInputDocument::getFieldNames ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::merge": {
        "descr": "Merges one input document into another.", 
        "name": "SolrInputDocument::merge", 
        "params": [
            {
                "descr": "The source document.", 
                "name": "sourceDoc"
            }, 
            {
                "descr": "If this is TRUE it will replace matching fields in the destination document.", 
                "name": "overwrite"
            }
        ], 
        "path": "php/solrinputdocument.merge", 
        "syntax": "public bool SolrInputDocument::merge ( SolrInputDocument $sourceDoc [, bool $overwrite = true ] )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::reset": {
        "descr": "This is an alias of SolrInputDocument::clear", 
        "name": "SolrInputDocument::reset", 
        "params": [], 
        "path": "php/solrinputdocument.reset", 
        "syntax": "public bool SolrInputDocument::reset ( void )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::setBoost": {
        "descr": "Sets the boost value for this document.", 
        "name": "SolrInputDocument::setBoost", 
        "params": [
            {
                "descr": "The index-time boost value for this document.", 
                "name": "documentBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.setboost", 
        "syntax": "public bool SolrInputDocument::setBoost ( float $documentBoostValue )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::setFieldBoost": {
        "descr": "Sets the index-time boost value for a field. This replaces the current boost value for this field.", 
        "name": "SolrInputDocument::setFieldBoost", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "The index time boost value.", 
                "name": "fieldBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.setfieldboost", 
        "syntax": "public bool SolrInputDocument::setFieldBoost ( string $fieldName , float $fieldBoostValue )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::sort": {
        "descr": "", 
        "name": "SolrInputDocument::sort", 
        "params": [
            {
                "descr": "The sort criteria", 
                "name": "sortOrderBy"
            }, 
            {
                "descr": "The sort direction", 
                "name": "sortDirection"
            }
        ], 
        "path": "php/solrinputdocument.sort", 
        "syntax": "public bool SolrInputDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC ] )", 
        "type": "Solr"
    }, 
    "SolrInputDocument::toArray": {
        "descr": "Returns an array representation of the input document.", 
        "name": "SolrInputDocument::toArray", 
        "params": [], 
        "path": "php/solrinputdocument.toarray", 
        "syntax": "public array SolrInputDocument::toArray ( void )", 
        "type": "Solr"
    }, 
    "SolrModifiableParams": {
        "descr": "", 
        "name": "SolrModifiableParams", 
        "params": [], 
        "path": "php/class.solrmodifiableparams", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrModifiableParams::__construct": {
        "descr": "Constructor", 
        "name": "SolrModifiableParams::__construct", 
        "params": [], 
        "path": "php/solrmodifiableparams.construct", 
        "syntax": "public SolrModifiableParams::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrModifiableParams::__destruct": {
        "descr": "Destructor", 
        "name": "SolrModifiableParams::__destruct", 
        "params": [], 
        "path": "php/solrmodifiableparams.destruct", 
        "syntax": "public void SolrModifiableParams::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrObject": {
        "descr": "", 
        "name": "SolrObject", 
        "params": [], 
        "path": "php/class.solrobject", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrObject::__construct": {
        "descr": "Creates Solr object.", 
        "name": "SolrObject::__construct", 
        "params": [], 
        "path": "php/solrobject.construct", 
        "syntax": "public SolrObject::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrObject::__destruct": {
        "descr": "The destructor", 
        "name": "SolrObject::__destruct", 
        "params": [], 
        "path": "php/solrobject.destruct", 
        "syntax": "public void SolrObject::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrObject::getPropertyNames": {
        "descr": "Returns an array of all the names of the properties", 
        "name": "SolrObject::getPropertyNames", 
        "params": [], 
        "path": "php/solrobject.getpropertynames", 
        "syntax": "public array SolrObject::getPropertyNames ( void )", 
        "type": "Solr"
    }, 
    "SolrObject::offsetExists": {
        "descr": "Checks if the property exists. This is used when the object is treated as an array.", 
        "name": "SolrObject::offsetExists", 
        "params": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetexists", 
        "syntax": "public bool SolrObject::offsetExists ( string $property_name )", 
        "type": "Solr"
    }, 
    "SolrObject::offsetGet": {
        "descr": "Used to get the value of a property. This is used when the object is treated as an array.", 
        "name": "SolrObject::offsetGet", 
        "params": [
            {
                "descr": "Name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetget", 
        "syntax": "public mixed SolrObject::offsetGet ( string $property_name )", 
        "type": "Solr"
    }, 
    "SolrObject::offsetSet": {
        "descr": "Sets the value for a property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.", 
        "name": "SolrObject::offsetSet", 
        "params": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }, 
            {
                "descr": "The new value.", 
                "name": "property_value"
            }
        ], 
        "path": "php/solrobject.offsetset", 
        "syntax": "public void SolrObject::offsetSet ( string $property_name , string $property_value )", 
        "type": "Solr"
    }, 
    "SolrObject::offsetUnset": {
        "descr": "Sets the value for the property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.", 
        "name": "SolrObject::offsetUnset", 
        "params": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetunset", 
        "syntax": "public void SolrObject::offsetUnset ( string $property_name )", 
        "type": "Solr"
    }, 
    "SolrParams": {
        "descr": "", 
        "name": "SolrParams", 
        "params": [], 
        "path": "php/class.solrparams", 
        "syntax": "final public SolrParams add ( string $name , string $value )", 
        "type": "Solr"
    }, 
    "SolrParams::add": {
        "descr": "This is an alias for SolrParams::addParam", 
        "name": "SolrParams::add", 
        "params": [
            {
                "descr": "The name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "The value of the parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.add", 
        "syntax": "final public SolrParams SolrParams::add ( string $name , string $value )", 
        "type": "Solr"
    }, 
    "SolrParams::addParam": {
        "descr": "Adds a parameter to the object. This is used for parameters that can be specified multiple times.", 
        "name": "SolrParams::addParam", 
        "params": [
            {
                "descr": "Name of parameter", 
                "name": "name"
            }, 
            {
                "descr": "Value of parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.addparam", 
        "syntax": "public SolrParams SolrParams::addParam ( string $name , string $value )", 
        "type": "Solr"
    }, 
    "SolrParams::get": {
        "descr": "This is an alias for SolrParams::getParam", 
        "name": "SolrParams::get", 
        "params": [
            {
                "descr": "Then name of the parameter", 
                "name": "param_name"
            }
        ], 
        "path": "php/solrparams.get", 
        "syntax": "final public mixed SolrParams::get ( string $param_name )", 
        "type": "Solr"
    }, 
    "SolrParams::getParam": {
        "descr": "Returns a parameter with name param_name", 
        "name": "SolrParams::getParam", 
        "params": [
            {
                "descr": "The name of the parameter", 
                "name": "param_name"
            }
        ], 
        "path": "php/solrparams.getparam", 
        "syntax": "final public mixed SolrParams::getParam ([ string $param_name ] )", 
        "type": "Solr"
    }, 
    "SolrParams::getParams": {
        "descr": "Returns an array of non URL-encoded parameters", 
        "name": "SolrParams::getParams", 
        "params": [], 
        "path": "php/solrparams.getparams", 
        "syntax": "final public array SolrParams::getParams ( void )", 
        "type": "Solr"
    }, 
    "SolrParams::getPreparedParams": {
        "descr": "Returns an array on URL-encoded parameters", 
        "name": "SolrParams::getPreparedParams", 
        "params": [], 
        "path": "php/solrparams.getpreparedparams", 
        "syntax": "final public array SolrParams::getPreparedParams ( void )", 
        "type": "Solr"
    }, 
    "SolrParams::serialize": {
        "descr": "Used for custom serialization", 
        "name": "SolrParams::serialize", 
        "params": [], 
        "path": "php/solrparams.serialize", 
        "syntax": "final public string SolrParams::serialize ( void )", 
        "type": "Solr"
    }, 
    "SolrParams::set": {
        "descr": "An alias of SolrParams::setParam", 
        "name": "SolrParams::set", 
        "params": [
            {
                "descr": "Then name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "The parameter value", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.set", 
        "syntax": "final public void SolrParams::set ( string $name , string $value )", 
        "type": "Solr"
    }, 
    "SolrParams::setParam": {
        "descr": "Sets the query parameter to the specified value. This is used for parameters that can only be specified once. Subsequent calls with the same parameter name will override the existing value", 
        "name": "SolrParams::setParam", 
        "params": [
            {
                "descr": "Name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "Value of the parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.setparam", 
        "syntax": "public SolrParams SolrParams::setParam ( string $name , string $value )", 
        "type": "Solr"
    }, 
    "SolrParams::toString": {
        "descr": "Returns all the name-value pair parameters in the object", 
        "name": "SolrParams::toString", 
        "params": [
            {
                "descr": "Whether to return URL-encoded values", 
                "name": "url_encode"
            }
        ], 
        "path": "php/solrparams.tostring", 
        "syntax": "final public string SolrParams::toString ([ bool $url_encode = false ] )", 
        "type": "Solr"
    }, 
    "SolrParams::unserialize": {
        "descr": "Used for custom serialization", 
        "name": "SolrParams::unserialize", 
        "params": [
            {
                "descr": "The serialized representation of the object", 
                "name": "serialized"
            }
        ], 
        "path": "php/solrparams.unserialize", 
        "syntax": "final public void SolrParams::unserialize ( string $serialized )", 
        "type": "Solr"
    }, 
    "SolrPingResponse": {
        "descr": "", 
        "name": "SolrPingResponse", 
        "params": [], 
        "path": "php/class.solrpingresponse", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrPingResponse::__construct": {
        "descr": "Constructor", 
        "name": "SolrPingResponse::__construct", 
        "params": [], 
        "path": "php/solrpingresponse.construct", 
        "syntax": "public SolrPingResponse::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrPingResponse::__destruct": {
        "descr": "Destructor", 
        "name": "SolrPingResponse::__destruct", 
        "params": [], 
        "path": "php/solrpingresponse.destruct", 
        "syntax": "public void SolrPingResponse::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrPingResponse::getResponse": {
        "descr": "Returns the response from the server. This should be empty because the request as a HEAD request.", 
        "name": "SolrPingResponse::getResponse", 
        "params": [], 
        "path": "php/solrpingresponse.getresponse", 
        "syntax": "public string SolrPingResponse::getResponse ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery": {
        "descr": "", 
        "name": "SolrQuery", 
        "params": [], 
        "path": "php/class.solrquery", 
        "syntax": "public SolrQuery addFacetDateField ( string $dateField )", 
        "type": "Solr"
    }, 
    "SolrQuery::__construct": {
        "descr": "Constructor.", 
        "name": "SolrQuery::__construct", 
        "params": [
            {
                "descr": "Optional search query", 
                "name": "q"
            }
        ], 
        "path": "php/solrquery.construct", 
        "syntax": "public SolrQuery::__construct ([ string $q ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::__destruct": {
        "descr": "Destructor", 
        "name": "SolrQuery::__destruct", 
        "params": [], 
        "path": "php/solrquery.destruct", 
        "syntax": "public void SolrQuery::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetDateField": {
        "descr": "This method allows you to specify a field which should be treated as a facet.", 
        "name": "SolrQuery::addFacetDateField", 
        "params": [
            {
                "descr": "The name of the date field.", 
                "name": "dateField"
            }
        ], 
        "path": "php/solrquery.addfacetdatefield", 
        "syntax": "public SolrQuery SolrQuery::addFacetDateField ( string $dateField )", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetDateOther": {
        "descr": "Sets the facet.date.other parameter. Accepts an optional field override", 
        "name": "SolrQuery::addFacetDateOther", 
        "params": [
            {
                "descr": "The value to use.", 
                "name": "value"
            }, 
            {
                "descr": "The field name for the override.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.addfacetdateother", 
        "syntax": "public SolrQuery SolrQuery::addFacetDateOther ( string $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetField": {
        "descr": "Adds another field to the facet", 
        "name": "SolrQuery::addFacetField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addfacetfield", 
        "syntax": "public SolrQuery SolrQuery::addFacetField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetQuery": {
        "descr": "Adds a facet query", 
        "name": "SolrQuery::addFacetQuery", 
        "params": [
            {
                "descr": "The facet query", 
                "name": "facetQuery"
            }
        ], 
        "path": "php/solrquery.addfacetquery", 
        "syntax": "public SolrQuery SolrQuery::addFacetQuery ( string $facetQuery )", 
        "type": "Solr"
    }, 
    "SolrQuery::addField": {
        "descr": "This method is used to used to specify a set of fields to return, thereby restricting the amount of data returned in the response.", 
        "name": "SolrQuery::addField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addfield", 
        "syntax": "public SolrQuery SolrQuery::addField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::addFilterQuery": {
        "descr": "Specifies a filter query", 
        "name": "SolrQuery::addFilterQuery", 
        "params": [
            {
                "descr": "The filter query", 
                "name": "fq"
            }
        ], 
        "path": "php/solrquery.addfilterquery", 
        "syntax": "public SolrQuery SolrQuery::addFilterQuery ( string $fq )", 
        "type": "Solr"
    }, 
    "SolrQuery::addHighlightField": {
        "descr": "Maps to hl.fl. This is used to specify that highlighted snippets should be generated for a particular field", 
        "name": "SolrQuery::addHighlightField", 
        "params": [
            {
                "descr": "Name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addhighlightfield", 
        "syntax": "public SolrQuery SolrQuery::addHighlightField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::addMltField": {
        "descr": "Maps to mlt.fl. It specifies that a field should be used for similarity.", 
        "name": "SolrQuery::addMltField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addmltfield", 
        "syntax": "public SolrQuery SolrQuery::addMltField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::addMltQueryField": {
        "descr": "Maps to mlt.qf. It is used to specify query fields and their boosts", 
        "name": "SolrQuery::addMltQueryField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }, 
            {
                "descr": "Its boost value", 
                "name": "boost"
            }
        ], 
        "path": "php/solrquery.addmltqueryfield", 
        "syntax": "public SolrQuery SolrQuery::addMltQueryField ( string $field , float $boost )", 
        "type": "Solr"
    }, 
    "SolrQuery::addSortField": {
        "descr": "Used to control how the results should be sorted.", 
        "name": "SolrQuery::addSortField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }, 
            {
                "descr": "The sort direction. This should be either SolrQuery::ORDER_ASC or SolrQuery::ORDER_DESC.", 
                "name": "order"
            }
        ], 
        "path": "php/solrquery.addsortfield", 
        "syntax": "public SolrQuery SolrQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::addStatsFacet": {
        "descr": "Requests a return of sub results for values within the given facet. Maps to the stats.facet field", 
        "name": "SolrQuery::addStatsFacet", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addstatsfacet", 
        "syntax": "public SolrQuery SolrQuery::addStatsFacet ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::addStatsField": {
        "descr": "Maps to stats.field parameter This methods adds another stats.field parameter.", 
        "name": "SolrQuery::addStatsField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addstatsfield", 
        "syntax": "public SolrQuery SolrQuery::addStatsField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacet": {
        "descr": "Returns the value of the facet parameter.", 
        "name": "SolrQuery::getFacet", 
        "params": [], 
        "path": "php/solrquery.getfacet", 
        "syntax": "public bool SolrQuery::getFacet ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateEnd": {
        "descr": "Returns the value for the facet.date.end parameter. This method accepts an optional field override", 
        "name": "SolrQuery::getFacetDateEnd", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdateend", 
        "syntax": "public string SolrQuery::getFacetDateEnd ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateFields": {
        "descr": "Returns all the facet.date fields", 
        "name": "SolrQuery::getFacetDateFields", 
        "params": [], 
        "path": "php/solrquery.getfacetdatefields", 
        "syntax": "public array SolrQuery::getFacetDateFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateGap": {
        "descr": "Returns the value of the facet.date.gap parameter. It accepts an optional field override", 
        "name": "SolrQuery::getFacetDateGap", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdategap", 
        "syntax": "public string SolrQuery::getFacetDateGap ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateHardEnd": {
        "descr": "Returns the value of the facet.date.hardend parameter. Accepts an optional field override", 
        "name": "SolrQuery::getFacetDateHardEnd", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdatehardend", 
        "syntax": "public string SolrQuery::getFacetDateHardEnd ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateOther": {
        "descr": "Returns the value for the facet.date.other parameter. This method accepts an optional field override.", 
        "name": "SolrQuery::getFacetDateOther", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdateother", 
        "syntax": "public array SolrQuery::getFacetDateOther ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateStart": {
        "descr": "Returns the lower bound for the first date range for all date faceting on this field. Accepts an optional field override", 
        "name": "SolrQuery::getFacetDateStart", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdatestart", 
        "syntax": "public string SolrQuery::getFacetDateStart ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetFields": {
        "descr": "Returns all the facet fields", 
        "name": "SolrQuery::getFacetFields", 
        "params": [], 
        "path": "php/solrquery.getfacetfields", 
        "syntax": "public array SolrQuery::getFacetFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetLimit": {
        "descr": "Returns the maximum number of constraint counts that should be returned for the facet fields. This method accepts an optional field override", 
        "name": "SolrQuery::getFacetLimit", 
        "params": [
            {
                "descr": "The name of the field to override for", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetlimit", 
        "syntax": "public int SolrQuery::getFacetLimit ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMethod": {
        "descr": "Returns the value of the facet.method parameter. This accepts an optional field override.", 
        "name": "SolrQuery::getFacetMethod", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmethod", 
        "syntax": "public string SolrQuery::getFacetMethod ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMinCount": {
        "descr": "Returns the minimum counts for facet fields should be included in the response. It accepts an optional field override", 
        "name": "SolrQuery::getFacetMinCount", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmincount", 
        "syntax": "public int SolrQuery::getFacetMinCount ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMissing": {
        "descr": "Returns the current state of the facet.missing parameter. This accepts an optional field override", 
        "name": "SolrQuery::getFacetMissing", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmissing", 
        "syntax": "public bool SolrQuery::getFacetMissing ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetOffset": {
        "descr": "Returns an offset into the list of constraints to be used for pagination. Accepts an optional field override", 
        "name": "SolrQuery::getFacetOffset", 
        "params": [
            {
                "descr": "The name of the field to override for.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetoffset", 
        "syntax": "public int SolrQuery::getFacetOffset ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetPrefix": {
        "descr": "Returns the facet prefix", 
        "name": "SolrQuery::getFacetPrefix", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetprefix", 
        "syntax": "public string SolrQuery::getFacetPrefix ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetQueries": {
        "descr": "Returns all the facet queries", 
        "name": "SolrQuery::getFacetQueries", 
        "params": [], 
        "path": "php/solrquery.getfacetqueries", 
        "syntax": "public array SolrQuery::getFacetQueries ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetSort": {
        "descr": "Returns an integer (SolrQuery::FACET_SORT_INDEX or SolrQuery::FACET_SORT_COUNT)", 
        "name": "SolrQuery::getFacetSort", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetsort", 
        "syntax": "public int SolrQuery::getFacetSort ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFields": {
        "descr": "Returns the list of fields that will be returned in the response", 
        "name": "SolrQuery::getFields", 
        "params": [], 
        "path": "php/solrquery.getfields", 
        "syntax": "public array SolrQuery::getFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getFilterQueries": {
        "descr": "Returns an array of filter queries. These are queries that can be used to restrict the super set of documents that can be returned, without influencing score", 
        "name": "SolrQuery::getFilterQueries", 
        "params": [], 
        "path": "php/solrquery.getfilterqueries", 
        "syntax": "public array SolrQuery::getFilterQueries ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlight": {
        "descr": "Returns a boolean indicating whether or not to enable highlighted snippets to be generated in the query response.", 
        "name": "SolrQuery::getHighlight", 
        "params": [], 
        "path": "php/solrquery.gethighlight", 
        "syntax": "public bool SolrQuery::getHighlight ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightAlternateField": {
        "descr": "Returns the highlight field to use as backup or default. It accepts an optional override.", 
        "name": "SolrQuery::getHighlightAlternateField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightalternatefield", 
        "syntax": "public string SolrQuery::getHighlightAlternateField ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFields": {
        "descr": "Returns all the fields that Solr should generate highlighted snippets for", 
        "name": "SolrQuery::getHighlightFields", 
        "params": [], 
        "path": "php/solrquery.gethighlightfields", 
        "syntax": "public array SolrQuery::getHighlightFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFormatter": {
        "descr": "Returns the formatter for the highlighted output", 
        "name": "SolrQuery::getHighlightFormatter", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightformatter", 
        "syntax": "public string SolrQuery::getHighlightFormatter ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFragmenter": {
        "descr": "Returns the text snippet generator for highlighted text. Accepts an optional field override.", 
        "name": "SolrQuery::getHighlightFragmenter", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightfragmenter", 
        "syntax": "public string SolrQuery::getHighlightFragmenter ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFragsize": {
        "descr": "Returns the number of characters of fragments to consider for highlighting. Zero implies no fragmenting. The entire field should be used.", 
        "name": "SolrQuery::getHighlightFragsize", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightfragsize", 
        "syntax": "public int SolrQuery::getHighlightFragsize ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightHighlightMultiTerm": {
        "descr": "Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries", 
        "name": "SolrQuery::getHighlightHighlightMultiTerm", 
        "params": [], 
        "path": "php/solrquery.gethighlighthighlightmultiterm", 
        "syntax": "public bool SolrQuery::getHighlightHighlightMultiTerm ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMaxAlternateFieldLength": {
        "descr": "Returns the maximum number of characters of the field to return", 
        "name": "SolrQuery::getHighlightMaxAlternateFieldLength", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightmaxalternatefieldlength", 
        "syntax": "public int SolrQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMaxAnalyzedChars": {
        "descr": "Returns the maximum number of characters into a document to look for suitable snippets", 
        "name": "SolrQuery::getHighlightMaxAnalyzedChars", 
        "params": [], 
        "path": "php/solrquery.gethighlightmaxanalyzedchars", 
        "syntax": "public int SolrQuery::getHighlightMaxAnalyzedChars ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMergeContiguous": {
        "descr": "Returns whether or not the collapse contiguous fragments into a single fragment. Accepts an optional field override.", 
        "name": "SolrQuery::getHighlightMergeContiguous", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightmergecontiguous", 
        "syntax": "public bool SolrQuery::getHighlightMergeContiguous ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexMaxAnalyzedChars": {
        "descr": "Returns the maximum number of characters from a field when using the regex fragmenter", 
        "name": "SolrQuery::getHighlightRegexMaxAnalyzedChars", 
        "params": [], 
        "path": "php/solrquery.gethighlightregexmaxanalyzedchars", 
        "syntax": "public int SolrQuery::getHighlightRegexMaxAnalyzedChars ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexPattern": {
        "descr": "Returns the regular expression used for fragmenting", 
        "name": "SolrQuery::getHighlightRegexPattern", 
        "params": [], 
        "path": "php/solrquery.gethighlightregexpattern", 
        "syntax": "public string SolrQuery::getHighlightRegexPattern ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexSlop": {
        "descr": "Returns the factor by which the regex fragmenter can deviate from the ideal fragment size to accomodate the regular expression", 
        "name": "SolrQuery::getHighlightRegexSlop", 
        "params": [], 
        "path": "php/solrquery.gethighlightregexslop", 
        "syntax": "public float SolrQuery::getHighlightRegexSlop ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRequireFieldMatch": {
        "descr": "Returns if a field will only be highlighted if the query matched in this particular field.", 
        "name": "SolrQuery::getHighlightRequireFieldMatch", 
        "params": [], 
        "path": "php/solrquery.gethighlightrequirefieldmatch", 
        "syntax": "public bool SolrQuery::getHighlightRequireFieldMatch ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSimplePost": {
        "descr": "Returns the text which appears after a highlighted term. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSimplePost", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsimplepost", 
        "syntax": "public string SolrQuery::getHighlightSimplePost ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSimplePre": {
        "descr": "Returns the text which appears before a highlighted term. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSimplePre", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsimplepre", 
        "syntax": "public string SolrQuery::getHighlightSimplePre ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSnippets": {
        "descr": "Returns the maximum number of highlighted snippets to generate per field. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSnippets", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsnippets", 
        "syntax": "public int SolrQuery::getHighlightSnippets ([ string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightUsePhraseHighlighter": {
        "descr": "Returns whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
        "name": "SolrQuery::getHighlightUsePhraseHighlighter", 
        "params": [], 
        "path": "php/solrquery.gethighlightusephrasehighlighter", 
        "syntax": "public bool SolrQuery::getHighlightUsePhraseHighlighter ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMlt": {
        "descr": "Returns whether or not MoreLikeThis results should be enabled", 
        "name": "SolrQuery::getMlt", 
        "params": [], 
        "path": "php/solrquery.getmlt", 
        "syntax": "public bool SolrQuery::getMlt ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltBoost": {
        "descr": "Returns whether or not the query will be boosted by the interesting term relevance", 
        "name": "SolrQuery::getMltBoost", 
        "params": [], 
        "path": "php/solrquery.getmltboost", 
        "syntax": "public bool SolrQuery::getMltBoost ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltCount": {
        "descr": "Returns the number of similar documents to return for each result", 
        "name": "SolrQuery::getMltCount", 
        "params": [], 
        "path": "php/solrquery.getmltcount", 
        "syntax": "public int SolrQuery::getMltCount ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltFields": {
        "descr": "Returns all the fields to use for similarity", 
        "name": "SolrQuery::getMltFields", 
        "params": [], 
        "path": "php/solrquery.getmltfields", 
        "syntax": "public array SolrQuery::getMltFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxNumQueryTerms": {
        "descr": "Returns the maximum number of query terms that will be included in any generated query", 
        "name": "SolrQuery::getMltMaxNumQueryTerms", 
        "params": [], 
        "path": "php/solrquery.getmltmaxnumqueryterms", 
        "syntax": "public int SolrQuery::getMltMaxNumQueryTerms ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxNumTokens": {
        "descr": "Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support", 
        "name": "SolrQuery::getMltMaxNumTokens", 
        "params": [], 
        "path": "php/solrquery.getmltmaxnumtokens", 
        "syntax": "public int SolrQuery::getMltMaxNumTokens ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxWordLength": {
        "descr": "Returns the maximum word length above which words will be ignored", 
        "name": "SolrQuery::getMltMaxWordLength", 
        "params": [], 
        "path": "php/solrquery.getmltmaxwordlength", 
        "syntax": "public int SolrQuery::getMltMaxWordLength ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinDocFrequency": {
        "descr": "Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs", 
        "name": "SolrQuery::getMltMinDocFrequency", 
        "params": [], 
        "path": "php/solrquery.getmltmindocfrequency", 
        "syntax": "public int SolrQuery::getMltMinDocFrequency ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinTermFrequency": {
        "descr": "Returns the frequency below which terms will be ignored in the source document", 
        "name": "SolrQuery::getMltMinTermFrequency", 
        "params": [], 
        "path": "php/solrquery.getmltmintermfrequency", 
        "syntax": "public int SolrQuery::getMltMinTermFrequency ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinWordLength": {
        "descr": "Returns the minimum word length below which words will be ignored", 
        "name": "SolrQuery::getMltMinWordLength", 
        "params": [], 
        "path": "php/solrquery.getmltminwordlength", 
        "syntax": "public int SolrQuery::getMltMinWordLength ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltQueryFields": {
        "descr": "Returns the query fields and their boosts", 
        "name": "SolrQuery::getMltQueryFields", 
        "params": [], 
        "path": "php/solrquery.getmltqueryfields", 
        "syntax": "public array SolrQuery::getMltQueryFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getQuery": {
        "descr": "Returns the main search query", 
        "name": "SolrQuery::getQuery", 
        "params": [], 
        "path": "php/solrquery.getquery", 
        "syntax": "public string SolrQuery::getQuery ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getRows": {
        "descr": "Returns the maximum number of documents from the complete result set to return to the client for every request", 
        "name": "SolrQuery::getRows", 
        "params": [], 
        "path": "php/solrquery.getrows", 
        "syntax": "public int SolrQuery::getRows ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getSortFields": {
        "descr": "Returns all the sort fields", 
        "name": "SolrQuery::getSortFields", 
        "params": [], 
        "path": "php/solrquery.getsortfields", 
        "syntax": "public array SolrQuery::getSortFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getStart": {
        "descr": "Returns the offset in the complete result set for the queries where the set of returned documents should begin.", 
        "name": "SolrQuery::getStart", 
        "params": [], 
        "path": "php/solrquery.getstart", 
        "syntax": "public int SolrQuery::getStart ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getStats": {
        "descr": "Returns whether or not stats is enabled", 
        "name": "SolrQuery::getStats", 
        "params": [], 
        "path": "php/solrquery.getstats", 
        "syntax": "public bool SolrQuery::getStats ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getStatsFacets": {
        "descr": "Returns all the stats facets that were set", 
        "name": "SolrQuery::getStatsFacets", 
        "params": [], 
        "path": "php/solrquery.getstatsfacets", 
        "syntax": "public array SolrQuery::getStatsFacets ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getStatsFields": {
        "descr": "Returns all the statistics fields", 
        "name": "SolrQuery::getStatsFields", 
        "params": [], 
        "path": "php/solrquery.getstatsfields", 
        "syntax": "public array SolrQuery::getStatsFields ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTerms": {
        "descr": "Returns whether or not the TermsComponent is enabled", 
        "name": "SolrQuery::getTerms", 
        "params": [], 
        "path": "php/solrquery.getterms", 
        "syntax": "public bool SolrQuery::getTerms ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsField": {
        "descr": "Returns the field from which the terms are retrieved", 
        "name": "SolrQuery::getTermsField", 
        "params": [], 
        "path": "php/solrquery.gettermsfield", 
        "syntax": "public string SolrQuery::getTermsField ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsIncludeLowerBound": {
        "descr": "Returns whether or not to include the lower bound in the result set", 
        "name": "SolrQuery::getTermsIncludeLowerBound", 
        "params": [], 
        "path": "php/solrquery.gettermsincludelowerbound", 
        "syntax": "public bool SolrQuery::getTermsIncludeLowerBound ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsIncludeUpperBound": {
        "descr": "Returns whether or not to include the upper bound term in the result set", 
        "name": "SolrQuery::getTermsIncludeUpperBound", 
        "params": [], 
        "path": "php/solrquery.gettermsincludeupperbound", 
        "syntax": "public bool SolrQuery::getTermsIncludeUpperBound ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsLimit": {
        "descr": "Returns the maximum number of terms Solr should return", 
        "name": "SolrQuery::getTermsLimit", 
        "params": [], 
        "path": "php/solrquery.gettermslimit", 
        "syntax": "public int SolrQuery::getTermsLimit ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsLowerBound": {
        "descr": "Returns the term to start at", 
        "name": "SolrQuery::getTermsLowerBound", 
        "params": [], 
        "path": "php/solrquery.gettermslowerbound", 
        "syntax": "public string SolrQuery::getTermsLowerBound ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsMaxCount": {
        "descr": "Returns the maximum document frequency", 
        "name": "SolrQuery::getTermsMaxCount", 
        "params": [], 
        "path": "php/solrquery.gettermsmaxcount", 
        "syntax": "public int SolrQuery::getTermsMaxCount ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsMinCount": {
        "descr": "Returns the minimum document frequency to return in order to be included", 
        "name": "SolrQuery::getTermsMinCount", 
        "params": [], 
        "path": "php/solrquery.gettermsmincount", 
        "syntax": "public int SolrQuery::getTermsMinCount ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsPrefix": {
        "descr": "Returns the prefix to which matching terms must be restricted. This will restrict matches to only terms that start with the prefix", 
        "name": "SolrQuery::getTermsPrefix", 
        "params": [], 
        "path": "php/solrquery.gettermsprefix", 
        "syntax": "public string SolrQuery::getTermsPrefix ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsReturnRaw": {
        "descr": "Returns a boolean indicating whether or not to return the raw characters of the indexed term, regardless of if it is human readable", 
        "name": "SolrQuery::getTermsReturnRaw", 
        "params": [], 
        "path": "php/solrquery.gettermsreturnraw", 
        "syntax": "public bool SolrQuery::getTermsReturnRaw ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsSort": {
        "descr": "SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are sorted by term frequency (highest count first)", 
        "name": "SolrQuery::getTermsSort", 
        "params": [], 
        "path": "php/solrquery.gettermssort", 
        "syntax": "public int SolrQuery::getTermsSort ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsUpperBound": {
        "descr": "Returns the term to stop at", 
        "name": "SolrQuery::getTermsUpperBound", 
        "params": [], 
        "path": "php/solrquery.gettermsupperbound", 
        "syntax": "public string SolrQuery::getTermsUpperBound ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::getTimeAllowed": {
        "descr": "Returns the time in milliseconds allowed for the query to finish.", 
        "name": "SolrQuery::getTimeAllowed", 
        "params": [], 
        "path": "php/solrquery.gettimeallowed", 
        "syntax": "public int SolrQuery::getTimeAllowed ( void )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetDateField": {
        "descr": "The name of the field", 
        "name": "SolrQuery::removeFacetDateField", 
        "params": [
            {
                "descr": "The name of the date field to remove", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefacetdatefield", 
        "syntax": "public SolrQuery SolrQuery::removeFacetDateField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetDateOther": {
        "descr": "Removes one of the facet.date.other parameters", 
        "name": "SolrQuery::removeFacetDateOther", 
        "params": [
            {
                "descr": "The value", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.removefacetdateother", 
        "syntax": "public SolrQuery SolrQuery::removeFacetDateOther ( string $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetField": {
        "descr": "Removes one of the facet.date parameters", 
        "name": "SolrQuery::removeFacetField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefacetfield", 
        "syntax": "public SolrQuery SolrQuery::removeFacetField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetQuery": {
        "descr": "Removes one of the facet.query parameters.", 
        "name": "SolrQuery::removeFacetQuery", 
        "params": [
            {
                "descr": "The value", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.removefacetquery", 
        "syntax": "public SolrQuery SolrQuery::removeFacetQuery ( string $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeField": {
        "descr": "Removes a field from the list of fields", 
        "name": "SolrQuery::removeField", 
        "params": [
            {
                "descr": "Name of the field.", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefield", 
        "syntax": "public SolrQuery SolrQuery::removeField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFilterQuery": {
        "descr": "Removes a filter query.", 
        "name": "SolrQuery::removeFilterQuery", 
        "params": [
            {
                "descr": "The filter query to remove", 
                "name": "fq"
            }
        ], 
        "path": "php/solrquery.removefilterquery", 
        "syntax": "public SolrQuery SolrQuery::removeFilterQuery ( string $fq )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeHighlightField": {
        "descr": "Removes one of the fields used for highlighting.", 
        "name": "SolrQuery::removeHighlightField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removehighlightfield", 
        "syntax": "public SolrQuery SolrQuery::removeHighlightField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeMltField": {
        "descr": "Removes one of the moreLikeThis fields.", 
        "name": "SolrQuery::removeMltField", 
        "params": [
            {
                "descr": "Name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removemltfield", 
        "syntax": "public SolrQuery SolrQuery::removeMltField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeMltQueryField": {
        "descr": "Removes one of the moreLikeThis query fields.", 
        "name": "SolrQuery::removeMltQueryField", 
        "params": [
            {
                "descr": "The query field", 
                "name": "queryField"
            }
        ], 
        "path": "php/solrquery.removemltqueryfield", 
        "syntax": "public SolrQuery SolrQuery::removeMltQueryField ( string $queryField )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeSortField": {
        "descr": "Removes one of the sort fields", 
        "name": "SolrQuery::removeSortField", 
        "params": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removesortfield", 
        "syntax": "public SolrQuery SolrQuery::removeSortField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeStatsFacet": {
        "descr": "Removes one of the stats.facet parameters", 
        "name": "SolrQuery::removeStatsFacet", 
        "params": [
            {
                "descr": "The value", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.removestatsfacet", 
        "syntax": "public SolrQuery SolrQuery::removeStatsFacet ( string $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::removeStatsField": {
        "descr": "Removes one of the stats.field parameters", 
        "name": "SolrQuery::removeStatsField", 
        "params": [
            {
                "descr": "The name of the field.", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removestatsfield", 
        "syntax": "public SolrQuery SolrQuery::removeStatsField ( string $field )", 
        "type": "Solr"
    }, 
    "SolrQuery::setEchoHandler": {
        "descr": "If set to true, Solr places the name of the handle used in the response to the client for debugging purposes.", 
        "name": "SolrQuery::setEchoHandler", 
        "params": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setechohandler", 
        "syntax": "public SolrQuery SolrQuery::setEchoHandler ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setEchoParams": {
        "descr": "Instructs Solr what kinds of Request parameters should be included in the response for debugging purposes, legal values include:", 
        "name": "SolrQuery::setEchoParams", 
        "params": [
            {
                "descr": "The type of parameters to include", 
                "name": "type"
            }
        ], 
        "path": "php/solrquery.setechoparams", 
        "syntax": "public SolrQuery SolrQuery::setEchoParams ( string $type )", 
        "type": "Solr"
    }, 
    "SolrQuery::setExplainOther": {
        "descr": "Sets the explainOther common query parameter", 
        "name": "SolrQuery::setExplainOther", 
        "params": [
            {
                "descr": "The Lucene query to identify a set of documents", 
                "name": "query"
            }
        ], 
        "path": "php/solrquery.setexplainother", 
        "syntax": "public SolrQuery SolrQuery::setExplainOther ( string $query )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacet": {
        "descr": "Enables or disables faceting.", 
        "name": "SolrQuery::setFacet", 
        "params": [
            {
                "descr": "TRUE enables faceting and FALSE disables it.", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setfacet", 
        "syntax": "public SolrQuery SolrQuery::setFacet ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateEnd": {
        "descr": "Maps to facet.date.end", 
        "name": "SolrQuery::setFacetDateEnd", 
        "params": [
            {
                "descr": "See facet.date.end", 
                "name": "value"
            }, 
            {
                "descr": "Name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdateend", 
        "syntax": "public SolrQuery SolrQuery::setFacetDateEnd ( string $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateGap": {
        "descr": "Maps to facet.date.gap", 
        "name": "SolrQuery::setFacetDateGap", 
        "params": [
            {
                "descr": "See facet.date.gap", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdategap", 
        "syntax": "public SolrQuery SolrQuery::setFacetDateGap ( string $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateHardEnd": {
        "descr": "Maps to facet.date.hardend", 
        "name": "SolrQuery::setFacetDateHardEnd", 
        "params": [
            {
                "descr": "See facet.date.hardend", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdatehardend", 
        "syntax": "public SolrQuery SolrQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateStart": {
        "descr": "Maps to facet.date.start", 
        "name": "SolrQuery::setFacetDateStart", 
        "params": [
            {
                "descr": "See facet.date.start", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdatestart", 
        "syntax": "public SolrQuery SolrQuery::setFacetDateStart ( string $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetEnumCacheMinDefaultFrequency": {
        "descr": "Sets the minimum document frequency used for determining term count", 
        "name": "SolrQuery::setFacetEnumCacheMinDefaultFrequency", 
        "params": [
            {
                "descr": "The minimum frequency", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetenumcachemindefaultfrequency", 
        "syntax": "public SolrQuery SolrQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetLimit": {
        "descr": "Maps to facet.limit. Sets the maximum number of constraint counts that should be returned for the facet fields.", 
        "name": "SolrQuery::setFacetLimit", 
        "params": [
            {
                "descr": "The maximum number of constraint counts", 
                "name": "limit"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetlimit", 
        "syntax": "public SolrQuery SolrQuery::setFacetLimit ( int $limit [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMethod": {
        "descr": "Specifies the type of algorithm to use when faceting a field. This method accepts optional field override.", 
        "name": "SolrQuery::setFacetMethod", 
        "params": [
            {
                "descr": "The method to use.", 
                "name": "method"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmethod", 
        "syntax": "public SolrQuery SolrQuery::setFacetMethod ( string $method [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMinCount": {
        "descr": "Sets the minimum counts for facet fields that should be included in the response", 
        "name": "SolrQuery::setFacetMinCount", 
        "params": [
            {
                "descr": "The minimum count", 
                "name": "mincount"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmincount", 
        "syntax": "public SolrQuery SolrQuery::setFacetMinCount ( int $mincount [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMissing": {
        "descr": "Used to indicate that in addition to the Term-based constraints of a facet field, a count of all matching results which have no value for the field should be computed", 
        "name": "SolrQuery::setFacetMissing", 
        "params": [
            {
                "descr": "TRUE turns this feature on. FALSE disables it.", 
                "name": "flag"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmissing", 
        "syntax": "public SolrQuery SolrQuery::setFacetMissing ( bool $flag [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetOffset": {
        "descr": "Sets the offset into the list of constraints to allow for pagination.", 
        "name": "SolrQuery::setFacetOffset", 
        "params": [
            {
                "descr": "The offset", 
                "name": "offset"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetoffset", 
        "syntax": "public SolrQuery SolrQuery::setFacetOffset ( int $offset [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetPrefix": {
        "descr": "Specifies a string prefix with which to limits the terms on which to facet.", 
        "name": "SolrQuery::setFacetPrefix", 
        "params": [
            {
                "descr": "The prefix string", 
                "name": "prefix"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetprefix", 
        "syntax": "public SolrQuery SolrQuery::setFacetPrefix ( string $prefix [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetSort": {
        "descr": "Determines the ordering of the facet field constraints", 
        "name": "SolrQuery::setFacetSort", 
        "params": [
            {
                "descr": "Use SolrQuery::FACET_SORT_INDEX for sorting by index order or SolrQuery::FACET_SORT_COUNT for sorting by count.", 
                "name": "facetSort"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetsort", 
        "syntax": "public SolrQuery SolrQuery::setFacetSort ( int $facetSort [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlight": {
        "descr": "Setting it to TRUE enables highlighted snippets to be generated in the query response.", 
        "name": "SolrQuery::setHighlight", 
        "params": [
            {
                "descr": "Enable or disable highlighting", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlight", 
        "syntax": "public SolrQuery SolrQuery::setHighlight ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightAlternateField": {
        "descr": "If a snippet cannot be generated because there were no matching terms, one can specify a field to use as the backup or default summary", 
        "name": "SolrQuery::setHighlightAlternateField", 
        "params": [
            {
                "descr": "The name of the backup field", 
                "name": "field"
            }, 
            {
                "descr": "The name of the field we are overriding this setting for.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightalternatefield", 
        "syntax": "public SolrQuery SolrQuery::setHighlightAlternateField ( string $field [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFormatter": {
        "descr": "Specify a formatter for the highlight output.", 
        "name": "SolrQuery::setHighlightFormatter", 
        "params": [
            {
                "descr": "Currently the only legal value is \"simple\"", 
                "name": "formatter"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightformatter", 
        "syntax": "public SolrQuery SolrQuery::setHighlightFormatter ( string $formatter [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFragmenter": {
        "descr": "Specify a text snippet generator for highlighted text.", 
        "name": "SolrQuery::setHighlightFragmenter", 
        "params": [
            {
                "descr": "The standard fragmenter is gap. ", 
                "name": "fragmenter"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightfragmenter", 
        "syntax": "public SolrQuery SolrQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFragsize": {
        "descr": "Sets the size, in characters, of fragments to consider for highlighting. \"0\" indicates that the whole field value should be used (no fragmenting).", 
        "name": "SolrQuery::setHighlightFragsize", 
        "params": [
            {
                "descr": "The size, in characters, of fragments to consider for highlighting", 
                "name": "size"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightfragsize", 
        "syntax": "public SolrQuery SolrQuery::setHighlightFragsize ( int $size [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightHighlightMultiTerm": {
        "descr": "Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
        "name": "SolrQuery::setHighlightHighlightMultiTerm", 
        "params": [
            {
                "descr": "Whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlighthighlightmultiterm", 
        "syntax": "public SolrQuery SolrQuery::setHighlightHighlightMultiTerm ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMaxAlternateFieldLength": {
        "descr": "If SolrQuery::setHighlightAlternateField() was passed the value TRUE, this parameter specifies the maximum number of characters of the field to return", 
        "name": "SolrQuery::setHighlightMaxAlternateFieldLength", 
        "params": [
            {
                "descr": "The length of the field", 
                "name": "fieldLength"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightmaxalternatefieldlength", 
        "syntax": "public SolrQuery SolrQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMaxAnalyzedChars": {
        "descr": "Specifies the number of characters into a document to look for suitable snippets", 
        "name": "SolrQuery::setHighlightMaxAnalyzedChars", 
        "params": [
            {
                "descr": "The number of characters into a document to look for suitable snippets", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightmaxanalyzedchars", 
        "syntax": "public SolrQuery SolrQuery::setHighlightMaxAnalyzedChars ( int $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMergeContiguous": {
        "descr": "Whether or not to collapse contiguous fragments into a single fragment", 
        "name": "SolrQuery::setHighlightMergeContiguous", 
        "params": [
            {
                "descr": "Whether or not to collapse contiguous fragments into a single fragment", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightmergecontiguous", 
        "syntax": "public SolrQuery SolrQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexMaxAnalyzedChars": {
        "descr": "Specify the maximum number of characters to analyze from a field when using the regex fragmenter", 
        "name": "SolrQuery::setHighlightRegexMaxAnalyzedChars", 
        "params": [
            {
                "descr": "The maximum number of characters to analyze from a field when using the regex fragmenter", 
                "name": "maxAnalyzedChars"
            }
        ], 
        "path": "php/solrquery.sethighlightregexmaxanalyzedchars", 
        "syntax": "public SolrQuery SolrQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexPattern": {
        "descr": "Specifies the regular expression for fragmenting. This could be used to extract sentences", 
        "name": "SolrQuery::setHighlightRegexPattern", 
        "params": [
            {
                "descr": "The regular expression for fragmenting. ", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightregexpattern", 
        "syntax": "public SolrQuery SolrQuery::setHighlightRegexPattern ( string $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexSlop": {
        "descr": "The factor by which the regex fragmenter can stray from the ideal fragment size ( specfied by SolrQuery::setHighlightFragsize )to accomodate the regular expression", 
        "name": "SolrQuery::setHighlightRegexSlop", 
        "params": [
            {
                "descr": "The factor by which the regex fragmenter can stray from the ideal fragment size", 
                "name": "factor"
            }
        ], 
        "path": "php/solrquery.sethighlightregexslop", 
        "syntax": "public SolrQuery SolrQuery::setHighlightRegexSlop ( float $factor )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRequireFieldMatch": {
        "descr": "If TRUE, then a field will only be highlighted if the query matched in this particular field.", 
        "name": "SolrQuery::setHighlightRequireFieldMatch", 
        "params": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlightrequirefieldmatch", 
        "syntax": "public SolrQuery SolrQuery::setHighlightRequireFieldMatch ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSimplePost": {
        "descr": "Sets the text which appears before a highlighted term", 
        "name": "SolrQuery::setHighlightSimplePost", 
        "params": [
            {
                "descr": "Sets the text which appears after a highlighted term  The default is </em>", 
                "name": "simplePost"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsimplepost", 
        "syntax": "public SolrQuery SolrQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSimplePre": {
        "descr": "Sets the text which appears before a highlighted term", 
        "name": "SolrQuery::setHighlightSimplePre", 
        "params": [
            {
                "descr": "The text which appears before a highlighted term", 
                "name": "simplePre"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsimplepre", 
        "syntax": "public SolrQuery SolrQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSnippets": {
        "descr": "Sets the maximum number of highlighted snippets to generate per field", 
        "name": "SolrQuery::setHighlightSnippets", 
        "params": [
            {
                "descr": "The maximum number of highlighted snippets to generate per field", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsnippets", 
        "syntax": "public SolrQuery SolrQuery::setHighlightSnippets ( int $value [, string $field_override ] )", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightUsePhraseHighlighter": {
        "descr": "Sets whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document", 
        "name": "SolrQuery::setHighlightUsePhraseHighlighter", 
        "params": [
            {
                "descr": "Whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightusephrasehighlighter", 
        "syntax": "public SolrQuery SolrQuery::setHighlightUsePhraseHighlighter ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMlt": {
        "descr": "Enables or disables moreLikeThis", 
        "name": "SolrQuery::setMlt", 
        "params": [
            {
                "descr": "TRUE enables it and FALSE turns it off.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setmlt", 
        "syntax": "public SolrQuery SolrQuery::setMlt ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltBoost": {
        "descr": "Set if the query will be boosted by the interesting term relevance", 
        "name": "SolrQuery::setMltBoost", 
        "params": [
            {
                "descr": "Sets to TRUE or FALSE", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltboost", 
        "syntax": "public SolrQuery SolrQuery::setMltBoost ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltCount": {
        "descr": "Set the number of similar documents to return for each result", 
        "name": "SolrQuery::setMltCount", 
        "params": [
            {
                "descr": "The number of similar documents to return for each result", 
                "name": "count"
            }
        ], 
        "path": "php/solrquery.setmltcount", 
        "syntax": "public SolrQuery SolrQuery::setMltCount ( int $count )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxNumQueryTerms": {
        "descr": "Sets the maximum number of query terms that will be included in any generated query.", 
        "name": "SolrQuery::setMltMaxNumQueryTerms", 
        "params": [
            {
                "descr": "The maximum number of query terms that will be included in any generated query", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltmaxnumqueryterms", 
        "syntax": "public SolrQuery SolrQuery::setMltMaxNumQueryTerms ( int $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxNumTokens": {
        "descr": "Specifies the maximum number of tokens to parse in each example doc field that is not stored with TermVector support.", 
        "name": "SolrQuery::setMltMaxNumTokens", 
        "params": [
            {
                "descr": "The maximum number of tokens to parse", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltmaxnumtokens", 
        "syntax": "public SolrQuery SolrQuery::setMltMaxNumTokens ( int $value )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxWordLength": {
        "descr": "Sets the maximum word length above which words will be ignored.", 
        "name": "SolrQuery::setMltMaxWordLength", 
        "params": [
            {
                "descr": "The maximum word length above which words will be ignored", 
                "name": "maxWordLength"
            }
        ], 
        "path": "php/solrquery.setmltmaxwordlength", 
        "syntax": "public SolrQuery SolrQuery::setMltMaxWordLength ( int $maxWordLength )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinDocFrequency": {
        "descr": "The frequency at which words will be ignored which do not occur in at least this many docs.", 
        "name": "SolrQuery::setMltMinDocFrequency", 
        "params": [
            {
                "descr": "Sets the frequency at which words will be ignored which do not occur in at least this many docs.", 
                "name": "minDocFrequency"
            }
        ], 
        "path": "php/solrquery.setmltmindocfrequency", 
        "syntax": "public SolrQuery SolrQuery::setMltMinDocFrequency ( int $minDocFrequency )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinTermFrequency": {
        "descr": "Sets the frequency below which terms will be ignored in the source docs", 
        "name": "SolrQuery::setMltMinTermFrequency", 
        "params": [
            {
                "descr": "The frequency below which terms will be ignored in the source docs", 
                "name": "minTermFrequency"
            }
        ], 
        "path": "php/solrquery.setmltmintermfrequency", 
        "syntax": "public SolrQuery SolrQuery::setMltMinTermFrequency ( int $minTermFrequency )", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinWordLength": {
        "descr": "Sets the minimum word length below which words will be ignored.", 
        "name": "SolrQuery::setMltMinWordLength", 
        "params": [
            {
                "descr": "The minimum word length below which words will be ignored", 
                "name": "minWordLength"
            }
        ], 
        "path": "php/solrquery.setmltminwordlength", 
        "syntax": "public SolrQuery SolrQuery::setMltMinWordLength ( int $minWordLength )", 
        "type": "Solr"
    }, 
    "SolrQuery::setOmitHeader": {
        "descr": "Exclude the header from the returned results.", 
        "name": "SolrQuery::setOmitHeader", 
        "params": [
            {
                "descr": "TRUE excludes the header from the result.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setomitheader", 
        "syntax": "public SolrQuery SolrQuery::setOmitHeader ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setQuery": {
        "descr": "Sets the search query.", 
        "name": "SolrQuery::setQuery", 
        "params": [
            {
                "descr": "The search query", 
                "name": "query"
            }
        ], 
        "path": "php/solrquery.setquery", 
        "syntax": "public SolrQuery SolrQuery::setQuery ( string $query )", 
        "type": "Solr"
    }, 
    "SolrQuery::setRows": {
        "descr": "Specifies the maximum number of rows to return in the result", 
        "name": "SolrQuery::setRows", 
        "params": [
            {
                "descr": "The maximum number of rows to return", 
                "name": "rows"
            }
        ], 
        "path": "php/solrquery.setrows", 
        "syntax": "public SolrQuery SolrQuery::setRows ( int $rows )", 
        "type": "Solr"
    }, 
    "SolrQuery::setShowDebugInfo": {
        "descr": "Whether to show debug info", 
        "name": "SolrQuery::setShowDebugInfo", 
        "params": [
            {
                "descr": "Whether to show debug info. TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setshowdebuginfo", 
        "syntax": "public SolrQuery SolrQuery::setShowDebugInfo ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setStart": {
        "descr": "Specifies the number of rows to skip. Useful in pagination of results.", 
        "name": "SolrQuery::setStart", 
        "params": [
            {
                "descr": "The number of rows to skip.", 
                "name": "start"
            }
        ], 
        "path": "php/solrquery.setstart", 
        "syntax": "public SolrQuery SolrQuery::setStart ( int $start )", 
        "type": "Solr"
    }, 
    "SolrQuery::setStats": {
        "descr": "Enables or disables the Stats component.", 
        "name": "SolrQuery::setStats", 
        "params": [
            {
                "descr": "TRUE turns on the stats component and FALSE disables it.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setstats", 
        "syntax": "public SolrQuery SolrQuery::setStats ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTerms": {
        "descr": "Enables or disables the TermsComponent", 
        "name": "SolrQuery::setTerms", 
        "params": [
            {
                "descr": "TRUE enables it. FALSE turns it off", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setterms", 
        "syntax": "public SolrQuery SolrQuery::setTerms ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsField": {
        "descr": "Sets the name of the field to get the terms from", 
        "name": "SolrQuery::setTermsField", 
        "params": [
            {
                "descr": "The field name", 
                "name": "fieldname"
            }
        ], 
        "path": "php/solrquery.settermsfield", 
        "syntax": "public SolrQuery SolrQuery::setTermsField ( string $fieldname )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsIncludeLowerBound": {
        "descr": "Include the lower bound term in the result set.", 
        "name": "SolrQuery::setTermsIncludeLowerBound", 
        "params": [
            {
                "descr": "Include the lower bound term in the result set", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.settermsincludelowerbound", 
        "syntax": "public SolrQuery SolrQuery::setTermsIncludeLowerBound ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsIncludeUpperBound": {
        "descr": "Include the upper bound term in the result set.", 
        "name": "SolrQuery::setTermsIncludeUpperBound", 
        "params": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.settermsincludeupperbound", 
        "syntax": "public SolrQuery SolrQuery::setTermsIncludeUpperBound ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsLimit": {
        "descr": "Sets the maximum number of terms to return", 
        "name": "SolrQuery::setTermsLimit", 
        "params": [
            {
                "descr": "The maximum number of terms to return. ", 
                "name": "limit"
            }
        ], 
        "path": "php/solrquery.settermslimit", 
        "syntax": "public SolrQuery SolrQuery::setTermsLimit ( int $limit )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsLowerBound": {
        "descr": "Specifies the Term to start from", 
        "name": "SolrQuery::setTermsLowerBound", 
        "params": [
            {
                "descr": "The lower bound Term", 
                "name": "lowerBound"
            }
        ], 
        "path": "php/solrquery.settermslowerbound", 
        "syntax": "public SolrQuery SolrQuery::setTermsLowerBound ( string $lowerBound )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsMaxCount": {
        "descr": "Sets the maximum document frequency.", 
        "name": "SolrQuery::setTermsMaxCount", 
        "params": [
            {
                "descr": "The maximum document frequency.", 
                "name": "frequency"
            }
        ], 
        "path": "php/solrquery.settermsmaxcount", 
        "syntax": "public SolrQuery SolrQuery::setTermsMaxCount ( int $frequency )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsMinCount": {
        "descr": "Sets the minimum doc frequency to return in order to be included", 
        "name": "SolrQuery::setTermsMinCount", 
        "params": [
            {
                "descr": "The minimum frequency", 
                "name": "frequency"
            }
        ], 
        "path": "php/solrquery.settermsmincount", 
        "syntax": "public SolrQuery SolrQuery::setTermsMinCount ( int $frequency )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsPrefix": {
        "descr": "Restrict matches to terms that start with the prefix", 
        "name": "SolrQuery::setTermsPrefix", 
        "params": [
            {
                "descr": "Restrict matches to terms that start with the prefix", 
                "name": "prefix"
            }
        ], 
        "path": "php/solrquery.settermsprefix", 
        "syntax": "public SolrQuery SolrQuery::setTermsPrefix ( string $prefix )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsReturnRaw": {
        "descr": "If true, return the raw characters of the indexed term, regardless of if it is human readable", 
        "name": "SolrQuery::setTermsReturnRaw", 
        "params": [
            {
                "descr": "TRUE or FALSE", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.settermsreturnraw", 
        "syntax": "public SolrQuery SolrQuery::setTermsReturnRaw ( bool $flag )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsSort": {
        "descr": "If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the terms in index order", 
        "name": "SolrQuery::setTermsSort", 
        "params": [
            {
                "descr": "SolrQuery::TERMS_SORT_INDEX or SolrQuery::TERMS_SORT_COUNT", 
                "name": "sortType"
            }
        ], 
        "path": "php/solrquery.settermssort", 
        "syntax": "public SolrQuery SolrQuery::setTermsSort ( int $sortType )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsUpperBound": {
        "descr": "Sets the term to stop at", 
        "name": "SolrQuery::setTermsUpperBound", 
        "params": [
            {
                "descr": "The term to stop at", 
                "name": "upperBound"
            }
        ], 
        "path": "php/solrquery.settermsupperbound", 
        "syntax": "public SolrQuery SolrQuery::setTermsUpperBound ( string $upperBound )", 
        "type": "Solr"
    }, 
    "SolrQuery::setTimeAllowed": {
        "descr": "The time allowed for a search to finish. This value only applies to the search and not to requests in general. Time is in milliseconds. Values less than or equal to zero implies no time restriction. Partial results may be returned, if there are any.", 
        "name": "SolrQuery::setTimeAllowed", 
        "params": [
            {
                "descr": "The time allowed for a search to finish.", 
                "name": "timeAllowed"
            }
        ], 
        "path": "php/solrquery.settimeallowed", 
        "syntax": "public SolrQuery SolrQuery::setTimeAllowed ( int $timeAllowed )", 
        "type": "Solr"
    }, 
    "SolrQueryResponse": {
        "descr": "", 
        "name": "SolrQueryResponse", 
        "params": [], 
        "path": "php/class.solrqueryresponse", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrQueryResponse::__construct": {
        "descr": "Constructor", 
        "name": "SolrQueryResponse::__construct", 
        "params": [], 
        "path": "php/solrqueryresponse.construct", 
        "syntax": "public SolrQueryResponse::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrQueryResponse::__destruct": {
        "descr": "Destructor.", 
        "name": "SolrQueryResponse::__destruct", 
        "params": [], 
        "path": "php/solrqueryresponse.destruct", 
        "syntax": "public void SolrQueryResponse::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse": {
        "descr": "", 
        "name": "SolrResponse", 
        "params": [], 
        "path": "php/class.solrresponse", 
        "syntax": "public string getDigestedResponse ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getDigestedResponse": {
        "descr": "Returns the XML response as serialized PHP data", 
        "name": "SolrResponse::getDigestedResponse", 
        "params": [], 
        "path": "php/solrresponse.getdigestedresponse", 
        "syntax": "public string SolrResponse::getDigestedResponse ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getHttpStatus": {
        "descr": "Returns the HTTP status of the response.", 
        "name": "SolrResponse::getHttpStatus", 
        "params": [], 
        "path": "php/solrresponse.gethttpstatus", 
        "syntax": "public int SolrResponse::getHttpStatus ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getHttpStatusMessage": {
        "descr": "Returns more details on the HTTP status.", 
        "name": "SolrResponse::getHttpStatusMessage", 
        "params": [], 
        "path": "php/solrresponse.gethttpstatusmessage", 
        "syntax": "public string SolrResponse::getHttpStatusMessage ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawRequest": {
        "descr": "Returns the raw request sent to the Solr server.", 
        "name": "SolrResponse::getRawRequest", 
        "params": [], 
        "path": "php/solrresponse.getrawrequest", 
        "syntax": "public string SolrResponse::getRawRequest ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawRequestHeaders": {
        "descr": "Returns the raw request headers sent to the Solr server.", 
        "name": "SolrResponse::getRawRequestHeaders", 
        "params": [], 
        "path": "php/solrresponse.getrawrequestheaders", 
        "syntax": "public string SolrResponse::getRawRequestHeaders ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawResponse": {
        "descr": "Returns the raw response from the server.", 
        "name": "SolrResponse::getRawResponse", 
        "params": [], 
        "path": "php/solrresponse.getrawresponse", 
        "syntax": "public string SolrResponse::getRawResponse ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawResponseHeaders": {
        "descr": "Returns the raw response headers from the server.", 
        "name": "SolrResponse::getRawResponseHeaders", 
        "params": [], 
        "path": "php/solrresponse.getrawresponseheaders", 
        "syntax": "public string SolrResponse::getRawResponseHeaders ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getRequestUrl": {
        "descr": "Returns the full URL the request was sent to.", 
        "name": "SolrResponse::getRequestUrl", 
        "params": [], 
        "path": "php/solrresponse.getrequesturl", 
        "syntax": "public string SolrResponse::getRequestUrl ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::getResponse": {
        "descr": "Returns a SolrObject representing the XML response from the server.", 
        "name": "SolrResponse::getResponse", 
        "params": [], 
        "path": "php/solrresponse.getresponse", 
        "syntax": "public SolrObject SolrResponse::getResponse ( void )", 
        "type": "Solr"
    }, 
    "SolrResponse::setParseMode": {
        "descr": "Sets the parse mode.", 
        "name": "SolrResponse::setParseMode", 
        "params": [
            {
                "descr": "SolrResponse::PARSE_SOLR_DOC parses documents in SolrDocument instances. ", 
                "name": "parser_mode"
            }
        ], 
        "path": "php/solrresponse.setparsemode", 
        "syntax": "public bool SolrResponse::setParseMode ([ int $parser_mode = 0 ] )", 
        "type": "Solr"
    }, 
    "SolrResponse::success": {
        "descr": "Used to check if the request to the server was successful.", 
        "name": "SolrResponse::success", 
        "params": [], 
        "path": "php/solrresponse.success", 
        "syntax": "public bool SolrResponse::success ( void )", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse": {
        "descr": "", 
        "name": "SolrUpdateResponse", 
        "params": [], 
        "path": "php/class.solrupdateresponse", 
        "syntax": "public __construct ( void )", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse::__construct": {
        "descr": "Constructor", 
        "name": "SolrUpdateResponse::__construct", 
        "params": [], 
        "path": "php/solrupdateresponse.construct", 
        "syntax": "public SolrUpdateResponse::__construct ( void )", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse::__destruct": {
        "descr": "Destructor", 
        "name": "SolrUpdateResponse::__destruct", 
        "params": [], 
        "path": "php/solrupdateresponse.destruct", 
        "syntax": "public void SolrUpdateResponse::__destruct ( void )", 
        "type": "Solr"
    }, 
    "SolrUtils": {
        "descr": "", 
        "name": "SolrUtils", 
        "params": [], 
        "path": "php/class.solrutils", 
        "syntax": "public static SolrObject digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )", 
        "type": "Solr"
    }, 
    "SolrUtils::digestXmlResponse": {
        "descr": "This method parses an response XML string from the Apache Solr server into a SolrObject. It throws a SolrException if there was an error.", 
        "name": "SolrUtils::digestXmlResponse", 
        "params": [
            {
                "descr": "The XML response string from the Solr server.", 
                "name": "xmlresponse"
            }, 
            {
                "descr": "Use SolrResponse::PARSE_SOLR_OBJ or SolrResponse::PARSE_SOLR_DOC", 
                "name": "parse_mode"
            }
        ], 
        "path": "php/solrutils.digestxmlresponse", 
        "syntax": "public static SolrObject SolrUtils::digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )", 
        "type": "Solr"
    }, 
    "SolrUtils::escapeQueryChars": {
        "descr": "Lucene supports escaping special characters that are part of the query syntax.", 
        "name": "SolrUtils::escapeQueryChars", 
        "params": [
            {
                "descr": "This is the query string to be escaped.", 
                "name": "str"
            }
        ], 
        "path": "php/solrutils.escapequerychars", 
        "syntax": "public static string SolrUtils::escapeQueryChars ( string $str )", 
        "type": "Solr"
    }, 
    "SolrUtils::getSolrVersion": {
        "descr": "Returns the current Solr version.", 
        "name": "SolrUtils::getSolrVersion", 
        "params": [], 
        "path": "php/solrutils.getsolrversion", 
        "syntax": "public static string SolrUtils::getSolrVersion ( void )", 
        "type": "Solr"
    }, 
    "SolrUtils::queryPhrase": {
        "descr": "Prepares a phrase from an unescaped lucene string.", 
        "name": "SolrUtils::queryPhrase", 
        "params": [
            {
                "descr": "The lucene phrase.", 
                "name": "str"
            }
        ], 
        "path": "php/solrutils.queryphrase", 
        "syntax": "public static string SolrUtils::queryPhrase ( string $str )", 
        "type": "Solr"
    }, 
    "SphinxClient": {
        "descr": "", 
        "name": "SphinxClient", 
        "params": [], 
        "path": "php/class.sphinxclient", 
        "syntax": "public int addQuery ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::__construct": {
        "descr": "Creates a new SphinxClient object.", 
        "name": "SphinxClient::__construct", 
        "params": [], 
        "path": "php/sphinxclient.construct", 
        "syntax": "public SphinxClient::__construct ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::addQuery": {
        "descr": "Adds query with the current settings to multi-query batch. This method doesn't affect current settings (sorting, filtering, grouping etc.) in any way.", 
        "name": "SphinxClient::addQuery", 
        "params": [
            {
                "descr": "Query string.", 
                "name": "query"
            }, 
            {
                "descr": "An index name (or names).", 
                "name": "index"
            }
        ], 
        "path": "php/sphinxclient.addquery", 
        "syntax": "public int SphinxClient::addQuery ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::buildExcerpts": {
        "descr": "Connects to searchd, requests it to generate excerpts (snippets) from the given documents, and returns the results.", 
        "name": "SphinxClient::buildExcerpts", 
        "params": [
            {
                "descr": "Array of strings with documents' contents.", 
                "name": "docs"
            }, 
            {
                "descr": "Index name.", 
                "name": "index"
            }, 
            {
                "descr": "Keywords to highlight.", 
                "name": "words"
            }, 
            {
                "descr": "Associative array of additional highlighting options (see below).", 
                "name": "opts"
            }
        ], 
        "path": "php/sphinxclient.buildexcerpts", 
        "syntax": "public array SphinxClient::buildExcerpts ( array $docs , string $index , string $words [, array $opts ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::buildKeywords": {
        "descr": "Extracts keywords from query using tokenizer settings for the given index, optionally with per-keyword occurrence statistics.", 
        "name": "SphinxClient::buildKeywords", 
        "params": [
            {
                "descr": "A query to extract keywords from.", 
                "name": "query"
            }, 
            {
                "descr": "An index to get tokenizing settings and keyword occurrence statistics from.", 
                "name": "index"
            }, 
            {
                "descr": "A boolean flag to enable/disable keyword statistics generation.", 
                "name": "hits"
            }
        ], 
        "path": "php/sphinxclient.buildkeywords", 
        "syntax": "public array SphinxClient::buildKeywords ( string $query , string $index , bool $hits )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::close": {
        "descr": "Closes previously opened persistent connection.", 
        "name": "SphinxClient::close", 
        "params": [], 
        "path": "php/sphinxclient.close", 
        "syntax": "public bool SphinxClient::close ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::escapeString": {
        "descr": "Escapes characters that are treated as special operators by the query language parser.", 
        "name": "SphinxClient::escapeString", 
        "params": [
            {
                "descr": "String to escape.", 
                "name": "string"
            }
        ], 
        "path": "php/sphinxclient.escapestring", 
        "syntax": "public string SphinxClient::escapeString ( string $string )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::getLastError": {
        "descr": "Returns string with the last error message. If there were no errors during the previous API call, empty string is returned. This method doesn't reset the error message, so you can safely call it several times.", 
        "name": "SphinxClient::getLastError", 
        "params": [], 
        "path": "php/sphinxclient.getlasterror", 
        "syntax": "public string SphinxClient::getLastError ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::getLastWarning": {
        "descr": "Returns last warning message. If there were no warnings during the previous API call, empty string is returned. This method doesn't reset the warning, so you can safely call it several times.", 
        "name": "SphinxClient::getLastWarning", 
        "params": [], 
        "path": "php/sphinxclient.getlastwarning", 
        "syntax": "public string SphinxClient::getLastWarning ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::open": {
        "descr": "Opens persistent connection to the server.", 
        "name": "SphinxClient::open", 
        "params": [], 
        "path": "php/sphinxclient.open", 
        "syntax": "public bool SphinxClient::open ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::query": {
        "descr": "Connects to searchd server, runs the given search query with the current settings, obtains and returns the result set.", 
        "name": "SphinxClient::query", 
        "params": [
            {
                "descr": "Query string.", 
                "name": "query"
            }, 
            {
                "descr": "An index name (or names).", 
                "name": "index"
            }
        ], 
        "path": "php/sphinxclient.query", 
        "syntax": "public array SphinxClient::query ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::resetFilters": {
        "descr": "Clears all currently set filters. This call is normally required when using multi-queries. You might want to set different filters for different queries in the batch. To do that, you should call SphinxClient::resetFilters() and add new filters using the respective calls.", 
        "name": "SphinxClient::resetFilters", 
        "params": [], 
        "path": "php/sphinxclient.resetfilters", 
        "syntax": "public void SphinxClient::resetFilters ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::resetGroupBy": {
        "descr": "Clears all currently group-by settings, and disables group-by. This call is normally required only when using multi-queries.", 
        "name": "SphinxClient::resetGroupBy", 
        "params": [], 
        "path": "php/sphinxclient.resetgroupby", 
        "syntax": "public void SphinxClient::resetGroupBy ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::runQueries": {
        "descr": "Connects to searchd, runs a batch of all queries added using SphinxClient::addQuery, obtains and returns the result sets.", 
        "name": "SphinxClient::runQueries", 
        "params": [], 
        "path": "php/sphinxclient.runqueries", 
        "syntax": "public array SphinxClient::runQueries ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setArrayResult": {
        "descr": "Controls the format of search results set arrays (whether matches should be returned as an array or a hash).", 
        "name": "SphinxClient::setArrayResult", 
        "params": [
            {
                "descr": "If array_result is FALSE, matches are returned as a hash with document IDs as keys, and other information (weight, attributes) as values. ", 
                "name": "array_result"
            }
        ], 
        "path": "php/sphinxclient.setarrayresult", 
        "syntax": "public bool SphinxClient::setArrayResult ( bool $array_result = false )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setConnectTimeout": {
        "descr": "Sets connection timeout (in seconds) for searchd connection.", 
        "name": "SphinxClient::setConnectTimeout", 
        "params": [
            {
                "descr": "Timeout in seconds.", 
                "name": "timeout"
            }
        ], 
        "path": "php/sphinxclient.setconnecttimeout", 
        "syntax": "public bool SphinxClient::setConnectTimeout ( float $timeout )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFieldWeights": {
        "descr": "Binds per-field weights by name.", 
        "name": "SphinxClient::setFieldWeights", 
        "params": [
            {
                "descr": "Associative array of field names and field weights.", 
                "name": "weights"
            }
        ], 
        "path": "php/sphinxclient.setfieldweights", 
        "syntax": "public bool SphinxClient::setFieldWeights ( array $weights )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilter": {
        "descr": "Adds new integer values set filter to the existing list of filters.", 
        "name": "SphinxClient::setFilter", 
        "params": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Plain array of integer values.", 
                "name": "values"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilter", 
        "syntax": "public bool SphinxClient::setFilter ( string $attribute , array $values [, bool $exclude = false ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilterFloatRange": {
        "descr": "Adds new float range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).", 
        "name": "SphinxClient::setFilterFloatRange", 
        "params": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Minimum value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum value.", 
                "name": "max"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilterfloatrange", 
        "syntax": "public bool SphinxClient::setFilterFloatRange ( string $attribute , float $min , float $max [, bool $exclude = false ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilterRange": {
        "descr": "Adds new integer range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).", 
        "name": "SphinxClient::setFilterRange", 
        "params": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Minimum value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum value.", 
                "name": "max"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilterrange", 
        "syntax": "public bool SphinxClient::setFilterRange ( string $attribute , int $min , int $max [, bool $exclude = false ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGeoAnchor": {
        "descr": "Sets anchor point for a geosphere distance (geodistance) calculations and enables them.", 
        "name": "SphinxClient::setGeoAnchor", 
        "params": [
            {
                "descr": "Name of a latitude attribute.", 
                "name": "attrlat"
            }, 
            {
                "descr": "Name of a longitude attribute.", 
                "name": "attrlong"
            }, 
            {
                "descr": "Anchor latitude in radians.", 
                "name": "latitude"
            }, 
            {
                "descr": "Anchor longitude in radians.", 
                "name": "longitude"
            }
        ], 
        "path": "php/sphinxclient.setgeoanchor", 
        "syntax": "public bool SphinxClient::setGeoAnchor ( string $attrlat , string $attrlong , float $latitude , float $longitude )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGroupBy": {
        "descr": "Sets grouping attribute, function, and group sorting mode, and enables grouping.", 
        "name": "SphinxClient::setGroupBy", 
        "params": [
            {
                "descr": "A string containing group-by attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Constant, which sets a function applied to the attribute value in order to compute group-by key.", 
                "name": "func"
            }, 
            {
                "descr": "An optional clause controlling how the groups are sorted.", 
                "name": "groupsort"
            }
        ], 
        "path": "php/sphinxclient.setgroupby", 
        "syntax": "public bool SphinxClient::setGroupBy ( string $attribute , int $func [, string $groupsort = \"@group desc\" ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGroupDistinct": {
        "descr": "Sets attribute name for per-group distinct values count calculations. Only available for grouping queries. For each group, all values of attribute will be stored, then the amount of distinct values will be calculated and returned to the client. This feature is similar to COUNT(DISTINCT) clause in SQL.", 
        "name": "SphinxClient::setGroupDistinct", 
        "params": [
            {
                "descr": "A string containing group-by attribute name.", 
                "name": "attribute"
            }
        ], 
        "path": "php/sphinxclient.setgroupdistinct", 
        "syntax": "public bool SphinxClient::setGroupDistinct ( string $attribute )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setIDRange": {
        "descr": "Sets an accepted range of document IDs. Default range is from 0 to 0, i.e. no limit. Only those records that have document ID between min and max (including IDs exactly equal to min or max) will be matched.", 
        "name": "SphinxClient::setIDRange", 
        "params": [
            {
                "descr": "Minimum ID value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum ID value.", 
                "name": "max"
            }
        ], 
        "path": "php/sphinxclient.setidrange", 
        "syntax": "public bool SphinxClient::setIDRange ( int $min , int $max )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setIndexWeights": {
        "descr": "Sets per-index weights and enables weighted summing of match weights across different indexes.", 
        "name": "SphinxClient::setIndexWeights", 
        "params": [
            {
                "descr": "An associative array mapping string index names to integer weights. ", 
                "name": "weights"
            }
        ], 
        "path": "php/sphinxclient.setindexweights", 
        "syntax": "public bool SphinxClient::setIndexWeights ( array $weights )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setLimits": {
        "descr": "Sets offset into server-side result set and amount of matches to return to client starting from that offset (limit). Can additionally control maximum server-side result set size for current query (max_matches) and the threshold amount of matches to stop searching at (cutoff).", 
        "name": "SphinxClient::setLimits", 
        "params": [
            {
                "descr": "Result set offset.", 
                "name": "offset"
            }, 
            {
                "descr": "Amount of matches to return.", 
                "name": "limit"
            }, 
            {
                "descr": "Controls how much matches searchd will keep in RAM while searching.", 
                "name": "max_matches"
            }, 
            {
                "descr": "Used for advanced performance control. ", 
                "name": "cutoff"
            }
        ], 
        "path": "php/sphinxclient.setlimits", 
        "syntax": "public bool SphinxClient::setLimits ( int $offset , int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setMatchMode": {
        "descr": "Sets full-text query matching mode. mode is one of the constants listed below.", 
        "name": "SphinxClient::setMatchMode", 
        "params": [
            {
                "descr": "Matching mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/sphinxclient.setmatchmode", 
        "syntax": "public bool SphinxClient::setMatchMode ( int $mode )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setMaxQueryTime": {
        "descr": "Sets maximum search query time.", 
        "name": "SphinxClient::setMaxQueryTime", 
        "params": [
            {
                "descr": "Maximum query time, in milliseconds. ", 
                "name": "qtime"
            }
        ], 
        "path": "php/sphinxclient.setmaxquerytime", 
        "syntax": "public bool SphinxClient::setMaxQueryTime ( int $qtime )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setOverride": {
        "descr": "Sets temporary (per-query) per-document attribute value overrides. Override feature lets you \"temporary\" update attribute values for some documents within a single query, leaving all other queries unaffected. This might be useful for personalized data", 
        "name": "SphinxClient::setOverride", 
        "params": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "An attribute type. Only supports scalar attributes.", 
                "name": "type"
            }, 
            {
                "descr": "Array of attribute values that maps document IDs to overridden attribute values.", 
                "name": "values"
            }
        ], 
        "path": "php/sphinxclient.setoverride", 
        "syntax": "public bool SphinxClient::setOverride ( string $attribute , int $type , array $values )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setRankingMode": {
        "descr": "Sets ranking mode. Only available in SPH_MATCH_EXTENDED2 matching mode.", 
        "name": "SphinxClient::setRankingMode", 
        "params": [
            {
                "descr": "Ranking mode.", 
                "name": "ranker"
            }
        ], 
        "path": "php/sphinxclient.setrankingmode", 
        "syntax": "public bool SphinxClient::setRankingMode ( int $ranker )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setRetries": {
        "descr": "Sets distributed retry count and delay.", 
        "name": "SphinxClient::setRetries", 
        "params": [
            {
                "descr": "Number of retries.", 
                "name": "count"
            }, 
            {
                "descr": "Delay between retries, in milliseconds.", 
                "name": "delay"
            }
        ], 
        "path": "php/sphinxclient.setretries", 
        "syntax": "public bool SphinxClient::setRetries ( int $count [, int $delay = 0 ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setSelect": {
        "descr": "Sets the select clause, listing specific attributes to fetch, and expressions to compute and fetch.", 
        "name": "SphinxClient::setSelect", 
        "params": [
            {
                "descr": "SQL-like clause.", 
                "name": "clause"
            }
        ], 
        "path": "php/sphinxclient.setselect", 
        "syntax": "public bool SphinxClient::setSelect ( string $clause )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setServer": {
        "descr": "Sets searchd host name and TCP port. All subsequent requests will use the new host and port settings. Default host and port are 'localhost' and 3312, respectively.", 
        "name": "SphinxClient::setServer", 
        "params": [
            {
                "descr": "IP or hostname.", 
                "name": "server"
            }, 
            {
                "descr": "Port number.", 
                "name": "port"
            }
        ], 
        "path": "php/sphinxclient.setserver", 
        "syntax": "public bool SphinxClient::setServer ( string $server , int $port )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setSortMode": {
        "descr": "Sets matches sorting mode. See available modes below.", 
        "name": "SphinxClient::setSortMode", 
        "params": [
            {
                "descr": "Sorting mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/sphinxclient.setsortmode", 
        "syntax": "public bool SphinxClient::setSortMode ( int $mode [, string $sortby ] )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::status": {
        "descr": "Queries searchd status, and returns an array of status variable name and value pairs.", 
        "name": "SphinxClient::status", 
        "params": [], 
        "path": "php/sphinxclient.status", 
        "syntax": "public array SphinxClient::status ( void )", 
        "type": "Sphinx"
    }, 
    "SphinxClient::updateAttributes": {
        "descr": "Instantly updates given attribute values in given documents.", 
        "name": "SphinxClient::updateAttributes", 
        "params": [
            {
                "descr": "Name of the index (or indexes) to be updated.", 
                "name": "index"
            }, 
            {
                "descr": "Array of attribute names, listing attributes that are updated.", 
                "name": "attributes"
            }, 
            {
                "descr": "Associative array containing document IDs as keys and array of attribute values as values.", 
                "name": "values"
            }
        ], 
        "path": "php/sphinxclient.updateattributes", 
        "syntax": "public int SphinxClient::updateAttributes ( string $index , array $attributes , array $values [, bool $mva = false ] )", 
        "type": "Sphinx"
    }, 
    "SplBool": {
        "descr": "", 
        "name": "SplBool", 
        "params": [], 
        "path": "php/class.splbool", 
        "syntax": "public array SplEnum::getConstList ([ bool $include_default = false ] )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList": {
        "descr": "", 
        "name": "SplDoublyLinkedList", 
        "params": [], 
        "path": "php/class.spldoublylinkedlist", 
        "syntax": "public mixed bottom ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::bottom": {
        "descr": "", 
        "name": "SplDoublyLinkedList::bottom", 
        "params": [], 
        "path": "php/spldoublylinkedlist.bottom", 
        "syntax": "public mixed SplDoublyLinkedList::bottom ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::count": {
        "descr": "", 
        "name": "SplDoublyLinkedList::count", 
        "params": [], 
        "path": "php/spldoublylinkedlist.count", 
        "syntax": "public int SplDoublyLinkedList::count ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::current": {
        "descr": "Get the current doubly linked list node.", 
        "name": "SplDoublyLinkedList::current", 
        "params": [], 
        "path": "php/spldoublylinkedlist.current", 
        "syntax": "public mixed SplDoublyLinkedList::current ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::getIteratorMode": {
        "descr": "", 
        "name": "SplDoublyLinkedList::getIteratorMode", 
        "params": [], 
        "path": "php/spldoublylinkedlist.getiteratormode", 
        "syntax": "public int SplDoublyLinkedList::getIteratorMode ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::isEmpty": {
        "descr": "", 
        "name": "SplDoublyLinkedList::isEmpty", 
        "params": [], 
        "path": "php/spldoublylinkedlist.isempty", 
        "syntax": "public bool SplDoublyLinkedList::isEmpty ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::key": {
        "descr": "This function returns the current node index", 
        "name": "SplDoublyLinkedList::key", 
        "params": [], 
        "path": "php/spldoublylinkedlist.key", 
        "syntax": "public mixed SplDoublyLinkedList::key ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::next": {
        "descr": "Move the iterator to the next node.", 
        "name": "SplDoublyLinkedList::next", 
        "params": [], 
        "path": "php/spldoublylinkedlist.next", 
        "syntax": "public void SplDoublyLinkedList::next ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetExists": {
        "descr": "", 
        "name": "SplDoublyLinkedList::offsetExists", 
        "params": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetexists", 
        "syntax": "public bool SplDoublyLinkedList::offsetExists ( mixed $index )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetGet": {
        "descr": "", 
        "name": "SplDoublyLinkedList::offsetGet", 
        "params": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetget", 
        "syntax": "public mixed SplDoublyLinkedList::offsetGet ( mixed $index )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetSet": {
        "descr": "Sets the value at the specified index to newval.", 
        "name": "SplDoublyLinkedList::offsetSet", 
        "params": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetset", 
        "syntax": "public void SplDoublyLinkedList::offsetSet ( mixed $index , mixed $newval )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetUnset": {
        "descr": "Unsets the value at the specified index.", 
        "name": "SplDoublyLinkedList::offsetUnset", 
        "params": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetunset", 
        "syntax": "public void SplDoublyLinkedList::offsetUnset ( mixed $index )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::pop": {
        "descr": "", 
        "name": "SplDoublyLinkedList::pop", 
        "params": [], 
        "path": "php/spldoublylinkedlist.pop", 
        "syntax": "public mixed SplDoublyLinkedList::pop ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::prev": {
        "descr": "Move the iterator to the previous node.", 
        "name": "SplDoublyLinkedList::prev", 
        "params": [], 
        "path": "php/spldoublylinkedlist.prev", 
        "syntax": "public void SplDoublyLinkedList::prev ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::push": {
        "descr": "Pushes value at the end of the doubly linked list.", 
        "name": "SplDoublyLinkedList::push", 
        "params": [
            {
                "descr": "The value to push.", 
                "name": "value"
            }
        ], 
        "path": "php/spldoublylinkedlist.push", 
        "syntax": "public void SplDoublyLinkedList::push ( mixed $value )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::rewind": {
        "descr": "This rewinds the iterator to the beginning.", 
        "name": "SplDoublyLinkedList::rewind", 
        "params": [], 
        "path": "php/spldoublylinkedlist.rewind", 
        "syntax": "public void SplDoublyLinkedList::rewind ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::serialize": {
        "descr": "Serializes the storage.", 
        "name": "SplDoublyLinkedList::serialize", 
        "params": [], 
        "path": "php/spldoublylinkedlist.serialize", 
        "syntax": "public string SplDoublyLinkedList::serialize ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::setIteratorMode": {
        "descr": "", 
        "name": "SplDoublyLinkedList::setIteratorMode", 
        "params": [
            {
                "descr": "There are two orthogonal sets of modes that can be set:   The direction of the iteration (either one or the other): SplDoublyLinkedList::IT_MODE_LIFO (Stack style) SplDoublyLinkedList::IT_MODE_FIFO (Queue style)   The behavior of the iterator (either one or the other): SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator) SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator)   The default mode is: SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP", 
                "name": "mode"
            }
        ], 
        "path": "php/spldoublylinkedlist.setiteratormode", 
        "syntax": "public void SplDoublyLinkedList::setIteratorMode ( int $mode )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::shift": {
        "descr": "", 
        "name": "SplDoublyLinkedList::shift", 
        "params": [], 
        "path": "php/spldoublylinkedlist.shift", 
        "syntax": "public mixed SplDoublyLinkedList::shift ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::top": {
        "descr": "", 
        "name": "SplDoublyLinkedList::top", 
        "params": [], 
        "path": "php/spldoublylinkedlist.top", 
        "syntax": "public mixed SplDoublyLinkedList::top ( void )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::unserialize": {
        "descr": "Unserializes the storage, from SplDoublyLinkedList::serialize().", 
        "name": "SplDoublyLinkedList::unserialize", 
        "params": [
            {
                "descr": "The serialized string.", 
                "name": "serialized"
            }
        ], 
        "path": "php/spldoublylinkedlist.unserialize", 
        "syntax": "public void SplDoublyLinkedList::unserialize ( string $serialized )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::unshift": {
        "descr": "Prepends value at the beginning of the doubly linked list.", 
        "name": "SplDoublyLinkedList::unshift", 
        "params": [
            {
                "descr": "The value to unshift.", 
                "name": "value"
            }
        ], 
        "path": "php/spldoublylinkedlist.unshift", 
        "syntax": "public void SplDoublyLinkedList::unshift ( mixed $value )", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::valid": {
        "descr": "Checks if the doubly linked list contains any more nodes.", 
        "name": "SplDoublyLinkedList::valid", 
        "params": [], 
        "path": "php/spldoublylinkedlist.valid", 
        "syntax": "public bool SplDoublyLinkedList::valid ( void )", 
        "type": "SPL"
    }, 
    "SplEnum": {
        "descr": "", 
        "name": "SplEnum", 
        "params": [], 
        "path": "php/class.splenum", 
        "syntax": "public array getConstList ([ bool $include_default = false ] )", 
        "type": "SPL"
    }, 
    "SplEnum::getConstList": {
        "descr": "", 
        "name": "SplEnum::getConstList", 
        "params": [
            {
                "descr": "Whether to include __default property.", 
                "name": "include_default"
            }
        ], 
        "path": "php/splenum.getconstlist", 
        "syntax": "public array SplEnum::getConstList ([ bool $include_default = false ] )", 
        "type": "SPL"
    }, 
    "SplFileInfo": {
        "descr": "", 
        "name": "SplFileInfo", 
        "params": [], 
        "path": "php/class.splfileinfo", 
        "syntax": "public __construct ( string $file_name )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::__construct": {
        "descr": "Creates a new SplFileInfo object for the file_name specified. The file does not need to exist, or be readable.", 
        "name": "SplFileInfo::__construct", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "file_name"
            }
        ], 
        "path": "php/splfileinfo.construct", 
        "syntax": "public SplFileInfo::__construct ( string $file_name )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::__toString": {
        "descr": "This method will return the file name of the referenced file.", 
        "name": "SplFileInfo::__toString", 
        "params": [], 
        "path": "php/splfileinfo.tostring", 
        "syntax": "public void SplFileInfo::__toString ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getATime": {
        "descr": "Gets the last access time for the file.", 
        "name": "SplFileInfo::getATime", 
        "params": [], 
        "path": "php/splfileinfo.getatime", 
        "syntax": "public int SplFileInfo::getATime ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getBasename": {
        "descr": "This method returns the base name of the file, directory, or link without path info.", 
        "name": "SplFileInfo::getBasename", 
        "params": [
            {
                "descr": "Optional suffix to omit from the base name returned.", 
                "name": "suffix"
            }
        ], 
        "path": "php/splfileinfo.getbasename", 
        "syntax": "public string SplFileInfo::getBasename ([ string $suffix ] )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getCTime": {
        "descr": "Returns the inode change time for the file. The time returned is a Unix timestamp.", 
        "name": "SplFileInfo::getCTime", 
        "params": [], 
        "path": "php/splfileinfo.getctime", 
        "syntax": "public int SplFileInfo::getCTime ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getExtension": {
        "descr": "Retrieves the file extension.", 
        "name": "SplFileInfo::getExtension", 
        "params": [], 
        "path": "php/splfileinfo.getextension", 
        "syntax": "public string SplFileInfo::getExtension ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getFileInfo": {
        "descr": "This method gets an SplFileInfo object for the referenced file.", 
        "name": "SplFileInfo::getFileInfo", 
        "params": [
            {
                "descr": "Name of an SplFileInfo derived class to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.getfileinfo", 
        "syntax": "public SplFileInfo SplFileInfo::getFileInfo ([ string $class_name ] )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getFilename": {
        "descr": "Gets the filename without any path information.", 
        "name": "SplFileInfo::getFilename", 
        "params": [], 
        "path": "php/splfileinfo.getfilename", 
        "syntax": "public string SplFileInfo::getFilename ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getGroup": {
        "descr": "Gets the file group. The group ID is returned in numerical format.", 
        "name": "SplFileInfo::getGroup", 
        "params": [], 
        "path": "php/splfileinfo.getgroup", 
        "syntax": "public int SplFileInfo::getGroup ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getInode": {
        "descr": "Gets the inode number for the filesystem object.", 
        "name": "SplFileInfo::getInode", 
        "params": [], 
        "path": "php/splfileinfo.getinode", 
        "syntax": "public int SplFileInfo::getInode ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getLinkTarget": {
        "descr": "Gets the target of a filesystem link.", 
        "name": "SplFileInfo::getLinkTarget", 
        "params": [], 
        "path": "php/splfileinfo.getlinktarget", 
        "syntax": "public string SplFileInfo::getLinkTarget ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getMTime": {
        "descr": "Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.", 
        "name": "SplFileInfo::getMTime", 
        "params": [], 
        "path": "php/splfileinfo.getmtime", 
        "syntax": "public int SplFileInfo::getMTime ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getOwner": {
        "descr": "Gets the file owner. The owner ID is returned in numerical format.", 
        "name": "SplFileInfo::getOwner", 
        "params": [], 
        "path": "php/splfileinfo.getowner", 
        "syntax": "public int SplFileInfo::getOwner ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPath": {
        "descr": "Returns the path to the file, omitting the filename and any trailing slash.", 
        "name": "SplFileInfo::getPath", 
        "params": [], 
        "path": "php/splfileinfo.getpath", 
        "syntax": "public string SplFileInfo::getPath ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPathInfo": {
        "descr": "Gets an SplFileInfo object for the parent of the current file.", 
        "name": "SplFileInfo::getPathInfo", 
        "params": [
            {
                "descr": "Name of an SplFileInfo derived class to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.getpathinfo", 
        "syntax": "public SplFileInfo SplFileInfo::getPathInfo ([ string $class_name ] )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPathname": {
        "descr": "Returns the path to the file.", 
        "name": "SplFileInfo::getPathname", 
        "params": [], 
        "path": "php/splfileinfo.getpathname", 
        "syntax": "public string SplFileInfo::getPathname ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPerms": {
        "descr": "Gets the file permissions for the file.", 
        "name": "SplFileInfo::getPerms", 
        "params": [], 
        "path": "php/splfileinfo.getperms", 
        "syntax": "public int SplFileInfo::getPerms ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getRealPath": {
        "descr": "This method expands all symbolic links, resolves relative references and returns the real path to the file.", 
        "name": "SplFileInfo::getRealPath", 
        "params": [], 
        "path": "php/splfileinfo.getrealpath", 
        "syntax": "public string SplFileInfo::getRealPath ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getSize": {
        "descr": "Returns the filesize in bytes for the file referenced.", 
        "name": "SplFileInfo::getSize", 
        "params": [], 
        "path": "php/splfileinfo.getsize", 
        "syntax": "public int SplFileInfo::getSize ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getType": {
        "descr": "Returns the type of the file referenced.", 
        "name": "SplFileInfo::getType", 
        "params": [], 
        "path": "php/splfileinfo.gettype", 
        "syntax": "public string SplFileInfo::getType ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isDir": {
        "descr": "This method can be used to determine if the file is a directory.", 
        "name": "SplFileInfo::isDir", 
        "params": [], 
        "path": "php/splfileinfo.isdir", 
        "syntax": "public bool SplFileInfo::isDir ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isExecutable": {
        "descr": "Checks if the file is executable.", 
        "name": "SplFileInfo::isExecutable", 
        "params": [], 
        "path": "php/splfileinfo.isexecutable", 
        "syntax": "public bool SplFileInfo::isExecutable ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isFile": {
        "descr": "Checks if the file referenced by this SplFileInfo object exists and is a regular file.", 
        "name": "SplFileInfo::isFile", 
        "params": [], 
        "path": "php/splfileinfo.isfile", 
        "syntax": "public bool SplFileInfo::isFile ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isLink": {
        "descr": "Use this method to check if the file referenced by the SplFileInfo object is a link.", 
        "name": "SplFileInfo::isLink", 
        "params": [], 
        "path": "php/splfileinfo.islink", 
        "syntax": "public bool SplFileInfo::isLink ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isReadable": {
        "descr": "Check if the file is readable.", 
        "name": "SplFileInfo::isReadable", 
        "params": [], 
        "path": "php/splfileinfo.isreadable", 
        "syntax": "public bool SplFileInfo::isReadable ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isWritable": {
        "descr": "Checks if the current entry is writable.", 
        "name": "SplFileInfo::isWritable", 
        "params": [], 
        "path": "php/splfileinfo.iswritable", 
        "syntax": "public bool SplFileInfo::isWritable ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::openFile": {
        "descr": "Creates an SplFileObject object of the file. This is useful because SplFileObject contains additional methods for manipulating the file whereas SplFileInfo is only useful for gaining information, like whether the file is writable.", 
        "name": "SplFileInfo::openFile", 
        "params": [
            {
                "descr": "The mode for opening the file. See the fopen() documentation for descriptions of possible modes. ", 
                "name": "open_mode"
            }, 
            {
                "descr": "When set to TRUE, the filename is also searched for within the include_path", 
                "name": "use_include_path"
            }, 
            {
                "descr": "Refer to the context section of the manual for a description of contexts.", 
                "name": "context"
            }
        ], 
        "path": "php/splfileinfo.openfile", 
        "syntax": "public SplFileObject SplFileInfo::openFile ([ string $open_mode = r [, bool $use_include_path = false [, resource $context = NULL ]]] )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::setFileClass": {
        "descr": "Set the class name which SplFileInfo will use to open files with when openFile() is called. The class name passed to this method must be derived from SplFileObject.", 
        "name": "SplFileInfo::setFileClass", 
        "params": [
            {
                "descr": "The class name to use when openFile() is called.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.setfileclass", 
        "syntax": "public void SplFileInfo::setFileClass ([ string $class_name ] )", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::setInfoClass": {
        "descr": "Use this method to set a custom class which will be used when getFileInfo and getPathInfo are called. The class name passed to this method must be derived from SplFileInfo.", 
        "name": "SplFileInfo::setInfoClass", 
        "params": [
            {
                "descr": "The class name to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.setinfoclass", 
        "syntax": "public void SplFileInfo::setInfoClass ([ string $class_name ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject": {
        "descr": "", 
        "name": "SplFileObject", 
        "params": [], 
        "path": "php/class.splfileobject", 
        "syntax": "public __construct ( string $filename [, string $open_mode = \"r\" [, bool $use_include_path = false [, resource $context ]]] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::__construct": {
        "descr": "Construct a new file object.", 
        "name": "SplFileObject::__construct", 
        "params": [
            {
                "descr": "The file to read.  TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. ", 
                "name": "filename"
            }, 
            {
                "descr": "The mode in which to open the file. ", 
                "name": "open_mode"
            }, 
            {
                "descr": "Whether to search in the include_path for filename.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/splfileobject.construct", 
        "syntax": "public SplFileObject::__construct ( string $filename [, string $open_mode = \"r\" [, bool $use_include_path = false [, resource $context ]]] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::__toString": {
        "descr": "", 
        "name": "SplFileObject::__toString", 
        "params": [], 
        "path": "php/splfileobject.tostring", 
        "syntax": "public void SplFileObject::__toString ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::current": {
        "descr": "Retrieves the current line of the file.", 
        "name": "SplFileObject::current", 
        "params": [], 
        "path": "php/splfileobject.current", 
        "syntax": "public string|array SplFileObject::current ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::eof": {
        "descr": "Determine whether the end of file has been reached", 
        "name": "SplFileObject::eof", 
        "params": [], 
        "path": "php/splfileobject.eof", 
        "syntax": "public bool SplFileObject::eof ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fflush": {
        "descr": "Forces a write of all buffered output to the file.", 
        "name": "SplFileObject::fflush", 
        "params": [], 
        "path": "php/splfileobject.fflush", 
        "syntax": "public bool SplFileObject::fflush ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetc": {
        "descr": "Gets a character from the file.", 
        "name": "SplFileObject::fgetc", 
        "params": [], 
        "path": "php/splfileobject.fgetc", 
        "syntax": "public string SplFileObject::fgetc ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetcsv": {
        "descr": "Gets a line from the file which is in CSV format and returns an array containing the fields read.", 
        "name": "SplFileObject::fgetcsv", 
        "params": [
            {
                "descr": "The field delimiter (one character only). ", 
                "name": "delimiter"
            }, 
            {
                "descr": "The field enclosure character (one character only). ", 
                "name": "enclosure"
            }, 
            {
                "descr": "The escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/splfileobject.fgetcsv", 
        "syntax": "public array SplFileObject::fgetcsv ([ string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\" ]]] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgets": {
        "descr": "Gets a line from the file.", 
        "name": "SplFileObject::fgets", 
        "params": [], 
        "path": "php/splfileobject.fgets", 
        "syntax": "public string SplFileObject::fgets ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetss": {
        "descr": "Identical to SplFileObject::fgets(), except that SplFileObject::fgetss() attempts to strip any HTML and PHP tags from the text it reads.", 
        "name": "SplFileObject::fgetss", 
        "params": [
            {
                "descr": "Optional parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/splfileobject.fgetss", 
        "syntax": "public string SplFileObject::fgetss ([ string $allowable_tags ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::flock": {
        "descr": "Locks or unlocks the file in the same portable way as flock().", 
        "name": "SplFileObject::flock", 
        "params": [
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }, 
            {
                "descr": "Set to TRUE if the lock would block (EWOULDBLOCK errno condition).", 
                "name": "wouldblock"
            }
        ], 
        "path": "php/splfileobject.flock", 
        "syntax": "public bool SplFileObject::flock ( int $operation [, int &$wouldblock ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fpassthru": {
        "descr": "Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.", 
        "name": "SplFileObject::fpassthru", 
        "params": [], 
        "path": "php/splfileobject.fpassthru", 
        "syntax": "public int SplFileObject::fpassthru ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fputcsv": {
        "descr": "Writes the fields array to the file as a CSV line.", 
        "name": "SplFileObject::fputcsv", 
        "params": [
            {
                "descr": "An array of values.", 
                "name": "fields"
            }, 
            {
                "descr": "The optional delimiter parameter sets the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The optional enclosure parameter sets the field enclosure (one character only).", 
                "name": "enclosure"
            }
        ], 
        "path": "php/splfileobject.fputcsv", 
        "syntax": "public int SplFileObject::fputcsv ( array $fields [, string $delimiter = ',' [, string $enclosure = '\"' ]] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fscanf": {
        "descr": "Reads a line from the file and interprets it according to the specified format, which is described in the documentation for sprintf().", 
        "name": "SplFileObject::fscanf", 
        "params": [
            {
                "descr": "The specified format as described in the sprintf() documentation.", 
                "name": "format"
            }, 
            {
                "descr": "The optional assigned values.", 
                "name": "..."
            }
        ], 
        "path": "php/splfileobject.fscanf", 
        "syntax": "public mixed SplFileObject::fscanf ( string $format [, mixed &$... ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fseek": {
        "descr": "Seek to a position in the file measured in bytes from the beginning of the file, obtained by adding offset to the position specified by whence.", 
        "name": "SplFileObject::fseek", 
        "params": [
            {
                "descr": "The offset. A negative value can be used to move backwards through the file which is useful when SEEK_END is used as the whence value.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/splfileobject.fseek", 
        "syntax": "public int SplFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fstat": {
        "descr": "Gathers the statistics of the file. Behaves identically to fstat().", 
        "name": "SplFileObject::fstat", 
        "params": [], 
        "path": "php/splfileobject.fstat", 
        "syntax": "public array SplFileObject::fstat ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::ftell": {
        "descr": "Returns the position of the file pointer which represents the current offset in the file stream.", 
        "name": "SplFileObject::ftell", 
        "params": [], 
        "path": "php/splfileobject.ftell", 
        "syntax": "public int SplFileObject::ftell ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::ftruncate": {
        "descr": "Truncates the file to size bytes.", 
        "name": "SplFileObject::ftruncate", 
        "params": [
            {
                "descr": "The size to truncate to.  Note:  If size is larger than the file it is extended with null bytes. ", 
                "name": "size"
            }
        ], 
        "path": "php/splfileobject.ftruncate", 
        "syntax": "public bool SplFileObject::ftruncate ( int $size )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fwrite": {
        "descr": "Writes the contents of string to the file", 
        "name": "SplFileObject::fwrite", 
        "params": [
            {
                "descr": "The string to be written to the file.", 
                "name": "str"
            }, 
            {
                "descr": "If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.", 
                "name": "length"
            }
        ], 
        "path": "php/splfileobject.fwrite", 
        "syntax": "public int SplFileObject::fwrite ( string $str [, int $length ] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getChildren": {
        "descr": "An SplFileObject does not have children so this method returns NULL.", 
        "name": "SplFileObject::getChildren", 
        "params": [], 
        "path": "php/splfileobject.getchildren", 
        "syntax": "public void SplFileObject::getChildren ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getCsvControl": {
        "descr": "Gets the delimiter and enclosure character used for parsing CSV fields.", 
        "name": "SplFileObject::getCsvControl", 
        "params": [], 
        "path": "php/splfileobject.getcsvcontrol", 
        "syntax": "public array SplFileObject::getCsvControl ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getFlags": {
        "descr": "Gets the flags set for an instance of SplFileObject as an integer.", 
        "name": "SplFileObject::getFlags", 
        "params": [], 
        "path": "php/splfileobject.getflags", 
        "syntax": "public int SplFileObject::getFlags ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getMaxLineLen": {
        "descr": "Gets the maximum line length as set by SplFileObject::setMaxLineLen().", 
        "name": "SplFileObject::getMaxLineLen", 
        "params": [], 
        "path": "php/splfileobject.getmaxlinelen", 
        "syntax": "public int SplFileObject::getMaxLineLen ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::hasChildren": {
        "descr": "An SplFileObject does not have children so this method always return FALSE.", 
        "name": "SplFileObject::hasChildren", 
        "params": [], 
        "path": "php/splfileobject.haschildren", 
        "syntax": "public bool SplFileObject::hasChildren ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::key": {
        "descr": "Gets the current line number.", 
        "name": "SplFileObject::key", 
        "params": [], 
        "path": "php/splfileobject.key", 
        "syntax": "public int SplFileObject::key ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::next": {
        "descr": "Moves ahead to the next line in the file.", 
        "name": "SplFileObject::next", 
        "params": [], 
        "path": "php/splfileobject.next", 
        "syntax": "public void SplFileObject::next ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::rewind": {
        "descr": "Rewinds the file back to the first line.", 
        "name": "SplFileObject::rewind", 
        "params": [], 
        "path": "php/splfileobject.rewind", 
        "syntax": "public void SplFileObject::rewind ( void )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::seek": {
        "descr": "Seek to specified line in the file.", 
        "name": "SplFileObject::seek", 
        "params": [
            {
                "descr": "The zero-based line number to seek to.", 
                "name": "line_pos"
            }
        ], 
        "path": "php/splfileobject.seek", 
        "syntax": "public void SplFileObject::seek ( int $line_pos )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setCsvControl": {
        "descr": "Sets the delimiter and enclosure character for parsing CSV fields.", 
        "name": "SplFileObject::setCsvControl", 
        "params": [
            {
                "descr": "The field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "The field escape character (one character only).", 
                "name": "escape"
            }
        ], 
        "path": "php/splfileobject.setcsvcontrol", 
        "syntax": "public void SplFileObject::setCsvControl ([ string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\" ]]] )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setFlags": {
        "descr": "Sets the flags to be used by the SplFileObject.", 
        "name": "SplFileObject::setFlags", 
        "params": [
            {
                "descr": "Bit mask of the flags to set. See SplFileObject constants for the available flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/splfileobject.setflags", 
        "syntax": "public void SplFileObject::setFlags ( int $flags )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setMaxLineLen": {
        "descr": "Sets the maximum length of a line to be read.", 
        "name": "SplFileObject::setMaxLineLen", 
        "params": [
            {
                "descr": "The maximum length of a line.", 
                "name": "max_len"
            }
        ], 
        "path": "php/splfileobject.setmaxlinelen", 
        "syntax": "public void SplFileObject::setMaxLineLen ( int $max_len )", 
        "type": "SPL/File"
    }, 
    "SplFileObject::valid": {
        "descr": "Check whether EOF has been reached.", 
        "name": "SplFileObject::valid", 
        "params": [], 
        "path": "php/splfileobject.valid", 
        "syntax": "public bool SplFileObject::valid ( void )", 
        "type": "SPL/File"
    }, 
    "SplFixedArray": {
        "descr": "", 
        "name": "SplFixedArray", 
        "params": [], 
        "path": "php/class.splfixedarray", 
        "syntax": "public int count ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::__wakeup": {
        "descr": "Reinitialises the array after being unserialised.", 
        "name": "SplFixedArray::__wakeup", 
        "params": [], 
        "path": "php/splfixedarray.wakeup", 
        "syntax": "public void SplFixedArray::__wakeup ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::count": {
        "descr": "Returns the size of the array.", 
        "name": "SplFixedArray::count", 
        "params": [], 
        "path": "php/splfixedarray.count", 
        "syntax": "public int SplFixedArray::count ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::current": {
        "descr": "Get the current array element.", 
        "name": "SplFixedArray::current", 
        "params": [], 
        "path": "php/splfixedarray.current", 
        "syntax": "public mixed SplFixedArray::current ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::fromArray": {
        "descr": "Import the PHP array array in a new SplFixedArray instance", 
        "name": "SplFixedArray::fromArray", 
        "params": [
            {
                "descr": "The array to import.", 
                "name": "array"
            }, 
            {
                "descr": "Try to save the numeric indexes used in the original array.", 
                "name": "save_indexes"
            }
        ], 
        "path": "php/splfixedarray.fromarray", 
        "syntax": "public static SplFixedArray SplFixedArray::fromArray ( array $array [, bool $save_indexes = true ] )", 
        "type": "SPL"
    }, 
    "SplFixedArray::getSize": {
        "descr": "Gets the size of the array.", 
        "name": "SplFixedArray::getSize", 
        "params": [], 
        "path": "php/splfixedarray.getsize", 
        "syntax": "public int SplFixedArray::getSize ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::key": {
        "descr": "Returns the current array index.", 
        "name": "SplFixedArray::key", 
        "params": [], 
        "path": "php/splfixedarray.key", 
        "syntax": "public int SplFixedArray::key ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::next": {
        "descr": "Move the iterator to the next array entry.", 
        "name": "SplFixedArray::next", 
        "params": [], 
        "path": "php/splfixedarray.next", 
        "syntax": "public void SplFixedArray::next ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetExists": {
        "descr": "Checks whether the requested index index exists.", 
        "name": "SplFixedArray::offsetExists", 
        "params": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetexists", 
        "syntax": "public bool SplFixedArray::offsetExists ( int $index )", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetGet": {
        "descr": "Returns the value at the index index.", 
        "name": "SplFixedArray::offsetGet", 
        "params": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetget", 
        "syntax": "public mixed SplFixedArray::offsetGet ( int $index )", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetSet": {
        "descr": "Sets the value at the specified index to newval.", 
        "name": "SplFixedArray::offsetSet", 
        "params": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/splfixedarray.offsetset", 
        "syntax": "public void SplFixedArray::offsetSet ( int $index , mixed $newval )", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetUnset": {
        "descr": "Unsets the value at the specified index.", 
        "name": "SplFixedArray::offsetUnset", 
        "params": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetunset", 
        "syntax": "public void SplFixedArray::offsetUnset ( int $index )", 
        "type": "SPL"
    }, 
    "SplFixedArray::rewind": {
        "descr": "Rewinds the iterator to the beginning.", 
        "name": "SplFixedArray::rewind", 
        "params": [], 
        "path": "php/splfixedarray.rewind", 
        "syntax": "public void SplFixedArray::rewind ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::setSize": {
        "descr": "Change the size of an array to the new size of size. If size is less than the current array size, any values after the new size will be discarded. If size is greater than the current array size, the array will be padded with NULL values.", 
        "name": "SplFixedArray::setSize", 
        "params": [
            {
                "descr": "The new array size. This should be a value between 0 and PHP_INT_MAX.", 
                "name": "size"
            }
        ], 
        "path": "php/splfixedarray.setsize", 
        "syntax": "public int SplFixedArray::setSize ( int $size )", 
        "type": "SPL"
    }, 
    "SplFixedArray::toArray": {
        "descr": "Returns a PHP array from the fixed array.", 
        "name": "SplFixedArray::toArray", 
        "params": [], 
        "path": "php/splfixedarray.toarray", 
        "syntax": "public array SplFixedArray::toArray ( void )", 
        "type": "SPL"
    }, 
    "SplFixedArray::valid": {
        "descr": "Checks if the array contains any more elements.", 
        "name": "SplFixedArray::valid", 
        "params": [], 
        "path": "php/splfixedarray.valid", 
        "syntax": "public bool SplFixedArray::valid ( void )", 
        "type": "SPL"
    }, 
    "SplFloat": {
        "descr": "", 
        "name": "SplFloat", 
        "params": [], 
        "path": "php/class.splfloat", 
        "syntax": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "type": "SPL"
    }, 
    "SplHeap": {
        "descr": "", 
        "name": "SplHeap", 
        "params": [], 
        "path": "php/class.splheap", 
        "syntax": "abstract protected int compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplHeap::compare": {
        "descr": "Compare value1 with value2.", 
        "name": "SplHeap::compare", 
        "params": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splheap.compare", 
        "syntax": "abstract protected int SplHeap::compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplHeap::count": {
        "descr": "", 
        "name": "SplHeap::count", 
        "params": [], 
        "path": "php/splheap.count", 
        "syntax": "public int SplHeap::count ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::current": {
        "descr": "Get the current datastructure node.", 
        "name": "SplHeap::current", 
        "params": [], 
        "path": "php/splheap.current", 
        "syntax": "public mixed SplHeap::current ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::extract": {
        "descr": "", 
        "name": "SplHeap::extract", 
        "params": [], 
        "path": "php/splheap.extract", 
        "syntax": "public mixed SplHeap::extract ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::insert": {
        "descr": "Insert value in the heap.", 
        "name": "SplHeap::insert", 
        "params": [
            {
                "descr": "The value to insert.", 
                "name": "value"
            }
        ], 
        "path": "php/splheap.insert", 
        "syntax": "public void SplHeap::insert ( mixed $value )", 
        "type": "SPL"
    }, 
    "SplHeap::isEmpty": {
        "descr": "", 
        "name": "SplHeap::isEmpty", 
        "params": [], 
        "path": "php/splheap.isempty", 
        "syntax": "public bool SplHeap::isEmpty ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::key": {
        "descr": "This function returns the current node index", 
        "name": "SplHeap::key", 
        "params": [], 
        "path": "php/splheap.key", 
        "syntax": "public mixed SplHeap::key ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::next": {
        "descr": "Move to the next node.", 
        "name": "SplHeap::next", 
        "params": [], 
        "path": "php/splheap.next", 
        "syntax": "public void SplHeap::next ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::recoverFromCorruption": {
        "descr": "", 
        "name": "SplHeap::recoverFromCorruption", 
        "params": [], 
        "path": "php/splheap.recoverfromcorruption", 
        "syntax": "public void SplHeap::recoverFromCorruption ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::rewind": {
        "descr": "This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.", 
        "name": "SplHeap::rewind", 
        "params": [], 
        "path": "php/splheap.rewind", 
        "syntax": "public void SplHeap::rewind ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::top": {
        "descr": "", 
        "name": "SplHeap::top", 
        "params": [], 
        "path": "php/splheap.top", 
        "syntax": "public mixed SplHeap::top ( void )", 
        "type": "SPL"
    }, 
    "SplHeap::valid": {
        "descr": "Checks if the heap contains any more nodes.", 
        "name": "SplHeap::valid", 
        "params": [], 
        "path": "php/splheap.valid", 
        "syntax": "public bool SplHeap::valid ( void )", 
        "type": "SPL"
    }, 
    "SplInt": {
        "descr": "", 
        "name": "SplInt", 
        "params": [], 
        "path": "php/class.splint", 
        "syntax": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "type": "SPL"
    }, 
    "SplMaxHeap": {
        "descr": "", 
        "name": "SplMaxHeap", 
        "params": [], 
        "path": "php/class.splmaxheap", 
        "syntax": "protected int compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplMaxHeap::compare": {
        "descr": "Compare value1 with value2.", 
        "name": "SplMaxHeap::compare", 
        "params": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splmaxheap.compare", 
        "syntax": "protected int SplMaxHeap::compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplMinHeap": {
        "descr": "", 
        "name": "SplMinHeap", 
        "params": [], 
        "path": "php/class.splminheap", 
        "syntax": "protected int compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplMinHeap::compare": {
        "descr": "Compare value1 with value2.", 
        "name": "SplMinHeap::compare", 
        "params": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splminheap.compare", 
        "syntax": "protected int SplMinHeap::compare ( mixed $value1 , mixed $value2 )", 
        "type": "SPL"
    }, 
    "SplObjectStorage": {
        "descr": "", 
        "name": "SplObjectStorage", 
        "params": [], 
        "path": "php/class.splobjectstorage", 
        "syntax": "public void addAll ( SplObjectStorage $storage )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::addAll": {
        "descr": "Adds all objects-data pairs from a different storage in the current storage.", 
        "name": "SplObjectStorage::addAll", 
        "params": [
            {
                "descr": "The storage you want to import.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.addall", 
        "syntax": "public void SplObjectStorage::addAll ( SplObjectStorage $storage )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::attach": {
        "descr": "Adds an object inside the storage, and optionally associate it to some data.", 
        "name": "SplObjectStorage::attach", 
        "params": [
            {
                "descr": "The object to add.", 
                "name": "object"
            }, 
            {
                "descr": "The data to associate with the object.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.attach", 
        "syntax": "public void SplObjectStorage::attach ( object $object [, mixed $data = NULL ] )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::contains": {
        "descr": "Checks if the storage contains the object provided.", 
        "name": "SplObjectStorage::contains", 
        "params": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.contains", 
        "syntax": "public bool SplObjectStorage::contains ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::count": {
        "descr": "Counts the number of objects in the storage.", 
        "name": "SplObjectStorage::count", 
        "params": [], 
        "path": "php/splobjectstorage.count", 
        "syntax": "public int SplObjectStorage::count ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::current": {
        "descr": "Returns the current storage entry.", 
        "name": "SplObjectStorage::current", 
        "params": [], 
        "path": "php/splobjectstorage.current", 
        "syntax": "public object SplObjectStorage::current ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::detach": {
        "descr": "Removes the object from the storage.", 
        "name": "SplObjectStorage::detach", 
        "params": [
            {
                "descr": "The object to remove.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.detach", 
        "syntax": "public void SplObjectStorage::detach ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::getHash": {
        "descr": "This method calculates an identifier for the objects added to an SplObjectStorage object.", 
        "name": "SplObjectStorage::getHash", 
        "params": [
            {
                "descr": "The object whose identifier is to be calculated.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.gethash", 
        "syntax": "public string SplObjectStorage::getHash ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::getInfo": {
        "descr": "Returns the data, or info, associated with the object pointed by the current iterator position.", 
        "name": "SplObjectStorage::getInfo", 
        "params": [], 
        "path": "php/splobjectstorage.getinfo", 
        "syntax": "public mixed SplObjectStorage::getInfo ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::key": {
        "descr": "Returns the index at which the iterator currently is.", 
        "name": "SplObjectStorage::key", 
        "params": [], 
        "path": "php/splobjectstorage.key", 
        "syntax": "public int SplObjectStorage::key ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::next": {
        "descr": "Moves the iterator to the next object in the storage.", 
        "name": "SplObjectStorage::next", 
        "params": [], 
        "path": "php/splobjectstorage.next", 
        "syntax": "public void SplObjectStorage::next ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetExists": {
        "descr": "Checks whether an object exists in the storage.", 
        "name": "SplObjectStorage::offsetExists", 
        "params": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetexists", 
        "syntax": "public bool SplObjectStorage::offsetExists ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetGet": {
        "descr": "Returns the data associated with an object in the storage.", 
        "name": "SplObjectStorage::offsetGet", 
        "params": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetget", 
        "syntax": "public mixed SplObjectStorage::offsetGet ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetSet": {
        "descr": "Associate data to an object in the storage.", 
        "name": "SplObjectStorage::offsetSet", 
        "params": [
            {
                "descr": "The object to associate data with.", 
                "name": "object"
            }, 
            {
                "descr": "The data to associate with the object.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.offsetset", 
        "syntax": "public void SplObjectStorage::offsetSet ( object $object [, mixed $data = NULL ] )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetUnset": {
        "descr": "Removes an object from the storage.", 
        "name": "SplObjectStorage::offsetUnset", 
        "params": [
            {
                "descr": "The object to remove.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetunset", 
        "syntax": "public void SplObjectStorage::offsetUnset ( object $object )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::removeAll": {
        "descr": "Removes objects contained in another storage from the current storage.", 
        "name": "SplObjectStorage::removeAll", 
        "params": [
            {
                "descr": "The storage containing the elements to remove.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.removeall", 
        "syntax": "public void SplObjectStorage::removeAll ( SplObjectStorage $storage )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::removeAllExcept": {
        "descr": "Removes all objects except for those contained in another storage from the current storage.", 
        "name": "SplObjectStorage::removeAllExcept", 
        "params": [
            {
                "descr": "The storage containing the elements to retain in the current storage.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.removeallexcept", 
        "syntax": "public void SplObjectStorage::removeAllExcept ( SplObjectStorage $storage )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::rewind": {
        "descr": "Rewind the iterator to the first storage element.", 
        "name": "SplObjectStorage::rewind", 
        "params": [], 
        "path": "php/splobjectstorage.rewind", 
        "syntax": "public void SplObjectStorage::rewind ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::serialize": {
        "descr": "Returns a string representation of the storage.", 
        "name": "SplObjectStorage::serialize", 
        "params": [], 
        "path": "php/splobjectstorage.serialize", 
        "syntax": "public string SplObjectStorage::serialize ( void )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::setInfo": {
        "descr": "Associates data, or info, with the object currently pointed to by the iterator.", 
        "name": "SplObjectStorage::setInfo", 
        "params": [
            {
                "descr": "The data to associate with the current iterator entry.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.setinfo", 
        "syntax": "public void SplObjectStorage::setInfo ( mixed $data )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::unserialize": {
        "descr": "Unserializes storage entries and attach them to the current storage.", 
        "name": "SplObjectStorage::unserialize", 
        "params": [
            {
                "descr": "The serialized representation of a storage.", 
                "name": "serialized"
            }
        ], 
        "path": "php/splobjectstorage.unserialize", 
        "syntax": "public void SplObjectStorage::unserialize ( string $serialized )", 
        "type": "SPL"
    }, 
    "SplObjectStorage::valid": {
        "descr": "Returns if the current iterator entry is valid.", 
        "name": "SplObjectStorage::valid", 
        "params": [], 
        "path": "php/splobjectstorage.valid", 
        "syntax": "public bool SplObjectStorage::valid ( void )", 
        "type": "SPL"
    }, 
    "SplObserver (interface": {
        "descr": "", 
        "name": "SplObserver (interface", 
        "params": [], 
        "path": "php/class.splobserver", 
        "syntax": "abstract public void update ( SplSubject $subject )", 
        "type": "SPL"
    }, 
    "SplObserver::update": {
        "descr": "This method is called when any SplSubject to which the observer is attached calls SplSubject::notify().", 
        "name": "SplObserver::update", 
        "params": [
            {
                "descr": "The SplSubject notifying the observer of an update.", 
                "name": "subject"
            }
        ], 
        "path": "php/splobserver.update", 
        "syntax": "abstract public void SplObserver::update ( SplSubject $subject )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue": {
        "descr": "", 
        "name": "SplPriorityQueue", 
        "params": [], 
        "path": "php/class.splpriorityqueue", 
        "syntax": "public int compare ( mixed $priority1 , mixed $priority2 )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::compare": {
        "descr": "Compare priority1 with priority2.", 
        "name": "SplPriorityQueue::compare", 
        "params": [
            {
                "descr": "The priority of the first node being compared.", 
                "name": "priority1"
            }, 
            {
                "descr": "The priority of the second node being compared.", 
                "name": "priority2"
            }
        ], 
        "path": "php/splpriorityqueue.compare", 
        "syntax": "public int SplPriorityQueue::compare ( mixed $priority1 , mixed $priority2 )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::count": {
        "descr": "", 
        "name": "SplPriorityQueue::count", 
        "params": [], 
        "path": "php/splpriorityqueue.count", 
        "syntax": "public int SplPriorityQueue::count ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::current": {
        "descr": "Get the current datastructure node.", 
        "name": "SplPriorityQueue::current", 
        "params": [], 
        "path": "php/splpriorityqueue.current", 
        "syntax": "public mixed SplPriorityQueue::current ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::extract": {
        "descr": "", 
        "name": "SplPriorityQueue::extract", 
        "params": [], 
        "path": "php/splpriorityqueue.extract", 
        "syntax": "public mixed SplPriorityQueue::extract ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::insert": {
        "descr": "Insert value with the priority priority in the queue.", 
        "name": "SplPriorityQueue::insert", 
        "params": [
            {
                "descr": "The value to insert.", 
                "name": "value"
            }, 
            {
                "descr": "The associated priority.", 
                "name": "priority"
            }
        ], 
        "path": "php/splpriorityqueue.insert", 
        "syntax": "public void SplPriorityQueue::insert ( mixed $value , mixed $priority )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::isEmpty": {
        "descr": "", 
        "name": "SplPriorityQueue::isEmpty", 
        "params": [], 
        "path": "php/splpriorityqueue.isempty", 
        "syntax": "public bool SplPriorityQueue::isEmpty ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::key": {
        "descr": "This function returns the current node index", 
        "name": "SplPriorityQueue::key", 
        "params": [], 
        "path": "php/splpriorityqueue.key", 
        "syntax": "public mixed SplPriorityQueue::key ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::next": {
        "descr": "Extracts the top node from the queue.", 
        "name": "SplPriorityQueue::next", 
        "params": [], 
        "path": "php/splpriorityqueue.next", 
        "syntax": "public void SplPriorityQueue::next ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::recoverFromCorruption": {
        "descr": "", 
        "name": "SplPriorityQueue::recoverFromCorruption", 
        "params": [], 
        "path": "php/splpriorityqueue.recoverfromcorruption", 
        "syntax": "public void SplPriorityQueue::recoverFromCorruption ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::rewind": {
        "descr": "This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.", 
        "name": "SplPriorityQueue::rewind", 
        "params": [], 
        "path": "php/splpriorityqueue.rewind", 
        "syntax": "public void SplPriorityQueue::rewind ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::setExtractFlags": {
        "descr": "", 
        "name": "SplPriorityQueue::setExtractFlags", 
        "params": [
            {
                "descr": "Defines what is extracted by SplPriorityQueue::current(), SplPriorityQueue::top() and SplPriorityQueue::extract(). ", 
                "name": "flags"
            }
        ], 
        "path": "php/splpriorityqueue.setextractflags", 
        "syntax": "public void SplPriorityQueue::setExtractFlags ( int $flags )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::top": {
        "descr": "", 
        "name": "SplPriorityQueue::top", 
        "params": [], 
        "path": "php/splpriorityqueue.top", 
        "syntax": "public mixed SplPriorityQueue::top ( void )", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::valid": {
        "descr": "Checks if the queue contains any more nodes.", 
        "name": "SplPriorityQueue::valid", 
        "params": [], 
        "path": "php/splpriorityqueue.valid", 
        "syntax": "public bool SplPriorityQueue::valid ( void )", 
        "type": "SPL"
    }, 
    "SplQueue": {
        "descr": "", 
        "name": "SplQueue", 
        "params": [], 
        "path": "php/class.splqueue", 
        "syntax": "mixed dequeue ( void )", 
        "type": "SPL"
    }, 
    "SplQueue::dequeue": {
        "descr": "Dequeues value from the top of the queue.", 
        "name": "SplQueue::dequeue", 
        "params": [], 
        "path": "php/splqueue.dequeue", 
        "syntax": "mixed SplQueue::dequeue ( void )", 
        "type": "SPL"
    }, 
    "SplQueue::enqueue": {
        "descr": "Enqueues value at the end of the queue.", 
        "name": "SplQueue::enqueue", 
        "params": [
            {
                "descr": "The value to enqueue.", 
                "name": "value"
            }
        ], 
        "path": "php/splqueue.enqueue", 
        "syntax": "void SplQueue::enqueue ( mixed $value )", 
        "type": "SPL"
    }, 
    "SplQueue::setIteratorMode": {
        "descr": "", 
        "name": "SplQueue::setIteratorMode", 
        "params": [
            {
                "descr": "There is only one iteration parameter you can modify. ", 
                "name": "mode"
            }
        ], 
        "path": "php/splqueue.setiteratormode", 
        "syntax": "void SplQueue::setIteratorMode ( int $mode )", 
        "type": "SPL"
    }, 
    "SplStack": {
        "descr": "", 
        "name": "SplStack", 
        "params": [], 
        "path": "php/class.splstack", 
        "syntax": "void setIteratorMode ( int $mode )", 
        "type": "SPL"
    }, 
    "SplStack::setIteratorMode": {
        "descr": "", 
        "name": "SplStack::setIteratorMode", 
        "params": [
            {
                "descr": "There is only one iteration parameter you can modify. ", 
                "name": "mode"
            }
        ], 
        "path": "php/splstack.setiteratormode", 
        "syntax": "void SplStack::setIteratorMode ( int $mode )", 
        "type": "SPL"
    }, 
    "SplString": {
        "descr": "", 
        "name": "SplString", 
        "params": [], 
        "path": "php/class.splstring", 
        "syntax": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "type": "SPL"
    }, 
    "SplSubject (interface": {
        "descr": "", 
        "name": "SplSubject (interface", 
        "params": [], 
        "path": "php/class.splsubject", 
        "syntax": "abstract public void attach ( SplObserver $observer )", 
        "type": "SPL"
    }, 
    "SplSubject::attach": {
        "descr": "Attaches an SplObserver so that it can be notified of updates.", 
        "name": "SplSubject::attach", 
        "params": [
            {
                "descr": "The SplObserver to attach.", 
                "name": "observer"
            }
        ], 
        "path": "php/splsubject.attach", 
        "syntax": "abstract public void SplSubject::attach ( SplObserver $observer )", 
        "type": "SPL"
    }, 
    "SplSubject::detach": {
        "descr": "Detaches an observer from the subject to no longer notify it of updates.", 
        "name": "SplSubject::detach", 
        "params": [
            {
                "descr": "The SplObserver to detach.", 
                "name": "observer"
            }
        ], 
        "path": "php/splsubject.detach", 
        "syntax": "abstract public void SplSubject::detach ( SplObserver $observer )", 
        "type": "SPL"
    }, 
    "SplSubject::notify": {
        "descr": "Notifies all attached observers.", 
        "name": "SplSubject::notify", 
        "params": [], 
        "path": "php/splsubject.notify", 
        "syntax": "abstract public void SplSubject::notify ( void )", 
        "type": "SPL"
    }, 
    "SplTempFileObject": {
        "descr": "", 
        "name": "SplTempFileObject", 
        "params": [], 
        "path": "php/class.spltempfileobject", 
        "syntax": "public __construct ([ int $max_memory ] )", 
        "type": "SPL/File"
    }, 
    "SplTempFileObject::__construct": {
        "descr": "Construct a new temporary file object.", 
        "name": "SplTempFileObject::__construct", 
        "params": [
            {
                "descr": "The maximum amount of memory (in bytes, default is 2 MB) for the temporary file to use. ", 
                "name": "max_memory"
            }
        ], 
        "path": "php/spltempfileobject.construct", 
        "syntax": "public SplTempFileObject::__construct ([ int $max_memory ] )", 
        "type": "SPL/File"
    }, 
    "SplType": {
        "descr": "", 
        "name": "SplType", 
        "params": [], 
        "path": "php/class.spltype", 
        "syntax": "__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "type": "SPL"
    }, 
    "SplType::__construct": {
        "descr": "", 
        "name": "SplType::__construct", 
        "params": [
            {
                "descr": "Type and default value depends on the extension class.", 
                "name": "initial_value"
            }, 
            {
                "descr": "Whether to set the object's sctrictness.", 
                "name": "strict"
            }
        ], 
        "path": "php/spltype.construct", 
        "syntax": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "type": "SPL"
    }, 
    "Spoofchecker": {
        "descr": "", 
        "name": "Spoofchecker", 
        "params": [], 
        "path": "php/class.spoofchecker", 
        "syntax": "public bool areConfusable ( string $s1 , string $s2 [, string &$error ] )", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::__construct": {
        "descr": "", 
        "name": "Spoofchecker::__construct", 
        "params": [], 
        "path": "php/spoofchecker.construct", 
        "syntax": "public Spoofchecker::__construct ( void )", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::areConfusable": {
        "descr": "", 
        "name": "Spoofchecker::areConfusable", 
        "params": [], 
        "path": "php/spoofchecker.areconfusable", 
        "syntax": "public bool Spoofchecker::areConfusable ( string $s1 , string $s2 [, string &$error ] )", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::isSuspicious": {
        "descr": "", 
        "name": "Spoofchecker::isSuspicious", 
        "params": [], 
        "path": "php/spoofchecker.issuspicious", 
        "syntax": "public bool Spoofchecker::isSuspicious ( string $text [, string &$error ] )", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::setAllowedLocales": {
        "descr": "", 
        "name": "Spoofchecker::setAllowedLocales", 
        "params": [], 
        "path": "php/spoofchecker.setallowedlocales", 
        "syntax": "public void Spoofchecker::setAllowedLocales ( string $locale_list )", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::setChecks": {
        "descr": "", 
        "name": "Spoofchecker::setChecks", 
        "params": [], 
        "path": "php/spoofchecker.setchecks", 
        "syntax": "public void Spoofchecker::setChecks ( string $checks )", 
        "type": "Internationalization"
    }, 
    "Stackable": {
        "descr": "", 
        "name": "Stackable", 
        "params": [], 
        "path": "php/class.stackable", 
        "syntax": "final public boolean chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Stackable::chunk": {
        "descr": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Stackable::chunk", 
        "params": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/stackable.chunk", 
        "syntax": "final public boolean Stackable::chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Stackable::isRunning": {
        "descr": "A Stackable is running when a Worker Thread is executing it", 
        "name": "Stackable::isRunning", 
        "params": [], 
        "path": "php/stackable.isrunning", 
        "syntax": "final public boolean Stackable::isRunning ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::isTerminated": {
        "descr": "Tell if the referenced Stackable exited, suffered fatal errors, or threw uncaught exceptions during execution", 
        "name": "Stackable::isTerminated", 
        "params": [], 
        "path": "php/stackable.isterminated", 
        "syntax": "final public boolean Stackable::isTerminated ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::isWaiting": {
        "descr": "Tell if the referenced Stackable is waiting for notification", 
        "name": "Stackable::isWaiting", 
        "params": [], 
        "path": "php/stackable.iswaiting", 
        "syntax": "final public boolean Stackable::isWaiting ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::lock": {
        "descr": "Lock the referenced objects storage for the calling context", 
        "name": "Stackable::lock", 
        "params": [], 
        "path": "php/stackable.lock", 
        "syntax": "final public boolean Stackable::lock ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::merge": {
        "descr": "Merges data into the current object", 
        "name": "Stackable::merge", 
        "params": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/stackable.merge", 
        "syntax": "final public boolean Stackable::merge ( mixed $from [, mixed $overwrite ] )", 
        "type": "Process Control"
    }, 
    "Stackable::notify": {
        "descr": "Sends notification to a Stackable that is waiting", 
        "name": "Stackable::notify", 
        "params": [], 
        "path": "php/stackable.notify", 
        "syntax": "final public boolean Stackable::notify ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::pop": {
        "descr": "Pops an item from the objects properties table", 
        "name": "Stackable::pop", 
        "params": [], 
        "path": "php/stackable.pop", 
        "syntax": "final public boolean Stackable::pop ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::run": {
        "descr": "The run method of a Stackable is executed by the Worker Thread", 
        "name": "Stackable::run", 
        "params": [], 
        "path": "php/stackable.run", 
        "syntax": "abstract public void Stackable::run ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::shift": {
        "descr": "Shifts an item from the objects properties table", 
        "name": "Stackable::shift", 
        "params": [], 
        "path": "php/stackable.shift", 
        "syntax": "final public boolean Stackable::shift ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::synchronized": {
        "descr": "Executes the block while retaining the synchronization lock for the current context.", 
        "name": "Stackable::synchronized", 
        "params": [
            {
                "descr": "The block of code to execute", 
                "name": "block"
            }, 
            {
                "descr": "Variable length list of arguments to use as function arguments to the block", 
                "name": "..."
            }
        ], 
        "path": "php/stackable.synchronized", 
        "syntax": "final public mixed Stackable::synchronized ( Closure $block [, mixed $... ] )", 
        "type": "Process Control"
    }, 
    "Stackable::unlock": {
        "descr": "Unlock the referenced objects storage for the calling context", 
        "name": "Stackable::unlock", 
        "params": [], 
        "path": "php/stackable.unlock", 
        "syntax": "final public boolean Stackable::unlock ( void )", 
        "type": "Process Control"
    }, 
    "Stackable::wait": {
        "descr": "Waits for notification from the Stackable", 
        "name": "Stackable::wait", 
        "params": [
            {
                "descr": "An optional timeout in millionths of a second.", 
                "name": "timeout"
            }
        ], 
        "path": "php/stackable.wait", 
        "syntax": "final public boolean Stackable::wait ([ string $timeout ] )", 
        "type": "Process Control"
    }, 
    "Thread": {
        "descr": "", 
        "name": "Thread", 
        "params": [], 
        "path": "php/class.thread", 
        "syntax": "final public boolean chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Thread::chunk": {
        "descr": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Thread::chunk", 
        "params": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/thread.chunk", 
        "syntax": "final public boolean Thread::chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Thread::getCreatorId": {
        "descr": "Will return the identity of the Thread that created the referenced Thread", 
        "name": "Thread::getCreatorId", 
        "params": [], 
        "path": "php/thread.getcreatorid", 
        "syntax": "final public long Thread::getCreatorId ( void )", 
        "type": "Process Control"
    }, 
    "Thread::getCurrentThreadId": {
        "descr": "Will return the identity of the currently executing thread", 
        "name": "Thread::getCurrentThreadId", 
        "params": [], 
        "path": "php/thread.getcurrentthreadid", 
        "syntax": "final public static long Thread::getCurrentThreadId ( void )", 
        "type": "Process Control"
    }, 
    "Thread::getThreadId": {
        "descr": "Will return the identity of the referenced Thread", 
        "name": "Thread::getThreadId", 
        "params": [], 
        "path": "php/thread.getthreadid", 
        "syntax": "final public long Thread::getThreadId ( void )", 
        "type": "Process Control"
    }, 
    "Thread::isJoined": {
        "descr": "Tell if the referenced Thread has been joined by another context", 
        "name": "Thread::isJoined", 
        "params": [], 
        "path": "php/thread.isjoined", 
        "syntax": "final public boolean Thread::isJoined ( void )", 
        "type": "Process Control"
    }, 
    "Thread::isRunning": {
        "descr": "Tell if the referenced Thread is executing", 
        "name": "Thread::isRunning", 
        "params": [], 
        "path": "php/thread.isrunning", 
        "syntax": "final public boolean Thread::isRunning ( void )", 
        "type": "Process Control"
    }, 
    "Thread::isStarted": {
        "descr": "Tell if the referenced Thread has been started", 
        "name": "Thread::isStarted", 
        "params": [], 
        "path": "php/thread.isstarted", 
        "syntax": "final public boolean Thread::isStarted ( void )", 
        "type": "Process Control"
    }, 
    "Thread::isTerminated": {
        "descr": "Tell if the referenced Thread exited, suffered fatal errors, or threw uncaught exceptions during execution", 
        "name": "Thread::isTerminated", 
        "params": [], 
        "path": "php/thread.isterminated", 
        "syntax": "final public boolean Thread::isTerminated ( void )", 
        "type": "Process Control"
    }, 
    "Thread::isWaiting": {
        "descr": "Tell if the referenced Thread is waiting for notification", 
        "name": "Thread::isWaiting", 
        "params": [], 
        "path": "php/thread.iswaiting", 
        "syntax": "final public boolean Thread::isWaiting ( void )", 
        "type": "Process Control"
    }, 
    "Thread::join": {
        "descr": "Causes the calling context to wait for the referenced Thread to finish executing", 
        "name": "Thread::join", 
        "params": [], 
        "path": "php/thread.join", 
        "syntax": "final public boolean Thread::join ( void )", 
        "type": "Process Control"
    }, 
    "Thread::lock": {
        "descr": "Lock the referenced objects storage for the calling context", 
        "name": "Thread::lock", 
        "params": [], 
        "path": "php/thread.lock", 
        "syntax": "final public boolean Thread::lock ( void )", 
        "type": "Process Control"
    }, 
    "Thread::merge": {
        "descr": "Merges data into the current object", 
        "name": "Thread::merge", 
        "params": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/thread.merge", 
        "syntax": "final public boolean Thread::merge ( mixed $from [, mixed $overwrite ] )", 
        "type": "Process Control"
    }, 
    "Thread::notify": {
        "descr": "Send notification to the referenced Thread", 
        "name": "Thread::notify", 
        "params": [], 
        "path": "php/thread.notify", 
        "syntax": "final public boolean Thread::notify ( void )", 
        "type": "Process Control"
    }, 
    "Thread::pop": {
        "descr": "Pops an item from the objects properties table", 
        "name": "Thread::pop", 
        "params": [], 
        "path": "php/thread.pop", 
        "syntax": "final public boolean Thread::pop ( void )", 
        "type": "Process Control"
    }, 
    "Thread::run": {
        "descr": "The run method of a Thread is executed in a Thread when a call to Thread::start is made", 
        "name": "Thread::run", 
        "params": [], 
        "path": "php/thread.run", 
        "syntax": "abstract public void Thread::run ( void )", 
        "type": "Process Control"
    }, 
    "Thread::shift": {
        "descr": "Shifts an item from the objects properties table", 
        "name": "Thread::shift", 
        "params": [], 
        "path": "php/thread.shift", 
        "syntax": "final public boolean Thread::shift ( void )", 
        "type": "Process Control"
    }, 
    "Thread::start": {
        "descr": "Will start a new Thread to execute the implemented run method", 
        "name": "Thread::start", 
        "params": [
            {
                "descr": "An optional mask of inheritance constants, by default PTHREADS_INHERIT_ALL", 
                "name": "options"
            }
        ], 
        "path": "php/thread.start", 
        "syntax": "final public boolean Thread::start ([ long $options ] )", 
        "type": "Process Control"
    }, 
    "Thread::synchronized": {
        "descr": "Executes the block while retaining the synchronization lock for the current context.", 
        "name": "Thread::synchronized", 
        "params": [
            {
                "descr": "The block of code to execute", 
                "name": "block"
            }, 
            {
                "descr": "Variable length list of arguments to use as function arguments to the block", 
                "name": "..."
            }
        ], 
        "path": "php/thread.synchronized", 
        "syntax": "final public mixed Thread::synchronized ( Closure $block [, mixed $... ] )", 
        "type": "Process Control"
    }, 
    "Thread::unlock": {
        "descr": "Unlock the referenced objects storage for the calling context", 
        "name": "Thread::unlock", 
        "params": [], 
        "path": "php/thread.unlock", 
        "syntax": "final public boolean Thread::unlock ( void )", 
        "type": "Process Control"
    }, 
    "Thread::wait": {
        "descr": "Will cause the calling Thread to wait for notification from the referenced Thread", 
        "name": "Thread::wait", 
        "params": [
            {
                "descr": "An optional timeout in millionths of a second", 
                "name": "timeout"
            }
        ], 
        "path": "php/thread.wait", 
        "syntax": "final public boolean Thread::wait ([ long $timeout ] )", 
        "type": "Process Control"
    }, 
    "Transliterator": {
        "descr": "", 
        "name": "Transliterator", 
        "params": [], 
        "path": "php/class.transliterator", 
        "syntax": "public static Transliterator create ( string $id [, int $direction ] )", 
        "type": "Internationalization"
    }, 
    "Transliterator::create": {
        "descr": "Opens a Transliterator by id.", 
        "name": "Transliterator::create", 
        "params": [
            {
                "descr": "The id.", 
                "name": "id"
            }, 
            {
                "descr": "The direction, defaults to >Transliterator::FORWARD. ", 
                "name": "direction"
            }
        ], 
        "path": "php/transliterator.create", 
        "syntax": "public static Transliterator Transliterator::create ( string $id [, int $direction ] )", 
        "type": "Internationalization"
    }, 
    "Transliterator::createFromRules": {
        "descr": "Creates a Transliterator from rules.", 
        "name": "Transliterator::createFromRules", 
        "params": [
            {
                "descr": "The rules.", 
                "name": "rules"
            }, 
            {
                "descr": "The direction, defaults to >Transliterator::FORWARD. ", 
                "name": "direction"
            }
        ], 
        "path": "php/transliterator.createfromrules", 
        "syntax": "public static Transliterator Transliterator::createFromRules ( string $rules [, string $direction ] )", 
        "type": "Internationalization"
    }, 
    "Transliterator::createInverse": {
        "descr": "Opens the inverse transliterator transliterator.", 
        "name": "Transliterator::createInverse", 
        "params": [], 
        "path": "php/transliterator.createinverse", 
        "syntax": "public Transliterator Transliterator::createInverse ( void )", 
        "type": "Internationalization"
    }, 
    "Transliterator::getErrorCode": {
        "descr": "Gets the last error code for this transliterator.", 
        "name": "Transliterator::getErrorCode", 
        "params": [], 
        "path": "php/transliterator.geterrorcode", 
        "syntax": "public int Transliterator::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "Transliterator::getErrorMessage": {
        "descr": "Gets the last error message for this transliterator.", 
        "name": "Transliterator::getErrorMessage", 
        "params": [], 
        "path": "php/transliterator.geterrormessage", 
        "syntax": "public string Transliterator::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "Transliterator::listIDs": {
        "descr": "Returns an array with the registered transliterator IDs.", 
        "name": "Transliterator::listIDs", 
        "params": [], 
        "path": "php/transliterator.listids", 
        "syntax": "public static array Transliterator::listIDs ( void )", 
        "type": "Internationalization"
    }, 
    "Transliterator::transliterate": {
        "descr": "Transforms a string or part thereof using an ICU transliterator.", 
        "name": "Transliterator::transliterate", 
        "params": [
            {
                "descr": "In the procedural version, either a Transliterator or a string from which a Transliterator can be built.", 
                "name": "transliterator"
            }, 
            {
                "descr": "The string to be transformed.", 
                "name": "subject"
            }, 
            {
                "descr": "The start index (in UTF-16 code units) from which the string will start to be transformed, inclusive. ", 
                "name": "start"
            }, 
            {
                "descr": "The end index (in UTF-16 code units) until which the string will be transformed, exclusive. ", 
                "name": "end"
            }
        ], 
        "path": "php/transliterator.transliterate", 
        "syntax": "public string Transliterator::transliterate ( string $subject [, int $start [, int $end ]] )", 
        "type": "Internationalization"
    }, 
    "UConverter": {
        "descr": "", 
        "name": "UConverter", 
        "params": [], 
        "path": "php/class.uconverter", 
        "syntax": "public __construct ([ string $destination_encoding [, string $source_encoding ]] )", 
        "type": "Internationalization"
    }, 
    "UConverter::__construct": {
        "descr": "", 
        "name": "UConverter::__construct", 
        "params": [], 
        "path": "php/uconverter.construct", 
        "syntax": "public UConverter::__construct ([ string $destination_encoding [, string $source_encoding ]] )", 
        "type": "Internationalization"
    }, 
    "UConverter::convert": {
        "descr": "", 
        "name": "UConverter::convert", 
        "params": [], 
        "path": "php/uconverter.convert", 
        "syntax": "public string UConverter::convert ( string $str [, bool $reverse ] )", 
        "type": "Internationalization"
    }, 
    "UConverter::fromUCallback": {
        "descr": "", 
        "name": "UConverter::fromUCallback", 
        "params": [], 
        "path": "php/uconverter.fromucallback", 
        "syntax": "public mixed UConverter::fromUCallback ( integer $reason , string $source , string $codePoint , integer &$error )", 
        "type": "Internationalization"
    }, 
    "UConverter::getAliases": {
        "descr": "", 
        "name": "UConverter::getAliases", 
        "params": [], 
        "path": "php/uconverter.getaliases", 
        "syntax": "public static array UConverter::getAliases ([ string $name ] )", 
        "type": "Internationalization"
    }, 
    "UConverter::getAvailable": {
        "descr": "", 
        "name": "UConverter::getAvailable", 
        "params": [], 
        "path": "php/uconverter.getavailable", 
        "syntax": "public static array UConverter::getAvailable ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getDestinationEncoding": {
        "descr": "", 
        "name": "UConverter::getDestinationEncoding", 
        "params": [], 
        "path": "php/uconverter.getdestinationencoding", 
        "syntax": "public string UConverter::getDestinationEncoding ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getDestinationType": {
        "descr": "", 
        "name": "UConverter::getDestinationType", 
        "params": [], 
        "path": "php/uconverter.getdestinationtype", 
        "syntax": "public integer UConverter::getDestinationType ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getErrorCode": {
        "descr": "", 
        "name": "UConverter::getErrorCode", 
        "params": [], 
        "path": "php/uconverter.geterrorcode", 
        "syntax": "public integer UConverter::getErrorCode ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getErrorMessage": {
        "descr": "", 
        "name": "UConverter::getErrorMessage", 
        "params": [], 
        "path": "php/uconverter.geterrormessage", 
        "syntax": "public string UConverter::getErrorMessage ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getSourceEncoding": {
        "descr": "", 
        "name": "UConverter::getSourceEncoding", 
        "params": [], 
        "path": "php/uconverter.getsourceencoding", 
        "syntax": "public string UConverter::getSourceEncoding ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getSourceType": {
        "descr": "", 
        "name": "UConverter::getSourceType", 
        "params": [], 
        "path": "php/uconverter.getsourcetype", 
        "syntax": "public integer UConverter::getSourceType ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getStandards": {
        "descr": "", 
        "name": "UConverter::getStandards", 
        "params": [], 
        "path": "php/uconverter.getstandards", 
        "syntax": "public static array UConverter::getStandards ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::getSubstChars": {
        "descr": "", 
        "name": "UConverter::getSubstChars", 
        "params": [], 
        "path": "php/uconverter.getsubstchars", 
        "syntax": "public string UConverter::getSubstChars ( void )", 
        "type": "Internationalization"
    }, 
    "UConverter::reasonText": {
        "descr": "", 
        "name": "UConverter::reasonText", 
        "params": [], 
        "path": "php/uconverter.reasontext", 
        "syntax": "public static string UConverter::reasonText ([ integer $reason ] )", 
        "type": "Internationalization"
    }, 
    "UConverter::setDestinationEncoding": {
        "descr": "", 
        "name": "UConverter::setDestinationEncoding", 
        "params": [], 
        "path": "php/uconverter.setdestinationencoding", 
        "syntax": "public void UConverter::setDestinationEncoding ( string $encoding )", 
        "type": "Internationalization"
    }, 
    "UConverter::setSourceEncoding": {
        "descr": "", 
        "name": "UConverter::setSourceEncoding", 
        "params": [], 
        "path": "php/uconverter.setsourceencoding", 
        "syntax": "public void UConverter::setSourceEncoding ( string $encoding )", 
        "type": "Internationalization"
    }, 
    "UConverter::setSubstChars": {
        "descr": "", 
        "name": "UConverter::setSubstChars", 
        "params": [], 
        "path": "php/uconverter.setsubstchars", 
        "syntax": "public void UConverter::setSubstChars ( string $chars )", 
        "type": "Internationalization"
    }, 
    "UConverter::toUCallback": {
        "descr": "", 
        "name": "UConverter::toUCallback", 
        "params": [], 
        "path": "php/uconverter.toucallback", 
        "syntax": "public mixed UConverter::toUCallback ( integer $reason , string $source , string $codeUnits , integer &$error )", 
        "type": "Internationalization"
    }, 
    "UConverter::transcode": {
        "descr": "", 
        "name": "UConverter::transcode", 
        "params": [], 
        "path": "php/uconverter.transcode", 
        "syntax": "public static string UConverter::transcode ( string $str , string $toEncoding , string $fromEncoding [, array $options ] )", 
        "type": "Internationalization"
    }, 
    "UnderflowException": {
        "descr": "", 
        "name": "UnderflowException", 
        "params": [], 
        "path": "php/class.underflowexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "UnexpectedValueException": {
        "descr": "", 
        "name": "UnexpectedValueException", 
        "params": [], 
        "path": "php/class.unexpectedvalueexception", 
        "syntax": "final public string Exception::getMessage ( void )", 
        "type": "SPL/Exceptions"
    }, 
    "VarnishAdmin": {
        "descr": "", 
        "name": "VarnishAdmin", 
        "params": [], 
        "path": "php/class.varnishadmin", 
        "syntax": "public bool auth ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::__construct": {
        "descr": "", 
        "name": "VarnishAdmin::__construct", 
        "params": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance identVARNISH_CONFIG_HOST - varnish instance ipVARNISH_CONFIG_PORT - varnish instance portVARNISH_CONFIG_SECRET - varnish instance secretVARNISH_CONFIG_TIMEOUT - connection read timeoutVARNISH_CONFIG_COMPAT - varnish major version compatibility", 
                "name": "args"
            }
        ], 
        "path": "php/varnishadmin.construct", 
        "syntax": "public VarnishAdmin::__construct ([ array $args ] )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::auth": {
        "descr": "", 
        "name": "VarnishAdmin::auth", 
        "params": [], 
        "path": "php/varnishadmin.auth", 
        "syntax": "public bool VarnishAdmin::auth ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::ban": {
        "descr": "", 
        "name": "VarnishAdmin::ban", 
        "params": [
            {
                "descr": "Varnish VCL expression. It's based on the varnish ban command.", 
                "name": "vcl_regex"
            }
        ], 
        "path": "php/varnishadmin.ban", 
        "syntax": "public int VarnishAdmin::ban ( string $vcl_regex )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::banUrl": {
        "descr": "", 
        "name": "VarnishAdmin::banUrl", 
        "params": [
            {
                "descr": "URL regular expression in PCRE compatible syntax. ", 
                "name": "vcl_regex"
            }
        ], 
        "path": "php/varnishadmin.banurl", 
        "syntax": "public int VarnishAdmin::banUrl ( string $vcl_regex )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::clearPanic": {
        "descr": "", 
        "name": "VarnishAdmin::clearPanic", 
        "params": [], 
        "path": "php/varnishadmin.clearpanic", 
        "syntax": "public int VarnishAdmin::clearPanic ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::connect": {
        "descr": "", 
        "name": "VarnishAdmin::connect", 
        "params": [], 
        "path": "php/varnishadmin.connect", 
        "syntax": "public bool VarnishAdmin::connect ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::disconnect": {
        "descr": "", 
        "name": "VarnishAdmin::disconnect", 
        "params": [], 
        "path": "php/varnishadmin.disconnect", 
        "syntax": "public bool VarnishAdmin::disconnect ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::getPanic": {
        "descr": "", 
        "name": "VarnishAdmin::getPanic", 
        "params": [], 
        "path": "php/varnishadmin.getpanic", 
        "syntax": "public string VarnishAdmin::getPanic ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::getParams": {
        "descr": "", 
        "name": "VarnishAdmin::getParams", 
        "params": [], 
        "path": "php/varnishadmin.getparams", 
        "syntax": "public array VarnishAdmin::getParams ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::isRunning": {
        "descr": "", 
        "name": "VarnishAdmin::isRunning", 
        "params": [], 
        "path": "php/varnishadmin.isrunning", 
        "syntax": "public bool VarnishAdmin::isRunning ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setCompat": {
        "descr": "", 
        "name": "VarnishAdmin::setCompat", 
        "params": [
            {
                "descr": "Varnish compatibility option.", 
                "name": "compat"
            }
        ], 
        "path": "php/varnishadmin.setcompat", 
        "syntax": "public void VarnishAdmin::setCompat ( int $compat )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setHost": {
        "descr": "", 
        "name": "VarnishAdmin::setHost", 
        "params": [
            {
                "descr": "Connection host configuration parameter.", 
                "name": "host"
            }
        ], 
        "path": "php/varnishadmin.sethost", 
        "syntax": "public void VarnishAdmin::setHost ( string $host )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setIdent": {
        "descr": "", 
        "name": "VarnishAdmin::setIdent", 
        "params": [
            {
                "descr": "Connection ident configuration parameter.", 
                "name": "ident"
            }
        ], 
        "path": "php/varnishadmin.setident", 
        "syntax": "public void VarnishAdmin::setIdent ( string $ident )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setParam": {
        "descr": "", 
        "name": "VarnishAdmin::setParam", 
        "params": [
            {
                "descr": "Varnish configuration param name.", 
                "name": "name"
            }, 
            {
                "descr": "Varnish configuration param value.", 
                "name": "value"
            }
        ], 
        "path": "php/varnishadmin.setparam", 
        "syntax": "public int VarnishAdmin::setParam ( string $name , string|integer $value )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setPort": {
        "descr": "", 
        "name": "VarnishAdmin::setPort", 
        "params": [
            {
                "descr": "Connection port configuration parameter.", 
                "name": "port"
            }
        ], 
        "path": "php/varnishadmin.setport", 
        "syntax": "public void VarnishAdmin::setPort ( int $port )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setSecret": {
        "descr": "", 
        "name": "VarnishAdmin::setSecret", 
        "params": [
            {
                "descr": "Connection secret configuration parameter.", 
                "name": "secret"
            }
        ], 
        "path": "php/varnishadmin.setsecret", 
        "syntax": "public void VarnishAdmin::setSecret ( string $secret )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setTimeout": {
        "descr": "", 
        "name": "VarnishAdmin::setTimeout", 
        "params": [
            {
                "descr": "Connection timeout configuration parameter.", 
                "name": "timeout"
            }
        ], 
        "path": "php/varnishadmin.settimeout", 
        "syntax": "public void VarnishAdmin::setTimeout ( int $timeout )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::start": {
        "descr": "", 
        "name": "VarnishAdmin::start", 
        "params": [], 
        "path": "php/varnishadmin.start", 
        "syntax": "public int VarnishAdmin::start ( void )", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::stop": {
        "descr": "", 
        "name": "VarnishAdmin::stop", 
        "params": [], 
        "path": "php/varnishadmin.stop", 
        "syntax": "public int VarnishAdmin::stop ( void )", 
        "type": "Varnish"
    }, 
    "VarnishLog": {
        "descr": "", 
        "name": "VarnishLog", 
        "params": [], 
        "path": "php/class.varnishlog", 
        "syntax": "public __construct ([ array $args ] )", 
        "type": "Varnish"
    }, 
    "VarnishLog::__construct": {
        "descr": "", 
        "name": "VarnishLog::__construct", 
        "params": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance ident path", 
                "name": "args"
            }
        ], 
        "path": "php/varnishlog.construct", 
        "syntax": "public VarnishLog::__construct ([ array $args ] )", 
        "type": "Varnish"
    }, 
    "VarnishLog::getLine": {
        "descr": "", 
        "name": "VarnishLog::getLine", 
        "params": [], 
        "path": "php/varnishlog.getline", 
        "syntax": "public array VarnishLog::getLine ( void )", 
        "type": "Varnish"
    }, 
    "VarnishLog::getTagName": {
        "descr": "", 
        "name": "VarnishLog::getTagName", 
        "params": [
            {
                "descr": "Log tag index.", 
                "name": "index"
            }
        ], 
        "path": "php/varnishlog.gettagname", 
        "syntax": "public static string VarnishLog::getTagName ( int $index )", 
        "type": "Varnish"
    }, 
    "VarnishStat": {
        "descr": "", 
        "name": "VarnishStat", 
        "params": [], 
        "path": "php/class.varnishstat", 
        "syntax": "public __construct ([ array $args ] )", 
        "type": "Varnish"
    }, 
    "VarnishStat::__construct": {
        "descr": "", 
        "name": "VarnishStat::__construct", 
        "params": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance ident path", 
                "name": "args"
            }
        ], 
        "path": "php/varnishstat.construct", 
        "syntax": "public VarnishStat::__construct ([ array $args ] )", 
        "type": "Varnish"
    }, 
    "VarnishStat::getSnapshot": {
        "descr": "", 
        "name": "VarnishStat::getSnapshot", 
        "params": [], 
        "path": "php/varnishstat.getsnapshot", 
        "syntax": "public array VarnishStat::getSnapshot ( void )", 
        "type": "Varnish"
    }, 
    "Worker": {
        "descr": "", 
        "name": "Worker", 
        "params": [], 
        "path": "php/class.worker", 
        "syntax": "final public boolean chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Worker::chunk": {
        "descr": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Worker::chunk", 
        "params": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/worker.chunk", 
        "syntax": "final public boolean Worker::chunk ( long $size , boolean $preserve )", 
        "type": "Process Control"
    }, 
    "Worker::getCreatorId": {
        "descr": "Will return the identity of the Thread that created the referenced Thread", 
        "name": "Worker::getCreatorId", 
        "params": [], 
        "path": "php/worker.getcreatorid", 
        "syntax": "final public long Worker::getCreatorId ( void )", 
        "type": "Process Control"
    }, 
    "Worker::getStacked": {
        "descr": "Returns the number of Stackables waiting to be executed by the referenced Worker", 
        "name": "Worker::getStacked", 
        "params": [], 
        "path": "php/worker.getstacked", 
        "syntax": "final public int Worker::getStacked ( void )", 
        "type": "Process Control"
    }, 
    "Worker::getThreadId": {
        "descr": "Will return the identity of the referenced Worker", 
        "name": "Worker::getThreadId", 
        "params": [], 
        "path": "php/worker.getthreadid", 
        "syntax": "final public long Worker::getThreadId ( void )", 
        "type": "Process Control"
    }, 
    "Worker::isShutdown": {
        "descr": "Tell if the referenced Worker has been shutdown", 
        "name": "Worker::isShutdown", 
        "params": [], 
        "path": "php/worker.isshutdown", 
        "syntax": "final public boolean Worker::isShutdown ( void )", 
        "type": "Process Control"
    }, 
    "Worker::isWorking": {
        "descr": "Tell if a Worker is executing Stackables", 
        "name": "Worker::isWorking", 
        "params": [], 
        "path": "php/worker.isworking", 
        "syntax": "final public boolean Worker::isWorking ( void )", 
        "type": "Process Control"
    }, 
    "Worker::merge": {
        "descr": "Merges data into the current object", 
        "name": "Worker::merge", 
        "params": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/worker.merge", 
        "syntax": "final public boolean Worker::merge ( mixed $from [, mixed $overwrite ] )", 
        "type": "Process Control"
    }, 
    "Worker::pop": {
        "descr": "Pops an item from the objects properties table", 
        "name": "Worker::pop", 
        "params": [], 
        "path": "php/worker.pop", 
        "syntax": "final public boolean Worker::pop ( void )", 
        "type": "Process Control"
    }, 
    "Worker::run": {
        "descr": "The run method should prepare the Workers members ( and resources ) - Stackables have access to the Worker and it's methods/members/resources during execution", 
        "name": "Worker::run", 
        "params": [], 
        "path": "php/worker.run", 
        "syntax": "abstract public void Worker::run ( void )", 
        "type": "Process Control"
    }, 
    "Worker::shift": {
        "descr": "Shifts an item from the objects properties table", 
        "name": "Worker::shift", 
        "params": [], 
        "path": "php/worker.shift", 
        "syntax": "final public boolean Worker::shift ( void )", 
        "type": "Process Control"
    }, 
    "Worker::shutdown": {
        "descr": "Shuts down the Worker after executing all the Stackables previously stacked", 
        "name": "Worker::shutdown", 
        "params": [], 
        "path": "php/worker.shutdown", 
        "syntax": "final public boolean Worker::shutdown ( void )", 
        "type": "Process Control"
    }, 
    "Worker::stack": {
        "descr": "Appends the referenced Stackable to the stack of the referenced Worker", 
        "name": "Worker::stack", 
        "params": [
            {
                "descr": "An object of type Stackable to be executed by the referenced Worker", 
                "name": "work"
            }
        ], 
        "path": "php/worker.stack", 
        "syntax": "final public int Worker::stack ( Stackable $work )", 
        "type": "Process Control"
    }, 
    "Worker::start": {
        "descr": "Will start a new Thread, executing Worker::run and then waiting for Stackables", 
        "name": "Worker::start", 
        "params": [
            {
                "descr": "An optional mask of inheritance constants, by default PTHREADS_INHERIT_ALL", 
                "name": "options"
            }
        ], 
        "path": "php/worker.start", 
        "syntax": "final public boolean Worker::start ([ long $options ] )", 
        "type": "Process Control"
    }, 
    "Worker::unstack": {
        "descr": "Removes the referenced Stackable ( or all Stackables if parameters are void ) from stack of the referenced Worker", 
        "name": "Worker::unstack", 
        "params": [
            {
                "descr": "An object of type Stackable", 
                "name": "work"
            }
        ], 
        "path": "php/worker.unstack", 
        "syntax": "final public int Worker::unstack ([ Stackable $work ] )", 
        "type": "Process Control"
    }, 
    "XMLReader": {
        "descr": "", 
        "name": "XMLReader", 
        "params": [], 
        "path": "php/class.xmlreader", 
        "syntax": "public bool close ( void )", 
        "type": "XML"
    }, 
    "XMLReader::XML": {
        "descr": "Set the data containing the XML to parse.", 
        "name": "XMLReader::XML", 
        "params": [
            {
                "descr": "String containing the XML to be parsed.", 
                "name": "source"
            }, 
            {
                "descr": "The document encoding or NULL.", 
                "name": "encoding"
            }, 
            {
                "descr": "A bitmask of the LIBXML_* constants.", 
                "name": "options"
            }
        ], 
        "path": "php/xmlreader.xml", 
        "syntax": "public bool XMLReader::xml ( string $source [, string $encoding [, int $options = 0 ]] )", 
        "type": "XML"
    }, 
    "XMLReader::close": {
        "descr": "Closes the input the XMLReader object is currently parsing.", 
        "name": "XMLReader::close", 
        "params": [], 
        "path": "php/xmlreader.close", 
        "syntax": "public bool XMLReader::close ( void )", 
        "type": "XML"
    }, 
    "XMLReader::expand": {
        "descr": "This method copies the current node and returns the appropriate DOM object.", 
        "name": "XMLReader::expand", 
        "params": [], 
        "path": "php/xmlreader.expand", 
        "syntax": "public DOMNode XMLReader::expand ([ DOMNode $basenode ] )", 
        "type": "XML"
    }, 
    "XMLReader::getAttribute": {
        "descr": "Returns the value of a named attribute or NULL if the attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/xmlreader.getattribute", 
        "syntax": "public string XMLReader::getAttribute ( string $name )", 
        "type": "XML"
    }, 
    "XMLReader::getAttributeNo": {
        "descr": "Returns the value of an attribute based on its position or an empty string if attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttributeNo", 
        "params": [
            {
                "descr": "The position of the attribute.", 
                "name": "index"
            }
        ], 
        "path": "php/xmlreader.getattributeno", 
        "syntax": "public string XMLReader::getAttributeNo ( int $index )", 
        "type": "XML"
    }, 
    "XMLReader::getAttributeNs": {
        "descr": "Returns the value of an attribute by name and namespace URI or an empty string if attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttributeNs", 
        "params": [
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/xmlreader.getattributens", 
        "syntax": "public string XMLReader::getAttributeNs ( string $localName , string $namespaceURI )", 
        "type": "XML"
    }, 
    "XMLReader::getParserProperty": {
        "descr": "Indicates if specified property has been set.", 
        "name": "XMLReader::getParserProperty", 
        "params": [
            {
                "descr": "One of the parser option constants.", 
                "name": "property"
            }
        ], 
        "path": "php/xmlreader.getparserproperty", 
        "syntax": "public bool XMLReader::getParserProperty ( int $property )", 
        "type": "XML"
    }, 
    "XMLReader::isValid": {
        "descr": "Returns a boolean indicating if the document being parsed is currently valid.", 
        "name": "XMLReader::isValid", 
        "params": [], 
        "path": "php/xmlreader.isvalid", 
        "syntax": "public bool XMLReader::isValid ( void )", 
        "type": "XML"
    }, 
    "XMLReader::lookupNamespace": {
        "descr": "Lookup in scope namespace for a given prefix.", 
        "name": "XMLReader::lookupNamespace", 
        "params": [
            {
                "descr": "String containing the prefix.", 
                "name": "prefix"
            }
        ], 
        "path": "php/xmlreader.lookupnamespace", 
        "syntax": "public bool XMLReader::lookupNamespace ( string $prefix )", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttribute": {
        "descr": "Positions cursor on the named attribute.", 
        "name": "XMLReader::moveToAttribute", 
        "params": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/xmlreader.movetoattribute", 
        "syntax": "public bool XMLReader::moveToAttribute ( string $name )", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttributeNo": {
        "descr": "Positions cursor on attribute based on its position.", 
        "name": "XMLReader::moveToAttributeNo", 
        "params": [
            {
                "descr": "The position of the attribute.", 
                "name": "index"
            }
        ], 
        "path": "php/xmlreader.movetoattributeno", 
        "syntax": "public bool XMLReader::moveToAttributeNo ( int $index )", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttributeNs": {
        "descr": "Positions cursor on the named attribute in specified namespace.", 
        "name": "XMLReader::moveToAttributeNs", 
        "params": [
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/xmlreader.movetoattributens", 
        "syntax": "public bool XMLReader::moveToAttributeNs ( string $localName , string $namespaceURI )", 
        "type": "XML"
    }, 
    "XMLReader::moveToElement": {
        "descr": "Moves cursor to the parent Element of current Attribute.", 
        "name": "XMLReader::moveToElement", 
        "params": [], 
        "path": "php/xmlreader.movetoelement", 
        "syntax": "public bool XMLReader::moveToElement ( void )", 
        "type": "XML"
    }, 
    "XMLReader::moveToFirstAttribute": {
        "descr": "Moves cursor to the first Attribute.", 
        "name": "XMLReader::moveToFirstAttribute", 
        "params": [], 
        "path": "php/xmlreader.movetofirstattribute", 
        "syntax": "public bool XMLReader::moveToFirstAttribute ( void )", 
        "type": "XML"
    }, 
    "XMLReader::moveToNextAttribute": {
        "descr": "Moves cursor to the next Attribute if positioned on an Attribute or moves to first attribute if positioned on an Element.", 
        "name": "XMLReader::moveToNextAttribute", 
        "params": [], 
        "path": "php/xmlreader.movetonextattribute", 
        "syntax": "public bool XMLReader::moveToNextAttribute ( void )", 
        "type": "XML"
    }, 
    "XMLReader::next": {
        "descr": "Positions cursor on the next node skipping all subtrees.", 
        "name": "XMLReader::next", 
        "params": [
            {
                "descr": "The name of the next node to move to.", 
                "name": "localname"
            }
        ], 
        "path": "php/xmlreader.next", 
        "syntax": "public bool XMLReader::next ([ string $localname ] )", 
        "type": "XML"
    }, 
    "XMLReader::open": {
        "descr": "Set the URI containing the XML document to be parsed.", 
        "name": "XMLReader::open", 
        "params": [
            {
                "descr": "URI pointing to the document.", 
                "name": "URI"
            }, 
            {
                "descr": "The document encoding or NULL.", 
                "name": "encoding"
            }, 
            {
                "descr": "A bitmask of the LIBXML_* constants.", 
                "name": "options"
            }
        ], 
        "path": "php/xmlreader.open", 
        "syntax": "public bool XMLReader::open ( string $URI [, string $encoding [, int $options = 0 ]] )", 
        "type": "XML"
    }, 
    "XMLReader::read": {
        "descr": "Moves cursor to the next node in the document.", 
        "name": "XMLReader::read", 
        "params": [], 
        "path": "php/xmlreader.read", 
        "syntax": "public bool XMLReader::read ( void )", 
        "type": "XML"
    }, 
    "XMLReader::readInnerXML": {
        "descr": "Reads the contents of the current node, including child nodes and markup.", 
        "name": "XMLReader::readInnerXML", 
        "params": [], 
        "path": "php/xmlreader.readinnerxml", 
        "syntax": "public string XMLReader::readInnerXML ( void )", 
        "type": "XML"
    }, 
    "XMLReader::readOuterXML": {
        "descr": "Reads the contents of the current node, including the node itself.", 
        "name": "XMLReader::readOuterXML", 
        "params": [], 
        "path": "php/xmlreader.readouterxml", 
        "syntax": "public string XMLReader::readOuterXML ( void )", 
        "type": "XML"
    }, 
    "XMLReader::readString": {
        "descr": "Reads the contents of the current node as a string.", 
        "name": "XMLReader::readString", 
        "params": [], 
        "path": "php/xmlreader.readstring", 
        "syntax": "public string XMLReader::readString ( void )", 
        "type": "XML"
    }, 
    "XMLReader::setParserProperty": {
        "descr": "Set parser options. The options must be set after XMLReader::open() or XMLReader::xml() are called and before the first XMLReader::read() call.", 
        "name": "XMLReader::setParserProperty", 
        "params": [
            {
                "descr": "One of the parser option constants.", 
                "name": "property"
            }, 
            {
                "descr": "If set to TRUE the option will be enabled otherwise will be disabled.", 
                "name": "value"
            }
        ], 
        "path": "php/xmlreader.setparserproperty", 
        "syntax": "public bool XMLReader::setParserProperty ( int $property , bool $value )", 
        "type": "XML"
    }, 
    "XMLReader::setRelaxNGSchema": {
        "descr": "Set the filename or URI for the RelaxNG Schema to use for validation.", 
        "name": "XMLReader::setRelaxNGSchema", 
        "params": [
            {
                "descr": "filename or URI pointing to a RelaxNG Schema.", 
                "name": "filename"
            }
        ], 
        "path": "php/xmlreader.setrelaxngschema", 
        "syntax": "public bool XMLReader::setRelaxNGSchema ( string $filename )", 
        "type": "XML"
    }, 
    "XMLReader::setRelaxNGSchemaSource": {
        "descr": "Set the data containing a RelaxNG Schema to use for validation.", 
        "name": "XMLReader::setRelaxNGSchemaSource", 
        "params": [
            {
                "descr": "String containing the RelaxNG Schema.", 
                "name": "source"
            }
        ], 
        "path": "php/xmlreader.setrelaxngschemasource", 
        "syntax": "public bool XMLReader::setRelaxNGSchemaSource ( string $source )", 
        "type": "XML"
    }, 
    "XMLReader::setSchema": {
        "descr": "Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().", 
        "name": "XMLReader::setSchema", 
        "params": [
            {
                "descr": "The filename of the XSD schema.", 
                "name": "filename"
            }
        ], 
        "path": "php/xmlreader.setschema", 
        "syntax": "public bool XMLReader::setSchema ( string $filename )", 
        "type": "XML"
    }, 
    "XMLWriter::endAttribute": {
        "descr": "Ends the current attribute.", 
        "name": "XMLWriter::endAttribute", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-attribute", 
        "syntax": "bool XMLWriter::endAttribute ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endCData": {
        "descr": "Ends the current CDATA section.", 
        "name": "XMLWriter::endCData", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-cdata", 
        "syntax": "bool XMLWriter::endCData ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endComment": {
        "descr": "Ends the current comment.", 
        "name": "XMLWriter::endComment", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-comment", 
        "syntax": "bool XMLWriter::endComment ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endDTD": {
        "descr": "Ends the DTD of the document.", 
        "name": "XMLWriter::endDTD", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd", 
        "syntax": "bool XMLWriter::endDTD ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDAttlist": {
        "descr": "Ends the current DTD attribute list.", 
        "name": "XMLWriter::endDTDAttlist", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-attlist", 
        "syntax": "bool XMLWriter::endDTDAttlist ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDElement": {
        "descr": "Ends the current DTD element.", 
        "name": "XMLWriter::endDTDElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-element", 
        "syntax": "bool XMLWriter::endDTDElement ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDEntity": {
        "descr": "Ends the current DTD entity.", 
        "name": "XMLWriter::endDTDEntity", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-entity", 
        "syntax": "bool XMLWriter::endDTDEntity ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endDocument": {
        "descr": "Ends the current document.", 
        "name": "XMLWriter::endDocument", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-document", 
        "syntax": "bool XMLWriter::endDocument ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endElement": {
        "descr": "Ends the current element.", 
        "name": "XMLWriter::endElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-element", 
        "syntax": "bool XMLWriter::endElement ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::endPI": {
        "descr": "Ends the current processing instruction.", 
        "name": "XMLWriter::endPI", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-pi", 
        "syntax": "bool XMLWriter::endPI ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::flush": {
        "descr": "Flushes the current buffer.", 
        "name": "XMLWriter::flush", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether to empty the buffer or not. ", 
                "name": "empty"
            }
        ], 
        "path": "php/function.xmlwriter-flush", 
        "syntax": "mixed XMLWriter::flush ([ bool $empty = true ] )", 
        "type": "XML"
    }, 
    "XMLWriter::fullEndElement": {
        "descr": "End the current xml element. Writes an end tag even if the element is empty.", 
        "name": "XMLWriter::fullEndElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-full-end-element", 
        "syntax": "bool XMLWriter::fullEndElement ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::openMemory": {
        "descr": "Creates a new XMLWriter using memory for string output.", 
        "name": "XMLWriter::openMemory", 
        "params": [], 
        "path": "php/function.xmlwriter-open-memory", 
        "syntax": "bool XMLWriter::openMemory ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::openURI": {
        "descr": "Creates a new XMLWriter using uri for the output.", 
        "name": "XMLWriter::openURI", 
        "params": [
            {
                "descr": "The URI of the resource for the output.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-open-uri", 
        "syntax": "bool XMLWriter::openURI ( string $uri )", 
        "type": "XML"
    }, 
    "XMLWriter::outputMemory": {
        "descr": "Returns the current buffer.", 
        "name": "XMLWriter::outputMemory", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether to flush the output buffer or not. ", 
                "name": "flush"
            }
        ], 
        "path": "php/function.xmlwriter-output-memory", 
        "syntax": "string XMLWriter::outputMemory ([ bool $flush = true ] )", 
        "type": "XML"
    }, 
    "XMLWriter::setIndent": {
        "descr": "Toggles indentation on or off.", 
        "name": "XMLWriter::setIndent", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether indentation is enabled.", 
                "name": "indent"
            }
        ], 
        "path": "php/function.xmlwriter-set-indent", 
        "syntax": "bool XMLWriter::setIndent ( bool $indent )", 
        "type": "XML"
    }, 
    "XMLWriter::setIndentString": {
        "descr": "Sets the string which will be used to indent each element/attribute of the resulting xml.", 
        "name": "XMLWriter::setIndentString", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The indentation string.", 
                "name": "indentString"
            }
        ], 
        "path": "php/function.xmlwriter-set-indent-string", 
        "syntax": "bool XMLWriter::setIndentString ( string $indentString )", 
        "type": "XML"
    }, 
    "XMLWriter::startAttribute": {
        "descr": "Starts an attribute.", 
        "name": "XMLWriter::startAttribute", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-attribute", 
        "syntax": "bool XMLWriter::startAttribute ( string $name )", 
        "type": "XML"
    }, 
    "XMLWriter::startAttributeNS": {
        "descr": "Starts a namespaced attribute.", 
        "name": "XMLWriter::startAttributeNS", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-start-attribute-ns", 
        "syntax": "bool XMLWriter::startAttributeNS ( string $prefix , string $name , string $uri )", 
        "type": "XML"
    }, 
    "XMLWriter::startCData": {
        "descr": "Starts a CDATA.", 
        "name": "XMLWriter::startCData", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-start-cdata", 
        "syntax": "bool XMLWriter::startCData ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::startComment": {
        "descr": "Starts a comment.", 
        "name": "XMLWriter::startComment", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-start-comment", 
        "syntax": "bool XMLWriter::startComment ( void )", 
        "type": "XML"
    }, 
    "XMLWriter::startDTD": {
        "descr": "Starts a DTD.", 
        "name": "XMLWriter::startDTD", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd", 
        "syntax": "bool XMLWriter::startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDAttlist": {
        "descr": "Starts a DTD attribute list.", 
        "name": "XMLWriter::startDTDAttlist", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The attribute list name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-attlist", 
        "syntax": "bool XMLWriter::startDTDAttlist ( string $name )", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDElement": {
        "descr": "Starts a DTD element.", 
        "name": "XMLWriter::startDTDElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-element", 
        "syntax": "bool XMLWriter::startDTDElement ( string $qualifiedName )", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDEntity": {
        "descr": "Starts a DTD entity.", 
        "name": "XMLWriter::startDTDEntity", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the entity.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-entity", 
        "syntax": "bool XMLWriter::startDTDEntity ( string $name , bool $isparam )", 
        "type": "XML"
    }, 
    "XMLWriter::startDocument": {
        "descr": "Starts a document.", 
        "name": "XMLWriter::startDocument", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The version number of the document as part of the XML declaration.", 
                "name": "version"
            }, 
            {
                "descr": "The encoding of the document as part of the XML declaration.", 
                "name": "encoding"
            }, 
            {
                "descr": "yes or no.", 
                "name": "standalone"
            }
        ], 
        "path": "php/function.xmlwriter-start-document", 
        "syntax": "bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )", 
        "type": "XML"
    }, 
    "XMLWriter::startElement": {
        "descr": "Starts an element.", 
        "name": "XMLWriter::startElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-element", 
        "syntax": "bool XMLWriter::startElement ( string $name )", 
        "type": "XML"
    }, 
    "XMLWriter::startElementNS": {
        "descr": "Starts a namespaced element.", 
        "name": "XMLWriter::startElementNS", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-start-element-ns", 
        "syntax": "bool XMLWriter::startElementNS ( string $prefix , string $name , string $uri )", 
        "type": "XML"
    }, 
    "XMLWriter::startPI": {
        "descr": "Starts a processing instruction tag.", 
        "name": "XMLWriter::startPI", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }
        ], 
        "path": "php/function.xmlwriter-start-pi", 
        "syntax": "bool XMLWriter::startPI ( string $target )", 
        "type": "XML"
    }, 
    "XMLWriter::text": {
        "descr": "Writes a text.", 
        "name": "XMLWriter::text", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the text.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-text", 
        "syntax": "bool XMLWriter::text ( string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeAttribute": {
        "descr": "Writes a full attribute.", 
        "name": "XMLWriter::writeAttribute", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }
        ], 
        "path": "php/function.xmlwriter-write-attribute", 
        "syntax": "bool XMLWriter::writeAttribute ( string $name , string $value )", 
        "type": "XML"
    }, 
    "XMLWriter::writeAttributeNS": {
        "descr": "Writes a full namespaced attribute.", 
        "name": "XMLWriter::writeAttributeNS", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }, 
            {
                "descr": "The attribute value.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-attribute-ns", 
        "syntax": "bool XMLWriter::writeAttributeNS ( string $prefix , string $name , string $uri , string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeCData": {
        "descr": "Writes a full CDATA.", 
        "name": "XMLWriter::writeCData", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the CDATA.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-cdata", 
        "syntax": "bool XMLWriter::writeCData ( string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeComment": {
        "descr": "Writes a full comment.", 
        "name": "XMLWriter::writeComment", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-comment", 
        "syntax": "bool XMLWriter::writeComment ( string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTD": {
        "descr": "Writes a full DTD.", 
        "name": "XMLWriter::writeDTD", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The DTD name.", 
                "name": "name"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }, 
            {
                "descr": "The content of the DTD.", 
                "name": "subset"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd", 
        "syntax": "bool XMLWriter::writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDAttlist": {
        "descr": "Writes a DTD attribute list.", 
        "name": "XMLWriter::writeDTDAttlist", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the DTD attribute list.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the DTD attribute list.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-attlist", 
        "syntax": "bool XMLWriter::writeDTDAttlist ( string $name , string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDElement": {
        "descr": "Writes a full DTD element.", 
        "name": "XMLWriter::writeDTDElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the DTD element.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the element.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-element", 
        "syntax": "bool XMLWriter::writeDTDElement ( string $name , string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDEntity": {
        "descr": "Writes a full DTD entity.", 
        "name": "XMLWriter::writeDTDEntity", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the entity.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the entity.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-entity", 
        "syntax": "bool XMLWriter::writeDTDEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )", 
        "type": "XML"
    }, 
    "XMLWriter::writeElement": {
        "descr": "Writes a full element tag.", 
        "name": "XMLWriter::writeElement", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The element contents.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-element", 
        "syntax": "bool XMLWriter::writeElement ( string $name [, string $content ] )", 
        "type": "XML"
    }, 
    "XMLWriter::writeElementNS": {
        "descr": "Writes a full namespaced element tag.", 
        "name": "XMLWriter::writeElementNS", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }, 
            {
                "descr": "The element contents.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-element-ns", 
        "syntax": "bool XMLWriter::writeElementNS ( string $prefix , string $name , string $uri [, string $content ] )", 
        "type": "XML"
    }, 
    "XMLWriter::writePI": {
        "descr": "Writes a processing instruction.", 
        "name": "XMLWriter::writePI", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }, 
            {
                "descr": "The content of the processing instruction.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-pi", 
        "syntax": "bool XMLWriter::writePI ( string $target , string $content )", 
        "type": "XML"
    }, 
    "XMLWriter::writeRaw": {
        "descr": "Writes a raw xml text.", 
        "name": "XMLWriter::writeRaw", 
        "params": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The text string to write.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-raw", 
        "syntax": "bool XMLWriter::writeRaw ( string $content )", 
        "type": "XML"
    }, 
    "XSLTProcessor": {
        "descr": "", 
        "name": "XSLTProcessor", 
        "params": [], 
        "path": "php/class.xsltprocessor", 
        "syntax": "string getParameter ( string $namespaceURI , string $localName )", 
        "type": "XML"
    }, 
    "XSLTProcessor::getParameter": {
        "descr": "Gets a parameter if previously set by XSLTProcessor::setParameter().", 
        "name": "XSLTProcessor::getParameter", 
        "params": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "localName"
            }
        ], 
        "path": "php/xsltprocessor.getparameter", 
        "syntax": "string XSLTProcessor::getParameter ( string $namespaceURI , string $localName )", 
        "type": "XML"
    }, 
    "XSLTProcessor::hasExsltSupport": {
        "descr": "This method determines if PHP was built with the \u00bb EXSLT library.", 
        "name": "XSLTProcessor::hasExsltSupport", 
        "params": [], 
        "path": "php/xsltprocessor.hasexsltsupport", 
        "syntax": "bool XSLTProcessor::hasExsltSupport ( void )", 
        "type": "XML"
    }, 
    "XSLTProcessor::importStylesheet": {
        "descr": "This method imports the stylesheet into the XSLTProcessor for transformations.", 
        "name": "XSLTProcessor::importStylesheet", 
        "params": [
            {
                "descr": "The imported style sheet as a DOMDocument or SimpleXMLElement object.", 
                "name": "stylesheet"
            }
        ], 
        "path": "php/xsltprocessor.importstylesheet", 
        "syntax": "void XSLTProcessor::importStylesheet ( object $stylesheet )", 
        "type": "XML"
    }, 
    "XSLTProcessor::registerPHPFunctions": {
        "descr": "This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets.", 
        "name": "XSLTProcessor::registerPHPFunctions", 
        "params": [
            {
                "descr": "Use this parameter to only allow certain functions to be called from XSLT. ", 
                "name": "restrict"
            }
        ], 
        "path": "php/xsltprocessor.registerphpfunctions", 
        "syntax": "void XSLTProcessor::registerPHPFunctions ([ mixed $restrict ] )", 
        "type": "XML"
    }, 
    "XSLTProcessor::removeParameter": {
        "descr": "Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet.", 
        "name": "XSLTProcessor::removeParameter", 
        "params": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "localName"
            }
        ], 
        "path": "php/xsltprocessor.removeparameter", 
        "syntax": "bool XSLTProcessor::removeParameter ( string $namespaceURI , string $localName )", 
        "type": "XML"
    }, 
    "XSLTProcessor::setParameter": {
        "descr": "Sets the value of one or more parameters to be used in subsequent transformations with XSLTProcessor. If the parameter doesn't exist in the stylesheet it will be ignored.", 
        "name": "XSLTProcessor::setParameter", 
        "params": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespace"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "name"
            }, 
            {
                "descr": "The new value of the XSLT parameter.", 
                "name": "value"
            }, 
            {
                "descr": "An array of name => value pairs. ", 
                "name": "options"
            }
        ], 
        "path": "php/xsltprocessor.setparameter", 
        "syntax": "bool XSLTProcessor::setParameter ( string $namespace , string $name , string $value )", 
        "type": "XML"
    }, 
    "XSLTProcessor::setProfiling": {
        "descr": "Sets the file to output profiling information when processing a stylesheet.", 
        "name": "XSLTProcessor::setProfiling", 
        "params": [
            {
                "descr": "Path to the file to dump profiling information.", 
                "name": "filename"
            }
        ], 
        "path": "php/xsltprocessor.setprofiling", 
        "syntax": "bool XSLTProcessor::setProfiling ( string $filename )", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToDoc": {
        "descr": "Transforms the source node to a DOMDocument applying the stylesheet given by the XSLTProcessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToDoc", 
        "params": [
            {
                "descr": "The node to be transformed.", 
                "name": "doc"
            }
        ], 
        "path": "php/xsltprocessor.transformtodoc", 
        "syntax": "DOMDocument XSLTProcessor::transformToDoc ( DOMNode $doc )", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToUri": {
        "descr": "Transforms the source node to an URI applying the stylesheet given by the XSLTProcessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToUri", 
        "params": [
            {
                "descr": "The document to transform.", 
                "name": "doc"
            }, 
            {
                "descr": "The target URI for the transformation.", 
                "name": "uri"
            }
        ], 
        "path": "php/xsltprocessor.transformtouri", 
        "syntax": "int XSLTProcessor::transformToURI ( DOMDocument $doc , string $uri )", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToXML": {
        "descr": "Transforms the source node to a string applying the stylesheet given by the xsltprocessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToXML", 
        "params": [
            {
                "descr": "The transformed document.", 
                "name": "doc"
            }
        ], 
        "path": "php/xsltprocessor.transformtoxml", 
        "syntax": "string XSLTProcessor::transformToXML ( DOMDocument $doc )", 
        "type": "XML"
    }, 
    "XsltProcessor::getSecurityPrefs": {
        "descr": "", 
        "name": "XsltProcessor::getSecurityPrefs", 
        "params": [], 
        "path": "php/xsltprocessor.getsecurityprefs", 
        "syntax": "public int XsltProcessor::getSecurityPrefs ( void )", 
        "type": "XML"
    }, 
    "XsltProcessor::setSecurityPrefs": {
        "descr": "", 
        "name": "XsltProcessor::setSecurityPrefs", 
        "params": [], 
        "path": "php/xsltprocessor.setsecurityprefs", 
        "syntax": "public int XsltProcessor::setSecurityPrefs ( int $securityPrefs )", 
        "type": "XML"
    }, 
    "Yaf_Action_Abstract": {
        "descr": "", 
        "name": "Yaf_Action_Abstract", 
        "params": [], 
        "path": "php/class.yaf-action-abstract", 
        "syntax": "abstract publicmixed execute ([ mixed $arg [, mixed $... ]] )", 
        "type": "Yaf"
    }, 
    "Yaf_Action_Abstract::execute": {
        "descr": "user should always define this method for a action, this is the entry point of an action. Yaf_Action_Abstract::execute() may have agruments.", 
        "name": "Yaf_Action_Abstract::execute", 
        "params": [], 
        "path": "php/yaf-action-abstract.execute", 
        "syntax": "abstract publicmixed Yaf_Action_Abstract::execute ([ mixed $arg [, mixed $... ]] )", 
        "type": "Yaf"
    }, 
    "Yaf_Action_Abstract::getController": {
        "descr": "retrieve current controller object.", 
        "name": "Yaf_Action_Abstract::getController", 
        "params": [], 
        "path": "php/yaf-action-abstract.getcontroller", 
        "syntax": "publicYaf_Controller_Abstract Yaf_Action_Abstract::getController ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application": {
        "descr": "", 
        "name": "Yaf_Application", 
        "params": [], 
        "path": "php/class.yaf-application", 
        "syntax": "public static void app ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__clone": {
        "descr": "", 
        "name": "Yaf_Application::__clone", 
        "params": [], 
        "path": "php/yaf-application.clone", 
        "syntax": "private void Yaf_Application::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__construct": {
        "descr": "Instance a Yaf_Application.", 
        "name": "Yaf_Application::__construct", 
        "params": [
            {
                "descr": "A ini config file path, or a config array   If is a ini config file, there should be a section named as the one defined by yaf.environ, which is \"product\" by default. ", 
                "name": "config"
            }, 
            {
                "descr": "Which section will be loaded as the final config", 
                "name": "envrion"
            }
        ], 
        "path": "php/yaf-application.construct", 
        "syntax": "publicYaf_Application::__construct ( mixed $config [, string $envrion ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__destruct": {
        "descr": "", 
        "name": "Yaf_Application::__destruct", 
        "params": [], 
        "path": "php/yaf-application.destruct", 
        "syntax": "public void Yaf_Application::__destruct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__sleep": {
        "descr": "", 
        "name": "Yaf_Application::__sleep", 
        "params": [], 
        "path": "php/yaf-application.sleep", 
        "syntax": "private void Yaf_Application::__sleep ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__wakeup": {
        "descr": "", 
        "name": "Yaf_Application::__wakeup", 
        "params": [], 
        "path": "php/yaf-application.wakeup", 
        "syntax": "private void Yaf_Application::__wakeup ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::app": {
        "descr": "Retrieve the Yaf_Application instance. Alternatively, we also could use Yaf_Dispatcher::getApplication().", 
        "name": "Yaf_Application::app", 
        "params": [], 
        "path": "php/yaf-application.app", 
        "syntax": "public static void Yaf_Application::app ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::bootstrap": {
        "descr": "Run a Bootstrap, all the methods defined in the Bootstrap and named with prefix \"_init\" will be called according to their declaration order, if the parameter bootstrap is not supplied, Yaf will look for a Bootstrap under application.directory.", 
        "name": "Yaf_Application::bootstrap", 
        "params": [
            {
                "descr": "A Yaf_Bootstrap_Abstract instance", 
                "name": "bootstrap"
            }
        ], 
        "path": "php/yaf-application.bootstrap", 
        "syntax": "public void Yaf_Application::bootstrap ([ Yaf_Bootstrap_Abstract $bootstrap ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::clearLastError": {
        "descr": "", 
        "name": "Yaf_Application::clearLastError", 
        "params": [], 
        "path": "php/yaf-application.clearlasterror", 
        "syntax": "public Yaf_Application Yaf_Application::clearLastError ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::environ": {
        "descr": "Retrive environ which was defined in yaf.environ which has a default value \"product\".", 
        "name": "Yaf_Application::environ", 
        "params": [], 
        "path": "php/yaf-application.environ", 
        "syntax": "public void Yaf_Application::environ ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::execute": {
        "descr": "This method is typically used to run Yaf_Application in a crontab work. Make the crontab work can also use the autoloader and Bootstrap mechanism.", 
        "name": "Yaf_Application::execute", 
        "params": [
            {
                "descr": "a valid callback", 
                "name": "entry"
            }, 
            {
                "descr": "parameters will pass to the callback", 
                "name": "..."
            }
        ], 
        "path": "php/yaf-application.execute", 
        "syntax": "public void Yaf_Application::execute ( callable $entry , string $... )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getAppDirectory": {
        "descr": "", 
        "name": "Yaf_Application::getAppDirectory", 
        "params": [], 
        "path": "php/yaf-application.getappdirectory", 
        "syntax": "public Yaf_Application Yaf_Application::getAppDirectory ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getConfig": {
        "descr": "", 
        "name": "Yaf_Application::getConfig", 
        "params": [], 
        "path": "php/yaf-application.getconfig", 
        "syntax": "public Yaf_Config_Abstract Yaf_Application::getConfig ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getDispatcher": {
        "descr": "", 
        "name": "Yaf_Application::getDispatcher", 
        "params": [], 
        "path": "php/yaf-application.getdispatcher", 
        "syntax": "public Yaf_Dispatcher Yaf_Application::getDispatcher ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getLastErrorMsg": {
        "descr": "", 
        "name": "Yaf_Application::getLastErrorMsg", 
        "params": [], 
        "path": "php/yaf-application.getlasterrormsg", 
        "syntax": "public string Yaf_Application::getLastErrorMsg ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getLastErrorNo": {
        "descr": "", 
        "name": "Yaf_Application::getLastErrorNo", 
        "params": [], 
        "path": "php/yaf-application.getlasterrorno", 
        "syntax": "public int Yaf_Application::getLastErrorNo ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getModules": {
        "descr": "Get the modules list defined in config, if no one defined, there will always be a module named \"Index\".", 
        "name": "Yaf_Application::getModules", 
        "params": [], 
        "path": "php/yaf-application.getmodules", 
        "syntax": "public array Yaf_Application::getModules ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::run": {
        "descr": "Run a Yaf_Application, let the Yaf_Application accept a request and route this request, dispatch to controller/action and render response. Finally, return the response to the client.", 
        "name": "Yaf_Application::run", 
        "params": [], 
        "path": "php/yaf-application.run", 
        "syntax": "public void Yaf_Application::run ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Application::setAppDirectory": {
        "descr": "", 
        "name": "Yaf_Application::setAppDirectory", 
        "params": [], 
        "path": "php/yaf-application.setappdirectory", 
        "syntax": "public Yaf_Application Yaf_Application::setAppDirectory ( string $directory )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract": {
        "descr": "", 
        "name": "Yaf_Config_Abstract", 
        "params": [], 
        "path": "php/class.yaf-config-abstract", 
        "syntax": "abstract public mixed get ( string $name , mixed $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::get": {
        "descr": "", 
        "name": "Yaf_Config_Abstract::get", 
        "params": [], 
        "path": "php/yaf-config-abstract.get", 
        "syntax": "abstract public mixed Yaf_Config_Abstract::get ( string $name , mixed $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::readonly": {
        "descr": "", 
        "name": "Yaf_Config_Abstract::readonly", 
        "params": [], 
        "path": "php/yaf-config-abstract.readonly", 
        "syntax": "abstract public bool Yaf_Config_Abstract::readonly ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::set": {
        "descr": "", 
        "name": "Yaf_Config_Abstract::set", 
        "params": [], 
        "path": "php/yaf-config-abstract.set", 
        "syntax": "abstract public Yaf_Config_Abstract Yaf_Config_Abstract::set ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::toArray": {
        "descr": "", 
        "name": "Yaf_Config_Abstract::toArray", 
        "params": [], 
        "path": "php/yaf-config-abstract.toarray", 
        "syntax": "abstract public array Yaf_Config_Abstract::toArray ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini": {
        "descr": "", 
        "name": "Yaf_Config_Ini", 
        "params": [], 
        "path": "php/class.yaf-config-ini", 
        "syntax": "public __construct ( string $config_file [, string $section ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__construct": {
        "descr": "Yaf_Config_Ini constructor", 
        "name": "Yaf_Config_Ini::__construct", 
        "params": [
            {
                "descr": "path to an INI configure file", 
                "name": "config_file"
            }, 
            {
                "descr": "which section in that INI file you want to be parsed", 
                "name": "section"
            }
        ], 
        "path": "php/yaf-config-ini.construct", 
        "syntax": "public Yaf_Config_Ini::__construct ( string $config_file [, string $section ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__get": {
        "descr": "", 
        "name": "Yaf_Config_Ini::__get", 
        "params": [], 
        "path": "php/yaf-config-ini.get", 
        "syntax": "public void Yaf_Config_Ini::__get ([ string $name ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__isset": {
        "descr": "", 
        "name": "Yaf_Config_Ini::__isset", 
        "params": [], 
        "path": "php/yaf-config-ini.isset", 
        "syntax": "public void Yaf_Config_Ini::__isset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__set": {
        "descr": "", 
        "name": "Yaf_Config_Ini::__set", 
        "params": [], 
        "path": "php/yaf-config-ini.set", 
        "syntax": "public void Yaf_Config_Ini::__set ( string $name , mixed $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::count": {
        "descr": "", 
        "name": "Yaf_Config_Ini::count", 
        "params": [], 
        "path": "php/yaf-config-ini.count", 
        "syntax": "public void Yaf_Config_Ini::count ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::current": {
        "descr": "", 
        "name": "Yaf_Config_Ini::current", 
        "params": [], 
        "path": "php/yaf-config-ini.current", 
        "syntax": "public void Yaf_Config_Ini::current ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::key": {
        "descr": "", 
        "name": "Yaf_Config_Ini::key", 
        "params": [], 
        "path": "php/yaf-config-ini.key", 
        "syntax": "public void Yaf_Config_Ini::key ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::next": {
        "descr": "", 
        "name": "Yaf_Config_Ini::next", 
        "params": [], 
        "path": "php/yaf-config-ini.next", 
        "syntax": "public void Yaf_Config_Ini::next ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetExists": {
        "descr": "", 
        "name": "Yaf_Config_Ini::offsetExists", 
        "params": [], 
        "path": "php/yaf-config-ini.offsetexists", 
        "syntax": "public void Yaf_Config_Ini::offsetExists ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetGet": {
        "descr": "", 
        "name": "Yaf_Config_Ini::offsetGet", 
        "params": [], 
        "path": "php/yaf-config-ini.offsetget", 
        "syntax": "public void Yaf_Config_Ini::offsetGet ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetSet": {
        "descr": "", 
        "name": "Yaf_Config_Ini::offsetSet", 
        "params": [], 
        "path": "php/yaf-config-ini.offsetset", 
        "syntax": "public void Yaf_Config_Ini::offsetSet ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetUnset": {
        "descr": "", 
        "name": "Yaf_Config_Ini::offsetUnset", 
        "params": [], 
        "path": "php/yaf-config-ini.offsetunset", 
        "syntax": "public void Yaf_Config_Ini::offsetUnset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::readonly": {
        "descr": "", 
        "name": "Yaf_Config_Ini::readonly", 
        "params": [], 
        "path": "php/yaf-config-ini.readonly", 
        "syntax": "public void Yaf_Config_Ini::readonly ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::rewind": {
        "descr": "", 
        "name": "Yaf_Config_Ini::rewind", 
        "params": [], 
        "path": "php/yaf-config-ini.rewind", 
        "syntax": "public void Yaf_Config_Ini::rewind ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::toArray": {
        "descr": "Returns a PHP array from the Yaf_Config_Ini", 
        "name": "Yaf_Config_Ini::toArray", 
        "params": [], 
        "path": "php/yaf-config-ini.toarray", 
        "syntax": "public array Yaf_Config_Ini::toArray ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::valid": {
        "descr": "", 
        "name": "Yaf_Config_Ini::valid", 
        "params": [], 
        "path": "php/yaf-config-ini.valid", 
        "syntax": "public void Yaf_Config_Ini::valid ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple": {
        "descr": "", 
        "name": "Yaf_Config_Simple", 
        "params": [], 
        "path": "php/class.yaf-config-simple", 
        "syntax": "public __construct ( string $config_file [, string $section ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__construct": {
        "descr": "", 
        "name": "Yaf_Config_Simple::__construct", 
        "params": [], 
        "path": "php/yaf-config-simple.construct", 
        "syntax": "public Yaf_Config_Simple::__construct ( string $config_file [, string $section ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__get": {
        "descr": "", 
        "name": "Yaf_Config_Simple::__get", 
        "params": [], 
        "path": "php/yaf-config-simple.get", 
        "syntax": "public void Yaf_Config_Simple::__get ([ string $name ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__isset": {
        "descr": "", 
        "name": "Yaf_Config_Simple::__isset", 
        "params": [], 
        "path": "php/yaf-config-simple.isset", 
        "syntax": "public void Yaf_Config_Simple::__isset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__set": {
        "descr": "", 
        "name": "Yaf_Config_Simple::__set", 
        "params": [], 
        "path": "php/yaf-config-simple.set", 
        "syntax": "public void Yaf_Config_Simple::__set ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::count": {
        "descr": "", 
        "name": "Yaf_Config_Simple::count", 
        "params": [], 
        "path": "php/yaf-config-simple.count", 
        "syntax": "public void Yaf_Config_Simple::count ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::current": {
        "descr": "", 
        "name": "Yaf_Config_Simple::current", 
        "params": [], 
        "path": "php/yaf-config-simple.current", 
        "syntax": "public void Yaf_Config_Simple::current ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::key": {
        "descr": "", 
        "name": "Yaf_Config_Simple::key", 
        "params": [], 
        "path": "php/yaf-config-simple.key", 
        "syntax": "public void Yaf_Config_Simple::key ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::next": {
        "descr": "", 
        "name": "Yaf_Config_Simple::next", 
        "params": [], 
        "path": "php/yaf-config-simple.next", 
        "syntax": "public void Yaf_Config_Simple::next ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetExists": {
        "descr": "", 
        "name": "Yaf_Config_Simple::offsetExists", 
        "params": [], 
        "path": "php/yaf-config-simple.offsetexists", 
        "syntax": "public void Yaf_Config_Simple::offsetExists ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetGet": {
        "descr": "", 
        "name": "Yaf_Config_Simple::offsetGet", 
        "params": [], 
        "path": "php/yaf-config-simple.offsetget", 
        "syntax": "public void Yaf_Config_Simple::offsetGet ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetSet": {
        "descr": "", 
        "name": "Yaf_Config_Simple::offsetSet", 
        "params": [], 
        "path": "php/yaf-config-simple.offsetset", 
        "syntax": "public void Yaf_Config_Simple::offsetSet ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetUnset": {
        "descr": "", 
        "name": "Yaf_Config_Simple::offsetUnset", 
        "params": [], 
        "path": "php/yaf-config-simple.offsetunset", 
        "syntax": "public void Yaf_Config_Simple::offsetUnset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::readonly": {
        "descr": "", 
        "name": "Yaf_Config_Simple::readonly", 
        "params": [], 
        "path": "php/yaf-config-simple.readonly", 
        "syntax": "public void Yaf_Config_Simple::readonly ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::rewind": {
        "descr": "", 
        "name": "Yaf_Config_Simple::rewind", 
        "params": [], 
        "path": "php/yaf-config-simple.rewind", 
        "syntax": "public void Yaf_Config_Simple::rewind ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::toArray": {
        "descr": "Returns a PHP array from the Yaf_Config_Simple", 
        "name": "Yaf_Config_Simple::toArray", 
        "params": [], 
        "path": "php/yaf-config-simple.toarray", 
        "syntax": "public array Yaf_Config_Simple::toArray ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::valid": {
        "descr": "", 
        "name": "Yaf_Config_Simple::valid", 
        "params": [], 
        "path": "php/yaf-config-simple.valid", 
        "syntax": "public void Yaf_Config_Simple::valid ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract", 
        "params": [], 
        "path": "php/class.yaf-controller-abstract", 
        "syntax": "final private void __clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::__clone": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::__clone", 
        "params": [], 
        "path": "php/yaf-controller-abstract.clone", 
        "syntax": "final private void Yaf_Controller_Abstract::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::__construct": {
        "descr": "Yaf_Controller_Abstract::__construct() is final, which means it can not be overridden. You may want to see Yaf_Controller_Abstract::init() instead.", 
        "name": "Yaf_Controller_Abstract::__construct", 
        "params": [], 
        "path": "php/yaf-controller-abstract.construct", 
        "syntax": "final private Yaf_Controller_Abstract::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::display": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::display", 
        "params": [], 
        "path": "php/yaf-controller-abstract.display", 
        "syntax": "protected bool Yaf_Controller_Abstract::display ( string $tpl [, array $parameters ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::forward": {
        "descr": "forward current execution process to other action.", 
        "name": "Yaf_Controller_Abstract::forward", 
        "params": [
            {
                "descr": "destination module name, if NULL was given, then default module name is assumed", 
                "name": "module"
            }, 
            {
                "descr": "destination controller name", 
                "name": "controller"
            }, 
            {
                "descr": "destination action name", 
                "name": "action"
            }, 
            {
                "descr": "calling arguments", 
                "name": "paramters"
            }
        ], 
        "path": "php/yaf-controller-abstract.forward", 
        "syntax": "public void Yaf_Controller_Abstract::forward ( string $action [, array $paramters ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getInvokeArg": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::getInvokeArg", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getinvokearg", 
        "syntax": "public void Yaf_Controller_Abstract::getInvokeArg ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getInvokeArgs": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::getInvokeArgs", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getinvokeargs", 
        "syntax": "public void Yaf_Controller_Abstract::getInvokeArgs ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getModuleName": {
        "descr": "get the controller's module name", 
        "name": "Yaf_Controller_Abstract::getModuleName", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getmodulename", 
        "syntax": "public string Yaf_Controller_Abstract::getModuleName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getRequest": {
        "descr": "retrieve current request object", 
        "name": "Yaf_Controller_Abstract::getRequest", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getrequest", 
        "syntax": "public Yaf_Request_Abstract Yaf_Controller_Abstract::getRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getResponse": {
        "descr": "retrieve current response object", 
        "name": "Yaf_Controller_Abstract::getResponse", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getresponse", 
        "syntax": "public Yaf_Response_Abstract Yaf_Controller_Abstract::getResponse ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getView": {
        "descr": "retrieve view engine", 
        "name": "Yaf_Controller_Abstract::getView", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getview", 
        "syntax": "public Yaf_View_Interface Yaf_Controller_Abstract::getView ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getViewpath": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::getViewpath", 
        "params": [], 
        "path": "php/yaf-controller-abstract.getviewpath", 
        "syntax": "public void Yaf_Controller_Abstract::getViewpath ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::init": {
        "descr": "Yaf_Controller_Abstract::__construct() is final, which means users can not override it. but users can define Yaf_Controller_Abstract::init(), which will be called after controller object is instantiated.", 
        "name": "Yaf_Controller_Abstract::init", 
        "params": [], 
        "path": "php/yaf-controller-abstract.init", 
        "syntax": "public void Yaf_Controller_Abstract::init ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::initView": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::initView", 
        "params": [], 
        "path": "php/yaf-controller-abstract.initview", 
        "syntax": "public void Yaf_Controller_Abstract::initView ([ array $options ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::redirect": {
        "descr": "redirect to a URL by sending a 302 header", 
        "name": "Yaf_Controller_Abstract::redirect", 
        "params": [
            {
                "descr": "a location URL", 
                "name": "url"
            }
        ], 
        "path": "php/yaf-controller-abstract.redirect", 
        "syntax": "public bool Yaf_Controller_Abstract::redirect ( string $url )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::render": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::render", 
        "params": [], 
        "path": "php/yaf-controller-abstract.render", 
        "syntax": "protected string Yaf_Controller_Abstract::render ( string $tpl [, array $parameters ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::setViewpath": {
        "descr": "", 
        "name": "Yaf_Controller_Abstract::setViewpath", 
        "params": [], 
        "path": "php/yaf-controller-abstract.setviewpath", 
        "syntax": "public void Yaf_Controller_Abstract::setViewpath ( string $view_directory )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher": {
        "descr": "", 
        "name": "Yaf_Dispatcher", 
        "params": [], 
        "path": "php/class.yaf-dispatcher", 
        "syntax": "public Yaf_Dispatcher autoRender ([ bool $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__clone": {
        "descr": "", 
        "name": "Yaf_Dispatcher::__clone", 
        "params": [], 
        "path": "php/yaf-dispatcher.clone", 
        "syntax": "private void Yaf_Dispatcher::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__construct": {
        "descr": "", 
        "name": "Yaf_Dispatcher::__construct", 
        "params": [], 
        "path": "php/yaf-dispatcher.construct", 
        "syntax": "publicYaf_Dispatcher::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__sleep": {
        "descr": "", 
        "name": "Yaf_Dispatcher::__sleep", 
        "params": [], 
        "path": "php/yaf-dispatcher.sleep", 
        "syntax": "private void Yaf_Dispatcher::__sleep ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__wakeup": {
        "descr": "", 
        "name": "Yaf_Dispatcher::__wakeup", 
        "params": [], 
        "path": "php/yaf-dispatcher.wakeup", 
        "syntax": "private void Yaf_Dispatcher::__wakeup ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::autoRender": {
        "descr": "Yaf_Dispatcher will render automatically after dispatches a incoming request, you can prevent the rendering by calling this method with flag TRUE", 
        "name": "Yaf_Dispatcher::autoRender", 
        "params": [
            {
                "descr": "bool Note:  since 2.2.0, if this parameter is not given, then the current state will be renturned", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.autorender", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::autoRender ([ bool $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::catchException": {
        "descr": "While the application.dispatcher.throwException is On(you can also calling to Yaf_Dispatcher::throwException(TRUE)() to enable it), Yaf will throw Exception whe error occurrs instead of trigger error.", 
        "name": "Yaf_Dispatcher::catchException", 
        "params": [
            {
                "descr": "bool", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.catchexception", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::catchException ([ bool $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::disableView": {
        "descr": "disable view engine, used in some app that user will output by theirself", 
        "name": "Yaf_Dispatcher::disableView", 
        "params": [], 
        "path": "php/yaf-dispatcher.disableview", 
        "syntax": "public bool Yaf_Dispatcher::disableView ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::dispatch": {
        "descr": "This method does the heavy work of the Yaf_Dispatcher. It take a request object.", 
        "name": "Yaf_Dispatcher::dispatch", 
        "params": [], 
        "path": "php/yaf-dispatcher.dispatch", 
        "syntax": "public Yaf_Response_Abstract Yaf_Dispatcher::dispatch ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::enableView": {
        "descr": "", 
        "name": "Yaf_Dispatcher::enableView", 
        "params": [], 
        "path": "php/yaf-dispatcher.enableview", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::enableView ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::flushInstantly": {
        "descr": "", 
        "name": "Yaf_Dispatcher::flushInstantly", 
        "params": [
            {
                "descr": "bool Note:  since 2.2.0, if this parameter is not given, then the current state will be renturned", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.flushinstantly", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::flushInstantly ([ bool $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getApplication": {
        "descr": "Retrive the Yaf_Application instance. same as Yaf_Application::app().", 
        "name": "Yaf_Dispatcher::getApplication", 
        "params": [], 
        "path": "php/yaf-dispatcher.getapplication", 
        "syntax": "public Yaf_Application Yaf_Dispatcher::getApplication ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getInstance": {
        "descr": "", 
        "name": "Yaf_Dispatcher::getInstance", 
        "params": [], 
        "path": "php/yaf-dispatcher.getinstance", 
        "syntax": "public static Yaf_Dispatcher Yaf_Dispatcher::getInstance ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getRequest": {
        "descr": "", 
        "name": "Yaf_Dispatcher::getRequest", 
        "params": [], 
        "path": "php/yaf-dispatcher.getrequest", 
        "syntax": "public Yaf_Request_Abstract Yaf_Dispatcher::getRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getRouter": {
        "descr": "", 
        "name": "Yaf_Dispatcher::getRouter", 
        "params": [], 
        "path": "php/yaf-dispatcher.getrouter", 
        "syntax": "public Yaf_Router Yaf_Dispatcher::getRouter ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::initView": {
        "descr": "", 
        "name": "Yaf_Dispatcher::initView", 
        "params": [], 
        "path": "php/yaf-dispatcher.initview", 
        "syntax": "public Yaf_View_Interface Yaf_Dispatcher::initView ( string $templates_dir [, array $options ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::registerPlugin": {
        "descr": "Register a plugin(see Yaf_Plugin_Abstract). Generally, we register plugins in Bootstrap(see Yaf_Bootstrap_Abstract).", 
        "name": "Yaf_Dispatcher::registerPlugin", 
        "params": [], 
        "path": "php/yaf-dispatcher.registerplugin", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::registerPlugin ( Yaf_Plugin_Abstract $plugin )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::returnResponse": {
        "descr": "", 
        "name": "Yaf_Dispatcher::returnResponse", 
        "params": [], 
        "path": "php/yaf-dispatcher.returnresponse", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::returnResponse ( bool $flag )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultAction": {
        "descr": "", 
        "name": "Yaf_Dispatcher::setDefaultAction", 
        "params": [], 
        "path": "php/yaf-dispatcher.setdefaultaction", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultAction ( string $action )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultController": {
        "descr": "", 
        "name": "Yaf_Dispatcher::setDefaultController", 
        "params": [], 
        "path": "php/yaf-dispatcher.setdefaultcontroller", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultController ( string $controller )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultModule": {
        "descr": "", 
        "name": "Yaf_Dispatcher::setDefaultModule", 
        "params": [], 
        "path": "php/yaf-dispatcher.setdefaultmodule", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultModule ( string $module )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setErrorHandler": {
        "descr": "Set error handler for Yaf. when application.dispatcher.throwException is off, Yaf will trigger catchable error while unexpected errors occrred.", 
        "name": "Yaf_Dispatcher::setErrorHandler", 
        "params": [
            {
                "descr": "A callable callback", 
                "name": "callback"
            }
        ], 
        "path": "php/yaf-dispatcher.seterrorhandler", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setErrorHandler ( call $callback , int $error_types )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setRequest": {
        "descr": "", 
        "name": "Yaf_Dispatcher::setRequest", 
        "params": [], 
        "path": "php/yaf-dispatcher.setrequest", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setRequest ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setView": {
        "descr": "This method proviods a solution for that if you want use a custom view engine instead of Yaf_View_Simple", 
        "name": "Yaf_Dispatcher::setView", 
        "params": [
            {
                "descr": "A Yaf_View_Interface instance", 
                "name": "view"
            }
        ], 
        "path": "php/yaf-dispatcher.setview", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::setView ( Yaf_View_Interface $view )", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::throwException": {
        "descr": "Siwtch on/off exception throwing while unexpected error occurring. When this is on, Yaf will throwing exceptions instead of triggering catchable errors.", 
        "name": "Yaf_Dispatcher::throwException", 
        "params": [
            {
                "descr": "bool", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.throwexception", 
        "syntax": "public Yaf_Dispatcher Yaf_Dispatcher::throwException ([ bool $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception": {
        "descr": "", 
        "name": "Yaf_Exception", 
        "params": [], 
        "path": "php/class.yaf-exception", 
        "syntax": "public __construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception::__construct": {
        "descr": "", 
        "name": "Yaf_Exception::__construct", 
        "params": [], 
        "path": "php/yaf-exception.construct", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception::getPrevious": {
        "descr": "", 
        "name": "Yaf_Exception::getPrevious", 
        "params": [], 
        "path": "php/yaf-exception.getprevious", 
        "syntax": "public void Yaf_Exception::getPrevious ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_DispatchFailed": {
        "descr": "", 
        "name": "Yaf_Exception_DispatchFailed", 
        "params": [], 
        "path": "php/class.yaf-exception-dispatchfailed", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed": {
        "descr": "", 
        "name": "Yaf_Exception_LoadFailed", 
        "params": [], 
        "path": "php/class.yaf-exception-loadfailed", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Action": {
        "descr": "", 
        "name": "Yaf_Exception_LoadFailed_Action", 
        "params": [], 
        "path": "php/class.yaf-exception-loadfailed-action", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Controller": {
        "descr": "", 
        "name": "Yaf_Exception_LoadFailed_Controller", 
        "params": [], 
        "path": "php/class.yaf-exception-loadfailed-controller", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Module": {
        "descr": "", 
        "name": "Yaf_Exception_LoadFailed_Module", 
        "params": [], 
        "path": "php/class.yaf-exception-loadfailed-module", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_View": {
        "descr": "", 
        "name": "Yaf_Exception_LoadFailed_View", 
        "params": [], 
        "path": "php/class.yaf-exception-loadfailed-view", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_RouterFailed": {
        "descr": "", 
        "name": "Yaf_Exception_RouterFailed", 
        "params": [], 
        "path": "php/class.yaf-exception-routerfailed", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_StartupError": {
        "descr": "", 
        "name": "Yaf_Exception_StartupError", 
        "params": [], 
        "path": "php/class.yaf-exception-startuperror", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_TypeError": {
        "descr": "", 
        "name": "Yaf_Exception_TypeError", 
        "params": [], 
        "path": "php/class.yaf-exception-typeerror", 
        "syntax": "public Yaf_Exception::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader": {
        "descr": "", 
        "name": "Yaf_Loader", 
        "params": [], 
        "path": "php/class.yaf-loader", 
        "syntax": "public void autoload ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__clone": {
        "descr": "", 
        "name": "Yaf_Loader::__clone", 
        "params": [], 
        "path": "php/yaf-loader.clone", 
        "syntax": "private void Yaf_Loader::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__construct": {
        "descr": "", 
        "name": "Yaf_Loader::__construct", 
        "params": [], 
        "path": "php/yaf-loader.construct", 
        "syntax": "publicYaf_Loader::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__sleep": {
        "descr": "", 
        "name": "Yaf_Loader::__sleep", 
        "params": [], 
        "path": "php/yaf-loader.sleep", 
        "syntax": "private void Yaf_Loader::__sleep ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__wakeup": {
        "descr": "", 
        "name": "Yaf_Loader::__wakeup", 
        "params": [], 
        "path": "php/yaf-loader.wakeup", 
        "syntax": "private void Yaf_Loader::__wakeup ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::autoload": {
        "descr": "", 
        "name": "Yaf_Loader::autoload", 
        "params": [], 
        "path": "php/yaf-loader.autoload", 
        "syntax": "public void Yaf_Loader::autoload ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::clearLocalNamespace": {
        "descr": "", 
        "name": "Yaf_Loader::clearLocalNamespace", 
        "params": [], 
        "path": "php/yaf-loader.clearlocalnamespace", 
        "syntax": "public void Yaf_Loader::clearLocalNamespace ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getInstance": {
        "descr": "", 
        "name": "Yaf_Loader::getInstance", 
        "params": [], 
        "path": "php/yaf-loader.getinstance", 
        "syntax": "public static void Yaf_Loader::getInstance ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getLibraryPath": {
        "descr": "", 
        "name": "Yaf_Loader::getLibraryPath", 
        "params": [], 
        "path": "php/yaf-loader.getlibrarypath", 
        "syntax": "public Yaf_Loader Yaf_Loader::getLibraryPath ([ bool $is_global = false ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getLocalNamespace": {
        "descr": "", 
        "name": "Yaf_Loader::getLocalNamespace", 
        "params": [], 
        "path": "php/yaf-loader.getlocalnamespace", 
        "syntax": "public void Yaf_Loader::getLocalNamespace ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::import": {
        "descr": "", 
        "name": "Yaf_Loader::import", 
        "params": [], 
        "path": "php/yaf-loader.import", 
        "syntax": "public static void Yaf_Loader::import ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::isLocalName": {
        "descr": "", 
        "name": "Yaf_Loader::isLocalName", 
        "params": [], 
        "path": "php/yaf-loader.islocalname", 
        "syntax": "public void Yaf_Loader::isLocalName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::registerLocalNamespace": {
        "descr": "Register local class prefix name, Yaf_Loader search classes in two library directories, the one is configured via application.library.directory(in application.ini) which is called local libraray directory; the other is configured via yaf.library (in php.ini) which is callled global library directory, since it can be shared by many applications in the same server.", 
        "name": "Yaf_Loader::registerLocalNamespace", 
        "params": [
            {
                "descr": "a string or a array of class name prefix. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/yaf-loader.registerlocalnamespace", 
        "syntax": "public void Yaf_Loader::registerLocalNamespace ( mixed $prefix )", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::setLibraryPath": {
        "descr": "", 
        "name": "Yaf_Loader::setLibraryPath", 
        "params": [], 
        "path": "php/yaf-loader.setlibrarypath", 
        "syntax": "public Yaf_Loader Yaf_Loader::setLibraryPath ( string $directory [, bool $is_global = false ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract": {
        "descr": "", 
        "name": "Yaf_Plugin_Abstract", 
        "params": [], 
        "path": "php/class.yaf-plugin-abstract", 
        "syntax": "public void dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::dispatchLoopShutdown": {
        "descr": "This is the latest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called after the dispatch loop finished.", 
        "name": "Yaf_Plugin_Abstract::dispatchLoopShutdown", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.dispatchloopshutdown", 
        "syntax": "public void Yaf_Plugin_Abstract::dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::dispatchLoopStartup": {
        "descr": "", 
        "name": "Yaf_Plugin_Abstract::dispatchLoopStartup", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.dispatchloopstartup", 
        "syntax": "public void Yaf_Plugin_Abstract::dispatchLoopStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::postDispatch": {
        "descr": "", 
        "name": "Yaf_Plugin_Abstract::postDispatch", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.postdispatch", 
        "syntax": "public void Yaf_Plugin_Abstract::postDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::preDispatch": {
        "descr": "", 
        "name": "Yaf_Plugin_Abstract::preDispatch", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.predispatch", 
        "syntax": "public void Yaf_Plugin_Abstract::preDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::preResponse": {
        "descr": "", 
        "name": "Yaf_Plugin_Abstract::preResponse", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.preresponse", 
        "syntax": "public void Yaf_Plugin_Abstract::preResponse ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::routerShutdown": {
        "descr": "This hook will be trigged after the route process finished, this hook is usually used for login check.", 
        "name": "Yaf_Plugin_Abstract::routerShutdown", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.routershutdown", 
        "syntax": "public void Yaf_Plugin_Abstract::routerShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::routerStartup": {
        "descr": "This is the earliest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called before routing a request.", 
        "name": "Yaf_Plugin_Abstract::routerStartup", 
        "params": [], 
        "path": "php/yaf-plugin-abstract.routerstartup", 
        "syntax": "public void Yaf_Plugin_Abstract::routerStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry": {
        "descr": "", 
        "name": "Yaf_Registry", 
        "params": [], 
        "path": "php/class.yaf-registry", 
        "syntax": "private void __clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::__clone": {
        "descr": "", 
        "name": "Yaf_Registry::__clone", 
        "params": [], 
        "path": "php/yaf-registry.clone", 
        "syntax": "private void Yaf_Registry::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::__construct": {
        "descr": "", 
        "name": "Yaf_Registry::__construct", 
        "params": [], 
        "path": "php/yaf-registry.construct", 
        "syntax": "Yaf_Registry::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::del": {
        "descr": "Remove an item from registry", 
        "name": "Yaf_Registry::del", 
        "params": [], 
        "path": "php/yaf-registry.del", 
        "syntax": "public static void Yaf_Registry::del ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::get": {
        "descr": "Retrieve an item from registry", 
        "name": "Yaf_Registry::get", 
        "params": [], 
        "path": "php/yaf-registry.get", 
        "syntax": "public static mixed Yaf_Registry::get ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::has": {
        "descr": "Check whether an item exists", 
        "name": "Yaf_Registry::has", 
        "params": [], 
        "path": "php/yaf-registry.has", 
        "syntax": "public static bool Yaf_Registry::has ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::set": {
        "descr": "Add an item into registry", 
        "name": "Yaf_Registry::set", 
        "params": [], 
        "path": "php/yaf-registry.set", 
        "syntax": "public static bool Yaf_Registry::set ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract": {
        "descr": "", 
        "name": "Yaf_Request_Abstract", 
        "params": [], 
        "path": "php/class.yaf-request-abstract", 
        "syntax": "public void getActionName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getActionName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getActionName", 
        "params": [], 
        "path": "php/yaf-request-abstract.getactionname", 
        "syntax": "public void Yaf_Request_Abstract::getActionName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getBaseUri": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getBaseUri", 
        "params": [], 
        "path": "php/yaf-request-abstract.getbaseuri", 
        "syntax": "public void Yaf_Request_Abstract::getBaseUri ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getControllerName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getControllerName", 
        "params": [], 
        "path": "php/yaf-request-abstract.getcontrollername", 
        "syntax": "public void Yaf_Request_Abstract::getControllerName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getEnv": {
        "descr": "Retrieve ENV variable", 
        "name": "Yaf_Request_Abstract::getEnv", 
        "params": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-abstract.getenv", 
        "syntax": "public void Yaf_Request_Abstract::getEnv ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getException": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getException", 
        "params": [], 
        "path": "php/yaf-request-abstract.getexception", 
        "syntax": "public void Yaf_Request_Abstract::getException ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getLanguage": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getLanguage", 
        "params": [], 
        "path": "php/yaf-request-abstract.getlanguage", 
        "syntax": "public void Yaf_Request_Abstract::getLanguage ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getMethod": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getMethod", 
        "params": [], 
        "path": "php/yaf-request-abstract.getmethod", 
        "syntax": "public void Yaf_Request_Abstract::getMethod ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getModuleName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getModuleName", 
        "params": [], 
        "path": "php/yaf-request-abstract.getmodulename", 
        "syntax": "public void Yaf_Request_Abstract::getModuleName ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getParam": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getParam", 
        "params": [], 
        "path": "php/yaf-request-abstract.getparam", 
        "syntax": "public void Yaf_Request_Abstract::getParam ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getParams": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getParams", 
        "params": [], 
        "path": "php/yaf-request-abstract.getparams", 
        "syntax": "public void Yaf_Request_Abstract::getParams ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getRequestUri": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::getRequestUri", 
        "params": [], 
        "path": "php/yaf-request-abstract.getrequesturi", 
        "syntax": "public void Yaf_Request_Abstract::getRequestUri ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getServer": {
        "descr": "Retrieve SERVER variable", 
        "name": "Yaf_Request_Abstract::getServer", 
        "params": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the variable can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-abstract.getserver", 
        "syntax": "public void Yaf_Request_Abstract::getServer ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isCli": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isCli", 
        "params": [], 
        "path": "php/yaf-request-abstract.iscli", 
        "syntax": "public void Yaf_Request_Abstract::isCli ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isDispatched": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isDispatched", 
        "params": [], 
        "path": "php/yaf-request-abstract.isdispatched", 
        "syntax": "public void Yaf_Request_Abstract::isDispatched ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isGet": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isGet", 
        "params": [], 
        "path": "php/yaf-request-abstract.isget", 
        "syntax": "public void Yaf_Request_Abstract::isGet ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isHead": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isHead", 
        "params": [], 
        "path": "php/yaf-request-abstract.ishead", 
        "syntax": "public void Yaf_Request_Abstract::isHead ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isOptions": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isOptions", 
        "params": [], 
        "path": "php/yaf-request-abstract.isoptions", 
        "syntax": "public void Yaf_Request_Abstract::isOptions ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isPost": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isPost", 
        "params": [], 
        "path": "php/yaf-request-abstract.ispost", 
        "syntax": "public void Yaf_Request_Abstract::isPost ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isPut": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isPut", 
        "params": [], 
        "path": "php/yaf-request-abstract.isput", 
        "syntax": "public void Yaf_Request_Abstract::isPut ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isRouted": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isRouted", 
        "params": [], 
        "path": "php/yaf-request-abstract.isrouted", 
        "syntax": "public void Yaf_Request_Abstract::isRouted ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isXmlHttpRequest": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::isXmlHttpRequest", 
        "params": [], 
        "path": "php/yaf-request-abstract.isxmlhttprequest", 
        "syntax": "public void Yaf_Request_Abstract::isXmlHttpRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setActionName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setActionName", 
        "params": [], 
        "path": "php/yaf-request-abstract.setactionname", 
        "syntax": "public void Yaf_Request_Abstract::setActionName ( string $action )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setBaseUri": {
        "descr": "Set base URI, base URI is used when doing routing, in routing phase request URI is used to route a request, while base URI is used to skip the leadding part(base URI) of request URI. That is, if comes a request with request URI a/b/c, then if you set base URI to \"a/b\", only \"/c\" will be used in routing phase.", 
        "name": "Yaf_Request_Abstract::setBaseUri", 
        "params": [
            {
                "descr": "base URI", 
                "name": "uir"
            }
        ], 
        "path": "php/yaf-request-abstract.setbaseuri", 
        "syntax": "public bool Yaf_Request_Abstract::setBaseUri ( string $uir )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setControllerName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setControllerName", 
        "params": [], 
        "path": "php/yaf-request-abstract.setcontrollername", 
        "syntax": "public void Yaf_Request_Abstract::setControllerName ( string $controller )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setDispatched": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setDispatched", 
        "params": [], 
        "path": "php/yaf-request-abstract.setdispatched", 
        "syntax": "public void Yaf_Request_Abstract::setDispatched ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setModuleName": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setModuleName", 
        "params": [], 
        "path": "php/yaf-request-abstract.setmodulename", 
        "syntax": "public void Yaf_Request_Abstract::setModuleName ( string $module )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setParam": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setParam", 
        "params": [], 
        "path": "php/yaf-request-abstract.setparam", 
        "syntax": "public void Yaf_Request_Abstract::setParam ( string $name [, string $value ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setRequestUri": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setRequestUri", 
        "params": [], 
        "path": "php/yaf-request-abstract.setrequesturi", 
        "syntax": "public void Yaf_Request_Abstract::setRequestUri ( string $uir )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setRouted": {
        "descr": "", 
        "name": "Yaf_Request_Abstract::setRouted", 
        "params": [], 
        "path": "php/yaf-request-abstract.setrouted", 
        "syntax": "public void Yaf_Request_Abstract::setRouted ([ string $flag ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http": {
        "descr": "", 
        "name": "Yaf_Request_Http", 
        "params": [], 
        "path": "php/class.yaf-request-http", 
        "syntax": "private void __clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::__clone": {
        "descr": "", 
        "name": "Yaf_Request_Http::__clone", 
        "params": [], 
        "path": "php/yaf-request-http.clone", 
        "syntax": "private void Yaf_Request_Http::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::__construct": {
        "descr": "", 
        "name": "Yaf_Request_Http::__construct", 
        "params": [], 
        "path": "php/yaf-request-http.construct", 
        "syntax": "Yaf_Request_Http::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::get": {
        "descr": "Retrieve variable from client, this method will search the name in request pramas, if the name is not found, then will search in POST, GET, Cookie, Server", 
        "name": "Yaf_Request_Http::get", 
        "params": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.get", 
        "syntax": "public mixed Yaf_Request_Http::get ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getCookie": {
        "descr": "Retrieve Cookie variable", 
        "name": "Yaf_Request_Http::getCookie", 
        "params": [
            {
                "descr": "the cookie name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the cookie can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getcookie", 
        "syntax": "public mixed Yaf_Request_Http::getCookie ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getFiles": {
        "descr": "", 
        "name": "Yaf_Request_Http::getFiles", 
        "params": [], 
        "path": "php/yaf-request-http.getfiles", 
        "syntax": "public void Yaf_Request_Http::getFiles ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getPost": {
        "descr": "Retrieve POST variable", 
        "name": "Yaf_Request_Http::getPost", 
        "params": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getpost", 
        "syntax": "public mixed Yaf_Request_Http::getPost ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getQuery": {
        "descr": "Retrieve GET variable", 
        "name": "Yaf_Request_Http::getQuery", 
        "params": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the variable can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getquery", 
        "syntax": "public mixed Yaf_Request_Http::getQuery ( string $name [, string $default ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getRequest": {
        "descr": "", 
        "name": "Yaf_Request_Http::getRequest", 
        "params": [], 
        "path": "php/yaf-request-http.getrequest", 
        "syntax": "public void Yaf_Request_Http::getRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::isXmlHttpRequest": {
        "descr": "Check the request whether it is a Ajax Request.", 
        "name": "Yaf_Request_Http::isXmlHttpRequest", 
        "params": [], 
        "path": "php/yaf-request-http.isxmlhttprequest", 
        "syntax": "public bool Yaf_Request_Http::isXmlHttpRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple": {
        "descr": "", 
        "name": "Yaf_Request_Simple", 
        "params": [], 
        "path": "php/class.yaf-request-simple", 
        "syntax": "private void __clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::__clone": {
        "descr": "", 
        "name": "Yaf_Request_Simple::__clone", 
        "params": [], 
        "path": "php/yaf-request-simple.clone", 
        "syntax": "private void Yaf_Request_Simple::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::__construct": {
        "descr": "", 
        "name": "Yaf_Request_Simple::__construct", 
        "params": [], 
        "path": "php/yaf-request-simple.construct", 
        "syntax": "Yaf_Request_Simple::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::get": {
        "descr": "", 
        "name": "Yaf_Request_Simple::get", 
        "params": [], 
        "path": "php/yaf-request-simple.get", 
        "syntax": "public void Yaf_Request_Simple::get ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getCookie": {
        "descr": "", 
        "name": "Yaf_Request_Simple::getCookie", 
        "params": [], 
        "path": "php/yaf-request-simple.getcookie", 
        "syntax": "public void Yaf_Request_Simple::getCookie ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getFiles": {
        "descr": "", 
        "name": "Yaf_Request_Simple::getFiles", 
        "params": [], 
        "path": "php/yaf-request-simple.getfiles", 
        "syntax": "public void Yaf_Request_Simple::getFiles ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getPost": {
        "descr": "", 
        "name": "Yaf_Request_Simple::getPost", 
        "params": [], 
        "path": "php/yaf-request-simple.getpost", 
        "syntax": "public void Yaf_Request_Simple::getPost ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getQuery": {
        "descr": "", 
        "name": "Yaf_Request_Simple::getQuery", 
        "params": [], 
        "path": "php/yaf-request-simple.getquery", 
        "syntax": "public void Yaf_Request_Simple::getQuery ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getRequest": {
        "descr": "", 
        "name": "Yaf_Request_Simple::getRequest", 
        "params": [], 
        "path": "php/yaf-request-simple.getrequest", 
        "syntax": "public void Yaf_Request_Simple::getRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::isXmlHttpRequest": {
        "descr": "", 
        "name": "Yaf_Request_Simple::isXmlHttpRequest", 
        "params": [], 
        "path": "php/yaf-request-simple.isxmlhttprequest", 
        "syntax": "public void Yaf_Request_Simple::isXmlHttpRequest ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract": {
        "descr": "", 
        "name": "Yaf_Response_Abstract", 
        "params": [], 
        "path": "php/class.yaf-response-abstract", 
        "syntax": "public bool appendBody ( string $content [, string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__clone": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::__clone", 
        "params": [], 
        "path": "php/yaf-response-abstract.clone", 
        "syntax": "private void Yaf_Response_Abstract::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__construct": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::__construct", 
        "params": [], 
        "path": "php/yaf-response-abstract.construct", 
        "syntax": "public Yaf_Response_Abstract::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__destruct": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::__destruct", 
        "params": [], 
        "path": "php/yaf-response-abstract.destruct", 
        "syntax": "public void Yaf_Response_Abstract::__destruct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__toString": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::__toString", 
        "params": [], 
        "path": "php/yaf-response-abstract.tostring", 
        "syntax": "private void Yaf_Response_Abstract::__toString ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::appendBody": {
        "descr": "append a content to a exists content block", 
        "name": "Yaf_Response_Abstract::appendBody", 
        "params": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.appendbody", 
        "syntax": "public bool Yaf_Response_Abstract::appendBody ( string $content [, string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::clearBody": {
        "descr": "Clear existsed content", 
        "name": "Yaf_Response_Abstract::clearBody", 
        "params": [
            {
                "descr": "the content key, if you don't specific, then all contents will be cleared. ", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.clearbody", 
        "syntax": "public bool Yaf_Response_Abstract::clearBody ([ string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::clearHeaders": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::clearHeaders", 
        "params": [], 
        "path": "php/yaf-response-abstract.clearheaders", 
        "syntax": "public void Yaf_Response_Abstract::clearHeaders ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::getBody": {
        "descr": "Retrieve a exists content", 
        "name": "Yaf_Response_Abstract::getBody", 
        "params": [
            {
                "descr": "the content key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used. ", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.getbody", 
        "syntax": "public mixed Yaf_Response_Abstract::getBody ([ string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::getHeader": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::getHeader", 
        "params": [], 
        "path": "php/yaf-response-abstract.getheader", 
        "syntax": "public void Yaf_Response_Abstract::getHeader ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::prependBody": {
        "descr": "prepend a content to a exists content block", 
        "name": "Yaf_Response_Abstract::prependBody", 
        "params": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.prependbody", 
        "syntax": "public bool Yaf_Response_Abstract::prependBody ( string $content [, string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::response": {
        "descr": "send response", 
        "name": "Yaf_Response_Abstract::response", 
        "params": [], 
        "path": "php/yaf-response-abstract.response", 
        "syntax": "public void Yaf_Response_Abstract::response ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setAllHeaders": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::setAllHeaders", 
        "params": [], 
        "path": "php/yaf-response-abstract.setallheaders", 
        "syntax": "protected void Yaf_Response_Abstract::setAllHeaders ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setBody": {
        "descr": "Set content to response", 
        "name": "Yaf_Response_Abstract::setBody", 
        "params": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.setbody", 
        "syntax": "public bool Yaf_Response_Abstract::setBody ( string $content [, string $key ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setHeader": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::setHeader", 
        "params": [], 
        "path": "php/yaf-response-abstract.setheader", 
        "syntax": "public void Yaf_Response_Abstract::setHeader ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setRedirect": {
        "descr": "", 
        "name": "Yaf_Response_Abstract::setRedirect", 
        "params": [], 
        "path": "php/yaf-response-abstract.setredirect", 
        "syntax": "public void Yaf_Response_Abstract::setRedirect ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface": {
        "descr": "", 
        "name": "Yaf_Route_Interface", 
        "params": [], 
        "path": "php/class.yaf-route-interface", 
        "syntax": "abstract public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface::assemble": {
        "descr": "this method returns a url according to the argument info, and append query strings to the url according to the argument query.", 
        "name": "Yaf_Route_Interface::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-interface.assemble", 
        "syntax": "abstract public string Yaf_Route_Interface::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface::route": {
        "descr": "Yaf_Route_Interface::route() is the only method that a custom route should implement.", 
        "name": "Yaf_Route_Interface::route", 
        "params": [
            {
                "descr": "A Yaf_Request_Abstract instance.", 
                "name": "request"
            }
        ], 
        "path": "php/yaf-route-interface.route", 
        "syntax": "abstract public bool Yaf_Route_Interface::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map": {
        "descr": "", 
        "name": "Yaf_Route_Map", 
        "params": [], 
        "path": "php/class.yaf-route-map", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::__construct": {
        "descr": "", 
        "name": "Yaf_Route_Map::__construct", 
        "params": [
            {
                "descr": "Whether the result should considering as controller or action", 
                "name": "controller_prefer"
            }
        ], 
        "path": "php/yaf-route-map.construct", 
        "syntax": "public Yaf_Route_Map::__construct ([ string $controller_prefer = false [, string $delimiter = '' ]] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Map::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-map.assemble", 
        "syntax": "public string Yaf_Route_Map::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::route": {
        "descr": "", 
        "name": "Yaf_Route_Map::route", 
        "params": [], 
        "path": "php/yaf-route-map.route", 
        "syntax": "public bool Yaf_Route_Map::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex": {
        "descr": "", 
        "name": "Yaf_Route_Regex", 
        "params": [], 
        "path": "php/class.yaf-route-regex", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::__construct": {
        "descr": "", 
        "name": "Yaf_Route_Regex::__construct", 
        "params": [
            {
                "descr": "A complete Regex pattern, will be used to match a request uri, if doesn't matched, Yaf_Route_Regex will return FALSE.", 
                "name": "match"
            }, 
            {
                "descr": "When the match pattern matches the request uri, Yaf_Route_Regex will use this to decide which m/c/a to routed. ", 
                "name": "route"
            }, 
            {
                "descr": "A array to assign name to the captrues in the match result.", 
                "name": "map"
            }, 
            {
                "descr": "a string, used to assemble url, see Yaf_Route_Regex::assemble(). ", 
                "name": "verify   reverse"
            }
        ], 
        "path": "php/yaf-route-regex.construct", 
        "syntax": "publicYaf_Route_Regex::__construct ( string $match , array $route [, array $map [, array $verify [, string $reverse ]]] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Regex::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-regex.assemble", 
        "syntax": "public string Yaf_Route_Regex::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::route": {
        "descr": "Route a incoming request.", 
        "name": "Yaf_Route_Regex::route", 
        "params": [], 
        "path": "php/yaf-route-regex.route", 
        "syntax": "public bool Yaf_Route_Regex::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite": {
        "descr": "", 
        "name": "Yaf_Route_Rewrite", 
        "params": [], 
        "path": "php/class.yaf-route-rewrite", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::__construct": {
        "descr": "", 
        "name": "Yaf_Route_Rewrite::__construct", 
        "params": [
            {
                "descr": "A pattern, will be used to match a request uri, if doesn't matched, Yaf_Route_Rewrite will return FALSE. ", 
                "name": "match"
            }, 
            {
                "descr": "When the match pattern matches the request uri, Yaf_Route_Rewrite will use this to decide which m/c/a to routed. ", 
                "name": "route"
            }
        ], 
        "path": "php/yaf-route-rewrite.construct", 
        "syntax": "publicYaf_Route_Rewrite::__construct ( string $match , array $route [, array $verify ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Rewrite::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-rewrite.assemble", 
        "syntax": "public string Yaf_Route_Rewrite::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::route": {
        "descr": "", 
        "name": "Yaf_Route_Rewrite::route", 
        "params": [], 
        "path": "php/yaf-route-rewrite.route", 
        "syntax": "public bool Yaf_Route_Rewrite::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple": {
        "descr": "", 
        "name": "Yaf_Route_Simple", 
        "params": [], 
        "path": "php/class.yaf-route-simple", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::__construct": {
        "descr": "Yaf_Route_Simple will get route info from query string. and the parameters of this constructor will used as keys while searching for the route info in $_GET.", 
        "name": "Yaf_Route_Simple::__construct", 
        "params": [
            {
                "descr": "The key name of the module info.", 
                "name": "module_name"
            }, 
            {
                "descr": "the key name of the controller info.", 
                "name": "controller_name"
            }, 
            {
                "descr": "the key name of the action info.", 
                "name": "action_name"
            }
        ], 
        "path": "php/yaf-route-simple.construct", 
        "syntax": "publicYaf_Route_Simple::__construct ( string $module_name , string $controller_name , string $action_name )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Simple::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-simple.assemble", 
        "syntax": "public string Yaf_Route_Simple::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::route": {
        "descr": "see Yaf_Route_Simple::__construct()", 
        "name": "Yaf_Route_Simple::route", 
        "params": [], 
        "path": "php/yaf-route-simple.route", 
        "syntax": "public bool Yaf_Route_Simple::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static": {
        "descr": "", 
        "name": "Yaf_Route_Static", 
        "params": [], 
        "path": "php/class.yaf-route-static", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Static::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-static.assemble", 
        "syntax": "public string Yaf_Route_Static::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::match": {
        "descr": "", 
        "name": "Yaf_Route_Static::match", 
        "params": [], 
        "path": "php/yaf-route-static.match", 
        "syntax": "public void Yaf_Route_Static::match ( string $uri )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::route": {
        "descr": "", 
        "name": "Yaf_Route_Static::route", 
        "params": [], 
        "path": "php/yaf-route-static.route", 
        "syntax": "public bool Yaf_Route_Static::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar": {
        "descr": "", 
        "name": "Yaf_Route_Supervar", 
        "params": [], 
        "path": "php/class.yaf-route-supervar", 
        "syntax": "public string assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::__construct": {
        "descr": "Yaf_Route_Supervar is similar with Yaf_Route_Static, the difference is Yaf_Route_Supervar will look for path info in query string, and the parameter supervar_name is the key.", 
        "name": "Yaf_Route_Supervar::__construct", 
        "params": [
            {
                "descr": "The name of key.", 
                "name": "supervar_name"
            }
        ], 
        "path": "php/yaf-route-supervar.construct", 
        "syntax": "publicYaf_Route_Supervar::__construct ( string $supervar_name )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::assemble": {
        "descr": "Assmeble a url.", 
        "name": "Yaf_Route_Supervar::assemble", 
        "params": [], 
        "path": "php/yaf-assemble-supervar.assemble", 
        "syntax": "public string Yaf_Route_Supervar::assemble ( array $info [, array $query ] )", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::route": {
        "descr": "", 
        "name": "Yaf_Route_Supervar::route", 
        "params": [], 
        "path": "php/yaf-route-supervar.route", 
        "syntax": "public bool Yaf_Route_Supervar::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Router": {
        "descr": "", 
        "name": "Yaf_Router", 
        "params": [], 
        "path": "php/class.yaf-router", 
        "syntax": "public bool addConfig ( Yaf_Config_Abstract $config )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::__construct": {
        "descr": "", 
        "name": "Yaf_Router::__construct", 
        "params": [], 
        "path": "php/yaf-router.construct", 
        "syntax": "publicYaf_Router::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::addConfig": {
        "descr": "Add routes defined by configs into Yaf_Router's route stack", 
        "name": "Yaf_Router::addConfig", 
        "params": [], 
        "path": "php/yaf-router.addconfig", 
        "syntax": "public bool Yaf_Router::addConfig ( Yaf_Config_Abstract $config )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::addRoute": {
        "descr": "defaultly, Yaf_Router using a Yaf_Route_Static as its defualt route. you can add new routes into router's route stack by calling this method.", 
        "name": "Yaf_Router::addRoute", 
        "params": [], 
        "path": "php/yaf-router.addroute", 
        "syntax": "public bool Yaf_Router::addRoute ( string $name , Yaf_Route_Abstract $route )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getCurrentRoute": {
        "descr": "Get the name of the route which is effective in the route process.", 
        "name": "Yaf_Router::getCurrentRoute", 
        "params": [], 
        "path": "php/yaf-router.getcurrentroute", 
        "syntax": "public string Yaf_Router::getCurrentRoute ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getRoute": {
        "descr": "Retrieve a route by name, see also Yaf_Router::getCurrentRoute()", 
        "name": "Yaf_Router::getRoute", 
        "params": [], 
        "path": "php/yaf-router.getroute", 
        "syntax": "public Yaf_Route_Interface Yaf_Router::getRoute ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getRoutes": {
        "descr": "Retrieve registered routes", 
        "name": "Yaf_Router::getRoutes", 
        "params": [], 
        "path": "php/yaf-router.getroutes", 
        "syntax": "public mixed Yaf_Router::getRoutes ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Router::route": {
        "descr": "", 
        "name": "Yaf_Router::route", 
        "params": [], 
        "path": "php/yaf-router.route", 
        "syntax": "public bool Yaf_Router::route ( Yaf_Request_Abstract $request )", 
        "type": "Yaf"
    }, 
    "Yaf_Session": {
        "descr": "", 
        "name": "Yaf_Session", 
        "params": [], 
        "path": "php/class.yaf-session", 
        "syntax": "private void __clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__clone": {
        "descr": "", 
        "name": "Yaf_Session::__clone", 
        "params": [], 
        "path": "php/yaf-session.clone", 
        "syntax": "private void Yaf_Session::__clone ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__construct": {
        "descr": "", 
        "name": "Yaf_Session::__construct", 
        "params": [], 
        "path": "php/yaf-session.construct", 
        "syntax": "Yaf_Session::__construct ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__get": {
        "descr": "", 
        "name": "Yaf_Session::__get", 
        "params": [], 
        "path": "php/yaf-session.get", 
        "syntax": "public void Yaf_Session::__get ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__isset": {
        "descr": "", 
        "name": "Yaf_Session::__isset", 
        "params": [], 
        "path": "php/yaf-session.isset", 
        "syntax": "public void Yaf_Session::__isset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__set": {
        "descr": "", 
        "name": "Yaf_Session::__set", 
        "params": [], 
        "path": "php/yaf-session.set", 
        "syntax": "public void Yaf_Session::__set ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__sleep": {
        "descr": "", 
        "name": "Yaf_Session::__sleep", 
        "params": [], 
        "path": "php/yaf-session.sleep", 
        "syntax": "private void Yaf_Session::__sleep ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__unset": {
        "descr": "", 
        "name": "Yaf_Session::__unset", 
        "params": [], 
        "path": "php/yaf-session.unset", 
        "syntax": "public void Yaf_Session::__unset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__wakeup": {
        "descr": "", 
        "name": "Yaf_Session::__wakeup", 
        "params": [], 
        "path": "php/yaf-session.wakeup", 
        "syntax": "private void Yaf_Session::__wakeup ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::count": {
        "descr": "", 
        "name": "Yaf_Session::count", 
        "params": [], 
        "path": "php/yaf-session.count", 
        "syntax": "public void Yaf_Session::count ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::current": {
        "descr": "", 
        "name": "Yaf_Session::current", 
        "params": [], 
        "path": "php/yaf-session.current", 
        "syntax": "public void Yaf_Session::current ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::del": {
        "descr": "", 
        "name": "Yaf_Session::del", 
        "params": [], 
        "path": "php/yaf-session.del", 
        "syntax": "public void Yaf_Session::del ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::getInstance": {
        "descr": "", 
        "name": "Yaf_Session::getInstance", 
        "params": [], 
        "path": "php/yaf-session.getinstance", 
        "syntax": "public static void Yaf_Session::getInstance ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::has": {
        "descr": "", 
        "name": "Yaf_Session::has", 
        "params": [], 
        "path": "php/yaf-session.has", 
        "syntax": "public void Yaf_Session::has ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::key": {
        "descr": "", 
        "name": "Yaf_Session::key", 
        "params": [], 
        "path": "php/yaf-session.key", 
        "syntax": "public void Yaf_Session::key ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::next": {
        "descr": "", 
        "name": "Yaf_Session::next", 
        "params": [], 
        "path": "php/yaf-session.next", 
        "syntax": "public void Yaf_Session::next ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetExists": {
        "descr": "", 
        "name": "Yaf_Session::offsetExists", 
        "params": [], 
        "path": "php/yaf-session.offsetexists", 
        "syntax": "public void Yaf_Session::offsetExists ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetGet": {
        "descr": "", 
        "name": "Yaf_Session::offsetGet", 
        "params": [], 
        "path": "php/yaf-session.offsetget", 
        "syntax": "public void Yaf_Session::offsetGet ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetSet": {
        "descr": "", 
        "name": "Yaf_Session::offsetSet", 
        "params": [], 
        "path": "php/yaf-session.offsetset", 
        "syntax": "public void Yaf_Session::offsetSet ( string $name , string $value )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetUnset": {
        "descr": "", 
        "name": "Yaf_Session::offsetUnset", 
        "params": [], 
        "path": "php/yaf-session.offsetunset", 
        "syntax": "public void Yaf_Session::offsetUnset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::rewind": {
        "descr": "", 
        "name": "Yaf_Session::rewind", 
        "params": [], 
        "path": "php/yaf-session.rewind", 
        "syntax": "public void Yaf_Session::rewind ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::start": {
        "descr": "", 
        "name": "Yaf_Session::start", 
        "params": [], 
        "path": "php/yaf-session.start", 
        "syntax": "public void Yaf_Session::start ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_Session::valid": {
        "descr": "", 
        "name": "Yaf_Session::valid", 
        "params": [], 
        "path": "php/yaf-session.valid", 
        "syntax": "public void Yaf_Session::valid ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface": {
        "descr": "", 
        "name": "Yaf_View_Interface", 
        "params": [], 
        "path": "php/class.yaf-view-interface", 
        "syntax": "abstract public bool assign ( string $name [, string $value ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::assign": {
        "descr": "Assigan values to View engine, then the value can access directly by name in template.", 
        "name": "Yaf_View_Interface::assign", 
        "params": [], 
        "path": "php/yaf-view-interface.assign", 
        "syntax": "abstract public bool Yaf_View_Interface::assign ( string $name [, string $value ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::display": {
        "descr": "Render a template and output the result immediatly.", 
        "name": "Yaf_View_Interface::display", 
        "params": [], 
        "path": "php/yaf-view-interface.display", 
        "syntax": "abstract public bool Yaf_View_Interface::display ( string $tpl [, array $tpl_vars ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::getScriptPath": {
        "descr": "", 
        "name": "Yaf_View_Interface::getScriptPath", 
        "params": [], 
        "path": "php/yaf-view-interface.getscriptpath", 
        "syntax": "abstract public void Yaf_View_Interface::getScriptPath ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::render": {
        "descr": "Render a template and return the result.", 
        "name": "Yaf_View_Interface::render", 
        "params": [], 
        "path": "php/yaf-view-interface.render", 
        "syntax": "abstract public string Yaf_View_Interface::render ( string $tpl [, array $tpl_vars ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::setScriptPath": {
        "descr": "Set the templates base directory, this is usually called by Yaf_Dispatcher", 
        "name": "Yaf_View_Interface::setScriptPath", 
        "params": [
            {
                "descr": "A absolute path to the template directory, by default, Yaf_Dispatcher use application.directory . ", 
                "name": "template_dir"
            }
        ], 
        "path": "php/yaf-view-interface.setscriptpath", 
        "syntax": "abstract public void Yaf_View_Interface::setScriptPath ( string $template_dir )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple": {
        "descr": "", 
        "name": "Yaf_View_Simple", 
        "params": [], 
        "path": "php/class.yaf-view-simple", 
        "syntax": "public bool assign ( string $name [, mixed $value ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__construct": {
        "descr": "", 
        "name": "Yaf_View_Simple::__construct", 
        "params": [
            {
                "descr": "The base directory of the templates, by default, it is APPLICATOIN . ", 
                "name": "tempalte_dir"
            }, 
            {
                "descr": "Options for the engine, as of Yaf 2.1.13, you can use short tag      \"<?=$var?>\" in your template(regardless of \"short_open_tag\"),       so comes a option named \"short_tag\",  you can switch this off       to prevent use short_tag in template.", 
                "name": "options"
            }
        ], 
        "path": "php/yaf-view-simple.construct", 
        "syntax": "final public Yaf_View_Simple::__construct ( string $tempalte_dir [, array $options ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__get": {
        "descr": "Retrieve assigned varaiable", 
        "name": "Yaf_View_Simple::__get", 
        "params": [
            {
                "descr": "the assigned variable name   if this is empty, all assigned variables will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/yaf-view-simple.get", 
        "syntax": "public void Yaf_View_Simple::__get ([ string $name ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__isset": {
        "descr": "", 
        "name": "Yaf_View_Simple::__isset", 
        "params": [], 
        "path": "php/yaf-view-simple.isset", 
        "syntax": "public void Yaf_View_Simple::__isset ( string $name )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__set": {
        "descr": "This is a alternative and easier way to Yaf_View_Simple::assign().", 
        "name": "Yaf_View_Simple::__set", 
        "params": [
            {
                "descr": "A string value name.", 
                "name": "name"
            }, 
            {
                "descr": "Mixed value.", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.set", 
        "syntax": "public void Yaf_View_Simple::__set ( string $name , mixed $value )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::assign": {
        "descr": "assign variable to view engine", 
        "name": "Yaf_View_Simple::assign", 
        "params": [
            {
                "descr": "A string or an array.   if is string, then the next argument $value is required.", 
                "name": "name"
            }, 
            {
                "descr": "mixed value", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.assign", 
        "syntax": "public bool Yaf_View_Simple::assign ( string $name [, mixed $value ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::assignRef": {
        "descr": "unlike Yaf_View_Simple::assign(), this method assign a ref value to engine.", 
        "name": "Yaf_View_Simple::assignRef", 
        "params": [
            {
                "descr": "A string name which will be used to access the value in the tempalte.", 
                "name": "name"
            }, 
            {
                "descr": "mixed value", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.assignref", 
        "syntax": "public bool Yaf_View_Simple::assignRef ( string $name , mixed &$value )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::clear": {
        "descr": "clear assigned variable", 
        "name": "Yaf_View_Simple::clear", 
        "params": [
            {
                "descr": "assigned variable name   if empty, will clear all assigned variables", 
                "name": "name"
            }
        ], 
        "path": "php/yaf-view-simple.clear", 
        "syntax": "public bool Yaf_View_Simple::clear ([ string $name ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::display": {
        "descr": "Render a template and display the result instantly.", 
        "name": "Yaf_View_Simple::display", 
        "params": [], 
        "path": "php/yaf-view-simple.display", 
        "syntax": "public bool Yaf_View_Simple::display ( string $tpl [, array $tpl_vars ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::eval": {
        "descr": "Render a string tempalte and return the result.", 
        "name": "Yaf_View_Simple::eval", 
        "params": [
            {
                "descr": "string template", 
                "name": "tpl_content"
            }
        ], 
        "path": "php/yaf-view-simple.eval", 
        "syntax": "public string Yaf_View_Simple::eval ( string $tpl_content [, array $tpl_vars ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::getScriptPath": {
        "descr": "", 
        "name": "Yaf_View_Simple::getScriptPath", 
        "params": [], 
        "path": "php/yaf-view-simple.getscriptpath", 
        "syntax": "public string Yaf_View_Simple::getScriptPath ( void )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::render": {
        "descr": "Render a tempalte and return the result.", 
        "name": "Yaf_View_Simple::render", 
        "params": [], 
        "path": "php/yaf-view-simple.render", 
        "syntax": "public string Yaf_View_Simple::render ( string $tpl [, array $tpl_vars ] )", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::setScriptPath": {
        "descr": "", 
        "name": "Yaf_View_Simple::setScriptPath", 
        "params": [], 
        "path": "php/yaf-view-simple.setscriptpath", 
        "syntax": "public bool Yaf_View_Simple::setScriptPath ( string $template_dir )", 
        "type": "Yaf"
    }, 
    "ZipArchive": {
        "descr": "", 
        "name": "ZipArchive", 
        "params": [], 
        "path": "php/class.ziparchive", 
        "syntax": "bool addEmptyDir ( string $dirname )", 
        "type": "Compression"
    }, 
    "ZipArchive::addEmptyDir": {
        "descr": "Adds an empty directory in the archive.", 
        "name": "ZipArchive::addEmptyDir", 
        "params": [
            {
                "descr": "The directory to add.", 
                "name": "dirname"
            }
        ], 
        "path": "php/ziparchive.addemptydir", 
        "syntax": "bool ZipArchive::addEmptyDir ( string $dirname )", 
        "type": "Compression"
    }, 
    "ZipArchive::addFile": {
        "descr": "Adds a file to a ZIP archive from a given path.", 
        "name": "ZipArchive::addFile", 
        "params": [
            {
                "descr": "The path to the file to add.", 
                "name": "filename"
            }, 
            {
                "descr": "If supplied, this is the local name inside the ZIP archive that will override the filename.", 
                "name": "localname"
            }, 
            {
                "descr": "This parameter is not used but is required to extend ZipArchive.", 
                "name": "start"
            }, 
            {
                "descr": "This parameter is not used but is required to extend ZipArchive.", 
                "name": "length"
            }
        ], 
        "path": "php/ziparchive.addfile", 
        "syntax": "bool ZipArchive::addFile ( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]] )", 
        "type": "Compression"
    }, 
    "ZipArchive::addFromString": {
        "descr": "Add a file to a ZIP archive using its contents.", 
        "name": "ZipArchive::addFromString", 
        "params": [
            {
                "descr": "The name of the entry to create.", 
                "name": "localname"
            }, 
            {
                "descr": "The contents to use to create the entry. ", 
                "name": "contents"
            }
        ], 
        "path": "php/ziparchive.addfromstring", 
        "syntax": "bool ZipArchive::addFromString ( string $localname , string $contents )", 
        "type": "Compression"
    }, 
    "ZipArchive::addGlob": {
        "descr": "Add files from a directory which match the glob pattern.", 
        "name": "ZipArchive::addGlob", 
        "params": [
            {
                "descr": "A glob() pattern against which files will be matched.", 
                "name": "pattern"
            }, 
            {
                "descr": "A bit mask of glob() flags.", 
                "name": "flags"
            }, 
            {
                "descr": "An associative array of options. ", 
                "name": "options"
            }
        ], 
        "path": "php/ziparchive.addglob", 
        "syntax": "bool ZipArchive::addGlob ( string $pattern [, int $flags = 0 [, array $options = array() ]] )", 
        "type": "Compression"
    }, 
    "ZipArchive::addPattern": {
        "descr": "Add files from a directory which match the regular expression pattern. The operation is not recursive. The pattern will be matched against the file name only.", 
        "name": "ZipArchive::addPattern", 
        "params": [
            {
                "descr": "A PCRE pattern against which files will be matched.", 
                "name": "pattern"
            }, 
            {
                "descr": "The directory that will be scanned. ", 
                "name": "path"
            }, 
            {
                "descr": "An associative array of options accepted by ZipArchive::addGlob().", 
                "name": "options"
            }
        ], 
        "path": "php/ziparchive.addpattern", 
        "syntax": "bool ZipArchive::addPattern ( string $pattern [, string $path = '.' [, array $options = array() ]] )", 
        "type": "Compression"
    }, 
    "ZipArchive::close": {
        "descr": "Close opened or created archive and save changes. This method is automatically called at the end of the script.", 
        "name": "ZipArchive::close", 
        "params": [], 
        "path": "php/ziparchive.close", 
        "syntax": "bool ZipArchive::close ( void )", 
        "type": "Compression"
    }, 
    "ZipArchive::deleteIndex": {
        "descr": "Delete an entry in the archive using its index.", 
        "name": "ZipArchive::deleteIndex", 
        "params": [
            {
                "descr": "Index of the entry to delete.", 
                "name": "index"
            }
        ], 
        "path": "php/ziparchive.deleteindex", 
        "syntax": "bool ZipArchive::deleteIndex ( int $index )", 
        "type": "Compression"
    }, 
    "ZipArchive::deleteName": {
        "descr": "Delete an entry in the archive using its name.", 
        "name": "ZipArchive::deleteName", 
        "params": [
            {
                "descr": "Name of the entry to delete.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.deletename", 
        "syntax": "bool ZipArchive::deleteName ( string $name )", 
        "type": "Compression"
    }, 
    "ZipArchive::extractTo": {
        "descr": "Extract the complete archive or the given files to the specified destination.", 
        "name": "ZipArchive::extractTo", 
        "params": [
            {
                "descr": "Location where to extract the files.", 
                "name": "destination"
            }, 
            {
                "descr": "The entries to extract. It accepts either a single entry name or an array of names.", 
                "name": "entries"
            }
        ], 
        "path": "php/ziparchive.extractto", 
        "syntax": "bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getArchiveComment": {
        "descr": "Returns the Zip archive comment.", 
        "name": "ZipArchive::getArchiveComment", 
        "params": [
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getarchivecomment", 
        "syntax": "string ZipArchive::getArchiveComment ([ int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getCommentIndex": {
        "descr": "Returns the comment of an entry using the entry index.", 
        "name": "ZipArchive::getCommentIndex", 
        "params": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getcommentindex", 
        "syntax": "string ZipArchive::getCommentIndex ( int $index [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getCommentName": {
        "descr": "Returns the comment of an entry using the entry name.", 
        "name": "ZipArchive::getCommentName", 
        "params": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getcommentname", 
        "syntax": "string ZipArchive::getCommentName ( string $name [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getFromIndex": {
        "descr": "Returns the entry contents using its index.", 
        "name": "ZipArchive::getFromIndex", 
        "params": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "The length to be read from the entry. ", 
                "name": "length"
            }, 
            {
                "descr": "The flags to use to open the archive. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getfromindex", 
        "syntax": "string ZipArchive::getFromIndex ( int $index [, int $length = 0 [, int $flags ]] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getFromName": {
        "descr": "Returns the entry contents using its name.", 
        "name": "ZipArchive::getFromName", 
        "params": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "The length to be read from the entry. ", 
                "name": "length"
            }, 
            {
                "descr": "The flags to use to open the archive. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getfromname", 
        "syntax": "string ZipArchive::getFromName ( string $name [, int $length = 0 [, int $flags ]] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getNameIndex": {
        "descr": "Returns the name of an entry using its index.", 
        "name": "ZipArchive::getNameIndex", 
        "params": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged name is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getnameindex", 
        "syntax": "string ZipArchive::getNameIndex ( int $index [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::getStatusString": {
        "descr": "Returns the status error message, system and/or zip messages.", 
        "name": "ZipArchive::getStatusString", 
        "params": [], 
        "path": "php/ziparchive.getstatusstring", 
        "syntax": "string ZipArchive::getStatusString ( void )", 
        "type": "Compression"
    }, 
    "ZipArchive::getStream": {
        "descr": "Get a file handler to the entry defined by its name. For now it only supports read operations.", 
        "name": "ZipArchive::getStream", 
        "params": [
            {
                "descr": "The name of the entry to use.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.getstream", 
        "syntax": "resource ZipArchive::getStream ( string $name )", 
        "type": "Compression"
    }, 
    "ZipArchive::locateName": {
        "descr": "Locates an entry using its name.", 
        "name": "ZipArchive::locateName", 
        "params": [
            {
                "descr": "The name of the entry to look up", 
                "name": "name"
            }, 
            {
                "descr": "The flags are specified by ORing the following values, or 0 for none of them. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.locatename", 
        "syntax": "int ZipArchive::locateName ( string $name [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::open": {
        "descr": "Opens a new zip archive for reading, writing or modifying.", 
        "name": "ZipArchive::open", 
        "params": [
            {
                "descr": "The file name of the ZIP archive to open.", 
                "name": "filename"
            }, 
            {
                "descr": "The mode to use to open the archive. ", 
                "name": "flags"
            }, 
            {
                "descr": "Returns TRUE on success or the error code. ", 
                "name": "Error codes"
            }
        ], 
        "path": "php/ziparchive.open", 
        "syntax": "mixed ZipArchive::open ( string $filename [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::renameIndex": {
        "descr": "Renames an entry defined by its index.", 
        "name": "ZipArchive::renameIndex", 
        "params": [
            {
                "descr": "Index of the entry to rename.", 
                "name": "index"
            }, 
            {
                "descr": "New name.", 
                "name": "newname"
            }
        ], 
        "path": "php/ziparchive.renameindex", 
        "syntax": "bool ZipArchive::renameIndex ( int $index , string $newname )", 
        "type": "Compression"
    }, 
    "ZipArchive::renameName": {
        "descr": "Renames an entry defined by its name.", 
        "name": "ZipArchive::renameName", 
        "params": [
            {
                "descr": "Name of the entry to rename.", 
                "name": "name"
            }, 
            {
                "descr": "New name.", 
                "name": "newname"
            }
        ], 
        "path": "php/ziparchive.renamename", 
        "syntax": "bool ZipArchive::renameName ( string $name , string $newname )", 
        "type": "Compression"
    }, 
    "ZipArchive::setArchiveComment": {
        "descr": "Set the comment of a ZIP archive.", 
        "name": "ZipArchive::setArchiveComment", 
        "params": [
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setarchivecomment", 
        "syntax": "bool ZipArchive::setArchiveComment ( string $comment )", 
        "type": "Compression"
    }, 
    "ZipArchive::setCommentIndex": {
        "descr": "Set the comment of an entry defined by its index.", 
        "name": "ZipArchive::setCommentIndex", 
        "params": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setcommentindex", 
        "syntax": "bool ZipArchive::setCommentIndex ( int $index , string $comment )", 
        "type": "Compression"
    }, 
    "ZipArchive::setCommentName": {
        "descr": "Set the comment of an entry defined by its name.", 
        "name": "ZipArchive::setCommentName", 
        "params": [
            {
                "descr": "Name of the entry.", 
                "name": "name"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setcommentname", 
        "syntax": "bool ZipArchive::setCommentName ( string $name , string $comment )", 
        "type": "Compression"
    }, 
    "ZipArchive::statIndex": {
        "descr": "The function obtains information about the entry defined by its index.", 
        "name": "ZipArchive::statIndex", 
        "params": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "ZipArchive::FL_UNCHANGED may be ORed to it to request information about the original file in the archive, ignoring any changes made.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.statindex", 
        "syntax": "array ZipArchive::statIndex ( int $index [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::statName": {
        "descr": "The function obtains information about the entry defined by its name.", 
        "name": "ZipArchive::statName", 
        "params": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "The flags argument specifies how the name lookup should be done. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.statname", 
        "syntax": "array ZipArchive::statName ( string $name [, int $flags ] )", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeAll": {
        "descr": "Undo all changes done in the archive.", 
        "name": "ZipArchive::unchangeAll", 
        "params": [], 
        "path": "php/ziparchive.unchangeall", 
        "syntax": "bool ZipArchive::unchangeAll ( void )", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeArchive": {
        "descr": "Revert all global changes to the archive. For now, this only reverts archive comment changes.", 
        "name": "ZipArchive::unchangeArchive", 
        "params": [], 
        "path": "php/ziparchive.unchangearchive", 
        "syntax": "bool ZipArchive::unchangeArchive ( void )", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeIndex": {
        "descr": "Revert all changes done to an entry at the given index.", 
        "name": "ZipArchive::unchangeIndex", 
        "params": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }
        ], 
        "path": "php/ziparchive.unchangeindex", 
        "syntax": "bool ZipArchive::unchangeIndex ( int $index )", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeName": {
        "descr": "Revert all changes done to an entry.", 
        "name": "ZipArchive::unchangeName", 
        "params": [
            {
                "descr": "Name of the entry.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.unchangename", 
        "syntax": "bool ZipArchive::unchangeName ( string $name )", 
        "type": "Compression"
    }, 
    "__autoload": {
        "descr": "You can define this function to enable classes autoloading.", 
        "name": "__autoload", 
        "params": [
            {
                "descr": "Name of the class to load", 
                "name": "class"
            }
        ], 
        "path": "php/function.autoload", 
        "syntax": "void __autoload ( string $class )", 
        "type": "Classes and Functions"
    }, 
    "__halt_compiler": {
        "descr": "Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files.", 
        "name": "__halt_compiler", 
        "params": [], 
        "path": "php/function.halt-compiler", 
        "syntax": "void __halt_compiler ( void )", 
        "type": "Language"
    }, 
    "abs": {
        "descr": "Returns the absolute value of number.", 
        "name": "abs", 
        "params": [
            {
                "descr": "The numeric value to process", 
                "name": "number"
            }
        ], 
        "path": "php/function.abs", 
        "syntax": "number abs ( mixed $number )", 
        "type": "Mathematics"
    }, 
    "acos": {
        "descr": "Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range.", 
        "name": "acos", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.acos", 
        "syntax": "float acos ( float $arg )", 
        "type": "Mathematics"
    }, 
    "acosh": {
        "descr": "Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.", 
        "name": "acosh", 
        "params": [
            {
                "descr": "The value to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.acosh", 
        "syntax": "float acosh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "addcslashes": {
        "descr": "Returns a string with backslashes before characters that are listed in charlist parameter.", 
        "name": "addcslashes", 
        "params": [
            {
                "descr": "The string to be escaped.", 
                "name": "str"
            }, 
            {
                "descr": "A list of characters to be escaped. ", 
                "name": "charlist"
            }
        ], 
        "path": "php/function.addcslashes", 
        "syntax": "string addcslashes ( string $str , string $charlist )", 
        "type": "String"
    }, 
    "addslashes": {
        "descr": "Returns a string with backslashes before characters that need to be escaped. These characters are single quote ('), double quote (\"), backslash (\\) and NUL (the NULL byte).", 
        "name": "addslashes", 
        "params": [
            {
                "descr": "The string to be escaped.", 
                "name": "str"
            }
        ], 
        "path": "php/function.addslashes", 
        "syntax": "string addslashes ( string $str )", 
        "type": "String"
    }, 
    "apache_child_terminate": {
        "descr": "apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.", 
        "name": "apache_child_terminate", 
        "params": [], 
        "path": "php/function.apache-child-terminate", 
        "syntax": "bool apache_child_terminate ( void )", 
        "type": "Apache"
    }, 
    "apache_get_modules": {
        "descr": "Get a list of loaded Apache modules.", 
        "name": "apache_get_modules", 
        "params": [], 
        "path": "php/function.apache-get-modules", 
        "syntax": "array apache_get_modules ( void )", 
        "type": "Apache"
    }, 
    "apache_get_version": {
        "descr": "Fetch the Apache version.", 
        "name": "apache_get_version", 
        "params": [], 
        "path": "php/function.apache-get-version", 
        "syntax": "string apache_get_version ( void )", 
        "type": "Apache"
    }, 
    "apache_getenv": {
        "descr": "Retrieve an Apache environment variable specified by variable.", 
        "name": "apache_getenv", 
        "params": [
            {
                "descr": "The Apache environment variable", 
                "name": "variable"
            }, 
            {
                "descr": "Whether to get the top-level variable available to all Apache layers.", 
                "name": "walk_to_top"
            }
        ], 
        "path": "php/function.apache-getenv", 
        "syntax": "string apache_getenv ( string $variable [, bool $walk_to_top = false ] )", 
        "type": "Apache"
    }, 
    "apache_lookup_uri": {
        "descr": "This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource.", 
        "name": "apache_lookup_uri", 
        "params": [
            {
                "descr": "The filename (URI) that's being requested.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.apache-lookup-uri", 
        "syntax": "object apache_lookup_uri ( string $filename )", 
        "type": "Apache"
    }, 
    "apache_note": {
        "descr": "This function is a wrapper for Apache's table_get and table_set. It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate.", 
        "name": "apache_note", 
        "params": [
            {
                "descr": "The name of the note.", 
                "name": "note_name"
            }, 
            {
                "descr": "The value of the note.", 
                "name": "note_value"
            }
        ], 
        "path": "php/function.apache-note", 
        "syntax": "string apache_note ( string $note_name [, string $note_value = \"\" ] )", 
        "type": "Apache"
    }, 
    "apache_request_headers": {
        "descr": "Fetches all HTTP request headers from the current request.", 
        "name": "apache_request_headers", 
        "params": [], 
        "path": "php/function.apache-request-headers", 
        "syntax": "array apache_request_headers ( void )", 
        "type": "Apache"
    }, 
    "apache_reset_timeout": {
        "descr": "apache_reset_timeout() resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout() calls, Apache can theoretically run forever.", 
        "name": "apache_reset_timeout", 
        "params": [], 
        "path": "php/function.apache-reset-timeout", 
        "syntax": "bool apache_reset_timeout ( void )", 
        "type": "Apache"
    }, 
    "apache_response_headers": {
        "descr": "Fetch all HTTP response headers.", 
        "name": "apache_response_headers", 
        "params": [], 
        "path": "php/function.apache-response-headers", 
        "syntax": "array apache_response_headers ( void )", 
        "type": "Apache"
    }, 
    "apache_setenv": {
        "descr": "apache_setenv() sets the value of the Apache environment variable specified by variable.", 
        "name": "apache_setenv", 
        "params": [
            {
                "descr": "The environment variable that's being set.", 
                "name": "variable"
            }, 
            {
                "descr": "The new variable value.", 
                "name": "value"
            }, 
            {
                "descr": "Whether to set the top-level variable available to all Apache layers.", 
                "name": "walk_to_top"
            }
        ], 
        "path": "php/function.apache-setenv", 
        "syntax": "bool apache_setenv ( string $variable , string $value [, bool $walk_to_top = false ] )", 
        "type": "Apache"
    }, 
    "apc_add": {
        "descr": "Caches a variable in the data store, only if it's not already stored.", 
        "name": "apc_add", 
        "params": [
            {
                "descr": "Store the variable using this name. ", 
                "name": "key"
            }, 
            {
                "descr": "The variable to store", 
                "name": "var"
            }, 
            {
                "descr": "Time To Live; store var in the cache for ttl seconds. ", 
                "name": "ttl"
            }, 
            {
                "descr": "Names in key, variables in value.", 
                "name": "values"
            }
        ], 
        "path": "php/function.apc-add", 
        "syntax": "bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] )", 
        "type": "APC"
    }, 
    "apc_bin_dump": {
        "descr": "Returns a binary dump of the given files and user variables from the APC cache. A NULL for files or user_vars signals a dump of every entry, whereas array() will dump nothing.", 
        "name": "apc_bin_dump", 
        "params": [
            {
                "descr": "The files. Passing in NULL signals a dump of every entry, while passing in array() will dump nothing.", 
                "name": "files"
            }, 
            {
                "descr": "The user vars. Passing in NULL signals a dump of every entry, while passing in array() will dump nothing.", 
                "name": "user_vars"
            }
        ], 
        "path": "php/function.apc-bin-dump", 
        "syntax": "string apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] )", 
        "type": "APC"
    }, 
    "apc_bin_dumpfile": {
        "descr": "Outputs a binary dump of the given files and user variables from the APC cache to the named file.", 
        "name": "apc_bin_dumpfile", 
        "params": [
            {
                "descr": "The file names being dumped.", 
                "name": "files"
            }, 
            {
                "descr": "The user variables being dumped.", 
                "name": "user_vars"
            }, 
            {
                "descr": "The filename where the dump is being saved.", 
                "name": "filename"
            }, 
            {
                "descr": "Flags passed to the filename stream. ", 
                "name": "flags"
            }, 
            {
                "descr": "The context passed to the filename stream. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.apc-bin-dumpfile", 
        "syntax": "int apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]] )", 
        "type": "APC"
    }, 
    "apc_bin_load": {
        "descr": "Loads the given binary dump into the APC file/user cache.", 
        "name": "apc_bin_load", 
        "params": [
            {
                "descr": "The binary dump being loaded, likely from apc_bin_dump().", 
                "name": "data"
            }, 
            {
                "descr": "Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.apc-bin-load", 
        "syntax": "bool apc_bin_load ( string $data [, int $flags = 0 ] )", 
        "type": "APC"
    }, 
    "apc_bin_loadfile": {
        "descr": "Loads a binary dump from a file into the APC file/user cache.", 
        "name": "apc_bin_loadfile", 
        "params": [
            {
                "descr": "The file name containing the dump, likely from apc_bin_dumpfile().", 
                "name": "filename"
            }, 
            {
                "descr": "The files context.", 
                "name": "context"
            }, 
            {
                "descr": "Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.apc-bin-loadfile", 
        "syntax": "bool apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] )", 
        "type": "APC"
    }, 
    "apc_cache_info": {
        "descr": "Retrieves cached information and meta-data from APC's data store.", 
        "name": "apc_cache_info", 
        "params": [
            {
                "descr": "If cache_type is \"user\", information about the user cache will be returned. ", 
                "name": "cache_type"
            }, 
            {
                "descr": "If limited is TRUE, the return value will exclude the individual list of cache entries. ", 
                "name": "limited"
            }
        ], 
        "path": "php/function.apc-cache-info", 
        "syntax": "array apc_cache_info ([ string $cache_type = \"\" [, bool $limited = false ]] )", 
        "type": "APC"
    }, 
    "apc_cas": {
        "descr": "apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter.", 
        "name": "apc_cas", 
        "params": [
            {
                "descr": "The key of the value being updated.", 
                "name": "key"
            }, 
            {
                "descr": "The old value (the value currently stored).", 
                "name": "old"
            }, 
            {
                "descr": "The new value to update to.", 
                "name": "new"
            }
        ], 
        "path": "php/function.apc-cas", 
        "syntax": "bool apc_cas ( string $key , int $old , int $new )", 
        "type": "APC"
    }, 
    "apc_clear_cache": {
        "descr": "Clears the user/system cache.", 
        "name": "apc_clear_cache", 
        "params": [
            {
                "descr": "If cache_type is \"user\", the user cache will be cleared; otherwise, the system cache (cached files) will be cleared.", 
                "name": "cache_type"
            }
        ], 
        "path": "php/function.apc-clear-cache", 
        "syntax": "bool apc_clear_cache ([ string $cache_type = \"\" ] )", 
        "type": "APC"
    }, 
    "apc_compile_file": {
        "descr": "Stores a file in the bytecode cache, bypassing all filters.", 
        "name": "apc_compile_file", 
        "params": [
            {
                "descr": "Full or relative path to a PHP file that will be compiled and stored in the bytecode cache.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.apc-compile-file", 
        "syntax": "mixed apc_compile_file ( string $filename [, bool $atomic = true ] )", 
        "type": "APC"
    }, 
    "apc_dec": {
        "descr": "Decreases a stored integer value.", 
        "name": "apc_dec", 
        "params": [
            {
                "descr": "The key of the value being decreased.", 
                "name": "key"
            }, 
            {
                "descr": "The step, or value to decrease.", 
                "name": "step"
            }, 
            {
                "descr": "Optionally pass the success or fail boolean value to this referenced variable.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-dec", 
        "syntax": "int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] )", 
        "type": "APC"
    }, 
    "apc_define_constants": {
        "descr": "define() is notoriously slow. Since the main benefit of APC is to increase the performance of scripts/applications, this mechanism is provided to streamline the process of mass constant definition. However, this function does not perform as well as anticipated.", 
        "name": "apc_define_constants", 
        "params": [
            {
                "descr": "The key serves as the name of the constant set being stored. ", 
                "name": "key"
            }, 
            {
                "descr": "An associative array of constant_name => value pairs. ", 
                "name": "constants"
            }, 
            {
                "descr": "The default behaviour for constants is to be declared case-sensitive; i.e. ", 
                "name": "case_sensitive"
            }
        ], 
        "path": "php/function.apc-define-constants", 
        "syntax": "bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = true ] )", 
        "type": "APC"
    }, 
    "apc_delete": {
        "descr": "Removes a stored variable from the cache.", 
        "name": "apc_delete", 
        "params": [
            {
                "descr": "The key used to store the value (with apc_store()).", 
                "name": "key"
            }
        ], 
        "path": "php/function.apc-delete", 
        "syntax": "mixed apc_delete ( string $key )", 
        "type": "APC"
    }, 
    "apc_delete_file": {
        "descr": "Deletes the given files from the opcode cache.", 
        "name": "apc_delete_file", 
        "params": [
            {
                "descr": "The files to be deleted. Accepts a string, array of strings, or an APCIterator object.", 
                "name": "keys"
            }
        ], 
        "path": "php/function.apc-delete-file", 
        "syntax": "mixed apc_delete_file ( mixed $keys )", 
        "type": "APC"
    }, 
    "apc_exists": {
        "descr": "Checks if one or more APC keys exist.", 
        "name": "apc_exists", 
        "params": [
            {
                "descr": "A string, or an array of strings, that contain keys.", 
                "name": "keys"
            }
        ], 
        "path": "php/function.apc-exists", 
        "syntax": "mixed apc_exists ( mixed $keys )", 
        "type": "APC"
    }, 
    "apc_fetch": {
        "descr": "Fetchs a stored variable from the cache.", 
        "name": "apc_fetch", 
        "params": [
            {
                "descr": "The key used to store the value (with apc_store()). ", 
                "name": "key"
            }, 
            {
                "descr": "Set to TRUE in success and FALSE in failure.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-fetch", 
        "syntax": "mixed apc_fetch ( mixed $key [, bool &$success ] )", 
        "type": "APC"
    }, 
    "apc_inc": {
        "descr": "Increases a stored number.", 
        "name": "apc_inc", 
        "params": [
            {
                "descr": "The key of the value being increased.", 
                "name": "key"
            }, 
            {
                "descr": "The step, or value to increase.", 
                "name": "step"
            }, 
            {
                "descr": "Optionally pass the success or fail boolean value to this referenced variable.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-inc", 
        "syntax": "int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] )", 
        "type": "APC"
    }, 
    "apc_load_constants": {
        "descr": "Loads a set of constants from the cache.", 
        "name": "apc_load_constants", 
        "params": [
            {
                "descr": "The name of the constant set (that was stored with apc_define_constants()) to be retrieved.", 
                "name": "key"
            }, 
            {
                "descr": "The default behaviour for constants is to be declared case-sensitive; i.e. ", 
                "name": "case_sensitive"
            }
        ], 
        "path": "php/function.apc-load-constants", 
        "syntax": "bool apc_load_constants ( string $key [, bool $case_sensitive = true ] )", 
        "type": "APC"
    }, 
    "apc_sma_info": {
        "descr": "Retrieves APC's Shared Memory Allocation information.", 
        "name": "apc_sma_info", 
        "params": [
            {
                "descr": "When set to FALSE (default) apc_sma_info() will return a detailed information about each segment.", 
                "name": "limited"
            }
        ], 
        "path": "php/function.apc-sma-info", 
        "syntax": "array apc_sma_info ([ bool $limited = false ] )", 
        "type": "APC"
    }, 
    "apc_store": {
        "descr": "Cache a variable in the data store.", 
        "name": "apc_store", 
        "params": [
            {
                "descr": "Store the variable using this name. ", 
                "name": "key"
            }, 
            {
                "descr": "The variable to store", 
                "name": "var"
            }, 
            {
                "descr": "Time To Live; store var in the cache for ttl seconds. ", 
                "name": "ttl"
            }, 
            {
                "descr": "Names in key, variables in value.", 
                "name": "values"
            }
        ], 
        "path": "php/function.apc-store", 
        "syntax": "bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] )", 
        "type": "APC"
    }, 
    "array": {
        "descr": "Creates an array. Read the section on the array type for more information on what an array is.", 
        "name": "array", 
        "params": [
            {
                "descr": "Syntax \"index => values\", separated by commas, define index and values. ", 
                "name": "..."
            }
        ], 
        "path": "php/function.array", 
        "syntax": "array array ([ mixed $... ] )", 
        "type": "Array"
    }, 
    "array_change_key_case": {
        "descr": "Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is.", 
        "name": "array_change_key_case", 
        "params": [
            {
                "descr": "The array to work on", 
                "name": "array"
            }, 
            {
                "descr": "Either CASE_UPPER or CASE_LOWER (default)", 
                "name": "case"
            }
        ], 
        "path": "php/function.array-change-key-case", 
        "syntax": "array array_change_key_case ( array $array [, int $case = CASE_LOWER ] )", 
        "type": "Array"
    }, 
    "array_chunk": {
        "descr": "Chunks an array into arrays with size elements. The last chunk may contain less than size elements.", 
        "name": "array_chunk", 
        "params": [
            {
                "descr": "The array to work on", 
                "name": "array"
            }, 
            {
                "descr": "The size of each chunk", 
                "name": "size"
            }, 
            {
                "descr": "When set to TRUE keys will be preserved. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-chunk", 
        "syntax": "array array_chunk ( array $array , int $size [, bool $preserve_keys = false ] )", 
        "type": "Array"
    }, 
    "array_column": {
        "descr": "array_column() returns the values from a single column of the array, identified by the column_key. Optionally, you may provide an index_key to index the values in the returned array by the values from the index_key column in the input array.", 
        "name": "array_column", 
        "params": [
            {
                "descr": "A multi-dimensional array (record set) from which to pull a column of values.", 
                "name": "array"
            }, 
            {
                "descr": "The column of values to return. ", 
                "name": "column_key"
            }, 
            {
                "descr": "The column to use as the index/keys for the returned array. ", 
                "name": "index_key"
            }
        ], 
        "path": "php/function.array-column", 
        "syntax": "array array_column ( array $array , mixed $column_key [, mixed $index_key = null ] )", 
        "type": "Array"
    }, 
    "array_combine": {
        "descr": "Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.", 
        "name": "array_combine", 
        "params": [
            {
                "descr": "Array of keys to be used. Illegal values for key will be converted to string.", 
                "name": "keys"
            }, 
            {
                "descr": "Array of values to be used", 
                "name": "values"
            }
        ], 
        "path": "php/function.array-combine", 
        "syntax": "array array_combine ( array $keys , array $values )", 
        "type": "Array"
    }, 
    "array_count_values": {
        "descr": "array_count_values() returns an array using the values of array as keys and their frequency in array as values.", 
        "name": "array_count_values", 
        "params": [
            {
                "descr": "The array of values to count", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-count-values", 
        "syntax": "array array_count_values ( array $array )", 
        "type": "Array"
    }, 
    "array_diff": {
        "descr": "Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays.", 
        "name": "array_diff", 
        "params": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff", 
        "syntax": "array array_diff ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_diff_assoc": {
        "descr": "Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison.", 
        "name": "array_diff_assoc", 
        "params": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff-assoc", 
        "syntax": "array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_diff_key": {
        "descr": "Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.", 
        "name": "array_diff_key", 
        "params": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff-key", 
        "syntax": "array array_diff_key ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_diff_uassoc": {
        "descr": "Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.", 
        "name": "array_diff_uassoc", 
        "params": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-diff-uassoc", 
        "syntax": "array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_diff_ukey": {
        "descr": "Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.", 
        "name": "array_diff_ukey", 
        "params": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-diff-ukey", 
        "syntax": "array array_diff_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_fill": {
        "descr": "Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.", 
        "name": "array_fill", 
        "params": [
            {
                "descr": "The first index of the returned array. ", 
                "name": "start_index"
            }, 
            {
                "descr": "Number of elements to insert. Must be greater than zero.", 
                "name": "num"
            }, 
            {
                "descr": "Value to use for filling", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-fill", 
        "syntax": "array array_fill ( int $start_index , int $num , mixed $value )", 
        "type": "Array"
    }, 
    "array_fill_keys": {
        "descr": "Fills an array with the value of the value parameter, using the values of the keys array as keys.", 
        "name": "array_fill_keys", 
        "params": [
            {
                "descr": "Array of values that will be used as keys. ", 
                "name": "keys"
            }, 
            {
                "descr": "Value to use for filling", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-fill-keys", 
        "syntax": "array array_fill_keys ( array $keys , mixed $value )", 
        "type": "Array"
    }, 
    "array_filter": {
        "descr": "Iterates over each value in the array passing them to the callback function. If the callback function returns true, the current value from array is returned into the result array. Array keys are preserved.", 
        "name": "array_filter", 
        "params": [
            {
                "descr": "The array to iterate over", 
                "name": "array"
            }, 
            {
                "descr": "The callback function to use   If no callback is supplied, all entries of array equal to FALSE (see converting to boolean) will be removed.", 
                "name": "callback"
            }
        ], 
        "path": "php/function.array-filter", 
        "syntax": "array array_filter ( array $array [, callable $callback ] )", 
        "type": "Array"
    }, 
    "array_flip": {
        "descr": "array_flip() returns an array in flip order, i.e. keys from array become values and values from array become keys.", 
        "name": "array_flip", 
        "params": [
            {
                "descr": "An array of key/value pairs to be flipped.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-flip", 
        "syntax": "array array_flip ( array $array )", 
        "type": "Array"
    }, 
    "array_intersect": {
        "descr": "array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.", 
        "name": "array_intersect", 
        "params": [
            {
                "descr": "The array with master values to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare values against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect", 
        "syntax": "array array_intersect ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_intersect_assoc": {
        "descr": "", 
        "name": "array_intersect_assoc", 
        "params": [
            {
                "descr": "The array with master values to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare values against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect-assoc", 
        "syntax": "array array_intersect_assoc ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_intersect_key": {
        "descr": "array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.", 
        "name": "array_intersect_key", 
        "params": [
            {
                "descr": "The array with master keys to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect-key", 
        "syntax": "array array_intersect_key ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_intersect_uassoc": {
        "descr": "array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().", 
        "name": "array_intersect_uassoc", 
        "params": [
            {
                "descr": "Initial array for comparison of the arrays.", 
                "name": "array1"
            }, 
            {
                "descr": "First array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "Variable list of array arguments to compare values against.", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-intersect-uassoc", 
        "syntax": "array array_intersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_intersect_ukey": {
        "descr": "array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.", 
        "name": "array_intersect_ukey", 
        "params": [
            {
                "descr": "Initial array for comparison of the arrays.", 
                "name": "array1"
            }, 
            {
                "descr": "First array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "Variable list of array arguments to compare keys against.", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-intersect-ukey", 
        "syntax": "array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_key_exists": {
        "descr": "array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.", 
        "name": "array_key_exists", 
        "params": [
            {
                "descr": "Value to check.", 
                "name": "key"
            }, 
            {
                "descr": "An array with keys to check.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-key-exists", 
        "syntax": "bool array_key_exists ( mixed $key , array $array )", 
        "type": "Array"
    }, 
    "array_keys": {
        "descr": "array_keys() returns the keys, numeric and string, from the array.", 
        "name": "array_keys", 
        "params": [
            {
                "descr": "An array containing keys to return.", 
                "name": "array"
            }, 
            {
                "descr": "If specified, then only keys containing these values are returned.", 
                "name": "search_value"
            }, 
            {
                "descr": "Determines if strict comparison (===) should be used during the search.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.array-keys", 
        "syntax": "array array_keys ( array $array [, mixed $search_value [, bool $strict = false ]] )", 
        "type": "Array"
    }, 
    "array_map": {
        "descr": "array_map() returns an array containing all the elements of array1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()", 
        "name": "array_map", 
        "params": [
            {
                "descr": "Callback function to run for each element in each array.", 
                "name": "callback"
            }, 
            {
                "descr": "An array to run through the callback function.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of array arguments to run through the callback function.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-map", 
        "syntax": "array array_map ( callable $callback , array $array1 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_merge": {
        "descr": "Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.", 
        "name": "array_merge", 
        "params": [
            {
                "descr": "Initial array to merge.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of arrays to merge.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-merge", 
        "syntax": "array array_merge ( array $array1 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_merge_recursive": {
        "descr": "array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.", 
        "name": "array_merge_recursive", 
        "params": [
            {
                "descr": "Initial array to merge.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of arrays to recursively merge.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-merge-recursive", 
        "syntax": "array array_merge_recursive ( array $array1 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_multisort": {
        "descr": "array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.", 
        "name": "array_multisort", 
        "params": [
            {
                "descr": "An array being sorted.", 
                "name": "array1"
            }, 
            {
                "descr": "The order used to sort the previous array argument. ", 
                "name": "array1_sort_order"
            }, 
            {
                "descr": "Sort options for the previous array argument:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings    SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()     SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()     SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively    This argument can be swapped with array1_sort_order or omitted entirely, in which case SORT_REGULAR is assumed.", 
                "name": "array1_sort_flags"
            }, 
            {
                "descr": "More arrays, optionally followed by sort order and flags.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-multisort", 
        "syntax": "bool array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )", 
        "type": "Array"
    }, 
    "array_pad": {
        "descr": "array_pad() returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of size is less than or equal to the length of the array then no padding takes place. It is possible to add at most 1048576 elements at a time.", 
        "name": "array_pad", 
        "params": [
            {
                "descr": "Initial array of values to pad.", 
                "name": "array"
            }, 
            {
                "descr": "New size of the array.", 
                "name": "size"
            }, 
            {
                "descr": "Value to pad if array is less than size.", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-pad", 
        "syntax": "array array_pad ( array $array , int $size , mixed $value )", 
        "type": "Array"
    }, 
    "array_pop": {
        "descr": "array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned. Will additionally produce a Warning when called on a non-array.", 
        "name": "array_pop", 
        "params": [
            {
                "descr": "The array to get the value from.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-pop", 
        "syntax": "mixed array_pop ( array &$array )", 
        "type": "Array"
    }, 
    "array_product": {
        "descr": "array_product() returns the product of values in an array.", 
        "name": "array_product", 
        "params": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-product", 
        "syntax": "number array_product ( array $array )", 
        "type": "Array"
    }, 
    "array_push": {
        "descr": "array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:", 
        "name": "array_push", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The first value to push onto the end of the array.", 
                "name": "value1"
            }
        ], 
        "path": "php/function.array-push", 
        "syntax": "int array_push ( array &$array , mixed $value1 [, mixed $... ] )", 
        "type": "Array"
    }, 
    "array_rand": {
        "descr": "Picks one or more random entries out of an array, and returns the key (or keys) of the random entries.", 
        "name": "array_rand", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Specifies how many entries should be picked.", 
                "name": "num"
            }
        ], 
        "path": "php/function.array-rand", 
        "syntax": "mixed array_rand ( array $array [, int $num = 1 ] )", 
        "type": "Array"
    }, 
    "array_reduce": {
        "descr": "array_reduce() applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value.", 
        "name": "array_reduce", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The callback function.   mixed callback ( mixed &$result , mixed $item )", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty.", 
                "name": "initial"
            }
        ], 
        "path": "php/function.array-reduce", 
        "syntax": "mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )", 
        "type": "Array"
    }, 
    "array_replace": {
        "descr": "array_replace() replaces the values of array1 with values having the same keys in each of the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.", 
        "name": "array_replace", 
        "params": [
            {
                "descr": "The array in which elements are replaced.", 
                "name": "array1"
            }, 
            {
                "descr": "The array from which elements will be extracted.", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays from which elements will be extracted. ", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-replace", 
        "syntax": "array array_replace ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_replace_recursive": {
        "descr": "array_replace_recursive() replaces the values of array1 with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.", 
        "name": "array_replace_recursive", 
        "params": [
            {
                "descr": "The array in which elements are replaced.", 
                "name": "array1"
            }, 
            {
                "descr": "The array from which elements will be extracted.", 
                "name": "array2"
            }, 
            {
                "descr": "Optional. More arrays from which elements will be extracted.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-replace-recursive", 
        "syntax": "array array_replace_recursive ( array $array1 , array $array2 [, array $... ] )", 
        "type": "Array"
    }, 
    "array_reverse": {
        "descr": "Takes an input array and returns a new array with the order of the elements reversed.", 
        "name": "array_reverse", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "If set to TRUE numeric keys are preserved. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-reverse", 
        "syntax": "array array_reverse ( array $array [, bool $preserve_keys = false ] )", 
        "type": "Array"
    }, 
    "array_search": {
        "descr": "Searches haystack for needle.", 
        "name": "array_search", 
        "params": [
            {
                "descr": "The searched value.  Note:  If needle is a string, the comparison is done in a case-sensitive manner.", 
                "name": "needle"
            }, 
            {
                "descr": "The array.", 
                "name": "haystack"
            }, 
            {
                "descr": "If the third parameter strict is set to TRUE then the array_search() function will search for identical elements in the haystack. ", 
                "name": "strict"
            }
        ], 
        "path": "php/function.array-search", 
        "syntax": "mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )", 
        "type": "Array"
    }, 
    "array_shift": {
        "descr": "array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.", 
        "name": "array_shift", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-shift", 
        "syntax": "mixed array_shift ( array &$array )", 
        "type": "Array"
    }, 
    "array_slice": {
        "descr": "array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.", 
        "name": "array_slice", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "If offset is non-negative, the sequence will start at that offset in the array. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is given and is positive, then the sequence will have up to that many elements in it. ", 
                "name": "length"
            }, 
            {
                "descr": "Note that array_slice() will reorder and reset the numeric array indices by default. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-slice", 
        "syntax": "array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )", 
        "type": "Array"
    }, 
    "array_splice": {
        "descr": "Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied.", 
        "name": "array_splice", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "input"
            }, 
            {
                "descr": "If offset is positive then the start of removed portion is at that offset from the beginning of the input array. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is omitted, removes everything from offset to the end of the array. ", 
                "name": "length"
            }, 
            {
                "descr": "If replacement array is specified, then the removed elements are replaced with elements from this array. ", 
                "name": "replacement"
            }
        ], 
        "path": "php/function.array-splice", 
        "syntax": "array array_splice ( array &$input , int $offset [, int $length [, mixed $replacement = array() ]] )", 
        "type": "Array"
    }, 
    "array_sum": {
        "descr": "array_sum() returns the sum of values in an array.", 
        "name": "array_sum", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-sum", 
        "syntax": "number array_sum ( array $array )", 
        "type": "Array"
    }, 
    "array_udiff": {
        "descr": "Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.", 
        "name": "array_udiff", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The callback comparison function. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-udiff", 
        "syntax": "array array_udiff ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "type": "Array"
    }, 
    "array_udiff_assoc": {
        "descr": "Computes the difference of arrays with additional index check, compares data by a callback function.", 
        "name": "array_udiff_assoc", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-udiff-assoc", 
        "syntax": "array array_udiff_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "type": "Array"
    }, 
    "array_udiff_uassoc": {
        "descr": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function.", 
        "name": "array_udiff_uassoc", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }, 
            {
                "descr": "The comparison of keys (indices) is done also by the callback function key_compare_func. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-udiff-uassoc", 
        "syntax": "array array_udiff_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_uintersect": {
        "descr": "Computes the intersection of arrays, compares data by a callback function.", 
        "name": "array_uintersect", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect", 
        "syntax": "array array_uintersect ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "type": "Array"
    }, 
    "array_uintersect_assoc": {
        "descr": "Computes the intersection of arrays with additional index check, compares data by a callback function.", 
        "name": "array_uintersect_assoc", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect-assoc", 
        "syntax": "array array_uintersect_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "type": "Array"
    }, 
    "array_uintersect_uassoc": {
        "descr": "Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions Note that the keys are used in the comparison unlike in array_uintersect(). Both the data and the indexes are compared by using separate callback functions.", 
        "name": "array_uintersect_uassoc", 
        "params": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }, 
            {
                "descr": "Key comparison callback function.", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect-uassoc", 
        "syntax": "array array_uintersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )", 
        "type": "Array"
    }, 
    "array_unique": {
        "descr": "Takes an input array and returns a new array without duplicate values.", 
        "name": "array_unique", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The optional second parameter sort_flags may be used to modify the sorting behavior using these values:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings   SORT_LOCALE_STRING - compare items as strings, based on the current locale.", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.array-unique", 
        "syntax": "array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )", 
        "type": "Array"
    }, 
    "array_unshift": {
        "descr": "array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.", 
        "name": "array_unshift", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "First value to prepend.", 
                "name": "value1"
            }
        ], 
        "path": "php/function.array-unshift", 
        "syntax": "int array_unshift ( array &$array , mixed $value1 [, mixed $... ] )", 
        "type": "Array"
    }, 
    "array_values": {
        "descr": "array_values() returns all the values from the array and indexes the array numerically.", 
        "name": "array_values", 
        "params": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-values", 
        "syntax": "array array_values ( array $array )", 
        "type": "Array"
    }, 
    "array_walk": {
        "descr": "", 
        "name": "array_walk", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Typically, callback takes on two parameters. ", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.", 
                "name": "userdata"
            }
        ], 
        "path": "php/function.array-walk", 
        "syntax": "bool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )", 
        "type": "Array"
    }, 
    "array_walk_recursive": {
        "descr": "Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays.", 
        "name": "array_walk_recursive", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Typically, callback takes on two parameters. ", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.", 
                "name": "userdata"
            }
        ], 
        "path": "php/function.array-walk-recursive", 
        "syntax": "bool array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] )", 
        "type": "Array"
    }, 
    "arsort": {
        "descr": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.", 
        "name": "arsort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.arsort", 
        "syntax": "bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "asin": {
        "descr": "Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range.", 
        "name": "asin", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.asin", 
        "syntax": "float asin ( float $arg )", 
        "type": "Mathematics"
    }, 
    "asinh": {
        "descr": "Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.", 
        "name": "asinh", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.asinh", 
        "syntax": "float asinh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "asort": {
        "descr": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.", 
        "name": "asort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.asort", 
        "syntax": "bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "assert": {
        "descr": "assert() will check the given assertion and take appropriate action if its result is FALSE.", 
        "name": "assert", 
        "params": [
            {
                "descr": "The assertion.", 
                "name": "assertion"
            }, 
            {
                "descr": "An optional description that will be included in the failure message if the assertion fails.", 
                "name": "description"
            }
        ], 
        "path": "php/function.assert", 
        "syntax": "bool assert ( mixed $assertion [, string $description ] )", 
        "type": "Language"
    }, 
    "assert_options": {
        "descr": "Set the various assert() control options or just query their current settings.", 
        "name": "assert_options", 
        "params": [
            {
                "descr": "Assert Options Option INI Setting Default value Description ASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL assert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0  disable error_reporting during assertion expression evaluation  ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed assertions", 
                "name": "what"
            }, 
            {
                "descr": "An optional new value for the option.", 
                "name": "value"
            }
        ], 
        "path": "php/function.assert-options", 
        "syntax": "mixed assert_options ( int $what [, mixed $value ] )", 
        "type": "Language"
    }, 
    "atan": {
        "descr": "Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range.", 
        "name": "atan", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.atan", 
        "syntax": "float atan ( float $arg )", 
        "type": "Mathematics"
    }, 
    "atan2": {
        "descr": "", 
        "name": "atan2", 
        "params": [
            {
                "descr": "Dividend parameter", 
                "name": "y"
            }, 
            {
                "descr": "Divisor parameter", 
                "name": "x"
            }
        ], 
        "path": "php/function.atan2", 
        "syntax": "float atan2 ( float $y , float $x )", 
        "type": "Mathematics"
    }, 
    "atanh": {
        "descr": "Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.", 
        "name": "atanh", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.atanh", 
        "syntax": "float atanh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "base64_decode": {
        "descr": "Decodes a base64 encoded data.", 
        "name": "base64_decode", 
        "params": [
            {
                "descr": "The encoded data.", 
                "name": "data"
            }, 
            {
                "descr": "Returns FALSE if input contains character from outside the base64 alphabet.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.base64-decode", 
        "syntax": "string base64_decode ( string $data [, bool $strict = false ] )", 
        "type": "Networking"
    }, 
    "base64_encode": {
        "descr": "Encodes the given data with base64.", 
        "name": "base64_encode", 
        "params": [
            {
                "descr": "The data to encode.", 
                "name": "data"
            }
        ], 
        "path": "php/function.base64-encode", 
        "syntax": "string base64_encode ( string $data )", 
        "type": "Networking"
    }, 
    "base_convert": {
        "descr": "Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.", 
        "name": "base_convert", 
        "params": [
            {
                "descr": "The number to convert", 
                "name": "number"
            }, 
            {
                "descr": "The base number is in", 
                "name": "frombase"
            }, 
            {
                "descr": "The base to convert number to", 
                "name": "tobase"
            }
        ], 
        "path": "php/function.base-convert", 
        "syntax": "string base_convert ( string $number , int $frombase , int $tobase )", 
        "type": "Mathematics"
    }, 
    "basename": {
        "descr": "Given a string containing the path to a file or directory, this function will return the trailing name component.", 
        "name": "basename", 
        "params": [
            {
                "descr": "A path.   On Windows, both slash (/) and backslash (\\) are used as directory separator character. ", 
                "name": "path"
            }, 
            {
                "descr": "If the name component ends in suffix this will also be cut off.", 
                "name": "suffix"
            }
        ], 
        "path": "php/function.basename", 
        "syntax": "string basename ( string $path [, string $suffix ] )", 
        "type": "File System"
    }, 
    "bcadd": {
        "descr": "Sums left_operand and right_operand.", 
        "name": "bcadd", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcadd", 
        "syntax": "string bcadd ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bccomp": {
        "descr": "Compares the left_operand to the right_operand and returns the result as an integer.", 
        "name": "bccomp", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bccomp", 
        "syntax": "int bccomp ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcdiv": {
        "descr": "Divides the left_operand by the right_operand.", 
        "name": "bcdiv", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcdiv", 
        "syntax": "string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcmod": {
        "descr": "Get the modulus of the left_operand using modulus.", 
        "name": "bcmod", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The modulus, as a string.", 
                "name": "modulus"
            }
        ], 
        "path": "php/function.bcmod", 
        "syntax": "string bcmod ( string $left_operand , string $modulus )", 
        "type": "Mathematics"
    }, 
    "bcmul": {
        "descr": "Multiply the left_operand by the right_operand.", 
        "name": "bcmul", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcmul", 
        "syntax": "string bcmul ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcpow": {
        "descr": "Raise left_operand to the power right_operand.", 
        "name": "bcpow", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcpow", 
        "syntax": "string bcpow ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcpowmod": {
        "descr": "Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.", 
        "name": "bcpowmod", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "The modulus, as a string.", 
                "name": "modulus"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcpowmod", 
        "syntax": "string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcscale": {
        "descr": "Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter.", 
        "name": "bcscale", 
        "params": [
            {
                "descr": "The scale factor.", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcscale", 
        "syntax": "bool bcscale ( int $scale )", 
        "type": "Mathematics"
    }, 
    "bcsqrt": {
        "descr": "Return the square root of the operand.", 
        "name": "bcsqrt", 
        "params": [
            {
                "descr": "The operand, as a string.", 
                "name": "operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcsqrt", 
        "syntax": "string bcsqrt ( string $operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bcsub": {
        "descr": "Subtracts the right_operand from the left_operand.", 
        "name": "bcsub", 
        "params": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcsub", 
        "syntax": "string bcsub ( string $left_operand , string $right_operand [, int $scale ] )", 
        "type": "Mathematics"
    }, 
    "bin2hex": {
        "descr": "Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.", 
        "name": "bin2hex", 
        "params": [
            {
                "descr": "A string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.bin2hex", 
        "syntax": "string bin2hex ( string $str )", 
        "type": "String"
    }, 
    "bind_textdomain_codeset": {
        "descr": "With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions.", 
        "name": "bind_textdomain_codeset", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The code set", 
                "name": "codeset"
            }
        ], 
        "path": "php/function.bind-textdomain-codeset", 
        "syntax": "string bind_textdomain_codeset ( string $domain , string $codeset )", 
        "type": "Encoding"
    }, 
    "bindec": {
        "descr": "Returns the decimal equivalent of the binary number represented by the binary_string argument.", 
        "name": "bindec", 
        "params": [
            {
                "descr": "The binary string to convert", 
                "name": "binary_string"
            }
        ], 
        "path": "php/function.bindec", 
        "syntax": "number bindec ( string $binary_string )", 
        "type": "Mathematics"
    }, 
    "bindtextdomain": {
        "descr": "The bindtextdomain() function sets the path for a domain.", 
        "name": "bindtextdomain", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The directory path", 
                "name": "directory"
            }
        ], 
        "path": "php/function.bindtextdomain", 
        "syntax": "string bindtextdomain ( string $domain , string $directory )", 
        "type": "Encoding"
    }, 
    "boolval": {
        "descr": "Returns the boolean value of var.", 
        "name": "boolval", 
        "params": [
            {
                "descr": "The scalar value being converted to a boolean.", 
                "name": "var"
            }
        ], 
        "path": "php/function.boolval", 
        "syntax": "boolean boolval ( mixed $var )", 
        "type": "Variables"
    }, 
    "bzclose": {
        "descr": "Closes the given bzip2 file pointer.", 
        "name": "bzclose", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzclose", 
        "syntax": "int bzclose ( resource $bz )", 
        "type": "Compression"
    }, 
    "bzcompress": {
        "descr": "bzcompress() compresses the given string and returns it as bzip2 encoded data.", 
        "name": "bzcompress", 
        "params": [
            {
                "descr": "The string to compress.", 
                "name": "source"
            }, 
            {
                "descr": "Specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so.", 
                "name": "blocksize"
            }, 
            {
                "descr": "Controls how the compression phase behaves when presented with worst case, highly repetitive, input data. ", 
                "name": "workfactor"
            }
        ], 
        "path": "php/function.bzcompress", 
        "syntax": "mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )", 
        "type": "Compression"
    }, 
    "bzdecompress": {
        "descr": "bzdecompress() decompresses the given string containing bzip2 encoded data.", 
        "name": "bzdecompress", 
        "params": [
            {
                "descr": "The string to decompress.", 
                "name": "source"
            }, 
            {
                "descr": "If TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed. ", 
                "name": "small"
            }
        ], 
        "path": "php/function.bzdecompress", 
        "syntax": "mixed bzdecompress ( string $source [, int $small = 0 ] )", 
        "type": "Compression"
    }, 
    "bzerrno": {
        "descr": "Returns the error number of any bzip2 error returned by the given file pointer.", 
        "name": "bzerrno", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerrno", 
        "syntax": "int bzerrno ( resource $bz )", 
        "type": "Compression"
    }, 
    "bzerror": {
        "descr": "Returns the error number and error string of any bzip2 error returned by the given file pointer.", 
        "name": "bzerror", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerror", 
        "syntax": "array bzerror ( resource $bz )", 
        "type": "Compression"
    }, 
    "bzerrstr": {
        "descr": "Gets the error string of any bzip2 error returned by the given file pointer.", 
        "name": "bzerrstr", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerrstr", 
        "syntax": "string bzerrstr ( resource $bz )", 
        "type": "Compression"
    }, 
    "bzflush": {
        "descr": "Forces a write of all buffered bzip2 data for the file pointer bz.", 
        "name": "bzflush", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzflush", 
        "syntax": "int bzflush ( resource $bz )", 
        "type": "Compression"
    }, 
    "bzopen": {
        "descr": "bzopen() opens a bzip2 (.bz2) file for reading or writing.", 
        "name": "bzopen", 
        "params": [
            {
                "descr": "The name of the file to open, or an existing stream resource.", 
                "name": "filename"
            }, 
            {
                "descr": "Similar to the fopen() function, only 'r' (read) and 'w' (write) are supported. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.bzopen", 
        "syntax": "resource bzopen ( string $filename , string $mode )", 
        "type": "Compression"
    }, 
    "bzread": {
        "descr": "bzread() reads from the given bzip2 file pointer.", 
        "name": "bzread", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }, 
            {
                "descr": "If not specified, bzread() will read 1024 (uncompressed) bytes at a time. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.bzread", 
        "syntax": "string bzread ( resource $bz [, int $length = 1024 ] )", 
        "type": "Compression"
    }, 
    "bzwrite": {
        "descr": "bzwrite() writes a string into the given bzip2 file stream.", 
        "name": "bzwrite", 
        "params": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }, 
            {
                "descr": "The written data.", 
                "name": "data"
            }, 
            {
                "descr": "If supplied, writing will stop after length (uncompressed) bytes have been written or the end of data is reached, whichever comes first.", 
                "name": "length"
            }
        ], 
        "path": "php/function.bzwrite", 
        "syntax": "int bzwrite ( resource $bz , string $data [, int $length ] )", 
        "type": "Compression"
    }, 
    "cal_days_in_month": {
        "descr": "This function will return the number of days in the month of year for the specified calendar.", 
        "name": "cal_days_in_month", 
        "params": [
            {
                "descr": "Calendar to use for calculation", 
                "name": "calendar"
            }, 
            {
                "descr": "Month in the selected calendar", 
                "name": "month"
            }, 
            {
                "descr": "Year in the selected calendar", 
                "name": "year"
            }
        ], 
        "path": "php/function.cal-days-in-month", 
        "syntax": "int cal_days_in_month ( int $calendar , int $month , int $year )", 
        "type": "Date and Time"
    }, 
    "cal_from_jd": {
        "descr": "cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.", 
        "name": "cal_from_jd", 
        "params": [
            {
                "descr": "Julian day as integer", 
                "name": "jd"
            }, 
            {
                "descr": "Calendar to convert to", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.cal-from-jd", 
        "syntax": "array cal_from_jd ( int $jd , int $calendar )", 
        "type": "Date and Time"
    }, 
    "cal_info": {
        "descr": "cal_info() returns information on the specified calendar.", 
        "name": "cal_info", 
        "params": [
            {
                "descr": "Calendar to return information for. ", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.cal-info", 
        "syntax": "array cal_info ([ int $calendar = -1 ] )", 
        "type": "Date and Time"
    }, 
    "cal_to_jd": {
        "descr": "cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.", 
        "name": "cal_to_jd", 
        "params": [
            {
                "descr": "Calendar to convert from, one of CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH or CAL_FRENCH.", 
                "name": "calendar"
            }, 
            {
                "descr": "The month as a number, the valid range depends on the calendar", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number, the valid range depends on the calendar", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number, the valid range depends on the calendar", 
                "name": "year"
            }
        ], 
        "path": "php/function.cal-to-jd", 
        "syntax": "int cal_to_jd ( int $calendar , int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "call_user_func": {
        "descr": "Calls the callback given by the first parameter and passes the remaining parameters as arguments.", 
        "name": "call_user_func", 
        "params": [
            {
                "descr": "The callable to be called.", 
                "name": "callback"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the callback. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.call-user-func", 
        "syntax": "mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )", 
        "type": "Classes and Functions"
    }, 
    "call_user_func_array": {
        "descr": "Calls the callback given by the first parameter with the parameters in param_arr.", 
        "name": "call_user_func_array", 
        "params": [
            {
                "descr": "The callable to be called.", 
                "name": "callback"
            }, 
            {
                "descr": "The parameters to be passed to the callback, as an indexed array.", 
                "name": "param_arr"
            }
        ], 
        "path": "php/function.call-user-func-array", 
        "syntax": "mixed call_user_func_array ( callable $callback , array $param_arr )", 
        "type": "Classes and Functions"
    }, 
    "call_user_method": {
        "descr": "", 
        "name": "call_user_method", 
        "params": [
            {
                "descr": "The method name being called.", 
                "name": "method_name"
            }, 
            {
                "descr": "The object that method_name is being called on.", 
                "name": "obj"
            }, 
            {
                "descr": "The optional parameters.", 
                "name": "parameter ..."
            }
        ], 
        "path": "php/function.call-user-method", 
        "syntax": "mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )", 
        "type": "Classes and Functions"
    }, 
    "call_user_method_array": {
        "descr": "", 
        "name": "call_user_method_array", 
        "params": [
            {
                "descr": "The method name being called.", 
                "name": "method_name"
            }, 
            {
                "descr": "The object that method_name is being called on.", 
                "name": "obj"
            }, 
            {
                "descr": "An array of parameters.", 
                "name": "params"
            }
        ], 
        "path": "php/function.call-user-method-array", 
        "syntax": "mixed call_user_method_array ( string $method_name , object &$obj , array $params )", 
        "type": "Classes and Functions"
    }, 
    "ceil": {
        "descr": "", 
        "name": "ceil", 
        "params": [
            {
                "descr": "The value to round", 
                "name": "value"
            }
        ], 
        "path": "php/function.ceil", 
        "syntax": "float ceil ( float $value )", 
        "type": "Mathematics"
    }, 
    "chdir": {
        "descr": "Changes PHP's current directory to directory.", 
        "name": "chdir", 
        "params": [
            {
                "descr": "The new current directory", 
                "name": "directory"
            }
        ], 
        "path": "php/function.chdir", 
        "syntax": "bool chdir ( string $directory )", 
        "type": "File System"
    }, 
    "checkdate": {
        "descr": "Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.", 
        "name": "checkdate", 
        "params": [
            {
                "descr": "The month is between 1 and 12 inclusive.", 
                "name": "month"
            }, 
            {
                "descr": "The day is within the allowed number of days for the given month. ", 
                "name": "day"
            }, 
            {
                "descr": "The year is between 1 and 32767 inclusive.", 
                "name": "year"
            }
        ], 
        "path": "php/function.checkdate", 
        "syntax": "bool checkdate ( int $month , int $day , int $year )", 
        "type": "Date and Time"
    }, 
    "checkdnsrr": {
        "descr": "Searches DNS for records of type type corresponding to host.", 
        "name": "checkdnsrr", 
        "params": [
            {
                "descr": "host may either be the IP address in dotted-quad notation or the host name.", 
                "name": "host"
            }, 
            {
                "descr": "type may be any one of: A, MX, NS, SOA, PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.", 
                "name": "type"
            }
        ], 
        "path": "php/function.checkdnsrr", 
        "syntax": "bool checkdnsrr ( string $host [, string $type = \"MX\" ] )", 
        "type": "Networking"
    }, 
    "chgrp": {
        "descr": "Attempts to change the group of the file filename to group.", 
        "name": "chgrp", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "A group name or number.", 
                "name": "group"
            }
        ], 
        "path": "php/function.chgrp", 
        "syntax": "bool chgrp ( string $filename , mixed $group )", 
        "type": "File System"
    }, 
    "chmod": {
        "descr": "Attempts to change the mode of the specified file to that given in mode.", 
        "name": "chmod", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Note that mode is not automatically assumed to be an octal value, so strings (such as \"g+w\") will not work properly. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.chmod", 
        "syntax": "bool chmod ( string $filename , int $mode )", 
        "type": "File System"
    }, 
    "chown": {
        "descr": "Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.", 
        "name": "chown", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "A user name or number.", 
                "name": "user"
            }
        ], 
        "path": "php/function.chown", 
        "syntax": "bool chown ( string $filename , mixed $user )", 
        "type": "File System"
    }, 
    "chr": {
        "descr": "Returns a one-character string containing the character specified by ascii.", 
        "name": "chr", 
        "params": [
            {
                "descr": "The ascii code.", 
                "name": "ascii"
            }
        ], 
        "path": "php/function.chr", 
        "syntax": "string chr ( int $ascii )", 
        "type": "String"
    }, 
    "chroot": {
        "descr": "Changes the root directory of the current process to directory, and changes the current working directory to \"/\".", 
        "name": "chroot", 
        "params": [
            {
                "descr": "The path to change the root directory to.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.chroot", 
        "syntax": "bool chroot ( string $directory )", 
        "type": "File System"
    }, 
    "chunk_split": {
        "descr": "Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.", 
        "name": "chunk_split", 
        "params": [
            {
                "descr": "The string to be chunked.", 
                "name": "body"
            }, 
            {
                "descr": "The chunk length.", 
                "name": "chunklen"
            }, 
            {
                "descr": "The line ending sequence.", 
                "name": "end"
            }
        ], 
        "path": "php/function.chunk-split", 
        "syntax": "string chunk_split ( string $body [, int $chunklen = 76 [, string $end = \"\\r\\n\" ]] )", 
        "type": "String"
    }, 
    "class_alias": {
        "descr": "Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class.", 
        "name": "class_alias", 
        "params": [
            {
                "descr": "The original class.", 
                "name": "original"
            }, 
            {
                "descr": "The alias name for the class.", 
                "name": "alias"
            }, 
            {
                "descr": "Whether do autoload if the original class is not found.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-alias", 
        "syntax": "bool class_alias ( string $original , string $alias [, bool $autoload = TRUE ] )", 
        "type": "Classes and Functions"
    }, 
    "class_exists": {
        "descr": "This function checks whether or not the given class has been defined.", 
        "name": "class_exists", 
        "params": [
            {
                "descr": "The class name. The name is matched in a case-insensitive manner.", 
                "name": "class_name"
            }, 
            {
                "descr": "Whether or not to call __autoload by default.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-exists", 
        "syntax": "bool class_exists ( string $class_name [, bool $autoload = true ] )", 
        "type": "Classes and Functions"
    }, 
    "class_implements": {
        "descr": "This function returns an array with the names of the interfaces that the given class and its parents implement.", 
        "name": "class_implements", 
        "params": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-implements", 
        "syntax": "array class_implements ( mixed $class [, bool $autoload = true ] )", 
        "type": "SPL"
    }, 
    "class_parents": {
        "descr": "This function returns an array with the name of the parent classes of the given class.", 
        "name": "class_parents", 
        "params": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-parents", 
        "syntax": "array class_parents ( mixed $class [, bool $autoload = true ] )", 
        "type": "SPL"
    }, 
    "class_uses": {
        "descr": "This function returns an array with the names of the traits that the given class uses. This does however not include any traits used by a parent class.", 
        "name": "class_uses", 
        "params": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-uses", 
        "syntax": "array class_uses ( mixed $class [, bool $autoload = true ] )", 
        "type": "SPL"
    }, 
    "clearstatcache": {
        "descr": "When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.", 
        "name": "clearstatcache", 
        "params": [
            {
                "descr": "Whether to clear the realpath cache or not.", 
                "name": "clear_realpath_cache"
            }, 
            {
                "descr": "Clear the realpath and the stat cache for a specific filename only; only used if clear_realpath_cache is TRUE.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.clearstatcache", 
        "syntax": "void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )", 
        "type": "File System"
    }, 
    "cli_get_process_title": {
        "descr": "Returns the current process title, as set by cli_set_process_title(). Note that this may not exactly match what is shown in ps or top, depending on your operating system.", 
        "name": "cli_get_process_title", 
        "params": [], 
        "path": "php/function.cli-get-process-title", 
        "syntax": "string cli_get_process_title ( void )", 
        "type": "Language"
    }, 
    "cli_set_process_title": {
        "descr": "Sets the process title visible in tools such as top and ps. This function is available only in CLI mode.", 
        "name": "cli_set_process_title", 
        "params": [
            {
                "descr": "The new title.", 
                "name": "title"
            }
        ], 
        "path": "php/function.cli-set-process-title", 
        "syntax": "bool cli_set_process_title ( string $title )", 
        "type": "Language"
    }, 
    "closedir": {
        "descr": "Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir().", 
        "name": "closedir", 
        "params": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.closedir", 
        "syntax": "void closedir ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "closelog": {
        "descr": "closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.", 
        "name": "closelog", 
        "params": [], 
        "path": "php/function.closelog", 
        "syntax": "bool closelog ( void )", 
        "type": "Networking"
    }, 
    "compact": {
        "descr": "Creates an array containing variables and their values.", 
        "name": "compact", 
        "params": [
            {
                "descr": "compact() takes a variable number of parameters. ", 
                "name": "varname1"
            }
        ], 
        "path": "php/function.compact", 
        "syntax": "array compact ( mixed $varname1 [, mixed $... ] )", 
        "type": "Array"
    }, 
    "connection_aborted": {
        "descr": "Checks whether the client disconnected.", 
        "name": "connection_aborted", 
        "params": [], 
        "path": "php/function.connection-aborted", 
        "syntax": "int connection_aborted ( void )", 
        "type": "Language"
    }, 
    "connection_status": {
        "descr": "Gets the connection status bitfield.", 
        "name": "connection_status", 
        "params": [], 
        "path": "php/function.connection-status", 
        "syntax": "int connection_status ( void )", 
        "type": "Language"
    }, 
    "connection_timeout": {
        "descr": "Determines whether the script timed out.", 
        "name": "connection_timeout", 
        "params": [], 
        "path": "php/function.connection-timeout", 
        "syntax": "int connection_timeout ( void )", 
        "type": "Language"
    }, 
    "constant": {
        "descr": "", 
        "name": "constant", 
        "params": [
            {
                "descr": "The constant name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.constant", 
        "syntax": "mixed constant ( string $name )", 
        "type": "Language"
    }, 
    "convert_cyr_string": {
        "descr": "Converts from one Cyrillic character set to another.", 
        "name": "convert_cyr_string", 
        "params": [
            {
                "descr": "The string to be converted.", 
                "name": "str"
            }, 
            {
                "descr": "The source Cyrillic character set, as a single character.", 
                "name": "from"
            }, 
            {
                "descr": "The target Cyrillic character set, as a single character.", 
                "name": "to"
            }
        ], 
        "path": "php/function.convert-cyr-string", 
        "syntax": "string convert_cyr_string ( string $str , string $from , string $to )", 
        "type": "String"
    }, 
    "convert_uudecode": {
        "descr": "convert_uudecode() decodes a uuencoded string.", 
        "name": "convert_uudecode", 
        "params": [
            {
                "descr": "The uuencoded data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.convert-uudecode", 
        "syntax": "string convert_uudecode ( string $data )", 
        "type": "String"
    }, 
    "convert_uuencode": {
        "descr": "convert_uuencode() encodes a string using the uuencode algorithm.", 
        "name": "convert_uuencode", 
        "params": [
            {
                "descr": "The data to be encoded or FALSE on failure.", 
                "name": "data"
            }
        ], 
        "path": "php/function.convert-uuencode", 
        "syntax": "string convert_uuencode ( string $data )", 
        "type": "String"
    }, 
    "copy": {
        "descr": "Makes a copy of the file source to dest.", 
        "name": "copy", 
        "params": [
            {
                "descr": "Path to the source file.", 
                "name": "source"
            }, 
            {
                "descr": "The destination path. If dest is a URL, the copy operation may fail if the wrapper does not support overwriting of existing files. ", 
                "name": "dest"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.copy", 
        "syntax": "bool copy ( string $source , string $dest [, resource $context ] )", 
        "type": "File System"
    }, 
    "cos": {
        "descr": "cos() returns the cosine of the arg parameter. The arg parameter is in radians.", 
        "name": "cos", 
        "params": [
            {
                "descr": "An angle in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.cos", 
        "syntax": "float cos ( float $arg )", 
        "type": "Mathematics"
    }, 
    "cosh": {
        "descr": "Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.", 
        "name": "cosh", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.cosh", 
        "syntax": "float cosh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "count": {
        "descr": "Counts all elements in an array, or something in an object.", 
        "name": "count", 
        "params": [
            {
                "descr": "An array or Countable object.", 
                "name": "array_or_countable"
            }, 
            {
                "descr": "If the optional mode parameter is set to COUNT_RECURSIVE (or 1), count() will recursively count the array. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.count", 
        "syntax": "int count ( mixed $array_or_countable [, int $mode = COUNT_NORMAL ] )", 
        "type": "Array"
    }, 
    "count_chars": {
        "descr": "Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.", 
        "name": "count_chars", 
        "params": [
            {
                "descr": "The examined string.", 
                "name": "string"
            }, 
            {
                "descr": "See return values.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.count-chars", 
        "syntax": "mixed count_chars ( string $string [, int $mode = 0 ] )", 
        "type": "String"
    }, 
    "crc32": {
        "descr": "Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted.", 
        "name": "crc32", 
        "params": [
            {
                "descr": "The data.", 
                "name": "str"
            }
        ], 
        "path": "php/function.crc32", 
        "syntax": "int crc32 ( string $str )", 
        "type": "String"
    }, 
    "create_function": {
        "descr": "Creates an anonymous function from the parameters passed, and returns a unique name for it.", 
        "name": "create_function", 
        "params": [
            {
                "descr": "The function arguments.", 
                "name": "args"
            }, 
            {
                "descr": "The function code.", 
                "name": "code"
            }
        ], 
        "path": "php/function.create-function", 
        "syntax": "string create_function ( string $args , string $code )", 
        "type": "Classes and Functions"
    }, 
    "crypt": {
        "descr": "crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.", 
        "name": "crypt", 
        "params": [
            {
                "descr": "The string to be hashed.  Caution  Using the CRYPT_BLOWFISH algorithm, will result in the str parameter being truncated to a maximum length of 72 characters. ", 
                "name": "str"
            }, 
            {
                "descr": "An optional salt string to base the hashing on. ", 
                "name": "salt"
            }
        ], 
        "path": "php/function.crypt", 
        "syntax": "string crypt ( string $str [, string $salt ] )", 
        "type": "String"
    }, 
    "ctype_alnum": {
        "descr": "Checks if all of the characters in the provided string, text, are alphanumeric.", 
        "name": "ctype_alnum", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-alnum", 
        "syntax": "bool ctype_alnum ( string $text )", 
        "type": "String"
    }, 
    "ctype_alpha": {
        "descr": "Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.", 
        "name": "ctype_alpha", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-alpha", 
        "syntax": "bool ctype_alpha ( string $text )", 
        "type": "String"
    }, 
    "ctype_cntrl": {
        "descr": "Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.", 
        "name": "ctype_cntrl", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-cntrl", 
        "syntax": "bool ctype_cntrl ( string $text )", 
        "type": "String"
    }, 
    "ctype_digit": {
        "descr": "Checks if all of the characters in the provided string, text, are numerical.", 
        "name": "ctype_digit", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-digit", 
        "syntax": "bool ctype_digit ( string $text )", 
        "type": "String"
    }, 
    "ctype_graph": {
        "descr": "Checks if all of the characters in the provided string, text, creates visible output.", 
        "name": "ctype_graph", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-graph", 
        "syntax": "bool ctype_graph ( string $text )", 
        "type": "String"
    }, 
    "ctype_lower": {
        "descr": "Checks if all of the characters in the provided string, text, are lowercase letters.", 
        "name": "ctype_lower", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-lower", 
        "syntax": "bool ctype_lower ( string $text )", 
        "type": "String"
    }, 
    "ctype_print": {
        "descr": "Checks if all of the characters in the provided string, text, are printable.", 
        "name": "ctype_print", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-print", 
        "syntax": "bool ctype_print ( string $text )", 
        "type": "String"
    }, 
    "ctype_punct": {
        "descr": "Checks if all of the characters in the provided string, text, are punctuation character.", 
        "name": "ctype_punct", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-punct", 
        "syntax": "bool ctype_punct ( string $text )", 
        "type": "String"
    }, 
    "ctype_space": {
        "descr": "Checks if all of the characters in the provided string, text, creates whitespace.", 
        "name": "ctype_space", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-space", 
        "syntax": "bool ctype_space ( string $text )", 
        "type": "String"
    }, 
    "ctype_upper": {
        "descr": "Checks if all of the characters in the provided string, text, are uppercase characters.", 
        "name": "ctype_upper", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-upper", 
        "syntax": "bool ctype_upper ( string $text )", 
        "type": "String"
    }, 
    "ctype_xdigit": {
        "descr": "Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.", 
        "name": "ctype_xdigit", 
        "params": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-xdigit", 
        "syntax": "bool ctype_xdigit ( string $text )", 
        "type": "String"
    }, 
    "curl_close": {
        "descr": "Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.", 
        "name": "curl_close", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-close", 
        "syntax": "void curl_close ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_copy_handle": {
        "descr": "Copies a cURL handle keeping the same preferences.", 
        "name": "curl_copy_handle", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-copy-handle", 
        "syntax": "resource curl_copy_handle ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_errno": {
        "descr": "Returns the error number for the last cURL operation.", 
        "name": "curl_errno", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-errno", 
        "syntax": "int curl_errno ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_error": {
        "descr": "Returns a clear text error message for the last cURL operation.", 
        "name": "curl_error", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-error", 
        "syntax": "string curl_error ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_escape": {
        "descr": "This function URL encodes the given string according to \u00bb RFC 3986.", 
        "name": "curl_escape", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The string to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.curl-escape", 
        "syntax": "string curl_escape ( resource $ch , string $str )", 
        "type": "cURL"
    }, 
    "curl_exec": {
        "descr": "Execute the given cURL session.", 
        "name": "curl_exec", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-exec", 
        "syntax": "mixed curl_exec ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_getinfo": {
        "descr": "Gets information about the last transfer.", 
        "name": "curl_getinfo", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "This may be one of the following constants:   CURLINFO_EFFECTIVE_URL - Last effective URL     CURLINFO_HTTP_CODE - Last received HTTP code     CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown     CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer     CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete     CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection     CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins     CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred     CURLINFO_REDIRECT_COUNT - Number of redirects     CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started     CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded     CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded     CURLINFO_SPEED_DOWNLOAD - Average download speed     CURLINFO_SPEED_UPLOAD - Average upload speed     CURLINFO_HEADER_SIZE - Total size of all headers received     CURLINFO_HEADER_OUT - The request string sent. For this to work, add the CURLINFO_HEADER_OUT option to the handle by calling curl_setopt()     CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests     CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER     CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field     CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload     CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header", 
                "name": "opt"
            }
        ], 
        "path": "php/function.curl-getinfo", 
        "syntax": "mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )", 
        "type": "cURL"
    }, 
    "curl_init": {
        "descr": "Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions.", 
        "name": "curl_init", 
        "params": [
            {
                "descr": "If provided, the CURLOPT_URL option will be set to its value. ", 
                "name": "url"
            }
        ], 
        "path": "php/function.curl-init", 
        "syntax": "resource curl_init ([ string $url = NULL ] )", 
        "type": "cURL"
    }, 
    "curl_multi_add_handle": {
        "descr": "Adds the ch handle to the multi handle mh", 
        "name": "curl_multi_add_handle", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-add-handle", 
        "syntax": "int curl_multi_add_handle ( resource $mh , resource $ch )", 
        "type": "cURL"
    }, 
    "curl_multi_close": {
        "descr": "Closes a set of cURL handles.", 
        "name": "curl_multi_close", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }
        ], 
        "path": "php/function.curl-multi-close", 
        "syntax": "void curl_multi_close ( resource $mh )", 
        "type": "cURL"
    }, 
    "curl_multi_exec": {
        "descr": "Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.", 
        "name": "curl_multi_exec", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A reference to a flag to tell whether the operations are still running.", 
                "name": "still_running"
            }
        ], 
        "path": "php/function.curl-multi-exec", 
        "syntax": "int curl_multi_exec ( resource $mh , int &$still_running )", 
        "type": "cURL"
    }, 
    "curl_multi_getcontent": {
        "descr": "If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.", 
        "name": "curl_multi_getcontent", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-getcontent", 
        "syntax": "string curl_multi_getcontent ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_multi_info_read": {
        "descr": "Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.", 
        "name": "curl_multi_info_read", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "Number of messages that are still in the queue", 
                "name": "msgs_in_queue"
            }
        ], 
        "path": "php/function.curl-multi-info-read", 
        "syntax": "array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )", 
        "type": "cURL"
    }, 
    "curl_multi_init": {
        "descr": "Allows the processing of multiple cURL handles in parallel.", 
        "name": "curl_multi_init", 
        "params": [], 
        "path": "php/function.curl-multi-init", 
        "syntax": "resource curl_multi_init ( void )", 
        "type": "cURL"
    }, 
    "curl_multi_remove_handle": {
        "descr": "Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.", 
        "name": "curl_multi_remove_handle", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-remove-handle", 
        "syntax": "int curl_multi_remove_handle ( resource $mh , resource $ch )", 
        "type": "cURL"
    }, 
    "curl_multi_select": {
        "descr": "Blocks until there is activity on any of the curl_multi connections.", 
        "name": "curl_multi_select", 
        "params": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "Time, in seconds, to wait for a response.", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.curl-multi-select", 
        "syntax": "int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )", 
        "type": "cURL"
    }, 
    "curl_multi_setopt": {
        "descr": "", 
        "name": "curl_multi_setopt", 
        "params": [
            {
                "descr": "One of the CURLMOPT_* constants.", 
                "name": "mh   option"
            }, 
            {
                "descr": "The value to be set on option.   value should be an int for the following values of the option parameter: Option Set value to CURLMOPT_PIPELINING  Pass 1 to enable or 0 to disable. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-multi-setopt", 
        "syntax": "bool curl_multi_setopt ( resource $mh , int $option , mixed $value )", 
        "type": "cURL"
    }, 
    "curl_multi_strerror": {
        "descr": "Returns a text error message describing the given CURLM error code.", 
        "name": "curl_multi_strerror", 
        "params": [
            {
                "descr": "One of the \u00bb CURLM error codes constants.", 
                "name": "errornum"
            }
        ], 
        "path": "php/function.curl-multi-strerror", 
        "syntax": "string curl_multi_strerror ( int $errornum )", 
        "type": "cURL"
    }, 
    "curl_pause": {
        "descr": "", 
        "name": "curl_pause", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "One of CURLPAUSE_* constants.", 
                "name": "bitmask"
            }
        ], 
        "path": "php/function.curl-pause", 
        "syntax": "int curl_pause ( resource $ch , int $bitmask )", 
        "type": "cURL"
    }, 
    "curl_reset": {
        "descr": "This function re-initializes all options set on the given cURL handle to the default values.", 
        "name": "curl_reset", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-reset", 
        "syntax": "void curl_reset ( resource $ch )", 
        "type": "cURL"
    }, 
    "curl_setopt": {
        "descr": "Sets an option on the given cURL session handle.", 
        "name": "curl_setopt", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The CURLOPT_XXX option to set.", 
                "name": "option"
            }, 
            {
                "descr": "The value to be set on option.   value should be a bool for the following values of the option parameter: Option Set value to Notes CURLOPT_AUTOREFERER  TRUE to automatically set the Referer: field in requests where it follows a Location: redirect.    CURLOPT_BINARYTRANSFER  TRUE to return the raw output when CURLOPT_RETURNTRANSFER is used.   From PHP 5.1.3, this option has no effect: the raw output will always be returned when CURLOPT_RETURNTRANSFER is used.  CURLOPT_COOKIESESSION  TRUE to mark this as a new cookie \"session\". It will force libcurl to ignore all cookies it is about to load that are \"session cookies\" from the previous session. By default, libcurl always stores and loads all cookies, independent if they are session cookies or not. Session cookies are cookies without expiry date and they are meant to be alive and existing for this \"session\" only.    CURLOPT_CERTINFO  TRUE to output SSL certification information to STDERR on secure transfers.   Added in cURL 7.19.1. Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be on to have an effect.  CURLOPT_CONNECT_ONLY  TRUE tells the library to perform all the required proxy authentication and connection setup, but no data transfer. This option is implemented for HTTP, SMTP and POP3.   Added in 7.15.2. Available since PHP 5.5.0.  CURLOPT_CRLF  TRUE to convert Unix newlines to CRLF newlines on transfers.    CURLOPT_DNS_USE_GLOBAL_CACHE  TRUE to use a global DNS cache. This option is not thread-safe and is enabled by default.    CURLOPT_FAILONERROR  TRUE to fail verbosely if the HTTP code returned is greater than or equal to 400. The default behavior is to return the page normally, ignoring the code.    CURLOPT_FILETIME  TRUE to attempt to retrieve the modification date of the remote document. This value can be retrieved using the CURLINFO_FILETIME option with curl_getinfo().    CURLOPT_FOLLOWLOCATION  TRUE to follow any \"Location: \" header that the server sends as part of the HTTP header (note this is recursive, PHP will follow as many \"Location: \" headers that it is sent, unless CURLOPT_MAXREDIRS is set).    CURLOPT_FORBID_REUSE  TRUE to force the connection to explicitly close when it has finished processing, and not be pooled for reuse.    CURLOPT_FRESH_CONNECT  TRUE to force the use of a new connection instead of a cached one.    CURLOPT_FTP_USE_EPRT  TRUE to use EPRT (and LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT only.    CURLOPT_FTP_USE_EPSV  TRUE to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable EPSV.    CURLOPT_FTP_CREATE_MISSING_DIRS  TRUE to create missing directories when an FTP operation encounters a path that currently doesn't exist.    CURLOPT_FTPAPPEND  TRUE to append to the remote file instead of overwriting it.    CURLOPT_FTPASCII  An alias of CURLOPT_TRANSFERTEXT. Use that instead.    CURLOPT_FTPLISTONLY  TRUE to only list the names of an FTP directory.    CURLOPT_HEADER  TRUE to include the header in the output.    CURLINFO_HEADER_OUT  TRUE to track the handle's request string.   Available since PHP 5.1.3. The CURLINFO_ prefix is intentional.  CURLOPT_HTTPGET  TRUE to reset the HTTP request method to GET. Since GET is the default, this is only necessary if the request method has been changed.    CURLOPT_HTTPPROXYTUNNEL  TRUE to tunnel through a given HTTP proxy.    CURLOPT_MUTE  TRUE to be completely silent with regards to the cURL functions.   Removed in cURL 7.15.5 (You can use CURLOPT_RETURNTRANSFER instead)  CURLOPT_NETRC  TRUE to scan the ~/.netrc file to find a username and password for the remote site that a connection is being established with.    CURLOPT_NOBODY  TRUE to exclude the body from the output. Request method is then set to HEAD. Changing this to FALSE does not change it to GET.    CURLOPT_NOPROGRESS  TRUE to disable the progress meter for cURL transfers. Note:  PHP automatically sets this option to TRUE, this should only be changed for debugging purposes.      CURLOPT_NOSIGNAL  TRUE to ignore any cURL function that causes a signal to be sent to the PHP process. This is turned on by default in multi-threaded SAPIs so timeout options can still be used.   Added in cURL 7.10.  CURLOPT_POST  TRUE to do a regular HTTP POST. This POST is the normal application/x-www-form-urlencoded kind, most commonly used by HTML forms.    CURLOPT_PUT  TRUE to HTTP PUT a file. The file to PUT must be set with CURLOPT_INFILE and CURLOPT_INFILESIZE.    CURLOPT_RETURNTRANSFER  TRUE to return the transfer as a string of the return value of curl_exec() instead of outputting it out directly.    CURLOPT_SSL_VERIFYPEER  FALSE to stop cURL from verifying the peer's certificate. Alternate certificates to verify against can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified with the CURLOPT_CAPATH option.   TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10.  CURLOPT_TRANSFERTEXT  TRUE to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set STDOUT to binary mode.    CURLOPT_UNRESTRICTED_AUTH  TRUE to keep sending the username and password when following locations (using CURLOPT_FOLLOWLOCATION), even when the hostname has changed.    CURLOPT_UPLOAD  TRUE to prepare for an upload.    CURLOPT_VERBOSE  TRUE to output verbose information. Writes output to STDERR, or the file specified using CURLOPT_STDERR.     value should be an integer for the following values of the option parameter: Option Set value to Notes CURLOPT_BUFFERSIZE  The size of the buffer to use for each read. There is no guarantee this request will be fulfilled, however.   Added in cURL 7.10.  CURLOPT_CLOSEPOLICY  Either CURLCLOSEPOLICY_LEAST_RECENTLY_USED or CURLCLOSEPOLICY_OLDEST. There are three other CURLCLOSEPOLICY_ constants, but cURL does not support them yet.    CURLOPT_CONNECTTIMEOUT  The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.    CURLOPT_CONNECTTIMEOUT_MS  The number of milliseconds to wait while trying to connect. Use 0 to wait indefinitely. If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.   Added in cURL 7.16.2. Available since PHP 5.2.3.  CURLOPT_DNS_CACHE_TIMEOUT  The number of seconds to keep DNS entries in memory. This option is set to 120 (2 minutes) by default.    CURLOPT_FTPSSLAUTH  The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide).   Added in cURL 7.12.2.  CURLOPT_HTTP_VERSION  CURL_HTTP_VERSION_NONE (default, lets CURL decide which version to use), CURL_HTTP_VERSION_1_0 (forces HTTP/1.0), or CURL_HTTP_VERSION_1_1 (forces HTTP/1.1).    CURLOPT_HTTPAUTH   The HTTP authentication method(s) to use. The options are: CURLAUTH_BASIC, CURLAUTH_DIGEST, CURLAUTH_GSSNEGOTIATE, CURLAUTH_NTLM, CURLAUTH_ANY, and CURLAUTH_ANYSAFE.   The bitwise | (or) operator can be used to combine more than one method. If this is done, cURL will poll the server to see what methods it supports and pick the best one.   CURLAUTH_ANY is an alias for CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.   CURLAUTH_ANYSAFE is an alias for CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.     CURLOPT_INFILESIZE  The expected size, in bytes, of the file when uploading a file to a remote site. Note that using this option will not stop libcurl from sending more data, as exactly what is sent depends on CURLOPT_READFUNCTION.    CURLOPT_LOW_SPEED_LIMIT  The transfer speed, in bytes per second, that the transfer should be below during the count of CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow and aborts.    CURLOPT_LOW_SPEED_TIME  The number of seconds the transfer speed should be below CURLOPT_LOW_SPEED_LIMIT before PHP considers the transfer too slow and aborts.    CURLOPT_MAXCONNECTS  The maximum amount of persistent connections that are allowed. When the limit is reached, CURLOPT_CLOSEPOLICY is used to determine which connection to close.    CURLOPT_MAXREDIRS  The maximum amount of HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION.    CURLOPT_PORT  An alternative port number to connect to.    CURLOPT_PROTOCOLS   Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in the transfer. This allows you to have a libcurl built to support a wide range of protocols but still limit specific transfers to only be allowed to use a subset of them. By default libcurl will accept all protocols it supports. See also CURLOPT_REDIR_PROTOCOLS.   Valid protocol options are: CURLPROTO_HTTP, CURLPROTO_HTTPS, CURLPROTO_FTP, CURLPROTO_FTPS, CURLPROTO_SCP, CURLPROTO_SFTP, CURLPROTO_TELNET, CURLPROTO_LDAP, CURLPROTO_LDAPS, CURLPROTO_DICT, CURLPROTO_FILE, CURLPROTO_TFTP, CURLPROTO_ALL    Added in cURL 7.19.4.  CURLOPT_PROXYAUTH  The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and CURLAUTH_NTLM are currently supported.   Added in cURL 7.10.7.  CURLOPT_PROXYPORT  The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY.    CURLOPT_PROXYTYPE  Either CURLPROXY_HTTP (default) or CURLPROXY_SOCKS5.   Added in cURL 7.10.  CURLOPT_REDIR_PROTOCOLS  Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in a transfer that it follows to in a redirect when CURLOPT_FOLLOWLOCATION is enabled. This allows you to limit specific transfers to only be allowed to use a subset of protocols in redirections. By default libcurl will allow all protocols except for FILE and SCP. This is a difference compared to pre-7.19.4 versions which unconditionally would follow to all protocols supported. See also CURLOPT_PROTOCOLS for protocol constant values.   Added in cURL 7.19.4.  CURLOPT_RESUME_FROM  The offset, in bytes, to resume a transfer from.    CURLOPT_SSL_VERIFYHOST  1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. In production environments the value of this option should be kept at 2 (default value).   Support for value 1 removed in cURL 7.28.1  CURLOPT_SSLVERSION  The SSL version (2 or 3) to use. By default PHP will try to determine this itself, although in some cases this must be set manually.    CURLOPT_TIMECONDITION  How CURLOPT_TIMEVALUE is treated. Use CURL_TIMECOND_IFMODSINCE to return the page only if it has been modified since the time specified in CURLOPT_TIMEVALUE. If it hasn't been modified, a \"304 Not Modified\" header will be returned assuming CURLOPT_HEADER is TRUE. Use CURL_TIMECOND_IFUNMODSINCE for the reverse effect. CURL_TIMECOND_IFMODSINCE is the default.    CURLOPT_TIMEOUT  The maximum number of seconds to allow cURL functions to execute.    CURLOPT_TIMEOUT_MS  The maximum number of milliseconds to allow cURL functions to execute. If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.   Added in cURL 7.16.2. Available since PHP 5.2.3.  CURLOPT_TIMEVALUE  The time in seconds since January 1st, 1970. The time will be used by CURLOPT_TIMECONDITION. By default, CURL_TIMECOND_IFMODSINCE is used.    CURLOPT_MAX_RECV_SPEED_LARGE  If a download exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.   Added in cURL 7.15.5. Available since PHP 5.4.0.  CURLOPT_MAX_SEND_SPEED_LARGE  If an upload exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.   Added in cURL 7.15.5. Available since PHP 5.4.0.  CURLOPT_SSH_AUTH_TYPES  A bitmask consisting of one or more of CURLSSH_AUTH_PUBLICKEY, CURLSSH_AUTH_PASSWORD, CURLSSH_AUTH_HOST, CURLSSH_AUTH_KEYBOARD. Set to CURLSSH_AUTH_ANY to let libcurl pick one.   Added in cURL 7.16.1.  CURLOPT_IPRESOLVE  Allows an application to select what kind of IP addresses to use when resolving host names. This is only interesting when using host names that resolve addresses using more than one version of IP, possible values are CURL_IPRESOLVE_WHATEVER, CURL_IPRESOLVE_V4, CURL_IPRESOLVE_V6, by default CURL_IPRESOLVE_WHATEVER.   Added in cURL 7.10.8.   value should be a string for the following values of the option parameter: Option Set value to Notes CURLOPT_CAINFO  The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER.   Requires absolute path.  CURLOPT_CAPATH  A directory that holds multiple CA certificates. Use this option alongside CURLOPT_SSL_VERIFYPEER.    CURLOPT_COOKIE  The contents of the \"Cookie: \" header to be used in the HTTP request. Note that multiple cookies are separated with a semicolon followed by a space (e.g., \"fruit=apple; colour=red\")    CURLOPT_COOKIEFILE  The name of the file containing the cookie data. The cookie file can be in Netscape format, or just plain HTTP-style headers dumped into a file. If the name is an empty string, no cookies are loaded, but cookie handling is still enabled.    CURLOPT_COOKIEJAR  The name of a file to save all internal cookies to when the handle is closed, e.g. after a call to curl_close.    CURLOPT_CUSTOMREQUEST  A custom request method to use instead of \"GET\" or \"HEAD\" when doing a HTTP request. This is useful for doing \"DELETE\" or other, more obscure HTTP requests. Valid values are things like \"GET\", \"POST\", \"CONNECT\" and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering \"GET /index.html HTTP/1.0\\r\\n\\r\\n\" would be incorrect. Note:  Don't do this without making sure the server supports the custom request method first.      CURLOPT_EGDSOCKET  Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket.    CURLOPT_ENCODING  The contents of the \"Accept-Encoding: \" header. This enables decoding of the response. Supported encodings are \"identity\", \"deflate\", and \"gzip\". If an empty string, \"\", is set, a header containing all supported encoding types is sent.   Added in cURL 7.10.  CURLOPT_FTPPORT  The value which will be used to get the IP address to use for the FTP \"PORT\" instruction. The \"PORT\" instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.    CURLOPT_INTERFACE  The name of the outgoing network interface to use. This can be an interface name, an IP address or a host name.    CURLOPT_KEYPASSWD  The password required to use the CURLOPT_SSLKEY or CURLOPT_SSH_PRIVATE_KEYFILE private key.   Added in cURL 7.16.1.  CURLOPT_KRB4LEVEL  The KRB4 (Kerberos 4) security level. Any of the following values (in order from least to most powerful) are valid: \"clear\", \"safe\", \"confidential\", \"private\".. If the string does not match one of these, \"private\" is used. Setting this option to NULL will disable KRB4 security. Currently KRB4 security only works with FTP transactions.    CURLOPT_POSTFIELDS   The full data to post in a HTTP \"POST\" operation. To post a file, prepend a filename with @ and use the full path. The filetype can be explicitly specified by following the filename with the type in the format ';type=mimetype'. This parameter can either be passed as a urlencoded string like 'para1=val1&para2=val2&...' or as an array with the field name as key and field data as value. If value is an array, the Content-Type header will be set to multipart/form-data.   As of PHP 5.2.0, value must be an array if files are passed to this option with the @ prefix.   As of PHP 5.5.0, the @ prefix is deprecated and files can be sent using CURLFile.     CURLOPT_PROXY  The HTTP proxy to tunnel requests through.    CURLOPT_PROXYUSERPWD  A username and password formatted as \"[username]:[password]\" to use for the connection to the proxy.    CURLOPT_RANDOM_FILE  A filename to be used to seed the random number generator for SSL.    CURLOPT_RANGE  Range(s) of data to retrieve in the format \"X-Y\" where X or Y are optional. HTTP transfers also support several intervals, separated with commas in the format \"X-Y,N-M\".    CURLOPT_REFERER  The contents of the \"Referer: \" header to be used in a HTTP request.    CURLOPT_SSH_HOST_PUBLIC_KEY_MD5  A string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's public key, and libcurl will reject the connection to the host unless the md5sums match. This option is only for SCP and SFTP transfers.   Added in cURL 7.17.1.  CURLOPT_SSH_PUBLIC_KEYFILE  The file name for your public key. If not used, libcurl defaults to $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, and just \"id_dsa.pub\" in the current directory if HOME is not set.   Added in cURL 7.16.1.  CURLOPT_SSH_PRIVATE_KEYFILE  The file name for your private key. If not used, libcurl defaults to $HOME/.ssh/id_dsa if the HOME environment variable is set, and just \"id_dsa\" in the current directory if HOME is not set. If the file is password-protected, set the password with CURLOPT_KEYPASSWD.   Added in cURL 7.16.1.  CURLOPT_SSL_CIPHER_LIST  A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.    CURLOPT_SSLCERT  The name of a file containing a PEM formatted certificate.    CURLOPT_SSLCERTPASSWD  The password required to use the CURLOPT_SSLCERT certificate.    CURLOPT_SSLCERTTYPE  The format of the certificate. Supported formats are \"PEM\" (default), \"DER\", and \"ENG\".   Added in cURL 7.9.3.  CURLOPT_SSLENGINE  The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY.    CURLOPT_SSLENGINE_DEFAULT  The identifier for the crypto engine used for asymmetric crypto operations.    CURLOPT_SSLKEY  The name of a file containing a private SSL key.    CURLOPT_SSLKEYPASSWD  The secret password needed to use the private SSL key specified in CURLOPT_SSLKEY. Note:  Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe.      CURLOPT_SSLKEYTYPE  The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are \"PEM\" (default), \"DER\", and \"ENG\".    CURLOPT_URL  The URL to fetch. This can also be set when initializing a session with curl_init().    CURLOPT_USERAGENT  The contents of the \"User-Agent: \" header to be used in a HTTP request.    CURLOPT_USERPWD  A username and password formatted as \"[username]:[password]\" to use for the connection.     value should be an array for the following values of the option parameter: Option Set value to Notes CURLOPT_HTTP200ALIASES  An array of HTTP 200 responses that will be treated as valid responses and not as errors.   Added in cURL 7.10.3.  CURLOPT_HTTPHEADER  An array of HTTP header fields to set, in the format              array('Content-type: text/plain', 'Content-length: 100')                CURLOPT_POSTQUOTE  An array of FTP commands to execute on the server after the FTP request has been performed.    CURLOPT_QUOTE  An array of FTP commands to execute on the server prior to the FTP request.     value should be a stream resource (using fopen(), for example) for the following values of the option parameter: Option Set value to CURLOPT_FILE  The file that the transfer should be written to. The default is STDOUT (the browser window).  CURLOPT_INFILE  The file that the transfer should be read from when uploading.  CURLOPT_STDERR  An alternative location to output errors to instead of STDERR.  CURLOPT_WRITEHEADER  The file that the header part of the transfer is written to.   value should be the name of a valid function or a Closure for the following values of the option parameter: Option Set value to CURLOPT_HEADERFUNCTION  A callback accepting two parameters. The first is the cURL resource, the second is a string with the header data to be written. The header data must be written when by this callback. Return the number of bytes written.  CURLOPT_PASSWDFUNCTION  A callback accepting three parameters. The first is the cURL resource, the second is a string containing a password prompt, and the third is the maximum password length. Return the string containing the password.  CURLOPT_PROGRESSFUNCTION   A callback accepting five parameters. The first is the cURL resource, the second is the total number of bytes expected to be downloaded in this transfer, the third is the number of bytes downloaded so far, the fourth is the total number of bytes expected to be uploaded in this transfer, and the fifth is the number of bytes uploaded so far.  Note:  The callback is only called when the CURLOPT_NOPROGRESS option is set to FALSE.    Return a non-zero value to abort the transfer. In which case, the transfer will set a CURLE_ABORTED_BY_CALLBACK error.   CURLOPT_READFUNCTION  A callback accepting three parameters. The first is the cURL resource, the second is a stream resource provided to cURL through the option CURLOPT_INFILE, and the third is the maximum amount of data to be read. The callback must return a string with a length equal or smaller than the amount of data requested, typically by reading it from the passed stream resource. It should return an empty string to signal EOF.  CURLOPT_WRITEFUNCTION  A callback accepting two parameters. The first is the cURL resource, and the second is a string with the data to be written. The data must be saved by this callback. It must return the exact number of bytes written or the transfer will be aborted with an error.   Other values: Option Set value to CURLOPT_SHARE  A result of curl_share_init(). Makes the cURL handle to use the data from the shared handle.", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-setopt", 
        "syntax": "bool curl_setopt ( resource $ch , int $option , mixed $value )", 
        "type": "cURL"
    }, 
    "curl_setopt_array": {
        "descr": "Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling curl_setopt().", 
        "name": "curl_setopt_array", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "An array specifying which options to set and their values. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.curl-setopt-array", 
        "syntax": "bool curl_setopt_array ( resource $ch , array $options )", 
        "type": "cURL"
    }, 
    "curl_share_close": {
        "descr": "Closes a cURL share handle and frees all resources.", 
        "name": "curl_share_close", 
        "params": [
            {
                "descr": "A cURL share handle returned by curl_share_init()", 
                "name": "sh"
            }
        ], 
        "path": "php/function.curl-share-close", 
        "syntax": "void curl_share_close ( resource $sh )", 
        "type": "cURL"
    }, 
    "curl_share_init": {
        "descr": "Allows to share data between cURL handles.", 
        "name": "curl_share_init", 
        "params": [], 
        "path": "php/function.curl-share-init", 
        "syntax": "resource curl_share_init ( void )", 
        "type": "cURL"
    }, 
    "curl_share_setopt": {
        "descr": "Sets an option on the given cURL share handle.", 
        "name": "curl_share_setopt", 
        "params": [
            {
                "descr": "A cURL share handle returned by curl_share_init().", 
                "name": "sh"
            }, 
            {
                "descr": "Option Description CURLSHOPT_SHARE  Specifies a type of data that should be shared. ", 
                "name": "option"
            }, 
            {
                "descr": "Value Description CURL_LOCK_DATA_COOKIE  Shares cookie data. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-share-setopt", 
        "syntax": "bool curl_share_setopt ( resource $sh , int $option , string $value )", 
        "type": "cURL"
    }, 
    "curl_strerror": {
        "descr": "Returns a text error message describing the given error code.", 
        "name": "curl_strerror", 
        "params": [
            {
                "descr": "One of the \u00bb cURL error codes constants.", 
                "name": "errornum"
            }
        ], 
        "path": "php/function.curl-strerror", 
        "syntax": "string curl_strerror ( int $errornum )", 
        "type": "cURL"
    }, 
    "curl_unescape": {
        "descr": "This function decodes the given URL encoded string.", 
        "name": "curl_unescape", 
        "params": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The URL encoded string to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.curl-unescape", 
        "syntax": "string curl_unescape ( resource $ch , string $str )", 
        "type": "cURL"
    }, 
    "curl_version": {
        "descr": "Returns information about the cURL version.", 
        "name": "curl_version", 
        "params": [], 
        "path": "php/function.curl-version", 
        "syntax": "array curl_version ([ int $age = CURLVERSION_NOW ] )", 
        "type": "cURL"
    }, 
    "current": {
        "descr": "Every array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array.", 
        "name": "current", 
        "params": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.current", 
        "syntax": "mixed current ( array &$array )", 
        "type": "Array"
    }, 
    "date": {
        "descr": "Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().", 
        "name": "date", 
        "params": [
            {
                "descr": "The format of the outputted date string. ", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.date", 
        "syntax": "string date ( string $format [, int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "date_default_timezone_get": {
        "descr": "In order of preference, this function returns the default timezone by:", 
        "name": "date_default_timezone_get", 
        "params": [], 
        "path": "php/function.date-default-timezone-get", 
        "syntax": "string date_default_timezone_get ( void )", 
        "type": "Date and Time"
    }, 
    "date_default_timezone_set": {
        "descr": "date_default_timezone_set() sets the default timezone used by all date/time functions.", 
        "name": "date_default_timezone_set", 
        "params": [
            {
                "descr": "The timezone identifier, like UTC or Europe/Lisbon. ", 
                "name": "timezone_identifier"
            }
        ], 
        "path": "php/function.date-default-timezone-set", 
        "syntax": "bool date_default_timezone_set ( string $timezone_identifier )", 
        "type": "Date and Time"
    }, 
    "date_parse": {
        "descr": "", 
        "name": "date_parse", 
        "params": [
            {
                "descr": "Date in format accepted by strtotime().", 
                "name": "date"
            }
        ], 
        "path": "php/function.date-parse", 
        "syntax": "array date_parse ( string $date )", 
        "type": "Date and Time"
    }, 
    "date_parse_from_format": {
        "descr": "Returns associative array with detailed info about given date.", 
        "name": "date_parse_from_format", 
        "params": [
            {
                "descr": "Format accepted by DateTime::createFromFormat().", 
                "name": "format"
            }, 
            {
                "descr": "String representing the date.", 
                "name": "date"
            }
        ], 
        "path": "php/function.date-parse-from-format", 
        "syntax": "array date_parse_from_format ( string $format , string $date )", 
        "type": "Date and Time"
    }, 
    "date_sun_info": {
        "descr": "", 
        "name": "date_sun_info", 
        "params": [
            {
                "descr": "Timestamp.", 
                "name": "time"
            }, 
            {
                "descr": "Latitude in degrees.", 
                "name": "latitude"
            }, 
            {
                "descr": "Longitude in degrees.", 
                "name": "longitude"
            }
        ], 
        "path": "php/function.date-sun-info", 
        "syntax": "array date_sun_info ( int $time , float $latitude , float $longitude )", 
        "type": "Date and Time"
    }, 
    "date_sunrise": {
        "descr": "date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.", 
        "name": "date_sunrise", 
        "params": [
            {
                "descr": "The timestamp of the day from which the sunrise time is taken.", 
                "name": "timestamp"
            }, 
            {
                "descr": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606", 
                "name": "format"
            }, 
            {
                "descr": "Defaults to North, pass in a negative value for South. ", 
                "name": "latitude"
            }, 
            {
                "descr": "Defaults to East, pass in a negative value for West. ", 
                "name": "longitude"
            }, 
            {
                "descr": "Default: date.sunrise_zenith", 
                "name": "zenith"
            }, 
            {
                "descr": "Specified in hours.", 
                "name": "gmtoffset"
            }
        ], 
        "path": "php/function.date-sunrise", 
        "syntax": "mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunrise_zenith\") [, float $gmt_offset = 0 ]]]]] )", 
        "type": "Date and Time"
    }, 
    "date_sunset": {
        "descr": "date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.", 
        "name": "date_sunset", 
        "params": [
            {
                "descr": "The timestamp of the day from which the sunset time is taken.", 
                "name": "timestamp"
            }, 
            {
                "descr": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606", 
                "name": "format"
            }, 
            {
                "descr": "Defaults to North, pass in a negative value for South. ", 
                "name": "latitude"
            }, 
            {
                "descr": "Defaults to East, pass in a negative value for West. ", 
                "name": "longitude"
            }, 
            {
                "descr": "Default: date.sunset_zenith", 
                "name": "zenith"
            }, 
            {
                "descr": "Specified in hours.", 
                "name": "gmtoffset"
            }
        ], 
        "path": "php/function.date-sunset", 
        "syntax": "mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunset_zenith\") [, float $gmt_offset = 0 ]]]]] )", 
        "type": "Date and Time"
    }, 
    "dba_close": {
        "descr": "dba_close() closes the established database and frees all resources of the specified database handle.", 
        "name": "dba_close", 
        "params": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-close", 
        "syntax": "void dba_close ( resource $handle )", 
        "type": "Database"
    }, 
    "dba_delete": {
        "descr": "dba_delete() deletes the specified entry from the database.", 
        "name": "dba_delete", 
        "params": [
            {
                "descr": "The key of the entry which is deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-delete", 
        "syntax": "bool dba_delete ( string $key , resource $handle )", 
        "type": "Database"
    }, 
    "dba_exists": {
        "descr": "dba_exists() checks whether the specified key exists in the database.", 
        "name": "dba_exists", 
        "params": [
            {
                "descr": "The key the check is performed for.", 
                "name": "key"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-exists", 
        "syntax": "bool dba_exists ( string $key , resource $handle )", 
        "type": "Database"
    }, 
    "dba_fetch": {
        "descr": "dba_fetch() fetches the data specified by key from the database specified with handle.", 
        "name": "dba_fetch", 
        "params": [
            {
                "descr": "The key the data is specified by. ", 
                "name": "key"
            }, 
            {
                "descr": "The number of key-value pairs to ignore when using cdb databases. ", 
                "name": "skip"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-fetch", 
        "syntax": "string dba_fetch ( string $key , resource $handle )", 
        "type": "Database"
    }, 
    "dba_firstkey": {
        "descr": "dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.", 
        "name": "dba_firstkey", 
        "params": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-firstkey", 
        "syntax": "string dba_firstkey ( resource $handle )", 
        "type": "Database"
    }, 
    "dba_handlers": {
        "descr": "dba_handlers() list all the handlers supported by this extension.", 
        "name": "dba_handlers", 
        "params": [
            {
                "descr": "Turns on/off full information display in the result.", 
                "name": "full_info"
            }
        ], 
        "path": "php/function.dba-handlers", 
        "syntax": "array dba_handlers ([ bool $full_info = false ] )", 
        "type": "Database"
    }, 
    "dba_insert": {
        "descr": "dba_insert() inserts the entry described with key and value into the database.", 
        "name": "dba_insert", 
        "params": [
            {
                "descr": "The key of the entry to be inserted. ", 
                "name": "key"
            }, 
            {
                "descr": "The value to be inserted.", 
                "name": "value"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-insert", 
        "syntax": "bool dba_insert ( string $key , string $value , resource $handle )", 
        "type": "Database"
    }, 
    "dba_key_split": {
        "descr": "dba_key_split() splits a key (string representation) into an array representation.", 
        "name": "dba_key_split", 
        "params": [
            {
                "descr": "The key in string representation.", 
                "name": "key"
            }
        ], 
        "path": "php/function.dba-key-split", 
        "syntax": "mixed dba_key_split ( mixed $key )", 
        "type": "Database"
    }, 
    "dba_list": {
        "descr": "dba_list() list all open database files.", 
        "name": "dba_list", 
        "params": [], 
        "path": "php/function.dba-list", 
        "syntax": "array dba_list ( void )", 
        "type": "Database"
    }, 
    "dba_nextkey": {
        "descr": "dba_nextkey() returns the next key of the database and advances the internal key pointer.", 
        "name": "dba_nextkey", 
        "params": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-nextkey", 
        "syntax": "string dba_nextkey ( resource $handle )", 
        "type": "Database"
    }, 
    "dba_open": {
        "descr": "dba_open() establishes a database instance for path with mode using handler.", 
        "name": "dba_open", 
        "params": [
            {
                "descr": "Commonly a regular path in your filesystem.", 
                "name": "path"
            }, 
            {
                "descr": "It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access. The database is created in BTree mode, other modes (like Hash or Queue) are not supported.   Additionally you can set the database lock method with the next char. Use l to lock the database with a .lck file or d to lock the databasefile itself. It is important that all of your applications do this consistently.   If you want to test the access and do not want to wait for the lock you can add t as third character. When you are absolutely sure that you do not require database locking you can do so by using - instead of l or d. When none of d, l or - is used, dba will lock on the database file as it would with d.  Note:  There can only be one writer for one database file. When you use dba on a web server and more than one request requires write operations they can only be done one after another. Also read during write is not allowed. The dba extension uses locks to prevent this. See the following table: DBA locking already open mode = \"rl\" mode = \"rlt\" mode = \"wl\" mode = \"wlt\" mode = \"rd\" mode = \"rdt\" mode = \"wd\" mode = \"wdt\" not open ok ok ok ok ok ok ok ok mode = \"rl\" ok ok wait false illegal illegal illegal illegal mode = \"wl\" wait false wait false illegal illegal illegal illegal mode = \"rd\" illegal illegal illegal illegal ok ok wait false mode = \"wd\" illegal illegal illegal illegal wait false wait false ok: the second call will be successfull. wait: the second call waits until dba_close() is called for the first. false: the second call returns false. illegal: you must not mix \"l\" and \"d\" modifiers for mode parameter.", 
                "name": "mode"
            }, 
            {
                "descr": "The name of the handler which shall be used for accessing path. ", 
                "name": "handler"
            }
        ], 
        "path": "php/function.dba-open", 
        "syntax": "resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )", 
        "type": "Database"
    }, 
    "dba_optimize": {
        "descr": "dba_optimize() optimizes the underlying database.", 
        "name": "dba_optimize", 
        "params": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-optimize", 
        "syntax": "bool dba_optimize ( resource $handle )", 
        "type": "Database"
    }, 
    "dba_popen": {
        "descr": "dba_popen() establishes a persistent database instance for path with mode using handler.", 
        "name": "dba_popen", 
        "params": [
            {
                "descr": "Commonly a regular path in your filesystem.", 
                "name": "path"
            }, 
            {
                "descr": "It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access.", 
                "name": "mode"
            }, 
            {
                "descr": "The name of the handler which shall be used for accessing path. ", 
                "name": "handler"
            }
        ], 
        "path": "php/function.dba-popen", 
        "syntax": "resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )", 
        "type": "Database"
    }, 
    "dba_replace": {
        "descr": "dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.", 
        "name": "dba_replace", 
        "params": [
            {
                "descr": "The key of the entry to be replaced.", 
                "name": "key"
            }, 
            {
                "descr": "The value to be replaced.", 
                "name": "value"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-replace", 
        "syntax": "bool dba_replace ( string $key , string $value , resource $handle )", 
        "type": "Database"
    }, 
    "dba_sync": {
        "descr": "dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.", 
        "name": "dba_sync", 
        "params": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-sync", 
        "syntax": "bool dba_sync ( resource $handle )", 
        "type": "Database"
    }, 
    "dcgettext": {
        "descr": "This function allows you to override the current domain for a single message lookup.", 
        "name": "dcgettext", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The message", 
                "name": "message"
            }, 
            {
                "descr": "The category", 
                "name": "category"
            }
        ], 
        "path": "php/function.dcgettext", 
        "syntax": "string dcgettext ( string $domain , string $message , int $category )", 
        "type": "Encoding"
    }, 
    "dcngettext": {
        "descr": "This function allows you to override the current domain for a single plural message lookup.", 
        "name": "dcngettext", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }
        ], 
        "path": "php/function.dcngettext", 
        "syntax": "string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )", 
        "type": "Encoding"
    }, 
    "debug_backtrace": {
        "descr": "debug_backtrace() generates a PHP backtrace.", 
        "name": "debug_backtrace", 
        "params": [
            {
                "descr": "As of 5.3.6, this parameter is a bitmask for the following options: debug_backtrace() options DEBUG_BACKTRACE_PROVIDE_OBJECT  Whether or not to populate the \"object\" index. ", 
                "name": "options"
            }, 
            {
                "descr": "As of 5.4.0, this parameter can be used to limit the number of stack frames returned. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.debug-backtrace", 
        "syntax": "array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )", 
        "type": "Errors"
    }, 
    "debug_print_backtrace": {
        "descr": "debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff.", 
        "name": "debug_print_backtrace", 
        "params": [
            {
                "descr": "As of 5.3.6, this parameter is a bitmask for the following options: debug_print_backtrace() options DEBUG_BACKTRACE_IGNORE_ARGS  Whether or not to omit the \"args\" index, and thus all the function/method arguments, to save memory.", 
                "name": "options"
            }, 
            {
                "descr": "As of 5.4.0, this parameter can be used to limit the number of stack frames printed. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.debug-print-backtrace", 
        "syntax": "void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )", 
        "type": "Errors"
    }, 
    "debug_zval_dump": {
        "descr": "Dumps a string representation of an internal zend value to output.", 
        "name": "debug_zval_dump", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "variable"
            }
        ], 
        "path": "php/function.debug-zval-dump", 
        "syntax": "void debug_zval_dump ( mixed $variable [, mixed $... ] )", 
        "type": "Variables"
    }, 
    "decbin": {
        "descr": "Returns a string containing a binary representation of the given number argument.", 
        "name": "decbin", 
        "params": [
            {
                "descr": "Decimal value to convert  Range of inputs on 32-bit machines positive number negative number return value 0   0 1   1 2   10 ... ", 
                "name": "number"
            }
        ], 
        "path": "php/function.decbin", 
        "syntax": "string decbin ( int $number )", 
        "type": "Mathematics"
    }, 
    "dechex": {
        "descr": "Returns a string containing a hexadecimal representation of the given unsigned number argument.", 
        "name": "dechex", 
        "params": [
            {
                "descr": "The decimal value to convert.   As PHP's integer type is signed, but dechex() deals with unsigned integers, negative integers will be treated as though they were unsigned.", 
                "name": "number"
            }
        ], 
        "path": "php/function.dechex", 
        "syntax": "string dechex ( int $number )", 
        "type": "Mathematics"
    }, 
    "decoct": {
        "descr": "Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to \"37777777777\".", 
        "name": "decoct", 
        "params": [
            {
                "descr": "Decimal value to convert", 
                "name": "number"
            }
        ], 
        "path": "php/function.decoct", 
        "syntax": "string decoct ( int $number )", 
        "type": "Mathematics"
    }, 
    "define": {
        "descr": "Defines a named constant at runtime.", 
        "name": "define", 
        "params": [
            {
                "descr": "The name of the constant.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the constant; only scalar and null values are allowed. ", 
                "name": "value"
            }, 
            {
                "descr": "If set to TRUE, the constant will be defined case-insensitive. ", 
                "name": "case_insensitive"
            }
        ], 
        "path": "php/function.define", 
        "syntax": "bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )", 
        "type": "Language"
    }, 
    "define_syslog_variables": {
        "descr": "Initializes all variables used in the syslog functions.", 
        "name": "define_syslog_variables", 
        "params": [], 
        "path": "php/function.define-syslog-variables", 
        "syntax": "void define_syslog_variables ( void )", 
        "type": "Networking"
    }, 
    "defined": {
        "descr": "Checks whether the given constant exists and is defined.", 
        "name": "defined", 
        "params": [
            {
                "descr": "The constant name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.defined", 
        "syntax": "bool defined ( string $name )", 
        "type": "Language"
    }, 
    "deg2rad": {
        "descr": "This function converts number from degrees to the radian equivalent.", 
        "name": "deg2rad", 
        "params": [
            {
                "descr": "Angular value in degrees", 
                "name": "number"
            }
        ], 
        "path": "php/function.deg2rad", 
        "syntax": "float deg2rad ( float $number )", 
        "type": "Mathematics"
    }, 
    "dgettext": {
        "descr": "The dgettext() function allows you to override the current domain for a single message lookup.", 
        "name": "dgettext", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The message", 
                "name": "message"
            }
        ], 
        "path": "php/function.dgettext", 
        "syntax": "string dgettext ( string $domain , string $message )", 
        "type": "Encoding"
    }, 
    "dir": {
        "descr": "A pseudo-object oriented mechanism for reading a directory. The given directory is opened.", 
        "name": "dir", 
        "params": [
            {
                "descr": "Directory to open", 
                "name": "directory"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.dir", 
        "syntax": "Directory dir ( string $directory [, resource $context ] )", 
        "type": "File System"
    }, 
    "dirname": {
        "descr": "Given a string containing the path of a file or directory, this function will return the parent directory's path.", 
        "name": "dirname", 
        "params": [
            {
                "descr": "A path.   On Windows, both slash (/) and backslash (\\) are used as directory separator character. ", 
                "name": "path"
            }
        ], 
        "path": "php/function.dirname", 
        "syntax": "string dirname ( string $path )", 
        "type": "File System"
    }, 
    "disk_free_space": {
        "descr": "Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.", 
        "name": "disk_free_space", 
        "params": [
            {
                "descr": "A directory of the filesystem or disk partition. ", 
                "name": "directory"
            }
        ], 
        "path": "php/function.disk-free-space", 
        "syntax": "float disk_free_space ( string $directory )", 
        "type": "File System"
    }, 
    "disk_total_space": {
        "descr": "Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.", 
        "name": "disk_total_space", 
        "params": [
            {
                "descr": "A directory of the filesystem or disk partition.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.disk-total-space", 
        "syntax": "float disk_total_space ( string $directory )", 
        "type": "File System"
    }, 
    "dl": {
        "descr": "Loads the PHP extension given by the parameter library.", 
        "name": "dl", 
        "params": [
            {
                "descr": "This parameter is only the filename of the extension to load which also depends on your platform. ", 
                "name": "library"
            }
        ], 
        "path": "php/function.dl", 
        "syntax": "bool dl ( string $library )", 
        "type": "Language"
    }, 
    "dngettext": {
        "descr": "The dngettext() function allows you to override the current domain for a single plural message lookup.", 
        "name": "dngettext", 
        "params": [
            {
                "descr": "The domain", 
                "name": "domain"
            }
        ], 
        "path": "php/function.dngettext", 
        "syntax": "string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )", 
        "type": "Encoding"
    }, 
    "dns_get_record": {
        "descr": "Fetch DNS Resource Records associated with the given hostname.", 
        "name": "dns_get_record", 
        "params": [
            {
                "descr": "hostname should be a valid DNS hostname such as \"www.example.com\". ", 
                "name": "hostname"
            }, 
            {
                "descr": "By default, dns_get_record() will search for any resource records associated with hostname. ", 
                "name": "type"
            }, 
            {
                "descr": "Passed by reference and, if given, will be populated with Resource Records for the Authoritative Name Servers.", 
                "name": "authns"
            }, 
            {
                "descr": "Passed by reference and, if given, will be populated with any Additional Records.", 
                "name": "addtl"
            }, 
            {
                "descr": "In case of raw mode, we query only the requestd type instead of looping type by type before going with the additional info stuff.", 
                "name": "raw"
            }
        ], 
        "path": "php/function.dns-get-record", 
        "syntax": "array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool &$raw = false ]]]] )", 
        "type": "Networking"
    }, 
    "dom_import_simplexml": {
        "descr": "This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.", 
        "name": "dom_import_simplexml", 
        "params": [
            {
                "descr": "The SimpleXMLElement node.", 
                "name": "node"
            }
        ], 
        "path": "php/function.dom-import-simplexml", 
        "syntax": "DOMElement dom_import_simplexml ( SimpleXMLElement $node )", 
        "type": "HTML"
    }, 
    "each": {
        "descr": "Return the current key and value pair from an array and advance the array cursor.", 
        "name": "each", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.each", 
        "syntax": "array each ( array &$array )", 
        "type": "Array"
    }, 
    "easter_date": {
        "descr": "Returns the Unix timestamp corresponding to midnight on Easter of the given year.", 
        "name": "easter_date", 
        "params": [
            {
                "descr": "The year as a number between 1970 an 2037", 
                "name": "year"
            }
        ], 
        "path": "php/function.easter-date", 
        "syntax": "int easter_date ([ int $year ] )", 
        "type": "Date and Time"
    }, 
    "easter_days": {
        "descr": "Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.", 
        "name": "easter_days", 
        "params": [
            {
                "descr": "The year as a positive number", 
                "name": "year"
            }, 
            {
                "descr": "Allows to calculate easter dates based on the Gregorian calendar during the years 1582 - 1752 when set to CAL_EASTER_ROMAN. ", 
                "name": "method"
            }
        ], 
        "path": "php/function.easter-days", 
        "syntax": "int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )", 
        "type": "Date and Time"
    }, 
    "echo": {
        "descr": "", 
        "name": "echo", 
        "params": [
            {
                "descr": "The parameter to output.", 
                "name": "arg1"
            }
        ], 
        "path": "php/function.echo", 
        "syntax": "void echo ( string $arg1 [, string $... ] )", 
        "type": "String"
    }, 
    "eio_busy": {
        "descr": "eio_busy() artificially increases load taking delay seconds to execute. May be used for debugging, or benchmarking.", 
        "name": "eio_busy", 
        "params": [
            {
                "descr": "Delay in seconds", 
                "name": "delay"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "This callback is called when all the group requests are done.", 
                "name": "callback"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-busy", 
        "syntax": "resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_cancel": {
        "descr": "eio_cancel() cancels a request specified by req", 
        "name": "eio_cancel", 
        "params": [
            {
                "descr": "The request resource", 
                "name": "req"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-cancel", 
        "syntax": "void eio_cancel ( resource $req )", 
        "type": "Process Control"
    }, 
    "eio_chmod": {
        "descr": "eio_chmod() changes file, or direcrory permissions. The new permissions are specified by mode.", 
        "name": "eio_chmod", 
        "params": [
            {
                "descr": "Path to the target file or directory WarningAvoid relative paths", 
                "name": "path"
            }, 
            {
                "descr": "The new permissions. E.g. 0644.", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-chmod", 
        "syntax": "resource eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_chown": {
        "descr": "Changes file, or directory permissions.", 
        "name": "eio_chown", 
        "params": [
            {
                "descr": "Path to file or directory. WarningAvoid relative paths", 
                "name": "path"
            }, 
            {
                "descr": "User ID. Is ignored when equal to -1.", 
                "name": "uid"
            }, 
            {
                "descr": "Group ID. Is ignored when equal to -1.", 
                "name": "gid"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-chown", 
        "syntax": "resource eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "type": "Process Control"
    }, 
    "eio_close": {
        "descr": "eio_close() closes file specified by fd.", 
        "name": "eio_close", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-close", 
        "syntax": "resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_custom": {
        "descr": "eio_custom() executes custom function specified by execute processing it just like any other eio_* call.", 
        "name": "eio_custom", 
        "params": [
            {
                "descr": "Specifies the request function that should match the following prototype:       mixed execute(mixed data);       callback is event completion callback that should match the following prototype:       void callback(mixed data, mixed result);       data is the data passed to execute via data argument without modifications result value returned by execute", 
                "name": "execute"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-custom", 
        "syntax": "resource eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_dup2": {
        "descr": "eio_dup2() duplicates file descriptor.", 
        "name": "eio_dup2", 
        "params": [
            {
                "descr": "Source stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Target stream, Socket resource, or numeric file descriptor", 
                "name": "fd2"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-dup2", 
        "syntax": "resource eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_event_loop": {
        "descr": "eio_event_loop() polls libeio until all requests proceeded.", 
        "name": "eio_event_loop", 
        "params": [], 
        "path": "php/function.eio-event-loop", 
        "syntax": "bool eio_event_loop ( void )", 
        "type": "Process Control"
    }, 
    "eio_fallocate": {
        "descr": "eio_fallocate() allows the caller to directly manipulate the allocated disk space for the file specified by fd file descriptor for the byte range starting at offset and continuing for length bytes.", 
        "name": "eio_fallocate", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Currently only one flag is supported for mode: EIO_FALLOC_FL_KEEP_SIZE (the same as POSIX constant FALLOC_FL_KEEP_SIZE).", 
                "name": "mode"
            }, 
            {
                "descr": "Specifies start of the byte range.", 
                "name": "offset"
            }, 
            {
                "descr": "Specifies length the byte range.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fallocate", 
        "syntax": "resource eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_fchmod": {
        "descr": "eio_fchmod() changes permissions for the file specified by fd file descriptor.", 
        "name": "eio_fchmod", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "The new permissions. E.g. 0644.", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fchmod", 
        "syntax": "resource eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_fchown": {
        "descr": "eio_fchown() changes ownership of the file specified by fd file descriptor.", 
        "name": "eio_fchown", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "User ID. Is ignored when equal to -1.", 
                "name": "uid"
            }, 
            {
                "descr": "Group ID. Is ignored when equal to -1.", 
                "name": "gid"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fchown", 
        "syntax": "resource eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "type": "Process Control"
    }, 
    "eio_fdatasync": {
        "descr": "eio_fdatasync() synchronizes a file's in-core state with storage device.", 
        "name": "eio_fdatasync", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fdatasync", 
        "syntax": "resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_fstat": {
        "descr": "eio_fstat() returns file status information in result argument of callback", 
        "name": "eio_fstat", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fstat", 
        "syntax": "resource eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] )", 
        "type": "Process Control"
    }, 
    "eio_fstatvfs": {
        "descr": "eio_fstatvfs() returns file system statistics in result of callback.", 
        "name": "eio_fstatvfs", 
        "params": [
            {
                "descr": "A file descriptor of a file within the mounted file system.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fstatvfs", 
        "syntax": "resource eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] )", 
        "type": "Process Control"
    }, 
    "eio_fsync": {
        "descr": "Synchronize a file's in-core state with storage device", 
        "name": "eio_fsync", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fsync", 
        "syntax": "resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_ftruncate": {
        "descr": "eio_ftruncate() causes a regular file referenced by fd file descriptor to be truncated to precisely length bytes.", 
        "name": "eio_ftruncate", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "Offset from beginning of the file", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-ftruncate", 
        "syntax": "resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "type": "Process Control"
    }, 
    "eio_futime": {
        "descr": "eio_futime() changes file last access and modification times.", 
        "name": "eio_futime", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Access time", 
                "name": "atime"
            }, 
            {
                "descr": "Modification time", 
                "name": "mtime"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-futime", 
        "syntax": "resource eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_get_event_stream": {
        "descr": "eio_get_event_stream() acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent.", 
        "name": "eio_get_event_stream", 
        "params": [], 
        "path": "php/function.eio-get-event-stream", 
        "syntax": "mixed eio_get_event_stream ( void )", 
        "type": "Process Control"
    }, 
    "eio_get_last_error": {
        "descr": "eio_get_last_error() returns string describing the last error associated with req.", 
        "name": "eio_get_last_error", 
        "params": [
            {
                "descr": "The request resource", 
                "name": "req"
            }
        ], 
        "path": "php/function.eio-get-last-error", 
        "syntax": "string eio_get_last_error ( resource $req )", 
        "type": "Process Control"
    }, 
    "eio_grp": {
        "descr": "eio_grp() creates a request group.", 
        "name": "eio_grp", 
        "params": [
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-grp", 
        "syntax": "resource eio_grp ( callable $callback [, string $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_grp_add": {
        "descr": "eio_grp_add() adds a request to the request group.", 
        "name": "eio_grp_add", 
        "params": [
            {
                "descr": "The request group resource returned by eio_grp()", 
                "name": "grp"
            }, 
            {
                "descr": "The request resource", 
                "name": "req"
            }
        ], 
        "path": "php/function.eio-grp-add", 
        "syntax": "void eio_grp_add ( resource $grp , resource $req )", 
        "type": "Process Control"
    }, 
    "eio_grp_cancel": {
        "descr": "eio_grp_cancel() cancels a group request specified by grp request group resource.", 
        "name": "eio_grp_cancel", 
        "params": [
            {
                "descr": "The request group resource returned by eio_grp().", 
                "name": "grp"
            }
        ], 
        "path": "php/function.eio-grp-cancel", 
        "syntax": "void eio_grp_cancel ( resource $grp )", 
        "type": "Process Control"
    }, 
    "eio_grp_limit": {
        "descr": "Limit number of requests in the request group.", 
        "name": "eio_grp_limit", 
        "params": [
            {
                "descr": "The request group resource.", 
                "name": "grp"
            }, 
            {
                "descr": "Number of requests in the group.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.eio-grp-limit", 
        "syntax": "void eio_grp_limit ( resource $grp , int $limit )", 
        "type": "Process Control"
    }, 
    "eio_init": {
        "descr": "eio_init() (re-)initializes Eio. It allocates memory for internal structures of libeio and Eio itself. You may call eio_init() before using Eio functions. Otherwise it will be called internally first time you invoke an Eio function in a process.", 
        "name": "eio_init", 
        "params": [], 
        "path": "php/function.eio-init", 
        "syntax": "void eio_init ( void )", 
        "type": "Process Control"
    }, 
    "eio_link": {
        "descr": "eio_link() creates a hardlink new_path for a file specified by path.", 
        "name": "eio_link", 
        "params": [
            {
                "descr": "Source file path.", 
                "name": "path"
            }, 
            {
                "descr": "Target file path.", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-link", 
        "syntax": "resource eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_lstat": {
        "descr": "eio_lstat() returns file status information in result argument of callback", 
        "name": "eio_lstat", 
        "params": [
            {
                "descr": "The file path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-lstat", 
        "syntax": "resource eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_mkdir": {
        "descr": "eio_mkdir() creates directory with specified access mode.", 
        "name": "eio_mkdir", 
        "params": [
            {
                "descr": "Path for the new directory.", 
                "name": "path"
            }, 
            {
                "descr": "Access mode, e.g. 0755", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-mkdir", 
        "syntax": "resource eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_mknod": {
        "descr": "eio_mknod() creates ordinary or special(often) file.", 
        "name": "eio_mknod", 
        "params": [
            {
                "descr": "Path for the new node(file).", 
                "name": "path"
            }, 
            {
                "descr": "Specifies both the permissions to use and the type of node to be created. ", 
                "name": "mode"
            }, 
            {
                "descr": "If the file type is EIO_S_IFCHR or EIO_S_IFBLK then dev specifies the major and minor numbers of the newly created device special file. ", 
                "name": "dev"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-mknod", 
        "syntax": "resource eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_nop": {
        "descr": "eio_nop() does nothing, except go through the whole request cycle. Could be useful in debugging.", 
        "name": "eio_nop", 
        "params": [
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-nop", 
        "syntax": "resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_npending": {
        "descr": "eio_npending() returns number of finished, but unhandled requests", 
        "name": "eio_npending", 
        "params": [], 
        "path": "php/function.eio-npending", 
        "syntax": "int eio_npending ( void )", 
        "type": "Process Control"
    }, 
    "eio_nready": {
        "descr": "", 
        "name": "eio_nready", 
        "params": [], 
        "path": "php/function.eio-nready", 
        "syntax": "int eio_nready ( void )", 
        "type": "Process Control"
    }, 
    "eio_nreqs": {
        "descr": "eio_nreqs() could be called in a custom loop calling eio_poll().", 
        "name": "eio_nreqs", 
        "params": [], 
        "path": "php/function.eio-nreqs", 
        "syntax": "int eio_nreqs ( void )", 
        "type": "Process Control"
    }, 
    "eio_nthreads": {
        "descr": "", 
        "name": "eio_nthreads", 
        "params": [], 
        "path": "php/function.eio-nthreads", 
        "syntax": "int eio_nthreads ( void )", 
        "type": "Process Control"
    }, 
    "eio_open": {
        "descr": "eio_open() opens file specified by path in access mode mode with", 
        "name": "eio_open", 
        "params": [
            {
                "descr": "Path of the file to be opened. Warning In some SAPIs(e.g. ", 
                "name": "path"
            }, 
            {
                "descr": "One of EIO_O_* constants, or their combinations. ", 
                "name": "flags"
            }, 
            {
                "descr": "One of EIO_S_I* constants, or their combination (via bitwise OR operator). ", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-open", 
        "syntax": "resource eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_poll": {
        "descr": "eio_poll() can be used to implement special event loop. For this eio_nreqs() could be used to test if there are unprocessed requests.", 
        "name": "eio_poll", 
        "params": [], 
        "path": "php/function.eio-poll", 
        "syntax": "int eio_poll ( void )", 
        "type": "Process Control"
    }, 
    "eio_read": {
        "descr": "eio_read() reads up to length bytes from fd file descriptor at offset. The read bytes are stored in result argument of callback.", 
        "name": "eio_read", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Maximum number of bytes to read.", 
                "name": "length"
            }, 
            {
                "descr": "Offset within the file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-read", 
        "syntax": "resource eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_readahead": {
        "descr": "eio_readahead() populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See READAHEAD(2) man page for details.", 
        "name": "eio_readahead", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Starting point from which data is to be read.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to be read.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-readahead", 
        "syntax": "resource eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_readdir": {
        "descr": "Reads through a whole directory(via the opendir, readdir and closedir system calls) and returns either the names or an array in result argument of callback function, depending on the flags argument.", 
        "name": "eio_readdir", 
        "params": [
            {
                "descr": "Directory path.", 
                "name": "path"
            }, 
            {
                "descr": "Combination of EIO_READDIR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }, 
            {
                "descr": "eio_readdir() flag. If specified, the result argument of the callback becomes an array with the following keys: 'names' - array of directory names 'dents' - array of struct eio_dirent-like arrays having the following keys each: 'name' - the directory name; 'type' - one of EIO_DT_* constants; 'inode' - the inode number, if available, otherwise unspecified;", 
                "name": "EIO_READDIR_DENTS (integer)"
            }, 
            {
                "descr": "When this flag is specified, the names will be returned in an order where likely directories come first, in optimal stat order.", 
                "name": "EIO_READDIR_DIRS_FIRST (integer)"
            }, 
            {
                "descr": "When this flag is specified, then the names will be returned in an order suitable for stat'ing each one. ", 
                "name": "EIO_READDIR_STAT_ORDER (integer)"
            }, 
            {
                "descr": "Unknown node type(very common). ", 
                "name": "EIO_READDIR_FOUND_UNKNOWN (integer)   Node types:  EIO_DT_UNKNOWN (integer)"
            }, 
            {
                "descr": "FIFO node type", 
                "name": "EIO_DT_FIFO (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_CHR (integer)"
            }, 
            {
                "descr": "Multiplexed char device (v7+coherent) node type", 
                "name": "EIO_DT_MPC (integer)"
            }, 
            {
                "descr": "Directory node type", 
                "name": "EIO_DT_DIR (integer)"
            }, 
            {
                "descr": "Xenix special named file node type", 
                "name": "EIO_DT_NAM (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_BLK (integer)"
            }, 
            {
                "descr": "Multiplexed block device (v7+coherent)", 
                "name": "EIO_DT_MPB (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_REG (integer)"
            }, 
            {
                "descr": "HP-UX network special node type", 
                "name": "EIO_DT_NWK (integer)    EIO_DT_CMP (integer)"
            }, 
            {
                "descr": "Link node type", 
                "name": "EIO_DT_LNK (integer)"
            }, 
            {
                "descr": "Socket node type", 
                "name": "EIO_DT_SOCK (integer)"
            }, 
            {
                "descr": "Solaris door node type", 
                "name": "EIO_DT_DOOR (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_WHT (integer)"
            }, 
            {
                "descr": "Highest node type value", 
                "name": "EIO_DT_MAX (integer)"
            }
        ], 
        "path": "php/function.eio-readdir", 
        "syntax": "resource eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_readlink": {
        "descr": "", 
        "name": "eio_readlink", 
        "params": [
            {
                "descr": "Source symbolic link path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-readlink", 
        "syntax": "resource eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_realpath": {
        "descr": "eio_realpath() returns the canonicalized absolute pathname in result argument of callback function.", 
        "name": "eio_realpath", 
        "params": [
            {
                "descr": "Short pathname", 
                "name": "path"
            }
        ], 
        "path": "php/function.eio-realpath", 
        "syntax": "resource eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_rename": {
        "descr": "eio_rename() renames or moves a file to new location.", 
        "name": "eio_rename", 
        "params": [
            {
                "descr": "Source path", 
                "name": "path"
            }, 
            {
                "descr": "Target path", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-rename", 
        "syntax": "resource eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_rmdir": {
        "descr": "eio_rmdir() removes a directory.", 
        "name": "eio_rmdir", 
        "params": [
            {
                "descr": "Directory path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-rmdir", 
        "syntax": "resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_seek": {
        "descr": "eio_seek() repositions the offset of the open file associated with stream, Socket resource, or file descriptor specified by fd to the argument offset according to the directive whence as follows:", 
        "name": "eio_seek", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Starting point from which data is to be read.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to be read.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-seek", 
        "syntax": "resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_sendfile": {
        "descr": "eio_sendfile() copies data between one file descriptor and another. See SENDFILE(2) man page for details.", 
        "name": "eio_sendfile", 
        "params": [
            {
                "descr": "Output stream, Socket resource, or file descriptor. ", 
                "name": "out_fd"
            }, 
            {
                "descr": "Input stream, Socket resource, or file descriptor. ", 
                "name": "in_fd"
            }, 
            {
                "descr": "Offset within the source file.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to copy.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-sendfile", 
        "syntax": "resource eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] )", 
        "type": "Process Control"
    }, 
    "eio_set_max_idle": {
        "descr": "", 
        "name": "eio_set_max_idle", 
        "params": [
            {
                "descr": "Number of idle threads.", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-max-idle", 
        "syntax": "void eio_set_max_idle ( int $nthreads )", 
        "type": "Process Control"
    }, 
    "eio_set_max_parallel": {
        "descr": "", 
        "name": "eio_set_max_parallel", 
        "params": [
            {
                "descr": "Number of parallel threads", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-max-parallel", 
        "syntax": "void eio_set_max_parallel ( int $nthreads )", 
        "type": "Process Control"
    }, 
    "eio_set_max_poll_reqs": {
        "descr": "", 
        "name": "eio_set_max_poll_reqs", 
        "params": [
            {
                "descr": "Number of requests", 
                "name": "nreqs"
            }
        ], 
        "path": "php/function.eio-set-max-poll-reqs", 
        "syntax": "void eio_set_max_poll_reqs ( int $nreqs )", 
        "type": "Process Control"
    }, 
    "eio_set_max_poll_time": {
        "descr": "Polling stops, if poll took longer than nseconds seconds.", 
        "name": "eio_set_max_poll_time", 
        "params": [
            {
                "descr": "Number of seconds", 
                "name": "nseconds"
            }
        ], 
        "path": "php/function.eio-set-max-poll-time", 
        "syntax": "void eio_set_max_poll_time ( float $nseconds )", 
        "type": "Process Control"
    }, 
    "eio_set_min_parallel": {
        "descr": "", 
        "name": "eio_set_min_parallel", 
        "params": [
            {
                "descr": "Number of parallel threads.", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-min-parallel", 
        "syntax": "void eio_set_min_parallel ( string $nthreads )", 
        "type": "Process Control"
    }, 
    "eio_stat": {
        "descr": "eio_stat() returns file status information in result argument of callback", 
        "name": "eio_stat", 
        "params": [
            {
                "descr": "The file path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-stat", 
        "syntax": "resource eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "type": "Process Control"
    }, 
    "eio_statvfs": {
        "descr": "eio_statvfs() returns file system statistics information in result argument of callback", 
        "name": "eio_statvfs", 
        "params": [
            {
                "descr": "Pathname of any file within the mounted file system", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-statvfs", 
        "syntax": "resource eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] )", 
        "type": "Process Control"
    }, 
    "eio_symlink": {
        "descr": "eio_symlink() creates a symbolic link new_path to path.", 
        "name": "eio_symlink", 
        "params": [
            {
                "descr": "Source path", 
                "name": "path"
            }, 
            {
                "descr": "Target path", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-symlink", 
        "syntax": "resource eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_sync": {
        "descr": "", 
        "name": "eio_sync", 
        "params": [], 
        "path": "php/function.eio-sync", 
        "syntax": "resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_sync_file_range": {
        "descr": "eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file descriptor fd with disk.", 
        "name": "eio_sync_file_range", 
        "params": [
            {
                "descr": "File descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The starting byte of the file range to be synchronized", 
                "name": "offset"
            }, 
            {
                "descr": "Specifies the length of the range to be synchronized, in bytes. ", 
                "name": "nbytes"
            }, 
            {
                "descr": "A bit-mask. Can include any of the following values: EIO_SYNC_FILE_RANGE_WAIT_BEFORE, EIO_SYNC_FILE_RANGE_WRITE, EIO_SYNC_FILE_RANGE_WAIT_AFTER. ", 
                "name": "flags"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-sync-file-range", 
        "syntax": "resource eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_syncfs": {
        "descr": "", 
        "name": "eio_syncfs", 
        "params": [
            {
                "descr": "File descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-syncfs", 
        "syntax": "resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_truncate": {
        "descr": "eio_truncate() causes the regular file named by path to be truncated to a size of precisely length bytes", 
        "name": "eio_truncate", 
        "params": [
            {
                "descr": "File path", 
                "name": "path"
            }, 
            {
                "descr": "Offset from beginning of the file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-truncate", 
        "syntax": "resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "type": "Process Control"
    }, 
    "eio_unlink": {
        "descr": "eio_unlink() deletes a name from the file system.", 
        "name": "eio_unlink", 
        "params": [
            {
                "descr": "Path to file", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-unlink", 
        "syntax": "resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_utime": {
        "descr": "", 
        "name": "eio_utime", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "path"
            }, 
            {
                "descr": "Access time", 
                "name": "atime"
            }, 
            {
                "descr": "Modification time", 
                "name": "mtime"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-utime", 
        "syntax": "resource eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "type": "Process Control"
    }, 
    "eio_write": {
        "descr": "eio_write() writes up to length bytes from str at offset offset from the beginning of the file.", 
        "name": "eio_write", 
        "params": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Source string", 
                "name": "str"
            }, 
            {
                "descr": "Maximum number of bytes to write.", 
                "name": "length"
            }, 
            {
                "descr": "Offset from the beginning of file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-write", 
        "syntax": "resource eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] )", 
        "type": "Process Control"
    }, 
    "empty": {
        "descr": "Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. empty() does not generate a warning if the variable does not exist.", 
        "name": "empty", 
        "params": [
            {
                "descr": "Variable to be checked  Note:  Prior to PHP 5.5, empty() only supports variables; anything else will result in a parse error. ", 
                "name": "var"
            }
        ], 
        "path": "php/function.empty", 
        "syntax": "bool empty ( mixed $var )", 
        "type": "Variables"
    }, 
    "end": {
        "descr": "end() advances array's internal pointer to the last element, and returns its value.", 
        "name": "end", 
        "params": [
            {
                "descr": "The array. This array is passed by reference because it is modified by the function. ", 
                "name": "array"
            }
        ], 
        "path": "php/function.end", 
        "syntax": "mixed end ( array &$array )", 
        "type": "Array"
    }, 
    "ereg": {
        "descr": "", 
        "name": "ereg", 
        "params": [
            {
                "descr": "Case sensitive regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. ", 
                "name": "regs"
            }
        ], 
        "path": "php/function.ereg", 
        "syntax": "int ereg ( string $pattern , string $string [, array &$regs ] )", 
        "type": "String"
    }, 
    "ereg_replace": {
        "descr": "", 
        "name": "ereg_replace", 
        "params": [
            {
                "descr": "A POSIX extended regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.", 
                "name": "replacement"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.ereg-replace", 
        "syntax": "string ereg_replace ( string $pattern , string $replacement , string $string )", 
        "type": "String"
    }, 
    "eregi": {
        "descr": "This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters.", 
        "name": "eregi", 
        "params": [
            {
                "descr": "Case insensitive regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. ", 
                "name": "regs"
            }
        ], 
        "path": "php/function.eregi", 
        "syntax": "int eregi ( string $pattern , string $string [, array &$regs ] )", 
        "type": "String"
    }, 
    "eregi_replace": {
        "descr": "This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.", 
        "name": "eregi_replace", 
        "params": [
            {
                "descr": "A POSIX extended regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.", 
                "name": "replacement"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.eregi-replace", 
        "syntax": "string eregi_replace ( string $pattern , string $replacement , string $string )", 
        "type": "String"
    }, 
    "error_get_last": {
        "descr": "Gets information about the last error that occurred.", 
        "name": "error_get_last", 
        "params": [], 
        "path": "php/function.error-get-last", 
        "syntax": "array error_get_last ( void )", 
        "type": "Errors"
    }, 
    "error_log": {
        "descr": "Sends an error message to the web server's error log or to a file.", 
        "name": "error_log", 
        "params": [
            {
                "descr": "The error message that should be logged.", 
                "name": "message"
            }, 
            {
                "descr": "Says where the error should go. ", 
                "name": "message_type"
            }, 
            {
                "descr": "The destination. Its meaning depends on the message_type parameter as described above.", 
                "name": "destination"
            }, 
            {
                "descr": "The extra headers. It's used when the message_type parameter is set to 1. ", 
                "name": "extra_headers"
            }
        ], 
        "path": "php/function.error-log", 
        "syntax": "bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )", 
        "type": "Errors"
    }, 
    "error_reporting": {
        "descr": "The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.", 
        "name": "error_reporting", 
        "params": [
            {
                "descr": "The new error_reporting level. It takes on either a bitmask, or named constants. ", 
                "name": "level"
            }
        ], 
        "path": "php/function.error-reporting", 
        "syntax": "int error_reporting ([ int $level ] )", 
        "type": "Errors"
    }, 
    "escapeshellarg": {
        "descr": "escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator.", 
        "name": "escapeshellarg", 
        "params": [
            {
                "descr": "The argument that will be escaped.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.escapeshellarg", 
        "syntax": "string escapeshellarg ( string $arg )", 
        "type": "Process Control"
    }, 
    "escapeshellcmd": {
        "descr": "escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.", 
        "name": "escapeshellcmd", 
        "params": [
            {
                "descr": "The command that will be escaped.", 
                "name": "command"
            }
        ], 
        "path": "php/function.escapeshellcmd", 
        "syntax": "string escapeshellcmd ( string $command )", 
        "type": "Process Control"
    }, 
    "eval": {
        "descr": "Evaluates the given code as PHP.", 
        "name": "eval", 
        "params": [
            {
                "descr": "Valid PHP code to be evaluated. ", 
                "name": "code"
            }
        ], 
        "path": "php/function.eval", 
        "syntax": "mixed eval ( string $code )", 
        "type": "Language"
    }, 
    "event_add": {
        "descr": "event_add() schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one.", 
        "name": "event_add", 
        "params": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Optional timeout (in microseconds).", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.event-add", 
        "syntax": "bool event_add ( resource $event [, int $timeout = -1 ] )", 
        "type": "Process Control"
    }, 
    "event_base_free": {
        "descr": "Destroys the specified event_base and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it.", 
        "name": "event_base_free", 
        "params": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-free", 
        "syntax": "void event_base_free ( resource $event_base )", 
        "type": "Process Control"
    }, 
    "event_base_loop": {
        "descr": "Starts event loop for the specified event base.", 
        "name": "event_base_loop", 
        "params": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "Optional parameter, which can take any combination of EVLOOP_ONCE and EVLOOP_NONBLOCK.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.event-base-loop", 
        "syntax": "int event_base_loop ( resource $event_base [, int $flags = 0 ] )", 
        "type": "Process Control"
    }, 
    "event_base_loopbreak": {
        "descr": "Abort the active event loop immediately. The behaviour is similar to break statement.", 
        "name": "event_base_loopbreak", 
        "params": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-loopbreak", 
        "syntax": "bool event_base_loopbreak ( resource $event_base )", 
        "type": "Process Control"
    }, 
    "event_base_loopexit": {
        "descr": "The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again.", 
        "name": "event_base_loopexit", 
        "params": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "Optional timeout parameter (in microseconds).", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.event-base-loopexit", 
        "syntax": "bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )", 
        "type": "Process Control"
    }, 
    "event_base_new": {
        "descr": "Returns new event base, which can be used later in event_base_set(), event_base_loop() and other functions.", 
        "name": "event_base_new", 
        "params": [], 
        "path": "php/function.event-base-new", 
        "syntax": "resource event_base_new ( void )", 
        "type": "Process Control"
    }, 
    "event_base_priority_init": {
        "descr": "Sets the number of different event priority levels.", 
        "name": "event_base_priority_init", 
        "params": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "The number of event priority levels.", 
                "name": "npriorities"
            }
        ], 
        "path": "php/function.event-base-priority-init", 
        "syntax": "bool event_base_priority_init ( resource $event_base , int $npriorities )", 
        "type": "Process Control"
    }, 
    "event_base_set": {
        "descr": "Associates the event_base with the event.", 
        "name": "event_base_set", 
        "params": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-set", 
        "syntax": "bool event_base_set ( resource $event , resource $event_base )", 
        "type": "Process Control"
    }, 
    "event_buffer_base_set": {
        "descr": "Assign the specified bevent to the event_base.", 
        "name": "event_buffer_base_set", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-buffer-base-set", 
        "syntax": "bool event_buffer_base_set ( resource $bevent , resource $event_base )", 
        "type": "Process Control"
    }, 
    "event_buffer_disable": {
        "descr": "Disables the specified buffered event.", 
        "name": "event_buffer_disable", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }
        ], 
        "path": "php/function.event-buffer-disable", 
        "syntax": "bool event_buffer_disable ( resource $bevent , int $events )", 
        "type": "Process Control"
    }, 
    "event_buffer_enable": {
        "descr": "Enables the specified buffered event.", 
        "name": "event_buffer_enable", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }
        ], 
        "path": "php/function.event-buffer-enable", 
        "syntax": "bool event_buffer_enable ( resource $bevent , int $events )", 
        "type": "Process Control"
    }, 
    "event_buffer_fd_set": {
        "descr": "Changes the file descriptor on which the buffered event operates.", 
        "name": "event_buffer_fd_set", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Valid PHP stream, must be castable to file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.event-buffer-fd-set", 
        "syntax": "void event_buffer_fd_set ( resource $bevent , resource $fd )", 
        "type": "Process Control"
    }, 
    "event_buffer_free": {
        "descr": "Destroys the specified buffered event and frees all the resources associated.", 
        "name": "event_buffer_free", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }
        ], 
        "path": "php/function.event-buffer-free", 
        "syntax": "void event_buffer_free ( resource $bevent )", 
        "type": "Process Control"
    }, 
    "event_buffer_new": {
        "descr": "Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically.", 
        "name": "event_buffer_new", 
        "params": [
            {
                "descr": "Valid PHP stream resource. Must be castable to file descriptor.", 
                "name": "stream"
            }, 
            {
                "descr": "Callback to invoke where there is data to read, or NULL if no callback is desired.", 
                "name": "readcb"
            }, 
            {
                "descr": "Callback to invoke where the descriptor is ready for writing, or NULL if no callback is desired.", 
                "name": "writecb"
            }, 
            {
                "descr": "Callback to invoke where there is an error on the descriptor, cannot be NULL.", 
                "name": "errorcb"
            }, 
            {
                "descr": "An argument that will be passed to each of the callbacks (optional).", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-buffer-new", 
        "syntax": "resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )", 
        "type": "Process Control"
    }, 
    "event_buffer_priority_set": {
        "descr": "Assign a priority to the bevent.", 
        "name": "event_buffer_priority_set", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Priority level. Cannot be less than zero and cannot exceed maximum priority level of the event base (see event_base_priority_init()).", 
                "name": "priority"
            }
        ], 
        "path": "php/function.event-buffer-priority-set", 
        "syntax": "bool event_buffer_priority_set ( resource $bevent , int $priority )", 
        "type": "Process Control"
    }, 
    "event_buffer_read": {
        "descr": "Reads data from the input buffer of the buffered event.", 
        "name": "event_buffer_read", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Data size in bytes.", 
                "name": "data_size"
            }
        ], 
        "path": "php/function.event-buffer-read", 
        "syntax": "string event_buffer_read ( resource $bevent , int $data_size )", 
        "type": "Process Control"
    }, 
    "event_buffer_set_callback": {
        "descr": "Sets or changes existing callbacks for the buffered event.", 
        "name": "event_buffer_set_callback", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Callback to invoke where there is data to read, or NULL if no callback is desired.", 
                "name": "readcb"
            }, 
            {
                "descr": "Callback to invoke where the descriptor is ready for writing, or NULL if no callback is desired.", 
                "name": "writecb"
            }, 
            {
                "descr": "Callback to invoke where there is an error on the descriptor, cannot be NULL.", 
                "name": "errorcb"
            }, 
            {
                "descr": "An argument that will be passed to each of the callbacks (optional).", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-buffer-set-callback", 
        "syntax": "bool event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )", 
        "type": "Process Control"
    }, 
    "event_buffer_timeout_set": {
        "descr": "Sets the read and write timeouts for the specified buffered event.", 
        "name": "event_buffer_timeout_set", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Read timeout (in seconds).", 
                "name": "read_timeout"
            }, 
            {
                "descr": "Write timeout (in seconds).", 
                "name": "write_timeout"
            }
        ], 
        "path": "php/function.event-buffer-timeout-set", 
        "syntax": "void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout )", 
        "type": "Process Control"
    }, 
    "event_buffer_watermark_set": {
        "descr": "Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark.", 
        "name": "event_buffer_watermark_set", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }, 
            {
                "descr": "Low watermark.", 
                "name": "lowmark"
            }, 
            {
                "descr": "High watermark.", 
                "name": "highmark"
            }
        ], 
        "path": "php/function.event-buffer-watermark-set", 
        "syntax": "void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark )", 
        "type": "Process Control"
    }, 
    "event_buffer_write": {
        "descr": "Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing.", 
        "name": "event_buffer_write", 
        "params": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "The data to be written.", 
                "name": "data"
            }, 
            {
                "descr": "Optional size parameter. event_buffer_write() writes all the data by default.", 
                "name": "data_size"
            }
        ], 
        "path": "php/function.event-buffer-write", 
        "syntax": "bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] )", 
        "type": "Process Control"
    }, 
    "event_del": {
        "descr": "Cancels the event.", 
        "name": "event_del", 
        "params": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }
        ], 
        "path": "php/function.event-del", 
        "syntax": "bool event_del ( resource $event )", 
        "type": "Process Control"
    }, 
    "event_free": {
        "descr": "Frees previously created event resource.", 
        "name": "event_free", 
        "params": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }
        ], 
        "path": "php/function.event-free", 
        "syntax": "void event_free ( resource $event )", 
        "type": "Process Control"
    }, 
    "event_new": {
        "descr": "Creates and returns a new event resource.", 
        "name": "event_new", 
        "params": [], 
        "path": "php/function.event-new", 
        "syntax": "resource event_new ( void )", 
        "type": "Process Control"
    }, 
    "event_set": {
        "descr": "Prepares the event to be used in event_add(). The event is prepared to call the function specified by the callback on the events specified in parameter events, which is a set of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST.", 
        "name": "event_set", 
        "params": [
            {
                "descr": "Signal number or resource indicating the stream.", 
                "name": "fd"
            }, 
            {
                "descr": "A flag indicating the event. Consists of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST.", 
                "name": "events"
            }, 
            {
                "descr": "Optional parameter, previously passed to event_set() as arg.", 
                "name": "arg"
            }, 
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Valid PHP stream resource. The stream must be castable to file descriptor, so you most likely won't be able to use any of filtered streams.", 
                "name": "fd"
            }, 
            {
                "descr": "A set of flags indicating the desired event, can be EV_READ and/or EV_WRITE. ", 
                "name": "events"
            }, 
            {
                "descr": "Callback function to be called when the matching event occurs.", 
                "name": "callback"
            }, 
            {
                "descr": "Optional callback parameter.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-set", 
        "syntax": "bool event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] )", 
        "type": "Process Control"
    }, 
    "exec": {
        "descr": "exec() executes the given command.", 
        "name": "exec", 
        "params": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the output argument is present, then the specified array will be filled with every line of output from the command. ", 
                "name": "output"
            }, 
            {
                "descr": "If the return_var argument is present along with the output argument, then the return status of the executed command will be written to this variable.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.exec", 
        "syntax": "string exec ( string $command [, array &$output [, int &$return_var ]] )", 
        "type": "Process Control"
    }, 
    "exit": {
        "descr": "Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit is called.", 
        "name": "exit", 
        "params": [
            {
                "descr": "If status is a string, this function prints the status just before exiting. ", 
                "name": "status"
            }
        ], 
        "path": "php/function.exit", 
        "syntax": "void exit ([ string $status ] )", 
        "type": "Language"
    }, 
    "exp": {
        "descr": "Returns e raised to the power of arg.", 
        "name": "exp", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.exp", 
        "syntax": "float exp ( float $arg )", 
        "type": "Mathematics"
    }, 
    "explode": {
        "descr": "Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.", 
        "name": "explode", 
        "params": [
            {
                "descr": "The boundary string.", 
                "name": "delimiter"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.explode", 
        "syntax": "array explode ( string $delimiter , string $string [, int $limit ] )", 
        "type": "String"
    }, 
    "expm1": {
        "descr": "expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.", 
        "name": "expm1", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.expm1", 
        "syntax": "float expm1 ( float $arg )", 
        "type": "Mathematics"
    }, 
    "extension_loaded": {
        "descr": "Finds out whether the extension is loaded.", 
        "name": "extension_loaded", 
        "params": [
            {
                "descr": "The extension name.   You can see the names of various extensions by using phpinfo() or if you're using the CGI or CLI version of PHP you can use the -m switch to list all available extensions:  $ php -m[PHP Modules]xmltokenizerstandardsocketssessionposixpcreoverloadmysqlmbstringctype[Zend Modules]", 
                "name": "name"
            }
        ], 
        "path": "php/function.extension-loaded", 
        "syntax": "bool extension_loaded ( string $name )", 
        "type": "Language"
    }, 
    "extract": {
        "descr": "Import variables from an array into the current symbol table.", 
        "name": "extract", 
        "params": [
            {
                "descr": "An associative array. This function treats keys as variable names and values as variable values. ", 
                "name": "array"
            }, 
            {
                "descr": "The way invalid/numeric keys and collisions are treated is determined by the extraction flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "If there is a collision, don't overwrite the existing variable.", 
                "name": "EXTR_SKIP"
            }, 
            {
                "descr": "If there is a collision, prefix the variable name with prefix.", 
                "name": "EXTR_PREFIX_SAME"
            }, 
            {
                "descr": "Prefix all variable names with prefix.", 
                "name": "EXTR_PREFIX_ALL"
            }, 
            {
                "descr": "Only prefix invalid/numeric variable names with prefix.", 
                "name": "EXTR_PREFIX_INVALID"
            }, 
            {
                "descr": "Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing. ", 
                "name": "EXTR_IF_EXISTS"
            }, 
            {
                "descr": "Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.", 
                "name": "EXTR_PREFIX_IF_EXISTS"
            }, 
            {
                "descr": "Extracts variables as references. ", 
                "name": "EXTR_REFS"
            }, 
            {
                "descr": "Note that prefix is only required if flags is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.extract", 
        "syntax": "int extract ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )", 
        "type": "Array"
    }, 
    "ezmlm_hash": {
        "descr": "", 
        "name": "ezmlm_hash", 
        "params": [
            {
                "descr": "The email address that's being hashed.", 
                "name": "addr"
            }
        ], 
        "path": "php/function.ezmlm-hash", 
        "syntax": "int ezmlm_hash ( string $addr )", 
        "type": "Mail"
    }, 
    "fclose": {
        "descr": "The file pointed to by handle is closed.", 
        "name": "fclose", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fclose", 
        "syntax": "bool fclose ( resource $handle )", 
        "type": "File System"
    }, 
    "feof": {
        "descr": "Tests for end-of-file on a file pointer.", 
        "name": "feof", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.feof", 
        "syntax": "bool feof ( resource $handle )", 
        "type": "File System"
    }, 
    "fflush": {
        "descr": "This function forces a write of all buffered output to the resource pointed to by the file handle.", 
        "name": "fflush", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fflush", 
        "syntax": "bool fflush ( resource $handle )", 
        "type": "File System"
    }, 
    "fgetc": {
        "descr": "Gets a character from the given file pointer.", 
        "name": "fgetc", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fgetc", 
        "syntax": "string fgetc ( resource $handle )", 
        "type": "File System"
    }, 
    "fgetcsv": {
        "descr": "Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.", 
        "name": "fgetcsv", 
        "params": [
            {
                "descr": "A valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen().", 
                "name": "handle"
            }, 
            {
                "descr": "Must be greater than the longest line (in characters) to be found in the CSV file (allowing for trailing line-end characters). ", 
                "name": "length"
            }, 
            {
                "descr": "Set the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "Set the field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "Set the escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/function.fgetcsv", 
        "syntax": "array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '\"' [, string $escape = '\\\\' ]]]] )", 
        "type": "File System"
    }, 
    "fgets": {
        "descr": "Gets a line from file pointer.", 
        "name": "fgets", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "Reading ends when length - 1 bytes have been read, or a newline (which is included in the return value), or an EOF (whichever comes first). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.fgets", 
        "syntax": "string fgets ( resource $handle [, int $length ] )", 
        "type": "File System"
    }, 
    "fgetss": {
        "descr": "Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.", 
        "name": "fgetss", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "Length of the data to be retrieved.", 
                "name": "length"
            }, 
            {
                "descr": "You can use the optional third parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.fgetss", 
        "syntax": "string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )", 
        "type": "File System"
    }, 
    "file": {
        "descr": "Reads an entire file into an array.", 
        "name": "file", 
        "params": [
            {
                "descr": "Path to the file.  TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. ", 
                "name": "filename"
            }, 
            {
                "descr": "The optional parameter flags can be one, or more, of the following constants:  FILE_USE_INCLUDE_PATH    Search for the file in the include_path.", 
                "name": "flags"
            }, 
            {
                "descr": "Do not add newline at the end of each array element", 
                "name": "FILE_IGNORE_NEW_LINES"
            }, 
            {
                "descr": "Skip empty lines", 
                "name": "FILE_SKIP_EMPTY_LINES"
            }, 
            {
                "descr": "A context resource created with the stream_context_create() function. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.file", 
        "syntax": "array file ( string $filename [, int $flags = 0 [, resource $context ]] )", 
        "type": "File System"
    }, 
    "file_exists": {
        "descr": "Checks whether a file or directory exists.", 
        "name": "file_exists", 
        "params": [
            {
                "descr": "Path to the file or directory.   On windows, use //computername/share/filename or \\\\computername\\share\\filename to check files on network shares.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.file-exists", 
        "syntax": "bool file_exists ( string $filename )", 
        "type": "File System"
    }, 
    "file_get_contents": {
        "descr": "This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE.", 
        "name": "file_get_contents", 
        "params": [
            {
                "descr": "Name of the file to read.", 
                "name": "filename"
            }, 
            {
                "descr": "Note:  As of PHP 5 the FILE_USE_INCLUDE_PATH constant can be used to trigger include path search.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create(). ", 
                "name": "context"
            }, 
            {
                "descr": "The offset where the reading starts on the original stream. ", 
                "name": "offset"
            }, 
            {
                "descr": "Maximum length of data read. The default is to read until end of file is reached. ", 
                "name": "maxlen"
            }
        ], 
        "path": "php/function.file-get-contents", 
        "syntax": "string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )", 
        "type": "File System"
    }, 
    "file_put_contents": {
        "descr": "This function is identical to calling fopen(), fwrite() and fclose() successively to write data to a file.", 
        "name": "file_put_contents", 
        "params": [
            {
                "descr": "Path to the file where to write the data.", 
                "name": "filename"
            }, 
            {
                "descr": "The data to write. Can be either a string, an array or a stream resource. ", 
                "name": "data"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.file-put-contents", 
        "syntax": "int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )", 
        "type": "File System"
    }, 
    "fileatime": {
        "descr": "", 
        "name": "fileatime", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileatime", 
        "syntax": "int fileatime ( string $filename )", 
        "type": "File System"
    }, 
    "filectime": {
        "descr": "Gets the inode change time of a file.", 
        "name": "filectime", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filectime", 
        "syntax": "int filectime ( string $filename )", 
        "type": "File System"
    }, 
    "filegroup": {
        "descr": "Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.", 
        "name": "filegroup", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filegroup", 
        "syntax": "int filegroup ( string $filename )", 
        "type": "File System"
    }, 
    "fileinode": {
        "descr": "Gets the file inode.", 
        "name": "fileinode", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileinode", 
        "syntax": "int fileinode ( string $filename )", 
        "type": "File System"
    }, 
    "filemtime": {
        "descr": "This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.", 
        "name": "filemtime", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filemtime", 
        "syntax": "int filemtime ( string $filename )", 
        "type": "File System"
    }, 
    "fileowner": {
        "descr": "Gets the file owner.", 
        "name": "fileowner", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileowner", 
        "syntax": "int fileowner ( string $filename )", 
        "type": "File System"
    }, 
    "fileperms": {
        "descr": "Gets permissions for the given file.", 
        "name": "fileperms", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileperms", 
        "syntax": "int fileperms ( string $filename )", 
        "type": "File System"
    }, 
    "filesize": {
        "descr": "Gets the size for the given file.", 
        "name": "filesize", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filesize", 
        "syntax": "int filesize ( string $filename )", 
        "type": "File System"
    }, 
    "filetype": {
        "descr": "Returns the type of the given file.", 
        "name": "filetype", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filetype", 
        "syntax": "string filetype ( string $filename )", 
        "type": "File System"
    }, 
    "filter_has_var": {
        "descr": "", 
        "name": "filter_has_var", 
        "params": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "Name of a variable to check.", 
                "name": "variable_name"
            }
        ], 
        "path": "php/function.filter-has-var", 
        "syntax": "bool filter_has_var ( int $type , string $variable_name )", 
        "type": "Variables"
    }, 
    "filter_id": {
        "descr": "", 
        "name": "filter_id", 
        "params": [
            {
                "descr": "Name of a filter to get.", 
                "name": "filtername"
            }
        ], 
        "path": "php/function.filter-id", 
        "syntax": "int filter_id ( string $filtername )", 
        "type": "Variables"
    }, 
    "filter_input": {
        "descr": "", 
        "name": "filter_input", 
        "params": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "Name of a variable to get.", 
                "name": "variable_name"
            }, 
            {
                "descr": "The ID of the filter to apply. The Types of filters manual page lists the available filters.", 
                "name": "filter"
            }, 
            {
                "descr": "Associative array of options or bitwise disjunction of flags. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.filter-input", 
        "syntax": "mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )", 
        "type": "Variables"
    }, 
    "filter_input_array": {
        "descr": "This function is useful for retrieving many values without repetitively calling filter_input().", 
        "name": "filter_input_array", 
        "params": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "An array defining the arguments. ", 
                "name": "definition"
            }, 
            {
                "descr": "Add missing keys as NULL to the return value.", 
                "name": "add_empty"
            }
        ], 
        "path": "php/function.filter-input-array", 
        "syntax": "mixed filter_input_array ( int $type [, mixed $definition [, bool $add_empty = true ]] )", 
        "type": "Variables"
    }, 
    "filter_list": {
        "descr": "", 
        "name": "filter_list", 
        "params": [], 
        "path": "php/function.filter-list", 
        "syntax": "array filter_list ( void )", 
        "type": "Variables"
    }, 
    "filter_var": {
        "descr": "", 
        "name": "filter_var", 
        "params": [
            {
                "descr": "Value to filter.", 
                "name": "variable"
            }, 
            {
                "descr": "The ID of the filter to apply. The Types of filters manual page lists the available filters.", 
                "name": "filter"
            }, 
            {
                "descr": "Associative array of options or bitwise disjunction of flags. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.filter-var", 
        "syntax": "mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )", 
        "type": "Variables"
    }, 
    "filter_var_array": {
        "descr": "This function is useful for retrieving many values without repetitively calling filter_var().", 
        "name": "filter_var_array", 
        "params": [
            {
                "descr": "An array with string keys containing the data to filter.", 
                "name": "data"
            }, 
            {
                "descr": "An array defining the arguments. ", 
                "name": "definition"
            }, 
            {
                "descr": "Add missing keys as NULL to the return value.", 
                "name": "add_empty"
            }
        ], 
        "path": "php/function.filter-var-array", 
        "syntax": "mixed filter_var_array ( array $data [, mixed $definition [, bool $add_empty = true ]] )", 
        "type": "Variables"
    }, 
    "finfo_buffer": {
        "descr": "This function is used to get information about binary data in a string.", 
        "name": "finfo_buffer", 
        "params": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "Content of a file to be checked.", 
                "name": "string"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }
        ], 
        "path": "php/function.finfo-buffer", 
        "syntax": "string finfo_buffer ( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )", 
        "type": "File System"
    }, 
    "finfo_close": {
        "descr": "This function closes the resource opened by finfo_open().", 
        "name": "finfo_close", 
        "params": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }
        ], 
        "path": "php/function.finfo-close", 
        "syntax": "bool finfo_close ( resource $finfo )", 
        "type": "File System"
    }, 
    "finfo_file": {
        "descr": "This function is used to get information about a file.", 
        "name": "finfo_file", 
        "params": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "Name of a file to be checked.", 
                "name": "file_name"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }, 
            {
                "descr": "For a description of contexts, refer to Stream Functions.", 
                "name": "context"
            }
        ], 
        "path": "php/function.finfo-file", 
        "syntax": "string finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )", 
        "type": "File System"
    }, 
    "finfo_open": {
        "descr": "This function opens a magic database and returns its resource.", 
        "name": "finfo_open", 
        "params": [
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }, 
            {
                "descr": "Name of a magic database file, usually something like /path/to/magic.mime. ", 
                "name": "magic_file"
            }
        ], 
        "path": "php/function.finfo-open", 
        "syntax": "resource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )", 
        "type": "File System"
    }, 
    "finfo_set_flags": {
        "descr": "This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.", 
        "name": "finfo_set_flags", 
        "params": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }
        ], 
        "path": "php/function.finfo-set-flags", 
        "syntax": "bool finfo_set_flags ( resource $finfo , int $options )", 
        "type": "File System"
    }, 
    "floatval": {
        "descr": "Gets the float value of var.", 
        "name": "floatval", 
        "params": [
            {
                "descr": "May be any scalar type. floatval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.", 
                "name": "var"
            }
        ], 
        "path": "php/function.floatval", 
        "syntax": "float floatval ( mixed $var )", 
        "type": "Variables"
    }, 
    "flock": {
        "descr": "flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).", 
        "name": "flock", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }, 
            {
                "descr": "The optional third argument is set to 1 if the lock would block (EWOULDBLOCK errno condition). ", 
                "name": "wouldblock"
            }
        ], 
        "path": "php/function.flock", 
        "syntax": "bool flock ( resource $handle , int $operation [, int &$wouldblock ] )", 
        "type": "File System"
    }, 
    "floor": {
        "descr": "", 
        "name": "floor", 
        "params": [
            {
                "descr": "The numeric value to round", 
                "name": "value"
            }
        ], 
        "path": "php/function.floor", 
        "syntax": "float floor ( float $value )", 
        "type": "Mathematics"
    }, 
    "flush": {
        "descr": "Flushes the write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats.", 
        "name": "flush", 
        "params": [], 
        "path": "php/function.flush", 
        "syntax": "void flush ( void )", 
        "type": "Networking"
    }, 
    "fmod": {
        "descr": "Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The remainder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.", 
        "name": "fmod", 
        "params": [
            {
                "descr": "The dividend", 
                "name": "x"
            }, 
            {
                "descr": "The divisor", 
                "name": "y"
            }
        ], 
        "path": "php/function.fmod", 
        "syntax": "float fmod ( float $x , float $y )", 
        "type": "Mathematics"
    }, 
    "fnmatch": {
        "descr": "fnmatch() checks if the passed string would match the given shell wildcard pattern.", 
        "name": "fnmatch", 
        "params": [
            {
                "descr": "The shell wildcard pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The tested string. This function is especially useful for filenames, but may also be used on regular strings. ", 
                "name": "string"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.fnmatch", 
        "syntax": "bool fnmatch ( string $pattern , string $string [, int $flags = 0 ] )", 
        "type": "File System"
    }, 
    "fopen": {
        "descr": "fopen() binds a named resource, specified by filename, to a stream.", 
        "name": "fopen", 
        "params": [
            {
                "descr": "If filename is of the form \"scheme://...\", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme. ", 
                "name": "filename"
            }, 
            {
                "descr": "The mode parameter specifies the type of access you require to the stream. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.fopen", 
        "syntax": "resource fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )", 
        "type": "File System"
    }, 
    "forward_static_call": {
        "descr": "Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.", 
        "name": "forward_static_call", 
        "params": [
            {
                "descr": "The function or method to be called. ", 
                "name": "function"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the function.", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.forward-static-call", 
        "syntax": "mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )", 
        "type": "Classes and Functions"
    }, 
    "forward_static_call_array": {
        "descr": "Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can't be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array().", 
        "name": "forward_static_call_array", 
        "params": [
            {
                "descr": "The function or method to be called. ", 
                "name": "function"
            }, 
            {
                "descr": "One parameter, gathering all the method parameter in one array. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.forward-static-call-array", 
        "syntax": "mixed forward_static_call_array ( callable $function , array $parameters )", 
        "type": "Classes and Functions"
    }, 
    "fpassthru": {
        "descr": "Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.", 
        "name": "fpassthru", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fpassthru", 
        "syntax": "int fpassthru ( resource $handle )", 
        "type": "File System"
    }, 
    "fprintf": {
        "descr": "Write a string produced according to format to the stream resource specified by handle.", 
        "name": "fprintf", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.fprintf", 
        "syntax": "int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )", 
        "type": "String"
    }, 
    "fputcsv": {
        "descr": "fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.", 
        "name": "fputcsv", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "An array of values.", 
                "name": "fields"
            }, 
            {
                "descr": "The optional delimiter parameter sets the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The optional enclosure parameter sets the field enclosure (one character only).", 
                "name": "enclosure"
            }
        ], 
        "path": "php/function.fputcsv", 
        "syntax": "int fputcsv ( resource $handle , array $fields [, string $delimiter = ',' [, string $enclosure = '\"' ]] )", 
        "type": "File System"
    }, 
    "fread": {
        "descr": "fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met:", 
        "name": "fread", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "Up to length number of bytes read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.fread", 
        "syntax": "string fread ( resource $handle , int $length )", 
        "type": "File System"
    }, 
    "fscanf": {
        "descr": "The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf().", 
        "name": "fscanf", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The specified format as described in the sprintf() documentation.", 
                "name": "format"
            }, 
            {
                "descr": "The optional assigned values.", 
                "name": "..."
            }
        ], 
        "path": "php/function.fscanf", 
        "syntax": "mixed fscanf ( resource $handle , string $format [, mixed &$... ] )", 
        "type": "File System"
    }, 
    "fseek": {
        "descr": "Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.", 
        "name": "fseek", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The offset.   To move to a position before the end-of-file, you need to pass a negative value in offset and set whence to SEEK_END.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/function.fseek", 
        "syntax": "int fseek ( resource $handle , int $offset [, int $whence = SEEK_SET ] )", 
        "type": "File System"
    }, 
    "fsockopen": {
        "descr": "Initiates a socket connection to the resource specified by hostname.", 
        "name": "fsockopen", 
        "params": [
            {
                "descr": "If OpenSSL support is installed, you may prefix the hostname with either ssl:// or tls:// to use an SSL or TLS client connection over TCP/IP to connect to the remote host.", 
                "name": "hostname"
            }, 
            {
                "descr": "The port number. This can be omitted and skipped with -1 for transports that do not use ports, such as unix://.", 
                "name": "port"
            }, 
            {
                "descr": "If provided, holds the system level error number that occurred in the system-level connect() call. ", 
                "name": "errno"
            }, 
            {
                "descr": "The error message as a string.", 
                "name": "errstr"
            }, 
            {
                "descr": "The connection timeout, in seconds. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.fsockopen", 
        "syntax": "resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]] )", 
        "type": "Networking"
    }, 
    "fstat": {
        "descr": "Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.", 
        "name": "fstat", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fstat", 
        "syntax": "array fstat ( resource $handle )", 
        "type": "File System"
    }, 
    "ftell": {
        "descr": "Returns the position of the file pointer referenced by handle.", 
        "name": "ftell", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or popen(). ", 
                "name": "handle"
            }
        ], 
        "path": "php/function.ftell", 
        "syntax": "int ftell ( resource $handle )", 
        "type": "File System"
    }, 
    "ftp_alloc": {
        "descr": "Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded.", 
        "name": "ftp_alloc", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The number of bytes to allocate.", 
                "name": "filesize"
            }, 
            {
                "descr": "A textual representation of the servers response will be returned by reference in result if a variable is provided.", 
                "name": "result"
            }
        ], 
        "path": "php/function.ftp-alloc", 
        "syntax": "bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )", 
        "type": "FTP"
    }, 
    "ftp_cdup": {
        "descr": "Changes to the parent directory.", 
        "name": "ftp_cdup", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-cdup", 
        "syntax": "bool ftp_cdup ( resource $ftp_stream )", 
        "type": "FTP"
    }, 
    "ftp_chdir": {
        "descr": "Changes the current directory to the specified one.", 
        "name": "ftp_chdir", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The target directory.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-chdir", 
        "syntax": "bool ftp_chdir ( resource $ftp_stream , string $directory )", 
        "type": "FTP"
    }, 
    "ftp_chmod": {
        "descr": "Sets the permissions on the specified remote file to mode.", 
        "name": "ftp_chmod", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The new permissions, given as an octal value.", 
                "name": "mode"
            }, 
            {
                "descr": "The remote file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.ftp-chmod", 
        "syntax": "int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )", 
        "type": "FTP"
    }, 
    "ftp_close": {
        "descr": "ftp_close() closes the given link identifier and releases the resource.", 
        "name": "ftp_close", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-close", 
        "syntax": "bool ftp_close ( resource $ftp_stream )", 
        "type": "FTP"
    }, 
    "ftp_connect": {
        "descr": "ftp_connect() opens an FTP connection to the specified host.", 
        "name": "ftp_connect", 
        "params": [
            {
                "descr": "The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.", 
                "name": "host"
            }, 
            {
                "descr": "This parameter specifies an alternate port to connect to. ", 
                "name": "port"
            }, 
            {
                "descr": "This parameter specifies the timeout for all subsequent network operations. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.ftp-connect", 
        "syntax": "resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )", 
        "type": "FTP"
    }, 
    "ftp_delete": {
        "descr": "ftp_delete() deletes the file specified by path from the FTP server.", 
        "name": "ftp_delete", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The file to delete.", 
                "name": "path"
            }
        ], 
        "path": "php/function.ftp-delete", 
        "syntax": "bool ftp_delete ( resource $ftp_stream , string $path )", 
        "type": "FTP"
    }, 
    "ftp_exec": {
        "descr": "Sends a SITE EXEC command request to the FTP server.", 
        "name": "ftp_exec", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The command to execute.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-exec", 
        "syntax": "bool ftp_exec ( resource $ftp_stream , string $command )", 
        "type": "FTP"
    }, 
    "ftp_fget": {
        "descr": "ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.", 
        "name": "ftp_fget", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "An open file pointer in which we store the data.", 
                "name": "handle"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-fget", 
        "syntax": "bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_fput": {
        "descr": "ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.", 
        "name": "ftp_fput", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "An open file pointer on the local file. ", 
                "name": "handle"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-fput", 
        "syntax": "bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_get": {
        "descr": "ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.", 
        "name": "ftp_get", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The local file path (will be overwritten if the file already exists).", 
                "name": "local_file"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-get", 
        "syntax": "bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_get_option": {
        "descr": "This function returns the value for the requested option from the specified FTP connection.", 
        "name": "ftp_get_option", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC  Returns the current timeout used for network related operations. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.ftp-get-option", 
        "syntax": "mixed ftp_get_option ( resource $ftp_stream , int $option )", 
        "type": "FTP"
    }, 
    "ftp_login": {
        "descr": "Logs in to the given FTP stream.", 
        "name": "ftp_login", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The username (USER).", 
                "name": "username"
            }, 
            {
                "descr": "The password (PASS).", 
                "name": "password"
            }
        ], 
        "path": "php/function.ftp-login", 
        "syntax": "bool ftp_login ( resource $ftp_stream , string $username , string $password )", 
        "type": "FTP"
    }, 
    "ftp_mdtm": {
        "descr": "ftp_mdtm() gets the last modified time for a remote file.", 
        "name": "ftp_mdtm", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The file from which to extract the last modification time.", 
                "name": "remote_file"
            }
        ], 
        "path": "php/function.ftp-mdtm", 
        "syntax": "int ftp_mdtm ( resource $ftp_stream , string $remote_file )", 
        "type": "FTP"
    }, 
    "ftp_mkdir": {
        "descr": "Creates the specified directory on the FTP server.", 
        "name": "ftp_mkdir", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The name of the directory that will be created.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-mkdir", 
        "syntax": "string ftp_mkdir ( resource $ftp_stream , string $directory )", 
        "type": "FTP"
    }, 
    "ftp_nb_continue": {
        "descr": "Continues retrieving/sending a file non-blocking.", 
        "name": "ftp_nb_continue", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-nb-continue", 
        "syntax": "int ftp_nb_continue ( resource $ftp_stream )", 
        "type": "FTP"
    }, 
    "ftp_nb_fget": {
        "descr": "ftp_nb_fget() retrieves a remote file from the FTP server.", 
        "name": "ftp_nb_fget", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "An open file pointer in which we store the data.", 
                "name": "handle"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-nb-fget", 
        "syntax": "int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_nb_fput": {
        "descr": "ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server.", 
        "name": "ftp_nb_fput", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "An open file pointer on the local file. ", 
                "name": "handle"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-nb-fput", 
        "syntax": "int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_nb_get": {
        "descr": "ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file.", 
        "name": "ftp_nb_get", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The local file path (will be overwritten if the file already exists).", 
                "name": "local_file"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-nb-get", 
        "syntax": "int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_nb_put": {
        "descr": "ftp_nb_put() stores a local file on the FTP server.", 
        "name": "ftp_nb_put", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The local file path.", 
                "name": "local_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-nb-put", 
        "syntax": "int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_nlist": {
        "descr": "", 
        "name": "ftp_nlist", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory to be listed. This parameter can also include arguments, eg. ", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-nlist", 
        "syntax": "array ftp_nlist ( resource $ftp_stream , string $directory )", 
        "type": "FTP"
    }, 
    "ftp_pasv": {
        "descr": "ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.", 
        "name": "ftp_pasv", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "If TRUE, the passive mode is turned on, else it's turned off.", 
                "name": "pasv"
            }
        ], 
        "path": "php/function.ftp-pasv", 
        "syntax": "bool ftp_pasv ( resource $ftp_stream , bool $pasv )", 
        "type": "FTP"
    }, 
    "ftp_put": {
        "descr": "ftp_put() stores a local file on the FTP server.", 
        "name": "ftp_put", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The local file path.", 
                "name": "local_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-put", 
        "syntax": "bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )", 
        "type": "FTP"
    }, 
    "ftp_pwd": {
        "descr": "", 
        "name": "ftp_pwd", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-pwd", 
        "syntax": "string ftp_pwd ( resource $ftp_stream )", 
        "type": "FTP"
    }, 
    "ftp_raw": {
        "descr": "Sends an arbitrary command to the FTP server.", 
        "name": "ftp_raw", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The command to execute.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-raw", 
        "syntax": "array ftp_raw ( resource $ftp_stream , string $command )", 
        "type": "FTP"
    }, 
    "ftp_rawlist": {
        "descr": "ftp_rawlist() executes the FTP LIST command, and returns the result as an array.", 
        "name": "ftp_rawlist", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory path. May include arguments for the LIST command.", 
                "name": "directory"
            }, 
            {
                "descr": "If set to TRUE, the issued command will be LIST -R.", 
                "name": "recursive"
            }
        ], 
        "path": "php/function.ftp-rawlist", 
        "syntax": "array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = false ] )", 
        "type": "FTP"
    }, 
    "ftp_rename": {
        "descr": "ftp_rename() renames a file or a directory on the FTP server.", 
        "name": "ftp_rename", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The old file/directory name.", 
                "name": "oldname"
            }, 
            {
                "descr": "The new name.", 
                "name": "newname"
            }
        ], 
        "path": "php/function.ftp-rename", 
        "syntax": "bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )", 
        "type": "FTP"
    }, 
    "ftp_rmdir": {
        "descr": "Removes the specified directory on the FTP server.", 
        "name": "ftp_rmdir", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory to delete. This must be either an absolute or relative path to an empty directory.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-rmdir", 
        "syntax": "bool ftp_rmdir ( resource $ftp_stream , string $directory )", 
        "type": "FTP"
    }, 
    "ftp_set_option": {
        "descr": "This function controls various runtime options for the specified FTP stream.", 
        "name": "ftp_set_option", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC  Changes the timeout in seconds used for all network related functions. ", 
                "name": "option"
            }, 
            {
                "descr": "This parameter depends on which option is chosen to be altered.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ftp-set-option", 
        "syntax": "bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )", 
        "type": "FTP"
    }, 
    "ftp_site": {
        "descr": "ftp_site() sends the given SITE command to the FTP server.", 
        "name": "ftp_site", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The SITE command. Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-site", 
        "syntax": "bool ftp_site ( resource $ftp_stream , string $command )", 
        "type": "FTP"
    }, 
    "ftp_size": {
        "descr": "ftp_size() returns the size of the given file in bytes.", 
        "name": "ftp_size", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file.", 
                "name": "remote_file"
            }
        ], 
        "path": "php/function.ftp-size", 
        "syntax": "int ftp_size ( resource $ftp_stream , string $remote_file )", 
        "type": "FTP"
    }, 
    "ftp_ssl_connect": {
        "descr": "ftp_ssl_connect() opens an explicit SSL-FTP connection to the specified host.", 
        "name": "ftp_ssl_connect", 
        "params": [
            {
                "descr": "The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.", 
                "name": "host"
            }, 
            {
                "descr": "This parameter specifies an alternate port to connect to. ", 
                "name": "port"
            }, 
            {
                "descr": "This parameter specifies the timeout for all subsequent network operations. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.ftp-ssl-connect", 
        "syntax": "resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )", 
        "type": "FTP"
    }, 
    "ftp_systype": {
        "descr": "Returns the system type identifier of the remote FTP server.", 
        "name": "ftp_systype", 
        "params": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-systype", 
        "syntax": "string ftp_systype ( resource $ftp_stream )", 
        "type": "FTP"
    }, 
    "ftruncate": {
        "descr": "Takes the filepointer, handle, and truncates the file to length, size.", 
        "name": "ftruncate", 
        "params": [
            {
                "descr": "The file pointer.  Note:  The handle must be open for writing.", 
                "name": "handle"
            }, 
            {
                "descr": "The size to truncate to.  Note:  If size is larger than the file then the file is extended with null bytes. ", 
                "name": "size"
            }
        ], 
        "path": "php/function.ftruncate", 
        "syntax": "bool ftruncate ( resource $handle , int $size )", 
        "type": "File System"
    }, 
    "func_get_arg": {
        "descr": "Gets the specified argument from a user-defined function's argument list.", 
        "name": "func_get_arg", 
        "params": [
            {
                "descr": "The argument offset. Function arguments are counted starting from zero.", 
                "name": "arg_num"
            }
        ], 
        "path": "php/function.func-get-arg", 
        "syntax": "mixed func_get_arg ( int $arg_num )", 
        "type": "Classes and Functions"
    }, 
    "func_get_args": {
        "descr": "Gets an array of the function's argument list.", 
        "name": "func_get_args", 
        "params": [], 
        "path": "php/function.func-get-args", 
        "syntax": "array func_get_args ( void )", 
        "type": "Classes and Functions"
    }, 
    "func_num_args": {
        "descr": "Gets the number of arguments passed to the function.", 
        "name": "func_num_args", 
        "params": [], 
        "path": "php/function.func-num-args", 
        "syntax": "int func_num_args ( void )", 
        "type": "Classes and Functions"
    }, 
    "function_exists": {
        "descr": "Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.", 
        "name": "function_exists", 
        "params": [
            {
                "descr": "The function name, as a string.", 
                "name": "function_name"
            }
        ], 
        "path": "php/function.function-exists", 
        "syntax": "bool function_exists ( string $function_name )", 
        "type": "Classes and Functions"
    }, 
    "fwrite": {
        "descr": "", 
        "name": "fwrite", 
        "params": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The string that is to be written.", 
                "name": "string"
            }, 
            {
                "descr": "If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.fwrite", 
        "syntax": "int fwrite ( resource $handle , string $string [, int $length ] )", 
        "type": "File System"
    }, 
    "gc_collect_cycles": {
        "descr": "Forces collection of any existing garbage cycles.", 
        "name": "gc_collect_cycles", 
        "params": [], 
        "path": "php/function.gc-collect-cycles", 
        "syntax": "int gc_collect_cycles ( void )", 
        "type": "Language"
    }, 
    "gc_disable": {
        "descr": "Deactivates the circular reference collector, setting zend.enable_gc to 0.", 
        "name": "gc_disable", 
        "params": [], 
        "path": "php/function.gc-disable", 
        "syntax": "void gc_disable ( void )", 
        "type": "Language"
    }, 
    "gc_enable": {
        "descr": "Activates the circular reference collector, setting zend.enable_gc to 1.", 
        "name": "gc_enable", 
        "params": [], 
        "path": "php/function.gc-enable", 
        "syntax": "void gc_enable ( void )", 
        "type": "Language"
    }, 
    "gc_enabled": {
        "descr": "Returns status of the circular reference collector.", 
        "name": "gc_enabled", 
        "params": [], 
        "path": "php/function.gc-enabled", 
        "syntax": "bool gc_enabled ( void )", 
        "type": "Language"
    }, 
    "gd_info": {
        "descr": "Gets information about the version and capabilities of the installed GD library.", 
        "name": "gd_info", 
        "params": [], 
        "path": "php/function.gd-info", 
        "syntax": "array gd_info ( void )", 
        "type": "Image"
    }, 
    "geoip_continent_code_by_name": {
        "descr": "The geoip_continent_code_by_name() function will return the two letter continent code corresponding to a hostname or an IP address.", 
        "name": "geoip_continent_code_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-continent-code-by-name", 
        "syntax": "string geoip_continent_code_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_country_code3_by_name": {
        "descr": "The geoip_country_code3_by_name() function will return the three letter country code corresponding to a hostname or an IP address.", 
        "name": "geoip_country_code3_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-code3-by-name", 
        "syntax": "string geoip_country_code3_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_country_code_by_name": {
        "descr": "The geoip_country_code_by_name() function will return the two letter country code corresponding to a hostname or an IP address.", 
        "name": "geoip_country_code_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-code-by-name", 
        "syntax": "string geoip_country_code_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_country_name_by_name": {
        "descr": "The geoip_country_name_by_name() function will return the full country name corresponding to a hostname or an IP address.", 
        "name": "geoip_country_name_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-name-by-name", 
        "syntax": "string geoip_country_name_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_database_info": {
        "descr": "The geoip_database_info() function returns the corresponding GeoIP Database version as it is defined inside the binary file.", 
        "name": "geoip_database_info", 
        "params": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-database-info", 
        "syntax": "string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )", 
        "type": "Networking"
    }, 
    "geoip_db_avail": {
        "descr": "The geoip_db_avail() function returns if the corresponding GeoIP Database is available and can be opened on disk.", 
        "name": "geoip_db_avail", 
        "params": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-db-avail", 
        "syntax": "bool geoip_db_avail ( int $database )", 
        "type": "Networking"
    }, 
    "geoip_db_filename": {
        "descr": "The geoip_db_filename() function returns the filename of the corresponding GeoIP Database.", 
        "name": "geoip_db_filename", 
        "params": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-db-filename", 
        "syntax": "string geoip_db_filename ( int $database )", 
        "type": "Networking"
    }, 
    "geoip_db_get_all_info": {
        "descr": "The geoip_db_get_all_info() function will return detailed information as a multi-dimensional array about all the GeoIP database types.", 
        "name": "geoip_db_get_all_info", 
        "params": [], 
        "path": "php/function.geoip-db-get-all-info", 
        "syntax": "array geoip_db_get_all_info ( void )", 
        "type": "Networking"
    }, 
    "geoip_id_by_name": {
        "descr": "The geoip_id_by_name() function will return the Internet connection type corresponding to a hostname or an IP address.", 
        "name": "geoip_id_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose connection type is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-id-by-name", 
        "syntax": "int geoip_id_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_isp_by_name": {
        "descr": "The geoip_isp_by_name() function will return the name of the Internet Service Provider (ISP) that an IP is assigned to.", 
        "name": "geoip_isp_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-isp-by-name", 
        "syntax": "string geoip_isp_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_org_by_name": {
        "descr": "The geoip_org_by_name() function will return the name of the organization that an IP is assigned to.", 
        "name": "geoip_org_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-org-by-name", 
        "syntax": "string geoip_org_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_record_by_name": {
        "descr": "The geoip_record_by_name() function will return the record information corresponding to a hostname or an IP address.", 
        "name": "geoip_record_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose record is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-record-by-name", 
        "syntax": "array geoip_record_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_region_by_name": {
        "descr": "The geoip_region_by_name() function will return the country and region corresponding to a hostname or an IP address.", 
        "name": "geoip_region_by_name", 
        "params": [
            {
                "descr": "The hostname or IP address whose region is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-region-by-name", 
        "syntax": "array geoip_region_by_name ( string $hostname )", 
        "type": "Networking"
    }, 
    "geoip_region_name_by_code": {
        "descr": "The geoip_region_name_by_code() function will return the region name corresponding to a country and region code combo.", 
        "name": "geoip_region_name_by_code", 
        "params": [
            {
                "descr": "The two-letter country code (see geoip_country_code_by_name())", 
                "name": "country_code"
            }, 
            {
                "descr": "The two-letter (or digit) region code (see geoip_region_by_name())", 
                "name": "region_code"
            }
        ], 
        "path": "php/function.geoip-region-name-by-code", 
        "syntax": "string geoip_region_name_by_code ( string $country_code , string $region_code )", 
        "type": "Networking"
    }, 
    "geoip_time_zone_by_country_and_region": {
        "descr": "The geoip_time_zone_by_country_and_region() function will return the time zone corresponding to a country and region code combo.", 
        "name": "geoip_time_zone_by_country_and_region", 
        "params": [
            {
                "descr": "The two-letter country code (see geoip_country_code_by_name())", 
                "name": "country_code"
            }, 
            {
                "descr": "The two-letter (or digit) region code (see geoip_region_by_name())", 
                "name": "region_code"
            }
        ], 
        "path": "php/function.geoip-time-zone-by-country-and-region", 
        "syntax": "string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )", 
        "type": "Networking"
    }, 
    "get_browser": {
        "descr": "Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.", 
        "name": "get_browser", 
        "params": [
            {
                "descr": "The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter. ", 
                "name": "user_agent"
            }, 
            {
                "descr": "If set to TRUE, this function will return an array instead of an object.", 
                "name": "return_array"
            }
        ], 
        "path": "php/function.get-browser", 
        "syntax": "mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )", 
        "type": "Language"
    }, 
    "get_called_class": {
        "descr": "Gets the name of the class the static method is called in.", 
        "name": "get_called_class", 
        "params": [], 
        "path": "php/function.get-called-class", 
        "syntax": "string get_called_class ( void )", 
        "type": "Classes and Functions"
    }, 
    "get_cfg_var": {
        "descr": "Gets the value of a PHP configuration option.", 
        "name": "get_cfg_var", 
        "params": [
            {
                "descr": "The configuration option name.", 
                "name": "option"
            }
        ], 
        "path": "php/function.get-cfg-var", 
        "syntax": "string get_cfg_var ( string $option )", 
        "type": "Language"
    }, 
    "get_class": {
        "descr": "Gets the name of the class of the given object.", 
        "name": "get_class", 
        "params": [
            {
                "descr": "The tested object. This parameter may be omitted when inside a class.", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-class", 
        "syntax": "string get_class ([ object $object = NULL ] )", 
        "type": "Classes and Functions"
    }, 
    "get_class_methods": {
        "descr": "Gets the class methods names.", 
        "name": "get_class_methods", 
        "params": [
            {
                "descr": "The class name or an object instance", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.get-class-methods", 
        "syntax": "array get_class_methods ( mixed $class_name )", 
        "type": "Classes and Functions"
    }, 
    "get_class_vars": {
        "descr": "Get the default properties of the given class.", 
        "name": "get_class_vars", 
        "params": [
            {
                "descr": "The class name", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.get-class-vars", 
        "syntax": "array get_class_vars ( string $class_name )", 
        "type": "Classes and Functions"
    }, 
    "get_current_user": {
        "descr": "", 
        "name": "get_current_user", 
        "params": [], 
        "path": "php/function.get-current-user", 
        "syntax": "string get_current_user ( void )", 
        "type": "Language"
    }, 
    "get_declared_classes": {
        "descr": "Gets the declared classes.", 
        "name": "get_declared_classes", 
        "params": [], 
        "path": "php/function.get-declared-classes", 
        "syntax": "array get_declared_classes ( void )", 
        "type": "Classes and Functions"
    }, 
    "get_declared_interfaces": {
        "descr": "Gets the declared interfaces.", 
        "name": "get_declared_interfaces", 
        "params": [], 
        "path": "php/function.get-declared-interfaces", 
        "syntax": "array get_declared_interfaces ( void )", 
        "type": "Classes and Functions"
    }, 
    "get_declared_traits": {
        "descr": "", 
        "name": "get_declared_traits", 
        "params": [], 
        "path": "php/function.get-declared-traits", 
        "syntax": "array get_declared_traits ( void )", 
        "type": "Classes and Functions"
    }, 
    "get_defined_constants": {
        "descr": "Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.", 
        "name": "get_defined_constants", 
        "params": [
            {
                "descr": "Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension. ", 
                "name": "categorize"
            }
        ], 
        "path": "php/function.get-defined-constants", 
        "syntax": "array get_defined_constants ([ bool $categorize = false ] )", 
        "type": "Language"
    }, 
    "get_defined_functions": {
        "descr": "Gets an array of all defined functions.", 
        "name": "get_defined_functions", 
        "params": [], 
        "path": "php/function.get-defined-functions", 
        "syntax": "array get_defined_functions ( void )", 
        "type": "Classes and Functions"
    }, 
    "get_defined_vars": {
        "descr": "This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.", 
        "name": "get_defined_vars", 
        "params": [], 
        "path": "php/function.get-defined-vars", 
        "syntax": "array get_defined_vars ( void )", 
        "type": "Variables"
    }, 
    "get_extension_funcs": {
        "descr": "This function returns the names of all the functions defined in the module indicated by module_name.", 
        "name": "get_extension_funcs", 
        "params": [
            {
                "descr": "The module name.  Note:  This parameter must be in lowercase.", 
                "name": "module_name"
            }
        ], 
        "path": "php/function.get-extension-funcs", 
        "syntax": "array get_extension_funcs ( string $module_name )", 
        "type": "Language"
    }, 
    "get_headers": {
        "descr": "get_headers() returns an array with the headers sent by the server in response to a HTTP request.", 
        "name": "get_headers", 
        "params": [
            {
                "descr": "The target URL.", 
                "name": "url"
            }, 
            {
                "descr": "If the optional format parameter is set to non-zero, get_headers() parses the response and sets the array's keys.", 
                "name": "format"
            }
        ], 
        "path": "php/function.get-headers", 
        "syntax": "array get_headers ( string $url [, int $format = 0 ] )", 
        "type": "Networking"
    }, 
    "get_html_translation_table": {
        "descr": "get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities().", 
        "name": "get_html_translation_table", 
        "params": [
            {
                "descr": "Which table to return. Either HTML_ENTITIES or HTML_SPECIALCHARS.", 
                "name": "table"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify which quotes the table will contain as well as which document type the table is for. ", 
                "name": "flags"
            }, 
            {
                "descr": "Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.get-html-translation-table", 
        "syntax": "array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )", 
        "type": "String"
    }, 
    "get_include_path": {
        "descr": "", 
        "name": "get_include_path", 
        "params": [], 
        "path": "php/function.get-include-path", 
        "syntax": "string get_include_path ( void )", 
        "type": "Language"
    }, 
    "get_included_files": {
        "descr": "Gets the names of all files that have been included using include, include_once, require or require_once.", 
        "name": "get_included_files", 
        "params": [], 
        "path": "php/function.get-included-files", 
        "syntax": "array get_included_files ( void )", 
        "type": "Language"
    }, 
    "get_loaded_extensions": {
        "descr": "This function returns the names of all the modules compiled and loaded in the PHP interpreter.", 
        "name": "get_loaded_extensions", 
        "params": [
            {
                "descr": "Only return Zend extensions, if not then regular extensions, like mysqli are listed. ", 
                "name": "zend_extensions"
            }
        ], 
        "path": "php/function.get-loaded-extensions", 
        "syntax": "array get_loaded_extensions ([ bool $zend_extensions = false ] )", 
        "type": "Language"
    }, 
    "get_magic_quotes_gpc": {
        "descr": "Returns the current configuration setting of magic_quotes_gpc", 
        "name": "get_magic_quotes_gpc", 
        "params": [], 
        "path": "php/function.get-magic-quotes-gpc", 
        "syntax": "bool get_magic_quotes_gpc ( void )", 
        "type": "Language"
    }, 
    "get_magic_quotes_runtime": {
        "descr": "", 
        "name": "get_magic_quotes_runtime", 
        "params": [], 
        "path": "php/function.get-magic-quotes-runtime", 
        "syntax": "bool get_magic_quotes_runtime ( void )", 
        "type": "Language"
    }, 
    "get_meta_tags": {
        "descr": "Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.", 
        "name": "get_meta_tags", 
        "params": [
            {
                "descr": "The path to the HTML file, as a string. ", 
                "name": "filename"
            }, 
            {
                "descr": "Setting use_include_path to TRUE will result in PHP trying to open the file along the standard include path as per the include_path directive. ", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.get-meta-tags", 
        "syntax": "array get_meta_tags ( string $filename [, bool $use_include_path = false ] )", 
        "type": "Networking"
    }, 
    "get_object_vars": {
        "descr": "Gets the accessible non-static properties of the given object according to scope.", 
        "name": "get_object_vars", 
        "params": [
            {
                "descr": "An object instance.", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-object-vars", 
        "syntax": "array get_object_vars ( object $object )", 
        "type": "Classes and Functions"
    }, 
    "get_parent_class": {
        "descr": "Retrieves the parent class name for object or class.", 
        "name": "get_parent_class", 
        "params": [
            {
                "descr": "The tested object or class name", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-parent-class", 
        "syntax": "string get_parent_class ([ mixed $object ] )", 
        "type": "Classes and Functions"
    }, 
    "get_resource_type": {
        "descr": "This function gets the type of the given resource.", 
        "name": "get_resource_type", 
        "params": [
            {
                "descr": "The evaluated resource handle.", 
                "name": "handle"
            }
        ], 
        "path": "php/function.get-resource-type", 
        "syntax": "string get_resource_type ( resource $handle )", 
        "type": "Variables"
    }, 
    "getallheaders": {
        "descr": "Fetches all HTTP headers from the current request.", 
        "name": "getallheaders", 
        "params": [], 
        "path": "php/function.getallheaders", 
        "syntax": "array getallheaders ( void )", 
        "type": "Apache"
    }, 
    "getcwd": {
        "descr": "Gets the current working directory.", 
        "name": "getcwd", 
        "params": [], 
        "path": "php/function.getcwd", 
        "syntax": "string getcwd ( void )", 
        "type": "File System"
    }, 
    "getdate": {
        "descr": "Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.", 
        "name": "getdate", 
        "params": [
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.getdate", 
        "syntax": "array getdate ([ int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "getenv": {
        "descr": "Gets the value of an environment variable.", 
        "name": "getenv", 
        "params": [
            {
                "descr": "The variable name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.getenv", 
        "syntax": "string getenv ( string $varname )", 
        "type": "Language"
    }, 
    "gethostbyaddr": {
        "descr": "Returns the host name of the Internet host specified by ip_address.", 
        "name": "gethostbyaddr", 
        "params": [
            {
                "descr": "The host IP address.", 
                "name": "ip_address"
            }
        ], 
        "path": "php/function.gethostbyaddr", 
        "syntax": "string gethostbyaddr ( string $ip_address )", 
        "type": "Networking"
    }, 
    "gethostbyname": {
        "descr": "Returns the IPv4 address of the Internet host specified by hostname.", 
        "name": "gethostbyname", 
        "params": [
            {
                "descr": "The host name.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.gethostbyname", 
        "syntax": "string gethostbyname ( string $hostname )", 
        "type": "Networking"
    }, 
    "gethostbynamel": {
        "descr": "Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.", 
        "name": "gethostbynamel", 
        "params": [
            {
                "descr": "The host name.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.gethostbynamel", 
        "syntax": "array gethostbynamel ( string $hostname )", 
        "type": "Networking"
    }, 
    "gethostname": {
        "descr": "gethostname() gets the standard host name for the local machine.", 
        "name": "gethostname", 
        "params": [], 
        "path": "php/function.gethostname", 
        "syntax": "string gethostname ( void )", 
        "type": "Networking"
    }, 
    "getimagesize": {
        "descr": "The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type.", 
        "name": "getimagesize", 
        "params": [
            {
                "descr": "This parameter specifies the file you wish to retrieve information about. ", 
                "name": "filename"
            }, 
            {
                "descr": "This optional parameter allows you to extract some extended information from the image file. ", 
                "name": "imageinfo"
            }
        ], 
        "path": "php/function.getimagesize", 
        "syntax": "array getimagesize ( string $filename [, array &$imageinfo ] )", 
        "type": "Image"
    }, 
    "getimagesizefromstring": {
        "descr": "Identical to getimagesize() except that getimagesizefromstring() accepts a string instead of a file name as the first parameter.", 
        "name": "getimagesizefromstring", 
        "params": [
            {
                "descr": "The image data, as a string.", 
                "name": "imagedata"
            }, 
            {
                "descr": "See getimagesize().", 
                "name": "imageinfo"
            }
        ], 
        "path": "php/function.getimagesizefromstring", 
        "syntax": "array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )", 
        "type": "Image"
    }, 
    "getlastmod": {
        "descr": "Gets the time of the last modification of the main script of execution.", 
        "name": "getlastmod", 
        "params": [], 
        "path": "php/function.getlastmod", 
        "syntax": "int getlastmod ( void )", 
        "type": "Language"
    }, 
    "getmxrr": {
        "descr": "Searches DNS for MX records corresponding to hostname.", 
        "name": "getmxrr", 
        "params": [
            {
                "descr": "The Internet host name.", 
                "name": "hostname"
            }, 
            {
                "descr": "A list of the MX records found is placed into the array mxhosts.", 
                "name": "mxhosts"
            }, 
            {
                "descr": "If the weight array is given, it will be filled with the weight information gathered.", 
                "name": "weight"
            }
        ], 
        "path": "php/function.getmxrr", 
        "syntax": "bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )", 
        "type": "Networking"
    }, 
    "getmygid": {
        "descr": "", 
        "name": "getmygid", 
        "params": [], 
        "path": "php/function.getmygid", 
        "syntax": "int getmygid ( void )", 
        "type": "Language"
    }, 
    "getmyinode": {
        "descr": "Gets the inode of the current script.", 
        "name": "getmyinode", 
        "params": [], 
        "path": "php/function.getmyinode", 
        "syntax": "int getmyinode ( void )", 
        "type": "Language"
    }, 
    "getmypid": {
        "descr": "Gets the current PHP process ID.", 
        "name": "getmypid", 
        "params": [], 
        "path": "php/function.getmypid", 
        "syntax": "int getmypid ( void )", 
        "type": "Language"
    }, 
    "getmyuid": {
        "descr": "", 
        "name": "getmyuid", 
        "params": [], 
        "path": "php/function.getmyuid", 
        "syntax": "int getmyuid ( void )", 
        "type": "Language"
    }, 
    "getopt": {
        "descr": "Parses options passed to the script.", 
        "name": "getopt", 
        "params": [
            {
                "descr": "Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-). ", 
                "name": "options"
            }, 
            {
                "descr": "An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--). ", 
                "name": "longopts"
            }
        ], 
        "path": "php/function.getopt", 
        "syntax": "array getopt ( string $options [, array $longopts ] )", 
        "type": "Language"
    }, 
    "getprotobyname": {
        "descr": "getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.", 
        "name": "getprotobyname", 
        "params": [
            {
                "descr": "The protocol name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.getprotobyname", 
        "syntax": "int getprotobyname ( string $name )", 
        "type": "Networking"
    }, 
    "getprotobynumber": {
        "descr": "getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.", 
        "name": "getprotobynumber", 
        "params": [
            {
                "descr": "The protocol number.", 
                "name": "number"
            }
        ], 
        "path": "php/function.getprotobynumber", 
        "syntax": "string getprotobynumber ( int $number )", 
        "type": "Networking"
    }, 
    "getrandmax": {
        "descr": "", 
        "name": "getrandmax", 
        "params": [], 
        "path": "php/function.getrandmax", 
        "syntax": "int getrandmax ( void )", 
        "type": "Mathematics"
    }, 
    "getrusage": {
        "descr": "This is an interface to getrusage(2). It gets data returned from the system call.", 
        "name": "getrusage", 
        "params": [
            {
                "descr": "If who is 1, getrusage will be called with RUSAGE_CHILDREN.", 
                "name": "who"
            }
        ], 
        "path": "php/function.getrusage", 
        "syntax": "array getrusage ([ int $who = 0 ] )", 
        "type": "Language"
    }, 
    "getservbyname": {
        "descr": "getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.", 
        "name": "getservbyname", 
        "params": [
            {
                "descr": "The Internet service name, as a string.", 
                "name": "service"
            }, 
            {
                "descr": "protocol is either \"tcp\" or \"udp\" (in lowercase).", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.getservbyname", 
        "syntax": "int getservbyname ( string $service , string $protocol )", 
        "type": "Networking"
    }, 
    "getservbyport": {
        "descr": "getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.", 
        "name": "getservbyport", 
        "params": [
            {
                "descr": "The port number.", 
                "name": "port"
            }, 
            {
                "descr": "protocol is either \"tcp\" or \"udp\" (in lowercase).", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.getservbyport", 
        "syntax": "string getservbyport ( int $port , string $protocol )", 
        "type": "Networking"
    }, 
    "gettext": {
        "descr": "Looks up a message in the current domain.", 
        "name": "gettext", 
        "params": [
            {
                "descr": "The message being translated.", 
                "name": "message"
            }
        ], 
        "path": "php/function.gettext", 
        "syntax": "string gettext ( string $message )", 
        "type": "Encoding"
    }, 
    "gettimeofday": {
        "descr": "This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.", 
        "name": "gettimeofday", 
        "params": [
            {
                "descr": "When set to TRUE, a float instead of an array is returned.", 
                "name": "return_float"
            }
        ], 
        "path": "php/function.gettimeofday", 
        "syntax": "mixed gettimeofday ([ bool $return_float = false ] )", 
        "type": "Date and Time"
    }, 
    "gettype": {
        "descr": "Returns the type of the PHP variable var. For type checking, use is_* functions.", 
        "name": "gettype", 
        "params": [
            {
                "descr": "The variable being type checked.", 
                "name": "var"
            }
        ], 
        "path": "php/function.gettype", 
        "syntax": "string gettype ( mixed $var )", 
        "type": "Variables"
    }, 
    "glob": {
        "descr": "The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.", 
        "name": "glob", 
        "params": [
            {
                "descr": "The pattern. No tilde expansion or parameter substitution is done.", 
                "name": "pattern"
            }, 
            {
                "descr": "Valid flags:   GLOB_MARK - Adds a slash to each directory returned     GLOB_NOSORT - Return files as they appear in the directory (no sorting)     GLOB_NOCHECK - Return the search pattern if no files matching it were found     GLOB_NOESCAPE - Backslashes do not quote metacharacters     GLOB_BRACE - Expands {a,b,c} to match 'a', 'b', or 'c'     GLOB_ONLYDIR - Return only directory entries which match the pattern     GLOB_ERR - Stop on read errors (like unreadable directories), by default errors are ignored.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.glob", 
        "syntax": "array glob ( string $pattern [, int $flags = 0 ] )", 
        "type": "File System"
    }, 
    "gmdate": {
        "descr": "Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).", 
        "name": "gmdate", 
        "params": [
            {
                "descr": "The format of the outputted date string. ", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.gmdate", 
        "syntax": "string gmdate ( string $format [, int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "gmmktime": {
        "descr": "Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.", 
        "name": "gmmktime", 
        "params": [
            {
                "descr": "The number of the hour relative to the start of the day determined by month, day and year. ", 
                "name": "hour"
            }, 
            {
                "descr": "The number of the minute relative to the start of the hour. ", 
                "name": "minute"
            }, 
            {
                "descr": "The number of seconds relative to the start of the minute. ", 
                "name": "second"
            }, 
            {
                "descr": "The number of the month relative to the end of the previous year. ", 
                "name": "month"
            }, 
            {
                "descr": "The number of the day relative to the end of the previous month. ", 
                "name": "day"
            }, 
            {
                "descr": "The year", 
                "name": "year"
            }, 
            {
                "descr": "Parameters always represent a GMT date so is_dst doesn't influence the result.", 
                "name": "is_dst"
            }
        ], 
        "path": "php/function.gmmktime", 
        "syntax": "int gmmktime ([ int $hour = gmdate(\"H\") [, int $minute = gmdate(\"i\") [, int $second = gmdate(\"s\") [, int $month = gmdate(\"n\") [, int $day = gmdate(\"j\") [, int $year = gmdate(\"Y\") [, int $is_dst = -1 ]]]]]]] )", 
        "type": "Date and Time"
    }, 
    "gmstrftime": {
        "descr": "Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\", while the second prints \"Jan 01 1999 01:00:00\".", 
        "name": "gmstrftime", 
        "params": [
            {
                "descr": "See description in strftime().", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.gmstrftime", 
        "syntax": "string gmstrftime ( string $format [, int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "grapheme_extract": {
        "descr": "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.", 
        "name": "grapheme_extract", 
        "params": [
            {
                "descr": "String to search.", 
                "name": "haystack"
            }, 
            {
                "descr": "Maximum number items - based on the $extract_type - to return.", 
                "name": "size"
            }, 
            {
                "descr": "Defines the type of units referred to by the $size parameter:  GRAPHEME_EXTR_COUNT (default) - $size is the number of default grapheme clusters to extract. ", 
                "name": "extract_type"
            }, 
            {
                "descr": "Starting position in $haystack in bytes - if given, it must be zero or a positive value that is less than or equal to the length of $haystack in bytes. ", 
                "name": "start"
            }, 
            {
                "descr": "Reference to a value that will be set to the next starting position. ", 
                "name": "next"
            }
        ], 
        "path": "php/function.grapheme-extract", 
        "syntax": "string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )", 
        "type": "Internationalization"
    }, 
    "grapheme_stripos": {
        "descr": "Find position (in grapheme units) of first occurrence of a case-insensitive string", 
        "name": "grapheme_stripos", 
        "params": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-stripos", 
        "syntax": "int grapheme_stripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_stristr": {
        "descr": "Returns part of haystack string starting from and including the first occurrence of case-insensitive needle to the end of haystack.", 
        "name": "grapheme_stristr", 
        "params": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.grapheme-stristr", 
        "syntax": "string grapheme_stristr ( string $haystack , string $needle [, bool $before_needle = false ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_strlen": {
        "descr": "Get string length in grapheme units (not bytes or characters)", 
        "name": "grapheme_strlen", 
        "params": [
            {
                "descr": "The string being measured for length. ", 
                "name": "input"
            }
        ], 
        "path": "php/function.grapheme-strlen", 
        "syntax": "int grapheme_strlen ( string $input )", 
        "type": "Internationalization"
    }, 
    "grapheme_strpos": {
        "descr": "Find position (in grapheme units) of first occurrence of a string", 
        "name": "grapheme_strpos", 
        "params": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strpos", 
        "syntax": "int grapheme_strpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_strripos": {
        "descr": "Find position (in grapheme units) of last occurrence of a case-insensitive string", 
        "name": "grapheme_strripos", 
        "params": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strripos", 
        "syntax": "int grapheme_strripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_strrpos": {
        "descr": "Find position (in grapheme units) of last occurrence of a string", 
        "name": "grapheme_strrpos", 
        "params": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strrpos", 
        "syntax": "int grapheme_strrpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_strstr": {
        "descr": "Returns part of haystack string from the first occurrence of needle to the end of haystack (including the needle).", 
        "name": "grapheme_strstr", 
        "params": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.grapheme-strstr", 
        "syntax": "string grapheme_strstr ( string $haystack , string $needle [, bool $before_needle = false ] )", 
        "type": "Internationalization"
    }, 
    "grapheme_substr": {
        "descr": "Return part of a string", 
        "name": "grapheme_substr", 
        "params": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "string"
            }, 
            {
                "descr": "Start position in default grapheme units. ", 
                "name": "start"
            }, 
            {
                "descr": "Length in grapheme units. If $length is given and is positive, the string returned will contain at most $length grapheme units beginning from $start (depending on the length of string). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.grapheme-substr", 
        "syntax": "int grapheme_substr ( string $string , int $start [, int $length ] )", 
        "type": "Internationalization"
    }, 
    "gzclose": {
        "descr": "Closes the given gz-file pointer.", 
        "name": "gzclose", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzclose", 
        "syntax": "bool gzclose ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzcompress": {
        "descr": "This function compress the given string using the ZLIB data format.", 
        "name": "gzcompress", 
        "params": [
            {
                "descr": "The data to compress.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "One of ZLIB_ENCODING_* constants.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.gzcompress", 
        "syntax": "string gzcompress ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] )", 
        "type": "Compression"
    }, 
    "gzdecode": {
        "descr": "This function returns a decoded version of the input data.", 
        "name": "gzdecode", 
        "params": [
            {
                "descr": "The data to decode, encoded by gzencode().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzdecode", 
        "syntax": "string gzdecode ( string $data [, int $length ] )", 
        "type": "Compression"
    }, 
    "gzdeflate": {
        "descr": "This function compresses the given string using the DEFLATE data format.", 
        "name": "gzdeflate", 
        "params": [
            {
                "descr": "The data to deflate.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "One of ZLIB_ENCODING_* constants.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.gzdeflate", 
        "syntax": "string gzdeflate ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] )", 
        "type": "Compression"
    }, 
    "gzencode": {
        "descr": "This function returns a compressed version of the input data compatible with the output of the gzip program.", 
        "name": "gzencode", 
        "params": [
            {
                "descr": "The data to encode.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "The encoding mode. Can be FORCE_GZIP (the default) or FORCE_DEFLATE. ", 
                "name": "encoding_mode"
            }
        ], 
        "path": "php/function.gzencode", 
        "syntax": "string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )", 
        "type": "Compression"
    }, 
    "gzeof": {
        "descr": "Tests the given GZ file pointer for EOF.", 
        "name": "gzeof", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzeof", 
        "syntax": "int gzeof ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzfile": {
        "descr": "This function is identical to readgzfile(), except that it returns the file in an array.", 
        "name": "gzfile", 
        "params": [
            {
                "descr": "The file name.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.gzfile", 
        "syntax": "array gzfile ( string $filename [, int $use_include_path = 0 ] )", 
        "type": "Compression"
    }, 
    "gzgetc": {
        "descr": "Returns a string containing a single (uncompressed) character read from the given gz-file pointer.", 
        "name": "gzgetc", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzgetc", 
        "syntax": "string gzgetc ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzgets": {
        "descr": "Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).", 
        "name": "gzgets", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The length of data to get.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzgets", 
        "syntax": "string gzgets ( resource $zp , int $length )", 
        "type": "Compression"
    }, 
    "gzgetss": {
        "descr": "Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.", 
        "name": "gzgetss", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The length of data to get.", 
                "name": "length"
            }, 
            {
                "descr": "You can use this optional parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.gzgetss", 
        "syntax": "string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )", 
        "type": "Compression"
    }, 
    "gzinflate": {
        "descr": "This function inflates a deflated string.", 
        "name": "gzinflate", 
        "params": [
            {
                "descr": "The data compressed by gzdeflate().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzinflate", 
        "syntax": "string gzinflate ( string $data [, int $length = 0 ] )", 
        "type": "Compression"
    }, 
    "gzopen": {
        "descr": "Opens a gzip (.gz) file for reading or writing.", 
        "name": "gzopen", 
        "params": [
            {
                "descr": "The file name.", 
                "name": "filename"
            }, 
            {
                "descr": "As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as in wb6f, h for Huffman only compression as in wb1h. ", 
                "name": "mode"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.gzopen", 
        "syntax": "resource gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] )", 
        "type": "Compression"
    }, 
    "gzpassthru": {
        "descr": "Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.", 
        "name": "gzpassthru", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzpassthru", 
        "syntax": "int gzpassthru ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzread": {
        "descr": "gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.", 
        "name": "gzread", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The number of bytes to read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzread", 
        "syntax": "string gzread ( resource $zp , int $length )", 
        "type": "Compression"
    }, 
    "gzrewind": {
        "descr": "Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.", 
        "name": "gzrewind", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzrewind", 
        "syntax": "bool gzrewind ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzseek": {
        "descr": "Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET).", 
        "name": "gzseek", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The seeked offset.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/function.gzseek", 
        "syntax": "int gzseek ( resource $zp , int $offset [, int $whence = SEEK_SET ] )", 
        "type": "Compression"
    }, 
    "gztell": {
        "descr": "Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.", 
        "name": "gztell", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gztell", 
        "syntax": "int gztell ( resource $zp )", 
        "type": "Compression"
    }, 
    "gzuncompress": {
        "descr": "This function uncompress a compressed string.", 
        "name": "gzuncompress", 
        "params": [
            {
                "descr": "The data compressed by gzcompress().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzuncompress", 
        "syntax": "string gzuncompress ( string $data [, int $length = 0 ] )", 
        "type": "Compression"
    }, 
    "gzwrite": {
        "descr": "gzwrite() writes the contents of string to the given gz-file.", 
        "name": "gzwrite", 
        "params": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The string to write.", 
                "name": "string"
            }, 
            {
                "descr": "The number of uncompressed bytes to write. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzwrite", 
        "syntax": "int gzwrite ( resource $zp , string $string [, int $length ] )", 
        "type": "Compression"
    }, 
    "hash": {
        "descr": "", 
        "name": "hash", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Message to be hashed.", 
                "name": "data"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash", 
        "syntax": "string hash ( string $algo , string $data [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "hash_algos": {
        "descr": "", 
        "name": "hash_algos", 
        "params": [], 
        "path": "php/function.hash-algos", 
        "syntax": "array hash_algos ( void )", 
        "type": "Cryptography"
    }, 
    "hash_copy": {
        "descr": "", 
        "name": "hash_copy", 
        "params": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }
        ], 
        "path": "php/function.hash-copy", 
        "syntax": "resource hash_copy ( resource $context )", 
        "type": "Cryptography"
    }, 
    "hash_file": {
        "descr": "", 
        "name": "hash_file", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-file", 
        "syntax": "string hash_file ( string $algo , string $filename [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "hash_final": {
        "descr": "", 
        "name": "hash_final", 
        "params": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-final", 
        "syntax": "string hash_final ( resource $context [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "hash_hmac": {
        "descr": "", 
        "name": "hash_hmac", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Message to be hashed.", 
                "name": "data"
            }, 
            {
                "descr": "Shared secret key used for generating the HMAC variant of the message digest.", 
                "name": "key"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-hmac", 
        "syntax": "string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "hash_hmac_file": {
        "descr": "", 
        "name": "hash_hmac_file", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "Shared secret key used for generating the HMAC variant of the message digest.", 
                "name": "key"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-hmac-file", 
        "syntax": "string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "hash_init": {
        "descr": "", 
        "name": "hash_init", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Optional settings for hash generation, currently supports only one option: HASH_HMAC. ", 
                "name": "options"
            }, 
            {
                "descr": "When HASH_HMAC is specified for options, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter.", 
                "name": "key"
            }
        ], 
        "path": "php/function.hash-init", 
        "syntax": "resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )", 
        "type": "Cryptography"
    }, 
    "hash_pbkdf2": {
        "descr": "", 
        "name": "hash_pbkdf2", 
        "params": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "The password to use for the derivation.", 
                "name": "password"
            }, 
            {
                "descr": "The salt to use for the derivation. ", 
                "name": "salt"
            }, 
            {
                "descr": "The number of internal iterations to perform for the derivation.", 
                "name": "iterations"
            }, 
            {
                "descr": "The length of the output string. ", 
                "name": "length"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-pbkdf2", 
        "syntax": "string hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = false ]] )", 
        "type": "Cryptography"
    }, 
    "hash_update": {
        "descr": "", 
        "name": "hash_update", 
        "params": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "Message to be included in the hash digest.", 
                "name": "data"
            }
        ], 
        "path": "php/function.hash-update", 
        "syntax": "bool hash_update ( resource $context , string $data )", 
        "type": "Cryptography"
    }, 
    "hash_update_file": {
        "descr": "", 
        "name": "hash_update_file", 
        "params": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "hcontext"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "Stream context as returned by stream_context_create().", 
                "name": "scontext"
            }
        ], 
        "path": "php/function.hash-update-file", 
        "syntax": "bool hash_update_file ( resource $hcontext , string $filename [, resource $scontext = NULL ] )", 
        "type": "Cryptography"
    }, 
    "hash_update_stream": {
        "descr": "", 
        "name": "hash_update_stream", 
        "params": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "Open file handle as returned by any stream creation function.", 
                "name": "handle"
            }, 
            {
                "descr": "Maximum number of characters to copy from handle into the hashing context.", 
                "name": "length"
            }
        ], 
        "path": "php/function.hash-update-stream", 
        "syntax": "int hash_update_stream ( resource $context , resource $handle [, int $length = -1 ] )", 
        "type": "Cryptography"
    }, 
    "header": {
        "descr": "header() is used to send a raw HTTP header. See the \u00bb HTTP/1.1 specification for more information on HTTP headers.", 
        "name": "header", 
        "params": [
            {
                "descr": "The header string.   There are two special-case header calls. ", 
                "name": "string"
            }, 
            {
                "descr": "The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type. ", 
                "name": "replace"
            }, 
            {
                "descr": "Forces the HTTP response code to the specified value. ", 
                "name": "http_response_code"
            }
        ], 
        "path": "php/function.header", 
        "syntax": "void header ( string $string [, bool $replace = true [, int $http_response_code ]] )", 
        "type": "Networking"
    }, 
    "header_register_callback": {
        "descr": "Registers a function that will be called when PHP starts sending output.", 
        "name": "header_register_callback", 
        "params": [
            {
                "descr": "Function called just before the headers are sent. ", 
                "name": "callback"
            }
        ], 
        "path": "php/function.header-register-callback", 
        "syntax": "bool header_register_callback ( callable $callback )", 
        "type": "Networking"
    }, 
    "header_remove": {
        "descr": "Removes an HTTP header previously set using header().", 
        "name": "header_remove", 
        "params": [
            {
                "descr": "The header name to be removed.  Note:  This parameter is case-insensitive.", 
                "name": "name"
            }
        ], 
        "path": "php/function.header-remove", 
        "syntax": "void header_remove ([ string $name ] )", 
        "type": "Networking"
    }, 
    "headers_list": {
        "descr": "headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent().", 
        "name": "headers_list", 
        "params": [], 
        "path": "php/function.headers-list", 
        "syntax": "array headers_list ( void )", 
        "type": "Networking"
    }, 
    "headers_sent": {
        "descr": "Checks if or where headers have been sent.", 
        "name": "headers_sent", 
        "params": [
            {
                "descr": "If the optional file and line parameters are set, headers_sent() will put the PHP source file name and line number where output started in the file and line variables.", 
                "name": "file"
            }, 
            {
                "descr": "The line number where the output started.", 
                "name": "line"
            }
        ], 
        "path": "php/function.headers-sent", 
        "syntax": "bool headers_sent ([ string &$file [, int &$line ]] )", 
        "type": "Networking"
    }, 
    "hebrev": {
        "descr": "Converts logical Hebrew text to visual text.", 
        "name": "hebrev", 
        "params": [
            {
                "descr": "A Hebrew input string.", 
                "name": "hebrew_text"
            }, 
            {
                "descr": "This optional parameter indicates maximum number of characters per line that will be returned.", 
                "name": "max_chars_per_line"
            }
        ], 
        "path": "php/function.hebrev", 
        "syntax": "string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )", 
        "type": "String"
    }, 
    "hebrevc": {
        "descr": "This function is similar to hebrev() with the difference that it converts newlines (\\n) to \"<br>\\n\".", 
        "name": "hebrevc", 
        "params": [
            {
                "descr": "A Hebrew input string.", 
                "name": "hebrew_text"
            }, 
            {
                "descr": "This optional parameter indicates maximum number of characters per line that will be returned.", 
                "name": "max_chars_per_line"
            }
        ], 
        "path": "php/function.hebrevc", 
        "syntax": "string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )", 
        "type": "String"
    }, 
    "hex2bin": {
        "descr": "Decodes a hexadecimally encoded binary string.", 
        "name": "hex2bin", 
        "params": [
            {
                "descr": "Hexadecimal representation of data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.hex2bin", 
        "syntax": "string hex2bin ( string $data )", 
        "type": "String"
    }, 
    "hexdec": {
        "descr": "Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.", 
        "name": "hexdec", 
        "params": [
            {
                "descr": "The hexadecimal string to convert", 
                "name": "hex_string"
            }
        ], 
        "path": "php/function.hexdec", 
        "syntax": "number hexdec ( string $hex_string )", 
        "type": "Mathematics"
    }, 
    "highlight_file": {
        "descr": "Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.", 
        "name": "highlight_file", 
        "params": [
            {
                "descr": "Path to the PHP file to be highlighted.", 
                "name": "filename"
            }, 
            {
                "descr": "Set this parameter to TRUE to make this function return the highlighted code.", 
                "name": "return"
            }
        ], 
        "path": "php/function.highlight-file", 
        "syntax": "mixed highlight_file ( string $filename [, bool $return = false ] )", 
        "type": "Language"
    }, 
    "highlight_string": {
        "descr": "", 
        "name": "highlight_string", 
        "params": [
            {
                "descr": "The PHP code to be highlighted. ", 
                "name": "str"
            }, 
            {
                "descr": "Set this parameter to TRUE to make this function return the highlighted code.", 
                "name": "return"
            }
        ], 
        "path": "php/function.highlight-string", 
        "syntax": "mixed highlight_string ( string $str [, bool $return = false ] )", 
        "type": "Language"
    }, 
    "html_entity_decode": {
        "descr": "html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities in the string to their applicable characters.", 
        "name": "html_entity_decode", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. ", 
                "name": "flags"
            }, 
            {
                "descr": "Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.html-entity-decode", 
        "syntax": "string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )", 
        "type": "String"
    }, 
    "htmlentities": {
        "descr": "This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.", 
        "name": "htmlentities", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. ", 
                "name": "flags"
            }, 
            {
                "descr": "Like htmlspecialchars(), htmlentities() takes an optional third argument encoding which defines encoding used in conversion. ", 
                "name": "encoding"
            }, 
            {
                "descr": "When double_encode is turned off PHP will not encode existing html entities. ", 
                "name": "double_encode"
            }
        ], 
        "path": "php/function.htmlentities", 
        "syntax": "string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )", 
        "type": "String"
    }, 
    "htmlspecialchars": {
        "descr": "Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use htmlentities() instead.", 
        "name": "htmlspecialchars", 
        "params": [
            {
                "descr": "The string being converted.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. ", 
                "name": "flags"
            }, 
            {
                "descr": "Defines encoding used in conversion. ", 
                "name": "encoding"
            }, 
            {
                "descr": "When double_encode is turned off PHP will not encode existing html entities, the default is to convert everything.", 
                "name": "double_encode"
            }
        ], 
        "path": "php/function.htmlspecialchars", 
        "syntax": "string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )", 
        "type": "String"
    }, 
    "htmlspecialchars_decode": {
        "descr": "This function is the opposite of htmlspecialchars(). It converts special HTML entities back to characters.", 
        "name": "htmlspecialchars_decode", 
        "params": [
            {
                "descr": "The string to decode.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.htmlspecialchars-decode", 
        "syntax": "string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )", 
        "type": "String"
    }, 
    "http_build_cookie": {
        "descr": "Build a cookie string from an array/object like returned by http_parse_cookie().", 
        "name": "http_build_cookie", 
        "params": [
            {
                "descr": "a cookie list like returned from http_parse_cookie()", 
                "name": "cookie"
            }
        ], 
        "path": "php/function.http-build-cookie", 
        "syntax": "string http_build_cookie ( array $cookie )", 
        "type": "HTTP"
    }, 
    "http_build_query": {
        "descr": "Generates a URL-encoded query string from the associative (or indexed) array provided.", 
        "name": "http_build_query", 
        "params": [
            {
                "descr": "May be an array or object containing properties. ", 
                "name": "query_data"
            }, 
            {
                "descr": "If numeric indices are used in the base array and this parameter is provided, it will be prepended to the numeric index for elements in the base array only. ", 
                "name": "numeric_prefix"
            }, 
            {
                "descr": "arg_separator.output is used to separate arguments, unless this parameter is specified, and is then used.", 
                "name": "arg_separator"
            }, 
            {
                "descr": "By default, PHP_QUERY_RFC1738.   If enc_type is PHP_QUERY_RFC1738, then encoding is performed per \u00bb RFC 1738 and the application/x-www-form-urlencoded media type, which implies that spaces are encoded as plus (+) signs.   If enc_type is PHP_QUERY_RFC3986, then encoding is performed according to \u00bb RFC 3986, and spaces will be percent encoded (%20).", 
                "name": "enc_type"
            }
        ], 
        "path": "php/function.http-build-query", 
        "syntax": "string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )", 
        "type": "Networking"
    }, 
    "http_build_str": {
        "descr": "Builds a query string from an array of query variables. In effect, this function is the opposite of parse_str().", 
        "name": "http_build_str", 
        "params": [
            {
                "descr": "associative array of query string parameters", 
                "name": "query"
            }, 
            {
                "descr": "top level prefix", 
                "name": "prefix"
            }, 
            {
                "descr": "argument separator to use (by default the INI setting arg_separator.output will be used, or \"&\" if neither is set", 
                "name": "arg_separator"
            }
        ], 
        "path": "php/function.http-build-str", 
        "syntax": "string http_build_str ( array $query [, string $prefix [, string $arg_separator = ini_get(\"arg_separator.output\") ]] )", 
        "type": "HTTP"
    }, 
    "http_build_url": {
        "descr": "Build a URL.", 
        "name": "http_build_url", 
        "params": [
            {
                "descr": "(part(s) of) an URL in form of a string or associative array like parse_url() returns", 
                "name": "url"
            }, 
            {
                "descr": "same as the first argument", 
                "name": "parts"
            }, 
            {
                "descr": "a bitmask of binary or'ed HTTP_URL constants; HTTP_URL_REPLACE is the default", 
                "name": "flags"
            }, 
            {
                "descr": "if set, it will be filled with the parts of the composed url like parse_url() would return", 
                "name": "new_url"
            }
        ], 
        "path": "php/function.http-build-url", 
        "syntax": "string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )", 
        "type": "HTTP"
    }, 
    "http_cache_etag": {
        "descr": "Attempts to cache the sent entity by its ETag, either supplied or generated by the hash algorithm specified by the INI setting http.etag.mode.", 
        "name": "http_cache_etag", 
        "params": [
            {
                "descr": "custom ETag", 
                "name": "etag"
            }
        ], 
        "path": "php/function.http-cache-etag", 
        "syntax": "bool http_cache_etag ([ string $etag ] )", 
        "type": "HTTP"
    }, 
    "http_cache_last_modified": {
        "descr": "Attempts to cache the sent entity by its last modification date.", 
        "name": "http_cache_last_modified", 
        "params": [
            {
                "descr": "Unix timestamp", 
                "name": "timestamp_or_expires"
            }
        ], 
        "path": "php/function.http-cache-last-modified", 
        "syntax": "bool http_cache_last_modified ([ int $timestamp_or_expires ] )", 
        "type": "HTTP"
    }, 
    "http_chunked_decode": {
        "descr": "Decodes a string which is HTTP-chunked encoded.", 
        "name": "http_chunked_decode", 
        "params": [
            {
                "descr": "chunked encoded string", 
                "name": "encoded"
            }
        ], 
        "path": "php/function.http-chunked-decode", 
        "syntax": "string http_chunked_decode ( string $encoded )", 
        "type": "HTTP"
    }, 
    "http_date": {
        "descr": "Compose a valid HTTP date regarding RFC 1123 looking like: Wed, 22 Dec 2004 11:34:47 GMT.", 
        "name": "http_date", 
        "params": [
            {
                "descr": "Unix timestamp; current time if omitted", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.http-date", 
        "syntax": "string http_date ([ int $timestamp ] )", 
        "type": "HTTP"
    }, 
    "http_deflate": {
        "descr": "Compress data with gzip, zlib AKA deflate or raw deflate encoding.", 
        "name": "http_deflate", 
        "params": [
            {
                "descr": "String containing the data that should be encoded", 
                "name": "data"
            }, 
            {
                "descr": "deflate options", 
                "name": "flags"
            }
        ], 
        "path": "php/function.http-deflate", 
        "syntax": "string http_deflate ( string $data [, int $flags = 0 ] )", 
        "type": "HTTP"
    }, 
    "http_get": {
        "descr": "Performs an HTTP GET request on the supplied url.", 
        "name": "http_get", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Will be filled with request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-get", 
        "syntax": "string http_get ( string $url [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_get_request_body": {
        "descr": "Get the raw request body (e.g. POST or PUT data).", 
        "name": "http_get_request_body", 
        "params": [], 
        "path": "php/function.http-get-request-body", 
        "syntax": "string http_get_request_body ( void )", 
        "type": "HTTP"
    }, 
    "http_get_request_body_stream": {
        "descr": "Create a stream to read the raw request body (e.g. POST or PUT data).", 
        "name": "http_get_request_body_stream", 
        "params": [], 
        "path": "php/function.http-get-request-body-stream", 
        "syntax": "resource http_get_request_body_stream ( void )", 
        "type": "HTTP"
    }, 
    "http_get_request_headers": {
        "descr": "Get a list of incoming HTTP headers.", 
        "name": "http_get_request_headers", 
        "params": [], 
        "path": "php/function.http-get-request-headers", 
        "syntax": "array http_get_request_headers ( void )", 
        "type": "HTTP"
    }, 
    "http_head": {
        "descr": "Performs an HTTP HEAD request on the supplied url.", 
        "name": "http_head", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-head", 
        "syntax": "string http_head ( string $url [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_inflate": {
        "descr": "Decompress data compressed with either gzip, deflate AKA zlib or raw deflate encoding.", 
        "name": "http_inflate", 
        "params": [
            {
                "descr": "string containing the compressed data", 
                "name": "data"
            }
        ], 
        "path": "php/function.http-inflate", 
        "syntax": "string http_inflate ( string $data )", 
        "type": "HTTP"
    }, 
    "http_match_etag": {
        "descr": "Matches the given ETag against the clients If-Match resp. If-None-Match HTTP headers.", 
        "name": "http_match_etag", 
        "params": [
            {
                "descr": "the ETag to match", 
                "name": "etag"
            }, 
            {
                "descr": "if set to TRUE, the header usually used to validate HTTP ranges will be checked", 
                "name": "for_range"
            }
        ], 
        "path": "php/function.http-match-etag", 
        "syntax": "bool http_match_etag ( string $etag [, bool $for_range = false ] )", 
        "type": "HTTP"
    }, 
    "http_match_modified": {
        "descr": "Matches the given Unix timestamp against the clients If-Modified-Since resp. If-Unmodified-Since HTTP headers.", 
        "name": "http_match_modified", 
        "params": [
            {
                "descr": "Unix timestamp; current time, if omitted", 
                "name": "timestamp"
            }, 
            {
                "descr": "if set to TRUE, the header usually used to validate HTTP ranges will be checked", 
                "name": "for_range"
            }
        ], 
        "path": "php/function.http-match-modified", 
        "syntax": "bool http_match_modified ([ int $timestamp = -1 [, bool $for_range = false ]] )", 
        "type": "HTTP"
    }, 
    "http_match_request_header": {
        "descr": "Match an incoming HTTP header.", 
        "name": "http_match_request_header", 
        "params": [
            {
                "descr": "the header name (case-insensitive)", 
                "name": "header"
            }, 
            {
                "descr": "the header value that should be compared", 
                "name": "value"
            }, 
            {
                "descr": "whether the value should be compared case sensitively", 
                "name": "match_case"
            }
        ], 
        "path": "php/function.http-match-request-header", 
        "syntax": "bool http_match_request_header ( string $header , string $value [, bool $match_case = false ] )", 
        "type": "HTTP"
    }, 
    "http_negotiate_charset": {
        "descr": "This function negotiates the clients preferred charset based on its Accept-Charset HTTP header. The qualifier is recognized and charsets without qualifier are rated highest.", 
        "name": "http_negotiate_charset", 
        "params": [
            {
                "descr": "array containing the supported charsets as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-charset", 
        "syntax": "string http_negotiate_charset ( array $supported [, array &$result ] )", 
        "type": "HTTP"
    }, 
    "http_negotiate_content_type": {
        "descr": "This function negotiates the clients preferred content type based on its Accept HTTP header. The qualifier is recognized and content types without qualifier are rated highest.", 
        "name": "http_negotiate_content_type", 
        "params": [
            {
                "descr": "array containing the supported content types as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-content-type", 
        "syntax": "string http_negotiate_content_type ( array $supported [, array &$result ] )", 
        "type": "HTTP"
    }, 
    "http_negotiate_language": {
        "descr": "This function negotiates the clients preferred language based on its Accept-Language HTTP header. The qualifier is recognized and languages without qualifier are rated highest. The qualifier will be decreased by 10% for partial matches (i.e. matching primary language).", 
        "name": "http_negotiate_language", 
        "params": [
            {
                "descr": "array containing the supported languages as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-language", 
        "syntax": "string http_negotiate_language ( array $supported [, array &$result ] )", 
        "type": "HTTP"
    }, 
    "http_parse_cookie": {
        "descr": "Parses HTTP cookies like sent in a response into a struct.", 
        "name": "http_parse_cookie", 
        "params": [
            {
                "descr": "string containing the value of a Set-Cookie response header", 
                "name": "cookie"
            }, 
            {
                "descr": "parse flags (HTTP_COOKIE_PARSE_RAW)", 
                "name": "flags"
            }, 
            {
                "descr": "array containing recognized extra keys; by default all unknown keys will be treated as cookie names", 
                "name": "allowed_extras"
            }
        ], 
        "path": "php/function.http-parse-cookie", 
        "syntax": "object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )", 
        "type": "HTTP"
    }, 
    "http_parse_headers": {
        "descr": "Parses HTTP headers into an associative array.", 
        "name": "http_parse_headers", 
        "params": [
            {
                "descr": "string containing HTTP headers", 
                "name": "header"
            }
        ], 
        "path": "php/function.http-parse-headers", 
        "syntax": "array http_parse_headers ( string $header )", 
        "type": "HTTP"
    }, 
    "http_parse_message": {
        "descr": "Parses the HTTP message into a simple recursive object.", 
        "name": "http_parse_message", 
        "params": [
            {
                "descr": "string containing a single HTTP message or several consecutive HTTP messages", 
                "name": "message"
            }
        ], 
        "path": "php/function.http-parse-message", 
        "syntax": "object http_parse_message ( string $message )", 
        "type": "HTTP"
    }, 
    "http_parse_params": {
        "descr": "Parse parameter list.", 
        "name": "http_parse_params", 
        "params": [
            {
                "descr": "Parameters", 
                "name": "param"
            }, 
            {
                "descr": "Parse flags", 
                "name": "flags"
            }
        ], 
        "path": "php/function.http-parse-params", 
        "syntax": "object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_clean": {
        "descr": "Clean up (close) persistent handles, optionally identified with ident.", 
        "name": "http_persistent_handles_clean", 
        "params": [
            {
                "descr": "the identification string", 
                "name": "clean"
            }
        ], 
        "path": "php/function.http-persistent-handles-clean", 
        "syntax": "string http_persistent_handles_clean ([ string $ident ] )", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_count": {
        "descr": "List statistics about persistent handles usage.", 
        "name": "http_persistent_handles_count", 
        "params": [], 
        "path": "php/function.http-persistent-handles-count", 
        "syntax": "object http_persistent_handles_count ( void )", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_ident": {
        "descr": "Query or define the ident of persistent handles.", 
        "name": "http_persistent_handles_ident", 
        "params": [
            {
                "descr": "the identification string", 
                "name": "ident"
            }
        ], 
        "path": "php/function.http-persistent-handles-ident", 
        "syntax": "string http_persistent_handles_ident ([ string $ident ] )", 
        "type": "HTTP"
    }, 
    "http_post_data": {
        "descr": "Performs an HTTP POST request on the supplied url.", 
        "name": "http_post_data", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "String containing the pre-encoded post data", 
                "name": "data"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-post-data", 
        "syntax": "string http_post_data ( string $url , string $data [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_post_fields": {
        "descr": "Performs an HTTP POST request on the supplied url.", 
        "name": "http_post_fields", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "Associative array of POST values", 
                "name": "data"
            }, 
            {
                "descr": "Array of files to post", 
                "name": "files"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-post-fields", 
        "syntax": "string http_post_fields ( string $url , array $data [, array $files [, array $options [, array &$info ]]] )", 
        "type": "HTTP"
    }, 
    "http_put_data": {
        "descr": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_data", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "PUT request body", 
                "name": "data"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-data", 
        "syntax": "string http_put_data ( string $url , string $data [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_put_file": {
        "descr": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_file", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "The file to put", 
                "name": "file"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-file", 
        "syntax": "string http_put_file ( string $url , string $file [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_put_stream": {
        "descr": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_stream", 
        "params": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "The stream to read the PUT request body from", 
                "name": "stream"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-stream", 
        "syntax": "string http_put_stream ( string $url , resource $stream [, array $options [, array &$info ]] )", 
        "type": "HTTP"
    }, 
    "http_redirect": {
        "descr": "Redirect to the given url.", 
        "name": "http_redirect", 
        "params": [
            {
                "descr": "the URL to redirect to", 
                "name": "url"
            }, 
            {
                "descr": "associative array of query parameters", 
                "name": "params"
            }, 
            {
                "descr": "whether to append session information", 
                "name": "session"
            }, 
            {
                "descr": "custom response status code", 
                "name": "status"
            }
        ], 
        "path": "php/function.http-redirect", 
        "syntax": "bool http_redirect ([ string $url [, array $params [, bool $session = false [, int $status = 0 ]]]] )", 
        "type": "HTTP"
    }, 
    "http_request": {
        "descr": "Performs a custom HTTP request on the supplied url.", 
        "name": "http_request", 
        "params": [
            {
                "descr": "Request method", 
                "name": "method"
            }, 
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "Request body", 
                "name": "body"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-request", 
        "syntax": "string http_request ( int $method , string $url [, string $body [, array $options [, array &$info ]]] )", 
        "type": "HTTP"
    }, 
    "http_request_body_encode": {
        "descr": "Generate x-www-form-urlencoded resp. form-data encoded request body.", 
        "name": "http_request_body_encode", 
        "params": [
            {
                "descr": "POST fields", 
                "name": "fields"
            }, 
            {
                "descr": "POST files", 
                "name": "files"
            }
        ], 
        "path": "php/function.http-request-body-encode", 
        "syntax": "string http_request_body_encode ( array $fields , array $files )", 
        "type": "HTTP"
    }, 
    "http_request_method_exists": {
        "descr": "Check if a request method is registered (or available by default).", 
        "name": "http_request_method_exists", 
        "params": [
            {
                "descr": "request method name or ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-exists", 
        "syntax": "int http_request_method_exists ( mixed $method )", 
        "type": "HTTP"
    }, 
    "http_request_method_name": {
        "descr": "Get the literal string representation of a standard or registered request method.", 
        "name": "http_request_method_name", 
        "params": [
            {
                "descr": "request method ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-name", 
        "syntax": "string http_request_method_name ( int $method )", 
        "type": "HTTP"
    }, 
    "http_request_method_register": {
        "descr": "Register a custom request method.", 
        "name": "http_request_method_register", 
        "params": [
            {
                "descr": "the request method name to register", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-register", 
        "syntax": "int http_request_method_register ( string $method )", 
        "type": "HTTP"
    }, 
    "http_request_method_unregister": {
        "descr": "Unregister a previously registered custom request method.", 
        "name": "http_request_method_unregister", 
        "params": [
            {
                "descr": "The request method name or ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-unregister", 
        "syntax": "bool http_request_method_unregister ( mixed $method )", 
        "type": "HTTP"
    }, 
    "http_response_code": {
        "descr": "If you pass no parameters then http_response_code will get the current status code. If you pass a parameter it will set the response code.", 
        "name": "http_response_code", 
        "params": [
            {
                "descr": "The optional response_code will set the response code. ", 
                "name": "response_code"
            }
        ], 
        "path": "php/function.http-response-code", 
        "syntax": "int http_response_code ([ int $response_code ] )", 
        "type": "Networking"
    }, 
    "http_send_content_disposition": {
        "descr": "Send the Content-Disposition. The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client/user (i.e. by the browser's \"Save as...\" popup window).", 
        "name": "http_send_content_disposition", 
        "params": [
            {
                "descr": "the file name the \"Save as...\" dialog should display", 
                "name": "filename"
            }, 
            {
                "descr": "if set to TRUE and the user agent knows how to handle the content type, it will probably not cause the popup window to be shown", 
                "name": "inline"
            }
        ], 
        "path": "php/function.http-send-content-disposition", 
        "syntax": "bool http_send_content_disposition ( string $filename [, bool $inline = false ] )", 
        "type": "HTTP"
    }, 
    "http_send_content_type": {
        "descr": "Send the Content-Type of the sent entity.", 
        "name": "http_send_content_type", 
        "params": [
            {
                "descr": "the desired content type (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/function.http-send-content-type", 
        "syntax": "bool http_send_content_type ([ string $content_type = \"application/x-octetstream\" ] )", 
        "type": "HTTP"
    }, 
    "http_send_data": {
        "descr": "Sends raw data with support for (multiple) range requests.", 
        "name": "http_send_data", 
        "params": [
            {
                "descr": "data to send", 
                "name": "data"
            }
        ], 
        "path": "php/function.http-send-data", 
        "syntax": "bool http_send_data ( string $data )", 
        "type": "HTTP"
    }, 
    "http_send_file": {
        "descr": "Sends a file with support for (multiple) range requests.", 
        "name": "http_send_file", 
        "params": [
            {
                "descr": "the file to send", 
                "name": "file"
            }
        ], 
        "path": "php/function.http-send-file", 
        "syntax": "bool http_send_file ( string $file )", 
        "type": "HTTP"
    }, 
    "http_send_last_modified": {
        "descr": "Send a Last-Modified header with a valid HTTP date.", 
        "name": "http_send_last_modified", 
        "params": [
            {
                "descr": "a Unix timestamp, converted to a valid HTTP date; if omitted, the current time will be sent", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.http-send-last-modified", 
        "syntax": "bool http_send_last_modified ([ int $timestamp = time() ] )", 
        "type": "HTTP"
    }, 
    "http_send_status": {
        "descr": "Send HTTP status code.", 
        "name": "http_send_status", 
        "params": [
            {
                "descr": "HTTP status code (100-599)", 
                "name": "status"
            }
        ], 
        "path": "php/function.http-send-status", 
        "syntax": "bool http_send_status ( int $status )", 
        "type": "HTTP"
    }, 
    "http_send_stream": {
        "descr": "Sends an already opened stream with support for (multiple) range requests.", 
        "name": "http_send_stream", 
        "params": [
            {
                "descr": "stream to read from (must be seekable)", 
                "name": "stream"
            }
        ], 
        "path": "php/function.http-send-stream", 
        "syntax": "bool http_send_stream ( resource $stream )", 
        "type": "HTTP"
    }, 
    "http_support": {
        "descr": "Check for features that require external libraries.", 
        "name": "http_support", 
        "params": [
            {
                "descr": "feature to probe for", 
                "name": "feature"
            }
        ], 
        "path": "php/function.http-support", 
        "syntax": "int http_support ([ int $feature = 0 ] )", 
        "type": "HTTP"
    }, 
    "http_throttle": {
        "descr": "Sets the throttle delay and send buffer size.", 
        "name": "http_throttle", 
        "params": [
            {
                "descr": "seconds to sleep after each chunk sent", 
                "name": "sec"
            }, 
            {
                "descr": "the chunk size in bytes", 
                "name": "bytes"
            }
        ], 
        "path": "php/function.http-throttle", 
        "syntax": "void http_throttle ( float $sec [, int $bytes = 40960 ] )", 
        "type": "HTTP"
    }, 
    "hypot": {
        "descr": "hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).", 
        "name": "hypot", 
        "params": [
            {
                "descr": "Length of first side", 
                "name": "x"
            }, 
            {
                "descr": "Length of second side", 
                "name": "y"
            }
        ], 
        "path": "php/function.hypot", 
        "syntax": "float hypot ( float $x , float $y )", 
        "type": "Mathematics"
    }, 
    "iconv": {
        "descr": "Performs a character set conversion on the string str from in_charset to out_charset.", 
        "name": "iconv", 
        "params": [
            {
                "descr": "The input charset.", 
                "name": "in_charset"
            }, 
            {
                "descr": "The output charset.   If you append the string //TRANSLIT to out_charset transliteration is activated. ", 
                "name": "out_charset"
            }, 
            {
                "descr": "The string to be converted.", 
                "name": "str"
            }
        ], 
        "path": "php/function.iconv", 
        "syntax": "string iconv ( string $in_charset , string $out_charset , string $str )", 
        "type": "Encoding"
    }, 
    "iconv_get_encoding": {
        "descr": "Retrieve internal configuration variables of iconv extension.", 
        "name": "iconv_get_encoding", 
        "params": [
            {
                "descr": "The value of the optional type can be: all input_encoding output_encoding internal_encoding", 
                "name": "type"
            }
        ], 
        "path": "php/function.iconv-get-encoding", 
        "syntax": "mixed iconv_get_encoding ([ string $type = \"all\" ] )", 
        "type": "Encoding"
    }, 
    "iconv_mime_decode": {
        "descr": "Decodes a MIME header field.", 
        "name": "iconv_mime_decode", 
        "params": [
            {
                "descr": "The encoded header, as a string.", 
                "name": "encoded_header"
            }, 
            {
                "descr": "mode determines the behaviour in the event iconv_mime_decode() encounters a malformed MIME header field. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional charset parameter specifies the character set to represent the result by. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-mime-decode", 
        "syntax": "string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "type": "Encoding"
    }, 
    "iconv_mime_decode_headers": {
        "descr": "Decodes multiple MIME header fields at once.", 
        "name": "iconv_mime_decode_headers", 
        "params": [
            {
                "descr": "The encoded headers, as a string.", 
                "name": "encoded_headers"
            }, 
            {
                "descr": "mode determines the behaviour in the event iconv_mime_decode_headers() encounters a malformed MIME header field. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional charset parameter specifies the character set to represent the result by. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-mime-decode-headers", 
        "syntax": "array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "type": "Encoding"
    }, 
    "iconv_mime_encode": {
        "descr": "Composes and returns a string that represents a valid MIME header field, which looks like the following:", 
        "name": "iconv_mime_encode", 
        "params": [
            {
                "descr": "The field name.", 
                "name": "field_name"
            }, 
            {
                "descr": "The field value.", 
                "name": "field_value"
            }, 
            {
                "descr": "You can control the behaviour of iconv_mime_encode() by specifying an associative array that contains configuration items to the optional third parameter preferences. ", 
                "name": "preferences"
            }
        ], 
        "path": "php/function.iconv-mime-encode", 
        "syntax": "string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences = NULL ] )", 
        "type": "Encoding"
    }, 
    "iconv_set_encoding": {
        "descr": "Changes the value of the internal configuration variable specified by type to charset.", 
        "name": "iconv_set_encoding", 
        "params": [
            {
                "descr": "The value of type can be any one of these: input_encoding output_encoding internal_encoding", 
                "name": "type"
            }, 
            {
                "descr": "The character set.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-set-encoding", 
        "syntax": "bool iconv_set_encoding ( string $type , string $charset )", 
        "type": "Encoding"
    }, 
    "iconv_strlen": {
        "descr": "In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.", 
        "name": "iconv_strlen", 
        "params": [
            {
                "descr": "The string.", 
                "name": "str"
            }, 
            {
                "descr": "If charset parameter is omitted, str is assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strlen", 
        "syntax": "int iconv_strlen ( string $str [, string $charset = ini_get(\"iconv.internal_encoding\") ] )", 
        "type": "Encoding"
    }, 
    "iconv_strpos": {
        "descr": "Finds position of first occurrence of a needle within a haystack.", 
        "name": "iconv_strpos", 
        "params": [
            {
                "descr": "The entire string.", 
                "name": "haystack"
            }, 
            {
                "descr": "The searched substring.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional offset parameter specifies the position from which the search should be performed.", 
                "name": "offset"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strpos", 
        "syntax": "int iconv_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "type": "Encoding"
    }, 
    "iconv_strrpos": {
        "descr": "Finds the last occurrence of a needle within a haystack.", 
        "name": "iconv_strrpos", 
        "params": [
            {
                "descr": "The entire string.", 
                "name": "haystack"
            }, 
            {
                "descr": "The searched substring.", 
                "name": "needle"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strrpos", 
        "syntax": "int iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_get(\"iconv.internal_encoding\") ] )", 
        "type": "Encoding"
    }, 
    "iconv_substr": {
        "descr": "Cuts a portion of str specified by the offset and length parameters.", 
        "name": "iconv_substr", 
        "params": [
            {
                "descr": "The original string.", 
                "name": "str"
            }, 
            {
                "descr": "If offset is non-negative, iconv_substr() cuts the portion out of str beginning at offset'th character, counting from zero. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is given and is positive, the return value will contain at most length characters of the portion that begins at offset (depending on the length of string). ", 
                "name": "length"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-substr", 
        "syntax": "string iconv_substr ( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "type": "Encoding"
    }, 
    "idate": {
        "descr": "Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().", 
        "name": "idate", 
        "params": [
            {
                "descr": "The following characters are recognized in the format parameter string format character Description B Swatch Beat/Internet Time d Day of the month h Hour (12 hour format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1 if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap year, 0 otherwise m Month number s Seconds t Days in current month U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is the same as time() w Day of the week (0 on Sunday) W ISO-8601 week number of year, weeks starting on Monday y Year (1 or 2 digits - check note below) Y Year (4 digits) z Day of the year Z Timezone offset in seconds", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.idate", 
        "syntax": "int idate ( string $format [, int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "idn_to_ascii": {
        "descr": "This function converts Unicode domain name to IDNA ASCII-compatible format.", 
        "name": "idn_to_ascii", 
        "params": [
            {
                "descr": "Domain to convert. In PHP 5 must be UTF-8 encoded.", 
                "name": "domain"
            }, 
            {
                "descr": "Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).", 
                "name": "options"
            }, 
            {
                "descr": "Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.", 
                "name": "variant"
            }, 
            {
                "descr": "This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. ", 
                "name": "idna_info"
            }
        ], 
        "path": "php/function.idn-to-ascii", 
        "syntax": "string idn_to_ascii ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )", 
        "type": "Internationalization"
    }, 
    "idn_to_utf8": {
        "descr": "This function converts Unicode domain name from IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.", 
        "name": "idn_to_utf8", 
        "params": [
            {
                "descr": "Domain to convert in IDNA ASCII-compatible format.", 
                "name": "domain"
            }, 
            {
                "descr": "Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).", 
                "name": "options"
            }, 
            {
                "descr": "Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.", 
                "name": "variant"
            }, 
            {
                "descr": "This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. ", 
                "name": "idna_info"
            }
        ], 
        "path": "php/function.idn-to-utf8", 
        "syntax": "string idn_to_utf8 ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )", 
        "type": "Internationalization"
    }, 
    "ignore_user_abort": {
        "descr": "Sets whether a client disconnect should cause a script to be aborted.", 
        "name": "ignore_user_abort", 
        "params": [
            {
                "descr": "If set, this function will set the ignore_user_abort ini setting to the given value. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.ignore-user-abort", 
        "syntax": "int ignore_user_abort ([ string $value ] )", 
        "type": "Language"
    }, 
    "iis_add_server": {
        "descr": "", 
        "name": "iis_add_server", 
        "params": [], 
        "path": "php/function.iis-add-server", 
        "syntax": "int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )", 
        "type": "IIS"
    }, 
    "iis_get_dir_security": {
        "descr": "", 
        "name": "iis_get_dir_security", 
        "params": [], 
        "path": "php/function.iis-get-dir-security", 
        "syntax": "int iis_get_dir_security ( int $server_instance , string $virtual_path )", 
        "type": "IIS"
    }, 
    "iis_get_script_map": {
        "descr": "", 
        "name": "iis_get_script_map", 
        "params": [], 
        "path": "php/function.iis-get-script-map", 
        "syntax": "string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )", 
        "type": "IIS"
    }, 
    "iis_get_server_by_comment": {
        "descr": "", 
        "name": "iis_get_server_by_comment", 
        "params": [], 
        "path": "php/function.iis-get-server-by-comment", 
        "syntax": "int iis_get_server_by_comment ( string $comment )", 
        "type": "IIS"
    }, 
    "iis_get_server_by_path": {
        "descr": "Each virtual server in IIS is associated with an instance number. iis_get_server_by_path() finds the instance number from the actual path to the root directory.", 
        "name": "iis_get_server_by_path", 
        "params": [
            {
                "descr": "The path to the root directory", 
                "name": "path"
            }
        ], 
        "path": "php/function.iis-get-server-by-path", 
        "syntax": "int iis_get_server_by_path ( string $path )", 
        "type": "IIS"
    }, 
    "iis_get_server_rights": {
        "descr": "", 
        "name": "iis_get_server_rights", 
        "params": [], 
        "path": "php/function.iis-get-server-rights", 
        "syntax": "int iis_get_server_rights ( int $server_instance , string $virtual_path )", 
        "type": "IIS"
    }, 
    "iis_get_service_state": {
        "descr": "", 
        "name": "iis_get_service_state", 
        "params": [], 
        "path": "php/function.iis-get-service-state", 
        "syntax": "int iis_get_service_state ( string $service_id )", 
        "type": "IIS"
    }, 
    "iis_remove_server": {
        "descr": "", 
        "name": "iis_remove_server", 
        "params": [], 
        "path": "php/function.iis-remove-server", 
        "syntax": "int iis_remove_server ( int $server_instance )", 
        "type": "IIS"
    }, 
    "iis_set_app_settings": {
        "descr": "", 
        "name": "iis_set_app_settings", 
        "params": [], 
        "path": "php/function.iis-set-app-settings", 
        "syntax": "int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )", 
        "type": "IIS"
    }, 
    "iis_set_dir_security": {
        "descr": "", 
        "name": "iis_set_dir_security", 
        "params": [], 
        "path": "php/function.iis-set-dir-security", 
        "syntax": "int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )", 
        "type": "IIS"
    }, 
    "iis_set_script_map": {
        "descr": "", 
        "name": "iis_set_script_map", 
        "params": [], 
        "path": "php/function.iis-set-script-map", 
        "syntax": "int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )", 
        "type": "IIS"
    }, 
    "iis_set_server_rights": {
        "descr": "", 
        "name": "iis_set_server_rights", 
        "params": [], 
        "path": "php/function.iis-set-server-rights", 
        "syntax": "int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )", 
        "type": "IIS"
    }, 
    "iis_start_server": {
        "descr": "", 
        "name": "iis_start_server", 
        "params": [], 
        "path": "php/function.iis-start-server", 
        "syntax": "int iis_start_server ( int $server_instance )", 
        "type": "IIS"
    }, 
    "iis_start_service": {
        "descr": "", 
        "name": "iis_start_service", 
        "params": [], 
        "path": "php/function.iis-start-service", 
        "syntax": "int iis_start_service ( string $service_id )", 
        "type": "IIS"
    }, 
    "iis_stop_server": {
        "descr": "", 
        "name": "iis_stop_server", 
        "params": [], 
        "path": "php/function.iis-stop-server", 
        "syntax": "int iis_stop_server ( int $server_instance )", 
        "type": "IIS"
    }, 
    "iis_stop_service": {
        "descr": "", 
        "name": "iis_stop_service", 
        "params": [], 
        "path": "php/function.iis-stop-service", 
        "syntax": "int iis_stop_service ( string $service_id )", 
        "type": "IIS"
    }, 
    "image2wbmp": {
        "descr": "image2wbmp() outputs or save a WBMP version of the given image.", 
        "name": "image2wbmp", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Path to the saved file. If not given, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "Threshold value, between 0 and 255 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.image2wbmp", 
        "syntax": "bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )", 
        "type": "Image"
    }, 
    "image_type_to_extension": {
        "descr": "Returns the extension for the given IMAGETYPE_XXX constant.", 
        "name": "image_type_to_extension", 
        "params": [
            {
                "descr": "One of the IMAGETYPE_XXX constant.", 
                "name": "imagetype"
            }, 
            {
                "descr": "Whether to prepend a dot to the extension or not. ", 
                "name": "include_dot"
            }
        ], 
        "path": "php/function.image-type-to-extension", 
        "syntax": "string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )", 
        "type": "Image"
    }, 
    "image_type_to_mime_type": {
        "descr": "The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.", 
        "name": "image_type_to_mime_type", 
        "params": [
            {
                "descr": "One of the IMAGETYPE_XXX constants.", 
                "name": "imagetype"
            }
        ], 
        "path": "php/function.image-type-to-mime-type", 
        "syntax": "string image_type_to_mime_type ( int $imagetype )", 
        "type": "Image"
    }, 
    "imageaffine": {
        "descr": "", 
        "name": "imageaffine", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "affine"
            }, 
            {
                "descr": "Array with keys \"x\", \"y\", \"width\" and \"height\".", 
                "name": "clip"
            }
        ], 
        "path": "php/function.imageaffine", 
        "syntax": "resource imageaffine ( resource $image , array $affine [, array $clip ] )", 
        "type": "Image"
    }, 
    "imageaffinematrixconcat": {
        "descr": "", 
        "name": "imageaffinematrixconcat", 
        "params": [
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "m1"
            }, 
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "m2"
            }
        ], 
        "path": "php/function.imageaffinematrixconcat", 
        "syntax": "array imageaffinematrixconcat ( array $m1 , array $m2 )", 
        "type": "Image"
    }, 
    "imageaffinematrixget": {
        "descr": "", 
        "name": "imageaffinematrixget", 
        "params": [
            {
                "descr": "One of IMG_AFFINE_* constants.", 
                "name": "type"
            }
        ], 
        "path": "php/function.imageaffinematrixget", 
        "syntax": "array imageaffinematrixget ( int $type [, mixed $options ] )", 
        "type": "Image"
    }, 
    "imagealphablending": {
        "descr": "imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.", 
        "name": "imagealphablending", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to enable the blending mode or not. ", 
                "name": "blendmode"
            }
        ], 
        "path": "php/function.imagealphablending", 
        "syntax": "bool imagealphablending ( resource $image , bool $blendmode )", 
        "type": "Image"
    }, 
    "imageantialias": {
        "descr": "Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.", 
        "name": "imageantialias", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to enable antialiasing or not.", 
                "name": "enabled"
            }
        ], 
        "path": "php/function.imageantialias", 
        "syntax": "bool imageantialias ( resource $image , bool $enabled )", 
        "type": "Image"
    }, 
    "imagearc": {
        "descr": "imagearc() draws an arc of circle centered at the given coordinates.", 
        "name": "imagearc", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The arc width.", 
                "name": "width"
            }, 
            {
                "descr": "The arc height.", 
                "name": "height"
            }, 
            {
                "descr": "The arc start angle, in degrees.", 
                "name": "start"
            }, 
            {
                "descr": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise.", 
                "name": "end"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagearc", 
        "syntax": "bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )", 
        "type": "Image"
    }, 
    "imagechar": {
        "descr": "imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.", 
        "name": "imagechar", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the start.", 
                "name": "y"
            }, 
            {
                "descr": "The character to draw.", 
                "name": "c"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagechar", 
        "syntax": "bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )", 
        "type": "Image"
    }, 
    "imagecharup": {
        "descr": "Draws the character c vertically at the specified coordinate on the given image.", 
        "name": "imagecharup", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the start.", 
                "name": "y"
            }, 
            {
                "descr": "The character to draw.", 
                "name": "c"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecharup", 
        "syntax": "bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )", 
        "type": "Image"
    }, 
    "imagecolorallocate": {
        "descr": "Returns a color identifier representing the color composed of the given RGB components.", 
        "name": "imagecolorallocate", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorallocate", 
        "syntax": "int imagecolorallocate ( resource $image , int $red , int $green , int $blue )", 
        "type": "Image"
    }, 
    "imagecolorallocatealpha": {
        "descr": "imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.", 
        "name": "imagecolorallocatealpha", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorallocatealpha", 
        "syntax": "int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "type": "Image"
    }, 
    "imagecolorat": {
        "descr": "Returns the index of the color of the pixel at the specified location in the image specified by image.", 
        "name": "imagecolorat", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the point.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the point.", 
                "name": "y"
            }
        ], 
        "path": "php/function.imagecolorat", 
        "syntax": "int imagecolorat ( resource $image , int $x , int $y )", 
        "type": "Image"
    }, 
    "imagecolorclosest": {
        "descr": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value.", 
        "name": "imagecolorclosest", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorclosest", 
        "syntax": "int imagecolorclosest ( resource $image , int $red , int $green , int $blue )", 
        "type": "Image"
    }, 
    "imagecolorclosestalpha": {
        "descr": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value and alpha level.", 
        "name": "imagecolorclosestalpha", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorclosestalpha", 
        "syntax": "int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "type": "Image"
    }, 
    "imagecolorclosesthwb": {
        "descr": "Get the index of the color which has the hue, white and blackness nearest the given color.", 
        "name": "imagecolorclosesthwb", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorclosesthwb", 
        "syntax": "int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )", 
        "type": "Image"
    }, 
    "imagecolordeallocate": {
        "descr": "De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().", 
        "name": "imagecolordeallocate", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The color identifier.", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecolordeallocate", 
        "syntax": "bool imagecolordeallocate ( resource $image , int $color )", 
        "type": "Image"
    }, 
    "imagecolorexact": {
        "descr": "Returns the index of the specified color in the palette of the image.", 
        "name": "imagecolorexact", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorexact", 
        "syntax": "int imagecolorexact ( resource $image , int $red , int $green , int $blue )", 
        "type": "Image"
    }, 
    "imagecolorexactalpha": {
        "descr": "Returns the index of the specified color+alpha in the palette of the image.", 
        "name": "imagecolorexactalpha", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorexactalpha", 
        "syntax": "int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "type": "Image"
    }, 
    "imagecolormatch": {
        "descr": "Makes the colors of the palette version of an image more closely match the true color version.", 
        "name": "imagecolormatch", 
        "params": [
            {
                "descr": "A truecolor image link resource.", 
                "name": "image1"
            }, 
            {
                "descr": "A palette image link resource pointing to an image that has the same size as image1.", 
                "name": "image2"
            }
        ], 
        "path": "php/function.imagecolormatch", 
        "syntax": "bool imagecolormatch ( resource $image1 , resource $image2 )", 
        "type": "Image"
    }, 
    "imagecolorresolve": {
        "descr": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.", 
        "name": "imagecolorresolve", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorresolve", 
        "syntax": "int imagecolorresolve ( resource $image , int $red , int $green , int $blue )", 
        "type": "Image"
    }, 
    "imagecolorresolvealpha": {
        "descr": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.", 
        "name": "imagecolorresolvealpha", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorresolvealpha", 
        "syntax": "int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "type": "Image"
    }, 
    "imagecolorset": {
        "descr": "This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.", 
        "name": "imagecolorset", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An index in the palette.", 
                "name": "index"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "Value of alpha component.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorset", 
        "syntax": "void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ] )", 
        "type": "Image"
    }, 
    "imagecolorsforindex": {
        "descr": "Gets the color for a specified index.", 
        "name": "imagecolorsforindex", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The color index.", 
                "name": "index"
            }
        ], 
        "path": "php/function.imagecolorsforindex", 
        "syntax": "array imagecolorsforindex ( resource $image , int $index )", 
        "type": "Image"
    }, 
    "imagecolorstotal": {
        "descr": "Returns the number of colors in an image palette.", 
        "name": "imagecolorstotal", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatefromgif().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagecolorstotal", 
        "syntax": "int imagecolorstotal ( resource $image )", 
        "type": "Image"
    }, 
    "imagecolortransparent": {
        "descr": "Sets the transparent color in the given image.", 
        "name": "imagecolortransparent", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecolortransparent", 
        "syntax": "int imagecolortransparent ( resource $image [, int $color ] )", 
        "type": "Image"
    }, 
    "imageconvolution": {
        "descr": "Applies a convolution matrix on the image, using the given coefficient and offset.", 
        "name": "imageconvolution", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "A 3x3 matrix: an array of three arrays of three floats.", 
                "name": "matrix"
            }, 
            {
                "descr": "The divisor of the result of the convolution, used for normalization.", 
                "name": "div"
            }, 
            {
                "descr": "Color offset.", 
                "name": "offset"
            }
        ], 
        "path": "php/function.imageconvolution", 
        "syntax": "bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )", 
        "type": "Image"
    }, 
    "imagecopy": {
        "descr": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopy", 
        "params": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopy", 
        "syntax": "bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )", 
        "type": "Image"
    }, 
    "imagecopymerge": {
        "descr": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopymerge", 
        "params": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }, 
            {
                "descr": "The two images will be merged according to pct which can range from 0 to 100. ", 
                "name": "pct"
            }
        ], 
        "path": "php/function.imagecopymerge", 
        "syntax": "bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )", 
        "type": "Image"
    }, 
    "imagecopymergegray": {
        "descr": "imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopymergegray", 
        "params": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }, 
            {
                "descr": "The src_im will be changed to grayscale according to pct where 0 is fully grayscale and 100 is unchanged. ", 
                "name": "pct"
            }
        ], 
        "path": "php/function.imagecopymergegray", 
        "syntax": "bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )", 
        "type": "Image"
    }, 
    "imagecopyresampled": {
        "descr": "imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.", 
        "name": "imagecopyresampled", 
        "params": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_image"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_image"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Destination width.", 
                "name": "dst_w"
            }, 
            {
                "descr": "Destination height.", 
                "name": "dst_h"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopyresampled", 
        "syntax": "bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )", 
        "type": "Image"
    }, 
    "imagecopyresized": {
        "descr": "imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.", 
        "name": "imagecopyresized", 
        "params": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_image"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_image"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Destination width.", 
                "name": "dst_w"
            }, 
            {
                "descr": "Destination height.", 
                "name": "dst_h"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopyresized", 
        "syntax": "bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )", 
        "type": "Image"
    }, 
    "imagecreate": {
        "descr": "imagecreate() returns an image identifier representing a blank image of specified size.", 
        "name": "imagecreate", 
        "params": [
            {
                "descr": "The image width.", 
                "name": "width"
            }, 
            {
                "descr": "The image height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreate", 
        "syntax": "resource imagecreate ( int $width , int $height )", 
        "type": "Image"
    }, 
    "imagecreatefromgd": {
        "descr": "Create a new image from GD file or URL.", 
        "name": "imagecreatefromgd", 
        "params": [
            {
                "descr": "Path to the GD file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgd", 
        "syntax": "resource imagecreatefromgd ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromgd2": {
        "descr": "Create a new image from GD2 file or URL.", 
        "name": "imagecreatefromgd2", 
        "params": [
            {
                "descr": "Path to the GD2 image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgd2", 
        "syntax": "resource imagecreatefromgd2 ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromgd2part": {
        "descr": "Create a new image from a given part of GD2 file or URL.", 
        "name": "imagecreatefromgd2part", 
        "params": [
            {
                "descr": "Path to the GD2 image.", 
                "name": "filename"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "srcX"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "srcY"
            }, 
            {
                "descr": "Source width.", 
                "name": "width"
            }, 
            {
                "descr": "Source height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreatefromgd2part", 
        "syntax": "resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )", 
        "type": "Image"
    }, 
    "imagecreatefromgif": {
        "descr": "imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromgif", 
        "params": [
            {
                "descr": "Path to the GIF image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgif", 
        "syntax": "resource imagecreatefromgif ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromjpeg": {
        "descr": "imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromjpeg", 
        "params": [
            {
                "descr": "Path to the JPEG image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromjpeg", 
        "syntax": "resource imagecreatefromjpeg ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefrompng": {
        "descr": "imagecreatefrompng() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefrompng", 
        "params": [
            {
                "descr": "Path to the PNG image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefrompng", 
        "syntax": "resource imagecreatefrompng ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromstring": {
        "descr": "imagecreatefromstring() returns an image identifier representing the image obtained from the given image. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.", 
        "name": "imagecreatefromstring", 
        "params": [
            {
                "descr": "A string containing the image data.", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagecreatefromstring", 
        "syntax": "resource imagecreatefromstring ( string $image )", 
        "type": "Image"
    }, 
    "imagecreatefromwbmp": {
        "descr": "imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromwbmp", 
        "params": [
            {
                "descr": "Path to the WBMP image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromwbmp", 
        "syntax": "resource imagecreatefromwbmp ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromwebp": {
        "descr": "imagecreatefromwebp() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromwebp", 
        "params": [
            {
                "descr": "Path to the WebP image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromwebp", 
        "syntax": "resource imagecreatefromwebp ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromxbm": {
        "descr": "imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromxbm", 
        "params": [
            {
                "descr": "Path to the XBM image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromxbm", 
        "syntax": "resource imagecreatefromxbm ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatefromxpm": {
        "descr": "imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromxpm", 
        "params": [
            {
                "descr": "Path to the XPM image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromxpm", 
        "syntax": "resource imagecreatefromxpm ( string $filename )", 
        "type": "Image"
    }, 
    "imagecreatetruecolor": {
        "descr": "imagecreatetruecolor() returns an image identifier representing a black image of the specified size.", 
        "name": "imagecreatetruecolor", 
        "params": [
            {
                "descr": "Image width.", 
                "name": "width"
            }, 
            {
                "descr": "Image height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreatetruecolor", 
        "syntax": "resource imagecreatetruecolor ( int $width , int $height )", 
        "type": "Image"
    }, 
    "imagecrop": {
        "descr": "", 
        "name": "imagecrop", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Array with keys \"x\", \"y\", \"width\" and \"height\".", 
                "name": "rect"
            }
        ], 
        "path": "php/function.imagecrop", 
        "syntax": "resource imagecrop ( resource $image , array $rect )", 
        "type": "Image"
    }, 
    "imagecropauto": {
        "descr": "", 
        "name": "imagecropauto", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of IMG_CROP_* constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Used in IMG_CROP_THRESHOLD mode.", 
                "name": "threshold"
            }, 
            {
                "descr": "Used in IMG_CROP_THRESHOLD mode.", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecropauto", 
        "syntax": "resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )", 
        "type": "Image"
    }, 
    "imagedashedline": {
        "descr": "This function is deprecated. Use combination of imagesetstyle() and imageline() instead.", 
        "name": "imagedashedline", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Upper left x coordinate.", 
                "name": "x1"
            }, 
            {
                "descr": "Upper left y coordinate 0, 0 is the top left corner of the image.", 
                "name": "y1"
            }, 
            {
                "descr": "Bottom right x coordinate.", 
                "name": "x2"
            }, 
            {
                "descr": "Bottom right y coordinate.", 
                "name": "y2"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagedashedline", 
        "syntax": "bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "type": "Image"
    }, 
    "imagedestroy": {
        "descr": "imagedestroy() frees any memory associated with image image.", 
        "name": "imagedestroy", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagedestroy", 
        "syntax": "bool imagedestroy ( resource $image )", 
        "type": "Image"
    }, 
    "imageellipse": {
        "descr": "Draws an ellipse centered at the specified coordinates.", 
        "name": "imageellipse", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The ellipse width.", 
                "name": "width"
            }, 
            {
                "descr": "The ellipse height.", 
                "name": "height"
            }, 
            {
                "descr": "The color of the ellipse. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imageellipse", 
        "syntax": "bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )", 
        "type": "Image"
    }, 
    "imagefill": {
        "descr": "Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.", 
        "name": "imagefill", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of start point.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of start point.", 
                "name": "y"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefill", 
        "syntax": "bool imagefill ( resource $image , int $x , int $y , int $color )", 
        "type": "Image"
    }, 
    "imagefilledarc": {
        "descr": "Draws a partial arc centered at the specified coordinate in the given image.", 
        "name": "imagefilledarc", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The arc width.", 
                "name": "width"
            }, 
            {
                "descr": "The arc height.", 
                "name": "height"
            }, 
            {
                "descr": "The arc start angle, in degrees.", 
                "name": "start"
            }, 
            {
                "descr": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise.", 
                "name": "end"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }, 
            {
                "descr": "A bitwise OR of the following possibilities: IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are mutually exclusive; IMG_ARC_CHORD just connects the starting and ending angles with a straight line, while IMG_ARC_PIE produces a rounded edge. IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled. IMG_ARC_EDGED, used together with IMG_ARC_NOFILL, indicates that the beginning and ending angles should be connected to the center - this is a good way to outline (rather than fill) a 'pie slice'.", 
                "name": "style"
            }
        ], 
        "path": "php/function.imagefilledarc", 
        "syntax": "bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )", 
        "type": "Image"
    }, 
    "imagefilledellipse": {
        "descr": "Draws an ellipse centered at the specified coordinate on the given image.", 
        "name": "imagefilledellipse", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The ellipse width.", 
                "name": "width"
            }, 
            {
                "descr": "The ellipse height.", 
                "name": "height"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledellipse", 
        "syntax": "bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )", 
        "type": "Image"
    }, 
    "imagefilledpolygon": {
        "descr": "imagefilledpolygon() creates a filled polygon in the given image.", 
        "name": "imagefilledpolygon", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array containing the x and y coordinates of the polygons vertices consecutively.", 
                "name": "points"
            }, 
            {
                "descr": "Total number of vertices, which must be at least 3.", 
                "name": "num_points"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledpolygon", 
        "syntax": "bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )", 
        "type": "Image"
    }, 
    "imagefilledrectangle": {
        "descr": "Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.", 
        "name": "imagefilledrectangle", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate for point 1.", 
                "name": "x1"
            }, 
            {
                "descr": "y-coordinate for point 1.", 
                "name": "y1"
            }, 
            {
                "descr": "x-coordinate for point 2.", 
                "name": "x2"
            }, 
            {
                "descr": "y-coordinate for point 2.", 
                "name": "y2"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledrectangle", 
        "syntax": "bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "type": "Image"
    }, 
    "imagefilltoborder": {
        "descr": "imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.", 
        "name": "imagefilltoborder", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of start.", 
                "name": "y"
            }, 
            {
                "descr": "The border color. A color identifier created with imagecolorallocate().", 
                "name": "border"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilltoborder", 
        "syntax": "bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )", 
        "type": "Image"
    }, 
    "imagefilter": {
        "descr": "imagefilter() applies the given filter filtertype on the image.", 
        "name": "imagefilter", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "filtertype can be one of the following:   IMG_FILTER_NEGATE: Reverses all colors of the image. ", 
                "name": "filtertype"
            }, 
            {
                "descr": "IMG_FILTER_BRIGHTNESS: Brightness level. ", 
                "name": "arg1"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Value of green component. ", 
                "name": "arg2"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Value of blue component.", 
                "name": "arg3"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. ", 
                "name": "arg4"
            }
        ], 
        "path": "php/function.imagefilter", 
        "syntax": "bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )", 
        "type": "Image"
    }, 
    "imageflip": {
        "descr": "Flips the image image using the given mode.", 
        "name": "imageflip", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Flip mode, this can be one of the IMG_FLIP_* constants:  Constant Meaning IMG_FLIP_HORIZONTAL  Flips the image horizontally. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.imageflip", 
        "syntax": "bool imageflip ( resource $image , int $mode )", 
        "type": "Image"
    }, 
    "imagefontheight": {
        "descr": "Returns the pixel height of a character in the specified font.", 
        "name": "imagefontheight", 
        "params": [
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }
        ], 
        "path": "php/function.imagefontheight", 
        "syntax": "int imagefontheight ( int $font )", 
        "type": "Image"
    }, 
    "imagefontwidth": {
        "descr": "Returns the pixel width of a character in font.", 
        "name": "imagefontwidth", 
        "params": [
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }
        ], 
        "path": "php/function.imagefontwidth", 
        "syntax": "int imagefontwidth ( int $font )", 
        "type": "Image"
    }, 
    "imageftbbox": {
        "descr": "This function calculates and returns the bounding box in pixels for a FreeType text.", 
        "name": "imageftbbox", 
        "params": [
            {
                "descr": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).", 
                "name": "size"
            }, 
            {
                "descr": "Angle in degrees in which text will be measured.", 
                "name": "angle"
            }, 
            {
                "descr": "The name of the TrueType font file (can be a URL). ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The string to be measured.", 
                "name": "text"
            }, 
            {
                "descr": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing", 
                "name": "extrainfo"
            }
        ], 
        "path": "php/function.imageftbbox", 
        "syntax": "array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )", 
        "type": "Image"
    }, 
    "imagefttext": {
        "descr": "", 
        "name": "imagefttext", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The font size to use in points.", 
                "name": "size"
            }, 
            {
                "descr": "The angle in degrees, with 0 degrees being left-to-right reading text. ", 
                "name": "angle"
            }, 
            {
                "descr": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). ", 
                "name": "x"
            }, 
            {
                "descr": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.", 
                "name": "y"
            }, 
            {
                "descr": "The index of the desired color for the text, see imagecolorexact().", 
                "name": "color"
            }, 
            {
                "descr": "The path to the TrueType font you wish to use. ", 
                "name": "fontfile"
            }, 
            {
                "descr": "Text to be inserted into image.", 
                "name": "text"
            }, 
            {
                "descr": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing", 
                "name": "extrainfo"
            }
        ], 
        "path": "php/function.imagefttext", 
        "syntax": "array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )", 
        "type": "Image"
    }, 
    "imagegammacorrect": {
        "descr": "Applies gamma correction to the given gd image given an input and an output gamma.", 
        "name": "imagegammacorrect", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The input gamma.", 
                "name": "inputgamma"
            }, 
            {
                "descr": "The output gamma.", 
                "name": "outputgamma"
            }
        ], 
        "path": "php/function.imagegammacorrect", 
        "syntax": "bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )", 
        "type": "Image"
    }, 
    "imagegd": {
        "descr": "Outputs a GD image to the given filename.", 
        "name": "imagegd", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagegd", 
        "syntax": "bool imagegd ( resource $image [, string $filename ] )", 
        "type": "Image"
    }, 
    "imagegd2": {
        "descr": "Outputs a GD2 image to the given filename.", 
        "name": "imagegd2", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "Chunk size.", 
                "name": "chunk_size"
            }, 
            {
                "descr": "Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.imagegd2", 
        "syntax": "bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )", 
        "type": "Image"
    }, 
    "imagegif": {
        "descr": "imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.", 
        "name": "imagegif", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagegif", 
        "syntax": "bool imagegif ( resource $image [, string $filename ] )", 
        "type": "Image"
    }, 
    "imagegrabscreen": {
        "descr": "Grabs a screenshot of the whole screen.", 
        "name": "imagegrabscreen", 
        "params": [], 
        "path": "php/function.imagegrabscreen", 
        "syntax": "resource imagegrabscreen ( void )", 
        "type": "Image"
    }, 
    "imagegrabwindow": {
        "descr": "Grabs a window or its client area using a windows handle (HWND property in COM instance)", 
        "name": "imagegrabwindow", 
        "params": [
            {
                "descr": "The HWND window ID.", 
                "name": "window_handle"
            }, 
            {
                "descr": "Include the client area of the application window.", 
                "name": "client_area"
            }
        ], 
        "path": "php/function.imagegrabwindow", 
        "syntax": "resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )", 
        "type": "Image"
    }, 
    "imageinterlace": {
        "descr": "imageinterlace() turns the interlace bit on or off.", 
        "name": "imageinterlace", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "If non-zero, the image will be interlaced, else the interlace bit is turned off.", 
                "name": "interlace"
            }
        ], 
        "path": "php/function.imageinterlace", 
        "syntax": "int imageinterlace ( resource $image [, int $interlace = 0 ] )", 
        "type": "Image"
    }, 
    "imageistruecolor": {
        "descr": "imageistruecolor() finds whether the image image is a truecolor image.", 
        "name": "imageistruecolor", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imageistruecolor", 
        "syntax": "bool imageistruecolor ( resource $image )", 
        "type": "Image"
    }, 
    "imagejpeg": {
        "descr": "imagejpeg() creates a JPEG file from the given image.", 
        "name": "imagejpeg", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly. ", 
                "name": "filename"
            }, 
            {
                "descr": "quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). ", 
                "name": "quality"
            }
        ], 
        "path": "php/function.imagejpeg", 
        "syntax": "bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )", 
        "type": "Image"
    }, 
    "imagelayereffect": {
        "descr": "Set the alpha blending flag to use the bundled libgd layering effects.", 
        "name": "imagelayereffect", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of the following constants:  IMG_EFFECT_REPLACE   Use pixel replacement (equivalent of passing TRUE to imagealphablending())", 
                "name": "effect"
            }, 
            {
                "descr": "Use normal pixel blending (equivalent of passing FALSE to imagealphablending())", 
                "name": "IMG_EFFECT_ALPHABLEND"
            }, 
            {
                "descr": "Same as IMG_EFFECT_ALPHABLEND.", 
                "name": "IMG_EFFECT_NORMAL"
            }, 
            {
                "descr": "Overlay has the effect that black background pixels will remain black, white background pixels will remain white, but grey background pixels will take the colour of the foreground pixel.", 
                "name": "IMG_EFFECT_OVERLAY"
            }
        ], 
        "path": "php/function.imagelayereffect", 
        "syntax": "bool imagelayereffect ( resource $image , int $effect )", 
        "type": "Image"
    }, 
    "imageline": {
        "descr": "Draws a line between the two given points.", 
        "name": "imageline", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate for first point.", 
                "name": "x1"
            }, 
            {
                "descr": "y-coordinate for first point.", 
                "name": "y1"
            }, 
            {
                "descr": "x-coordinate for second point.", 
                "name": "x2"
            }, 
            {
                "descr": "y-coordinate for second point.", 
                "name": "y2"
            }, 
            {
                "descr": "The line color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imageline", 
        "syntax": "bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "type": "Image"
    }, 
    "imageloadfont": {
        "descr": "imageloadfont() loads a user-defined bitmap and returns its identifier.", 
        "name": "imageloadfont", 
        "params": [
            {
                "descr": "The font file format is currently binary and architecture dependent. ", 
                "name": "file"
            }
        ], 
        "path": "php/function.imageloadfont", 
        "syntax": "int imageloadfont ( string $file )", 
        "type": "Image"
    }, 
    "imagepalettecopy": {
        "descr": "imagepalettecopy() copies the palette from the source image to the destination image.", 
        "name": "imagepalettecopy", 
        "params": [
            {
                "descr": "The destination image resource.", 
                "name": "destination"
            }, 
            {
                "descr": "The source image resource.", 
                "name": "source"
            }
        ], 
        "path": "php/function.imagepalettecopy", 
        "syntax": "void imagepalettecopy ( resource $destination , resource $source )", 
        "type": "Image"
    }, 
    "imagepalettetotruecolor": {
        "descr": "Converts a palette based image, created by functions like imagecreate() to a true color image, like imagecreatetruecolor().", 
        "name": "imagepalettetotruecolor", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagepalettetotruecolor", 
        "syntax": "bool imagepalettetotruecolor ( resource $src )", 
        "type": "Image"
    }, 
    "imagepng": {
        "descr": "Outputs or saves a PNG image from the given image.", 
        "name": "imagepng", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly. ", 
                "name": "filename"
            }, 
            {
                "descr": "Compression level: from 0 (no compression) to 9.", 
                "name": "quality"
            }, 
            {
                "descr": "Allows reducing the PNG file size. ", 
                "name": "filters"
            }
        ], 
        "path": "php/function.imagepng", 
        "syntax": "bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )", 
        "type": "Image"
    }, 
    "imagepolygon": {
        "descr": "imagepolygon() creates a polygon in the given image.", 
        "name": "imagepolygon", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array containing the polygon's vertices, e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1", 
                "name": "points"
            }, 
            {
                "descr": "Total number of points (vertices).", 
                "name": "num_points"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagepolygon", 
        "syntax": "bool imagepolygon ( resource $image , array $points , int $num_points , int $color )", 
        "type": "Image"
    }, 
    "imagepsbbox": {
        "descr": "Gives the bounding box of a text rectangle using PostScript Type1 fonts.", 
        "name": "imagepsbbox", 
        "params": [
            {
                "descr": "The text to be written.", 
                "name": "text"
            }, 
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "size is expressed in pixels.", 
                "name": "size"
            }, 
            {
                "descr": "Allows you to change the default value of a space in a font. ", 
                "name": "space"
            }, 
            {
                "descr": "tightness allows you to control the amount of white space between characters. ", 
                "name": "tightness"
            }, 
            {
                "descr": "angle is in degrees.", 
                "name": "angle"
            }
        ], 
        "path": "php/function.imagepsbbox", 
        "syntax": "array imagepsbbox ( string $text , resource $font , int $size )", 
        "type": "Image"
    }, 
    "imagepsencodefont": {
        "descr": "Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English.", 
        "name": "imagepsencodefont", 
        "params": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "The exact format of this file is described in T1libs documentation. ", 
                "name": "encodingfile"
            }
        ], 
        "path": "php/function.imagepsencodefont", 
        "syntax": "bool imagepsencodefont ( resource $font_index , string $encodingfile )", 
        "type": "Image"
    }, 
    "imagepsextendfont": {
        "descr": "Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.", 
        "name": "imagepsextendfont", 
        "params": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "Extension value, must be greater than 0.", 
                "name": "extend"
            }
        ], 
        "path": "php/function.imagepsextendfont", 
        "syntax": "bool imagepsextendfont ( resource $font_index , float $extend )", 
        "type": "Image"
    }, 
    "imagepsfreefont": {
        "descr": "imagepsfreefont() frees memory used by a PostScript Type 1 font.", 
        "name": "imagepsfreefont", 
        "params": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }
        ], 
        "path": "php/function.imagepsfreefont", 
        "syntax": "bool imagepsfreefont ( resource $font_index )", 
        "type": "Image"
    }, 
    "imagepsloadfont": {
        "descr": "Load a PostScript Type 1 font from the given filename.", 
        "name": "imagepsloadfont", 
        "params": [
            {
                "descr": "Path to the Postscript font file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagepsloadfont", 
        "syntax": "resource imagepsloadfont ( string $filename )", 
        "type": "Image"
    }, 
    "imagepsslantfont": {
        "descr": "Slant a given font given.", 
        "name": "imagepsslantfont", 
        "params": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "Slant level.", 
                "name": "slant"
            }
        ], 
        "path": "php/function.imagepsslantfont", 
        "syntax": "bool imagepsslantfont ( resource $font_index , float $slant )", 
        "type": "Image"
    }, 
    "imagepstext": {
        "descr": "Draws a text on an image using PostScript Type1 fonts.", 
        "name": "imagepstext", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The text to be written.", 
                "name": "text"
            }, 
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "size is expressed in pixels.", 
                "name": "size"
            }, 
            {
                "descr": "The color in which the text will be painted.", 
                "name": "foreground"
            }, 
            {
                "descr": "The color to which the text will try to fade in with antialiasing. ", 
                "name": "background"
            }, 
            {
                "descr": "x-coordinate for the lower-left corner of the first character.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate for the lower-left corner of the first character.", 
                "name": "y"
            }, 
            {
                "descr": "Allows you to change the default value of a space in a font. ", 
                "name": "space"
            }, 
            {
                "descr": "tightness allows you to control the amount of white space between characters. ", 
                "name": "tightness"
            }, 
            {
                "descr": "angle is in degrees.", 
                "name": "angle"
            }, 
            {
                "descr": "Allows you to control the number of colours used for antialiasing text. ", 
                "name": "antialias_steps"
            }
        ], 
        "path": "php/function.imagepstext", 
        "syntax": "array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )", 
        "type": "Image"
    }, 
    "imagerectangle": {
        "descr": "imagerectangle() creates a rectangle starting at the specified coordinates.", 
        "name": "imagerectangle", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Upper left x coordinate.", 
                "name": "x1"
            }, 
            {
                "descr": "Upper left y coordinate 0, 0 is the top left corner of the image.", 
                "name": "y1"
            }, 
            {
                "descr": "Bottom right x coordinate.", 
                "name": "x2"
            }, 
            {
                "descr": "Bottom right y coordinate.", 
                "name": "y2"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagerectangle", 
        "syntax": "bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "type": "Image"
    }, 
    "imagerotate": {
        "descr": "Rotates the image image using the given angle in degrees.", 
        "name": "imagerotate", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Rotation angle, in degrees. The rotation angle is interpreted as the number of degrees to rotate the image anticlockwise.", 
                "name": "angle"
            }, 
            {
                "descr": "Specifies the color of the uncovered zone after the rotation", 
                "name": "bgd_color"
            }, 
            {
                "descr": "If set and non-zero, transparent colors are ignored (otherwise kept).", 
                "name": "ignore_transparent"
            }
        ], 
        "path": "php/function.imagerotate", 
        "syntax": "resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] )", 
        "type": "Image"
    }, 
    "imagesavealpha": {
        "descr": "imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.", 
        "name": "imagesavealpha", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to save the alpha channel or not. ", 
                "name": "saveflag"
            }
        ], 
        "path": "php/function.imagesavealpha", 
        "syntax": "bool imagesavealpha ( resource $image , bool $saveflag )", 
        "type": "Image"
    }, 
    "imagescale": {
        "descr": "", 
        "name": "imagescale", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of IMG_NEAREST_NEIGHBOUR, IMG_BILINEAR_FIXED, IMG_BICUBIC, IMG_BICUBIC_FIXED or anything else (will use two pass).", 
                "name": "new_width   new_height   mode"
            }
        ], 
        "path": "php/function.imagescale", 
        "syntax": "resource imagescale ( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )", 
        "type": "Image"
    }, 
    "imagesetbrush": {
        "descr": "imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.", 
        "name": "imagesetbrush", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An image resource.", 
                "name": "brush"
            }
        ], 
        "path": "php/function.imagesetbrush", 
        "syntax": "bool imagesetbrush ( resource $image , resource $brush )", 
        "type": "Image"
    }, 
    "imagesetinterpolation": {
        "descr": "Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the imagerotate() function.", 
        "name": "imagesetinterpolation", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The interpolation method, which can be one of the following:   IMG_BELL: Bell filter. ", 
                "name": "method"
            }
        ], 
        "path": "php/function.imagesetinterpolation", 
        "syntax": "bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )", 
        "type": "Image"
    }, 
    "imagesetpixel": {
        "descr": "imagesetpixel() draws a pixel at the specified coordinate.", 
        "name": "imagesetpixel", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate.", 
                "name": "y"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagesetpixel", 
        "syntax": "bool imagesetpixel ( resource $image , int $x , int $y , int $color )", 
        "type": "Image"
    }, 
    "imagesetstyle": {
        "descr": "imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.", 
        "name": "imagesetstyle", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array of pixel colors. You can use the IMG_COLOR_TRANSPARENT constant to add a transparent pixel.", 
                "name": "style"
            }
        ], 
        "path": "php/function.imagesetstyle", 
        "syntax": "bool imagesetstyle ( resource $image , array $style )", 
        "type": "Image"
    }, 
    "imagesetthickness": {
        "descr": "imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.", 
        "name": "imagesetthickness", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Thickness, in pixels.", 
                "name": "thickness"
            }
        ], 
        "path": "php/function.imagesetthickness", 
        "syntax": "bool imagesetthickness ( resource $image , int $thickness )", 
        "type": "Image"
    }, 
    "imagesettile": {
        "descr": "imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED.", 
        "name": "imagesettile", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The image resource to be used as a tile.", 
                "name": "tile"
            }
        ], 
        "path": "php/function.imagesettile", 
        "syntax": "bool imagesettile ( resource $image , resource $tile )", 
        "type": "Image"
    }, 
    "imagestring": {
        "descr": "Draws a string at the given coordinates.", 
        "name": "imagestring", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the upper left corner.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the upper left corner.", 
                "name": "y"
            }, 
            {
                "descr": "The string to be written.", 
                "name": "string"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagestring", 
        "syntax": "bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )", 
        "type": "Image"
    }, 
    "imagestringup": {
        "descr": "Draws a string vertically at the given coordinates.", 
        "name": "imagestringup", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the bottom left corner.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the bottom left corner.", 
                "name": "y"
            }, 
            {
                "descr": "The string to be written.", 
                "name": "string"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagestringup", 
        "syntax": "bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )", 
        "type": "Image"
    }, 
    "imagesx": {
        "descr": "Returns the width of the given image resource.", 
        "name": "imagesx", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagesx", 
        "syntax": "int imagesx ( resource $image )", 
        "type": "Image"
    }, 
    "imagesy": {
        "descr": "Returns the height of the given image resource.", 
        "name": "imagesy", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagesy", 
        "syntax": "int imagesy ( resource $image )", 
        "type": "Image"
    }, 
    "imagetruecolortopalette": {
        "descr": "imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.", 
        "name": "imagetruecolortopalette", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Indicates if the image should be dithered - if it is TRUE then dithering will be used which will result in a more speckled image but with better color approximation.", 
                "name": "dither"
            }, 
            {
                "descr": "Sets the maximum number of colors that should be retained in the palette.", 
                "name": "ncolors"
            }
        ], 
        "path": "php/function.imagetruecolortopalette", 
        "syntax": "bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )", 
        "type": "Image"
    }, 
    "imagettfbbox": {
        "descr": "This function calculates and returns the bounding box in pixels for a TrueType text.", 
        "name": "imagettfbbox", 
        "params": [
            {
                "descr": "The font size. Note:  In GD 1, this is measured in pixels. ", 
                "name": "size"
            }, 
            {
                "descr": "Angle in degrees in which text will be measured.", 
                "name": "angle"
            }, 
            {
                "descr": "The name of the TrueType font file (can be a URL). ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The string to be measured.", 
                "name": "text"
            }
        ], 
        "path": "php/function.imagettfbbox", 
        "syntax": "array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )", 
        "type": "Image"
    }, 
    "imagettftext": {
        "descr": "Writes the given text into the image using TrueType fonts.", 
        "name": "imagettftext", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).", 
                "name": "size"
            }, 
            {
                "descr": "The angle in degrees, with 0 degrees being left-to-right reading text. ", 
                "name": "angle"
            }, 
            {
                "descr": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). ", 
                "name": "x"
            }, 
            {
                "descr": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.", 
                "name": "y"
            }, 
            {
                "descr": "The color index. Using the negative of a color index has the effect of turning off antialiasing. ", 
                "name": "color"
            }, 
            {
                "descr": "The path to the TrueType font you wish to use. ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The text string in UTF-8 encoding. ", 
                "name": "text"
            }
        ], 
        "path": "php/function.imagettftext", 
        "syntax": "array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )", 
        "type": "Image"
    }, 
    "imagetypes": {
        "descr": "Returns the image types supported by the current PHP installation.", 
        "name": "imagetypes", 
        "params": [], 
        "path": "php/function.imagetypes", 
        "syntax": "int imagetypes ( void )", 
        "type": "Image"
    }, 
    "imagewbmp": {
        "descr": "imagewbmp() outputs or save a WBMP version of the given image.", 
        "name": "imagewbmp", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). ", 
                "name": "foreground"
            }
        ], 
        "path": "php/function.imagewbmp", 
        "syntax": "bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )", 
        "type": "Image"
    }, 
    "imagewebp": {
        "descr": "Outputs or save an WebP version of the given image.", 
        "name": "imagewebp", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagewebp", 
        "syntax": "bool imagewebp ( resource $image , string $filename )", 
        "type": "Image"
    }, 
    "imagexbm": {
        "descr": "Outputs or save an XBM version of the given image.", 
        "name": "imagexbm", 
        "params": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). ", 
                "name": "foreground"
            }
        ], 
        "path": "php/function.imagexbm", 
        "syntax": "bool imagexbm ( resource $image , string $filename [, int $foreground ] )", 
        "type": "Image"
    }, 
    "imap_8bit": {
        "descr": "Convert an 8bit string to a quoted-printable string (according to \u00bb RFC2045, section 6.7).", 
        "name": "imap_8bit", 
        "params": [
            {
                "descr": "The 8bit string to convert", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-8bit", 
        "syntax": "string imap_8bit ( string $string )", 
        "type": "IMAP"
    }, 
    "imap_alerts": {
        "descr": "Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page.", 
        "name": "imap_alerts", 
        "params": [], 
        "path": "php/function.imap-alerts", 
        "syntax": "array imap_alerts ( void )", 
        "type": "IMAP"
    }, 
    "imap_append": {
        "descr": "Appends a string message to the specified mailbox.", 
        "name": "imap_append", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The message to be append, as a string   When talking to the Cyrus IMAP server, you must use \"\\r\\n\" as your end-of-line terminator instead of \"\\n\" or the operation will fail", 
                "name": "message"
            }, 
            {
                "descr": "If provided, the options will also be written to the mailbox", 
                "name": "options"
            }, 
            {
                "descr": "If this parameter is set, it will set the INTERNALDATE on the appended message. ", 
                "name": "internal_date"
            }
        ], 
        "path": "php/function.imap-append", 
        "syntax": "bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] )", 
        "type": "IMAP"
    }, 
    "imap_base64": {
        "descr": "Decodes the given BASE-64 encoded text.", 
        "name": "imap_base64", 
        "params": [
            {
                "descr": "The encoded text", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-base64", 
        "syntax": "string imap_base64 ( string $text )", 
        "type": "IMAP"
    }, 
    "imap_binary": {
        "descr": "Convert an 8bit string to a base64 string according to \u00bb RFC2045, Section 6.8.", 
        "name": "imap_binary", 
        "params": [
            {
                "descr": "The 8bit string", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-binary", 
        "syntax": "string imap_binary ( string $string )", 
        "type": "IMAP"
    }, 
    "imap_body": {
        "descr": "imap_body() returns the body of the message, numbered msg_number in the current mailbox.", 
        "name": "imap_body", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The optional options are a bit mask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-body", 
        "syntax": "string imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_bodystruct": {
        "descr": "Read the structure of a specified body section of a specific message.", 
        "name": "imap_bodystruct", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The body section to read", 
                "name": "section"
            }
        ], 
        "path": "php/function.imap-bodystruct", 
        "syntax": "object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )", 
        "type": "IMAP"
    }, 
    "imap_check": {
        "descr": "Checks information about the current mailbox.", 
        "name": "imap_check", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-check", 
        "syntax": "object imap_check ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_clearflag_full": {
        "descr": "This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.", 
        "name": "imap_clearflag_full", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax", 
                "name": "sequence"
            }, 
            {
                "descr": "The flags which you can unset are \"\\\\Seen\", \"\\\\Answered\", \"\\\\Flagged\", \"\\\\Deleted\", and \"\\\\Draft\" (as defined by \u00bb RFC2060)", 
                "name": "flag"
            }, 
            {
                "descr": "options are a bit mask and may contain the single option:   ST_UID - The sequence argument contains UIDs instead of sequence numbers", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-clearflag-full", 
        "syntax": "bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_close": {
        "descr": "Closes the imap stream.", 
        "name": "imap_close", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "If set to CL_EXPUNGE, the function will silently expunge the mailbox before closing, removing all messages marked for deletion. ", 
                "name": "flag"
            }
        ], 
        "path": "php/function.imap-close", 
        "syntax": "bool imap_close ( resource $imap_stream [, int $flag = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_createmailbox": {
        "descr": "Creates a new mailbox specified by mailbox.", 
        "name": "imap_createmailbox", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information. ", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-createmailbox", 
        "syntax": "bool imap_createmailbox ( resource $imap_stream , string $mailbox )", 
        "type": "IMAP"
    }, 
    "imap_delete": {
        "descr": "Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.", 
        "name": "imap_delete", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "You can set the FT_UID which tells the function to treat the msg_number argument as an UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-delete", 
        "syntax": "bool imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_deletemailbox": {
        "descr": "Deletes the specified mailbox.", 
        "name": "imap_deletemailbox", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-deletemailbox", 
        "syntax": "bool imap_deletemailbox ( resource $imap_stream , string $mailbox )", 
        "type": "IMAP"
    }, 
    "imap_errors": {
        "descr": "Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset.", 
        "name": "imap_errors", 
        "params": [], 
        "path": "php/function.imap-errors", 
        "syntax": "array imap_errors ( void )", 
        "type": "IMAP"
    }, 
    "imap_expunge": {
        "descr": "Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().", 
        "name": "imap_expunge", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-expunge", 
        "syntax": "bool imap_expunge ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_fetch_overview": {
        "descr": "This function fetches mail headers for the given sequence and returns an overview of their contents.", 
        "name": "imap_fetch_overview", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A message sequence description. ", 
                "name": "sequence"
            }, 
            {
                "descr": "sequence will contain a sequence of message indices or UIDs, if this parameter is set to FT_UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetch-overview", 
        "syntax": "array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_fetchbody": {
        "descr": "Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.", 
        "name": "imap_fetchbody", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "section"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchbody", 
        "syntax": "string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_fetchheader": {
        "descr": "This function causes a fetch of the complete, unfiltered \u00bb RFC2822 format header of the specified message.", 
        "name": "imap_fetchheader", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The possible options are:   FT_UID - The msgno argument is a UID     FT_INTERNAL - The return string is in \"internal\" format, without any attempt to canonicalize to CRLF newlines     FT_PREFETCHTEXT - The RFC822.TEXT should be pre-fetched at the same time. This avoids an extra RTT on an IMAP connection if a full message text is desired (e.g. in a \"save to local file\" operation)", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchheader", 
        "syntax": "string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_fetchmime": {
        "descr": "Fetch the MIME headers of a particular section of the body of the specified messages.", 
        "name": "imap_fetchmime", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "section"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchmime", 
        "syntax": "string imap_fetchmime ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_fetchstructure": {
        "descr": "Fetches all the structured information for a given message.", 
        "name": "imap_fetchstructure", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "This optional parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchstructure", 
        "syntax": "object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_gc": {
        "descr": "Purges the cache of entries of a specific type.", 
        "name": "imap_gc", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "Specifies the cache to purge. It may one or a combination of the following constants: IMAP_GC_ELT (message cache elements), IMAP_GC_ENV (enveloppe and bodies), IMAP_GC_TEXTS (texts).", 
                "name": "caches"
            }
        ], 
        "path": "php/function.imap-gc", 
        "syntax": "bool imap_gc ( resource $imap_stream , int $caches )", 
        "type": "IMAP"
    }, 
    "imap_get_quota": {
        "descr": "Retrieve the quota level settings, and usage statics per mailbox.", 
        "name": "imap_get_quota", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "quota_root should normally be in the form of user.name where name is the mailbox you wish to retrieve information about.", 
                "name": "quota_root"
            }
        ], 
        "path": "php/function.imap-get-quota", 
        "syntax": "array imap_get_quota ( resource $imap_stream , string $quota_root )", 
        "type": "IMAP"
    }, 
    "imap_get_quotaroot": {
        "descr": "Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.", 
        "name": "imap_get_quotaroot", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "quota_root should normally be in the form of which mailbox (i.e. ", 
                "name": "quota_root"
            }
        ], 
        "path": "php/function.imap-get-quotaroot", 
        "syntax": "array imap_get_quotaroot ( resource $imap_stream , string $quota_root )", 
        "type": "IMAP"
    }, 
    "imap_getacl": {
        "descr": "Gets the ACL for a given mailbox.", 
        "name": "imap_getacl", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-getacl", 
        "syntax": "array imap_getacl ( resource $imap_stream , string $mailbox )", 
        "type": "IMAP"
    }, 
    "imap_getmailboxes": {
        "descr": "Gets information on the mailboxes.", 
        "name": "imap_getmailboxes", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-getmailboxes", 
        "syntax": "array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )", 
        "type": "IMAP"
    }, 
    "imap_getsubscribed": {
        "descr": "Gets information about the subscribed mailboxes.", 
        "name": "imap_getsubscribed", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-getsubscribed", 
        "syntax": "array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )", 
        "type": "IMAP"
    }, 
    "imap_headerinfo": {
        "descr": "Gets information about the given message number by reading its headers.", 
        "name": "imap_headerinfo", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "Number of characters for the fetchfrom property. ", 
                "name": "fromlength"
            }, 
            {
                "descr": "Number of characters for the fetchsubject property Must be greater than or equal to zero.", 
                "name": "subjectlength"
            }
        ], 
        "path": "php/function.imap-headerinfo", 
        "syntax": "object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )", 
        "type": "IMAP"
    }, 
    "imap_headers": {
        "descr": "Returns headers for all messages in a mailbox.", 
        "name": "imap_headers", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-headers", 
        "syntax": "array imap_headers ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_last_error": {
        "descr": "Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.", 
        "name": "imap_last_error", 
        "params": [], 
        "path": "php/function.imap-last-error", 
        "syntax": "string imap_last_error ( void )", 
        "type": "IMAP"
    }, 
    "imap_list": {
        "descr": "Read the list of mailboxes.", 
        "name": "imap_list", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open().", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-list", 
        "syntax": "array imap_list ( resource $imap_stream , string $ref , string $pattern )", 
        "type": "IMAP"
    }, 
    "imap_listscan": {
        "descr": "Returns an array containing the names of the mailboxes that have content in the text of the mailbox.", 
        "name": "imap_listscan", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The searched string", 
                "name": "content"
            }
        ], 
        "path": "php/function.imap-listscan", 
        "syntax": "array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )", 
        "type": "IMAP"
    }, 
    "imap_lsub": {
        "descr": "Gets an array of all the mailboxes that you have subscribed.", 
        "name": "imap_lsub", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-lsub", 
        "syntax": "array imap_lsub ( resource $imap_stream , string $ref , string $pattern )", 
        "type": "IMAP"
    }, 
    "imap_mail": {
        "descr": "This function allows sending of emails with correct handling of Cc and Bcc receivers.", 
        "name": "imap_mail", 
        "params": [
            {
                "descr": "The receiver", 
                "name": "to"
            }, 
            {
                "descr": "The mail subject", 
                "name": "subject"
            }, 
            {
                "descr": "The mail body, see imap_mail_compose()", 
                "name": "message"
            }, 
            {
                "descr": "As string with additional headers to be set on the mail", 
                "name": "additional_headers"
            }, 
            {
                "descr": "The receivers specified in bcc will get the mail, but are excluded from the headers.", 
                "name": "cc   bcc"
            }, 
            {
                "descr": "Use this parameter to specify return path upon mail delivery failure. ", 
                "name": "rpath"
            }
        ], 
        "path": "php/function.imap-mail", 
        "syntax": "bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )", 
        "type": "IMAP"
    }, 
    "imap_mail_compose": {
        "descr": "Create a MIME message based on the given envelope and body sections.", 
        "name": "imap_mail_compose", 
        "params": [
            {
                "descr": "An associative array of headers fields. ", 
                "name": "envelope"
            }, 
            {
                "descr": "An indexed array of bodies   A body is an associative array which can consist of the following keys: \"type\", \"encoding\", \"charset\", \"type.parameters\", \"subtype\", \"id\", \"description\", \"disposition.type\", \"disposition\", \"contents.data\", \"lines\", \"bytes\" and \"md5\".", 
                "name": "body"
            }
        ], 
        "path": "php/function.imap-mail-compose", 
        "syntax": "string imap_mail_compose ( array $envelope , array $body )", 
        "type": "IMAP"
    }, 
    "imap_mail_copy": {
        "descr": "Copies mail messages specified by msglist to specified mailbox.", 
        "name": "imap_mail_copy", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "msglist is a range not just message numbers (as described in \u00bb RFC2060).", 
                "name": "msglist"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "options is a bitmask of one or more of   CP_UID - the sequence numbers contain UIDS     CP_MOVE - Delete the messages from the current mailbox after copying", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-mail-copy", 
        "syntax": "bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_mail_move": {
        "descr": "Moves mail messages specified by msglist to the specified mailbox.", 
        "name": "imap_mail_move", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "msglist is a range not just message numbers (as described in \u00bb RFC2060).", 
                "name": "msglist"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "options is a bitmask and may contain the single option:   CP_UID - the sequence numbers contain UIDS", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-mail-move", 
        "syntax": "bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_mailboxmsginfo": {
        "descr": "Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.", 
        "name": "imap_mailboxmsginfo", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-mailboxmsginfo", 
        "syntax": "object imap_mailboxmsginfo ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_mime_header_decode": {
        "descr": "Decodes MIME message header extensions that are non ASCII text (see \u00bb RFC2047).", 
        "name": "imap_mime_header_decode", 
        "params": [
            {
                "descr": "The MIME text", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-mime-header-decode", 
        "syntax": "array imap_mime_header_decode ( string $text )", 
        "type": "IMAP"
    }, 
    "imap_msgno": {
        "descr": "Returns the message sequence number for the given uid.", 
        "name": "imap_msgno", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message UID", 
                "name": "uid"
            }
        ], 
        "path": "php/function.imap-msgno", 
        "syntax": "int imap_msgno ( resource $imap_stream , int $uid )", 
        "type": "IMAP"
    }, 
    "imap_num_msg": {
        "descr": "Gets the number of messages in the current mailbox.", 
        "name": "imap_num_msg", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-num-msg", 
        "syntax": "int imap_num_msg ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_num_recent": {
        "descr": "Gets the number of recent messages in the current mailbox.", 
        "name": "imap_num_recent", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-num-recent", 
        "syntax": "int imap_num_recent ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_open": {
        "descr": "Opens an IMAP stream to a mailbox.", 
        "name": "imap_open", 
        "params": [
            {
                "descr": "A mailbox name consists of a server and a mailbox path on this server. ", 
                "name": "mailbox"
            }, 
            {
                "descr": "The user name", 
                "name": "username"
            }, 
            {
                "descr": "The password associated with the username", 
                "name": "password"
            }, 
            {
                "descr": "The options are a bit mask with one or more of the following:   OP_READONLY - Open mailbox read-only     OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)     OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox.     CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())     OP_DEBUG - Debug protocol negotiations     OP_SHORTCACHE - Short (elt-only) caching     OP_SILENT - Don't pass up events (internal use)     OP_PROTOTYPE - Return driver prototype     OP_SECURE - Don't do non-secure authentication", 
                "name": "options"
            }, 
            {
                "descr": "Number of maximum connect attempts", 
                "name": "n_retries"
            }, 
            {
                "descr": "Connection parameters, the following (string) keys maybe used to set one or more connection parameters:   DISABLE_AUTHENTICATOR - Disable authentication properties", 
                "name": "params"
            }
        ], 
        "path": "php/function.imap-open", 
        "syntax": "resource imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] )", 
        "type": "IMAP"
    }, 
    "imap_ping": {
        "descr": "imap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic \"new mail check\" as well as a \"keep alive\" for servers which have inactivity timeout.", 
        "name": "imap_ping", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-ping", 
        "syntax": "bool imap_ping ( resource $imap_stream )", 
        "type": "IMAP"
    }, 
    "imap_qprint": {
        "descr": "Convert a quoted-printable string to an 8 bit string according to \u00bb RFC2045, section 6.7.", 
        "name": "imap_qprint", 
        "params": [
            {
                "descr": "A quoted-printable string", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-qprint", 
        "syntax": "string imap_qprint ( string $string )", 
        "type": "IMAP"
    }, 
    "imap_renamemailbox": {
        "descr": "This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).", 
        "name": "imap_renamemailbox", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The old mailbox name, see imap_open() for more information", 
                "name": "old_mbox"
            }, 
            {
                "descr": "The new mailbox name, see imap_open() for more information", 
                "name": "new_mbox"
            }
        ], 
        "path": "php/function.imap-renamemailbox", 
        "syntax": "bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )", 
        "type": "IMAP"
    }, 
    "imap_reopen": {
        "descr": "Reopens the specified stream to a new mailbox on an IMAP or NNTP server.", 
        "name": "imap_reopen", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The options are a bit mask with one or more of the following:   OP_READONLY - Open mailbox read-only     OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)     OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox.     OP_EXPUNGE - Silently expunge recycle stream     CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())", 
                "name": "options"
            }, 
            {
                "descr": "Number of maximum connect attempts", 
                "name": "n_retries"
            }
        ], 
        "path": "php/function.imap-reopen", 
        "syntax": "bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )", 
        "type": "IMAP"
    }, 
    "imap_rfc822_parse_adrlist": {
        "descr": "Parses the address string as defined in \u00bb RFC2822 and for each address.", 
        "name": "imap_rfc822_parse_adrlist", 
        "params": [
            {
                "descr": "A string containing addresses", 
                "name": "address"
            }, 
            {
                "descr": "The default host name", 
                "name": "default_host"
            }
        ], 
        "path": "php/function.imap-rfc822-parse-adrlist", 
        "syntax": "array imap_rfc822_parse_adrlist ( string $address , string $default_host )", 
        "type": "IMAP"
    }, 
    "imap_rfc822_parse_headers": {
        "descr": "Gets an object of various header elements, similar to imap_header().", 
        "name": "imap_rfc822_parse_headers", 
        "params": [
            {
                "descr": "The parsed headers data", 
                "name": "headers"
            }, 
            {
                "descr": "The default host name", 
                "name": "defaulthost"
            }
        ], 
        "path": "php/function.imap-rfc822-parse-headers", 
        "syntax": "object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = \"UNKNOWN\" ] )", 
        "type": "IMAP"
    }, 
    "imap_rfc822_write_address": {
        "descr": "Returns a properly formatted email address as defined in \u00bb RFC2822 given the needed information.", 
        "name": "imap_rfc822_write_address", 
        "params": [
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The email host part", 
                "name": "host"
            }, 
            {
                "descr": "The name of the account owner", 
                "name": "personal"
            }
        ], 
        "path": "php/function.imap-rfc822-write-address", 
        "syntax": "string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )", 
        "type": "IMAP"
    }, 
    "imap_savebody": {
        "descr": "Saves a part or the whole body of the specified message.", 
        "name": "imap_savebody", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The path to the saved file as a string, or a valid file descriptor returned by fopen().", 
                "name": "file"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "part_number"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-savebody", 
        "syntax": "bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = \"\" [, int $options = 0 ]] )", 
        "type": "IMAP"
    }, 
    "imap_search": {
        "descr": "This function performs a search on the mailbox currently opened in the given IMAP stream.", 
        "name": "imap_search", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A string, delimited by spaces, in which the following keywords are allowed. ", 
                "name": "criteria"
            }, 
            {
                "descr": "Valid values for options are SE_UID, which causes the returned array to contain UIDs instead of messages sequence numbers.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-search", 
        "syntax": "array imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]] )", 
        "type": "IMAP"
    }, 
    "imap_set_quota": {
        "descr": "Sets an upper limit quota on a per mailbox basis.", 
        "name": "imap_set_quota", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox to have a quota set. ", 
                "name": "quota_root"
            }, 
            {
                "descr": "The maximum size (in KB) for the quota_root", 
                "name": "quota_limit"
            }
        ], 
        "path": "php/function.imap-set-quota", 
        "syntax": "bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )", 
        "type": "IMAP"
    }, 
    "imap_setacl": {
        "descr": "Sets the ACL for a giving mailbox.", 
        "name": "imap_setacl", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The user to give the rights to.", 
                "name": "id"
            }, 
            {
                "descr": "The rights to give to the user. ", 
                "name": "rights"
            }
        ], 
        "path": "php/function.imap-setacl", 
        "syntax": "bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )", 
        "type": "IMAP"
    }, 
    "imap_setflag_full": {
        "descr": "Causes a store to add the specified flag to the flags set for the messages in the specified sequence.", 
        "name": "imap_setflag_full", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax", 
                "name": "sequence"
            }, 
            {
                "descr": "The flags which you can set are \\Seen, \\Answered, \\Flagged, \\Deleted, and \\Draft as defined by \u00bb RFC2060.", 
                "name": "flag"
            }, 
            {
                "descr": "A bit mask that may contain the single option:   ST_UID - The sequence argument contains UIDs instead of sequence numbers", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-setflag-full", 
        "syntax": "bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] )", 
        "type": "IMAP"
    }, 
    "imap_sort": {
        "descr": "Gets and sorts message numbers by the given parameters.", 
        "name": "imap_sort", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "Criteria can be one (and only one) of the following:   SORTDATE - message Date     SORTARRIVAL - arrival date     SORTFROM - mailbox in first From address     SORTSUBJECT - message subject     SORTTO - mailbox in first To address     SORTCC - mailbox in first cc address     SORTSIZE - size of message in octets", 
                "name": "criteria"
            }, 
            {
                "descr": "Set this to 1 for reverse sorting", 
                "name": "reverse"
            }, 
            {
                "descr": "The options are a bitmask of one or more of the following:   SE_UID - Return UIDs instead of sequence numbers     SE_NOPREFETCH - Don't prefetch searched messages", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-sort", 
        "syntax": "array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]] )", 
        "type": "IMAP"
    }, 
    "imap_status": {
        "descr": "Gets status information about the given mailbox.", 
        "name": "imap_status", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "Valid flags are:   SA_MESSAGES - set $status->messages to the number of messages in the mailbox     SA_RECENT - set $status->recent to the number of recent messages in the mailbox     SA_UNSEEN - set $status->unseen to the number of unseen (new) messages in the mailbox     SA_UIDNEXT - set $status->uidnext to the next uid to be used in the mailbox     SA_UIDVALIDITY - set $status->uidvalidity to a constant that changes when uids for the mailbox may no longer be valid     SA_ALL - set all of the above", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-status", 
        "syntax": "object imap_status ( resource $imap_stream , string $mailbox , int $options )", 
        "type": "IMAP"
    }, 
    "imap_subscribe": {
        "descr": "Subscribe to a new mailbox.", 
        "name": "imap_subscribe", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-subscribe", 
        "syntax": "bool imap_subscribe ( resource $imap_stream , string $mailbox )", 
        "type": "IMAP"
    }, 
    "imap_thread": {
        "descr": "Gets a tree of a threaded message.", 
        "name": "imap_thread", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-thread", 
        "syntax": "array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )", 
        "type": "IMAP"
    }, 
    "imap_timeout": {
        "descr": "Sets or fetches the imap timeout.", 
        "name": "imap_timeout", 
        "params": [
            {
                "descr": "One of the following: IMAP_OPENTIMEOUT, IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, or IMAP_CLOSETIMEOUT.", 
                "name": "timeout_type"
            }, 
            {
                "descr": "The timeout, in seconds.", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.imap-timeout", 
        "syntax": "mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )", 
        "type": "IMAP"
    }, 
    "imap_uid": {
        "descr": "This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.", 
        "name": "imap_uid", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number.", 
                "name": "msg_number"
            }
        ], 
        "path": "php/function.imap-uid", 
        "syntax": "int imap_uid ( resource $imap_stream , int $msg_number )", 
        "type": "IMAP"
    }, 
    "imap_undelete": {
        "descr": "Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().", 
        "name": "imap_undelete", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }
        ], 
        "path": "php/function.imap-undelete", 
        "syntax": "bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] )", 
        "type": "IMAP"
    }, 
    "imap_unsubscribe": {
        "descr": "Unsubscribe from the specified mailbox.", 
        "name": "imap_unsubscribe", 
        "params": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-unsubscribe", 
        "syntax": "bool imap_unsubscribe ( resource $imap_stream , string $mailbox )", 
        "type": "IMAP"
    }, 
    "imap_utf7_decode": {
        "descr": "Decodes modified UTF-7 text into ISO-8859-1 string.", 
        "name": "imap_utf7_decode", 
        "params": [
            {
                "descr": "A modified UTF-7 encoding string, as defined in \u00bb RFC 2060, section 5.1.3 (original UTF-7 was defined in \u00bb RFC1642).", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-utf7-decode", 
        "syntax": "string imap_utf7_decode ( string $text )", 
        "type": "IMAP"
    }, 
    "imap_utf7_encode": {
        "descr": "Converts data to modified UTF-7 text.", 
        "name": "imap_utf7_encode", 
        "params": [
            {
                "descr": "An ISO-8859-1 string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.imap-utf7-encode", 
        "syntax": "string imap_utf7_encode ( string $data )", 
        "type": "IMAP"
    }, 
    "imap_utf8": {
        "descr": "Converts the given mime_encoded_text to UTF-8.", 
        "name": "imap_utf8", 
        "params": [
            {
                "descr": "A MIME encoded string. MIME encoding method and the UTF-8 specification are described in \u00bb RFC2047 and \u00bb RFC2044 respectively.", 
                "name": "mime_encoded_text"
            }
        ], 
        "path": "php/function.imap-utf8", 
        "syntax": "string imap_utf8 ( string $mime_encoded_text )", 
        "type": "IMAP"
    }, 
    "implode": {
        "descr": "Join array elements with a glue string.", 
        "name": "implode", 
        "params": [
            {
                "descr": "Defaults to an empty string.", 
                "name": "glue"
            }, 
            {
                "descr": "The array of strings to implode.", 
                "name": "pieces"
            }
        ], 
        "path": "php/function.implode", 
        "syntax": "string implode ( string $glue , array $pieces )", 
        "type": "String"
    }, 
    "import_request_variables": {
        "descr": "Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope.", 
        "name": "import_request_variables", 
        "params": [
            {
                "descr": "Using the types parameter, you can specify which request variables to import. ", 
                "name": "types"
            }, 
            {
                "descr": "Variable name prefix, prepended before all variable's name imported into the global scope. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.import-request-variables", 
        "syntax": "bool import_request_variables ( string $types [, string $prefix ] )", 
        "type": "Variables"
    }, 
    "in_array": {
        "descr": "Searches haystack for needle using loose comparison unless strict is set.", 
        "name": "in_array", 
        "params": [
            {
                "descr": "The searched value.  Note:  If needle is a string, the comparison is done in a case-sensitive manner.", 
                "name": "needle"
            }, 
            {
                "descr": "The array.", 
                "name": "haystack"
            }, 
            {
                "descr": "If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.in-array", 
        "syntax": "bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )", 
        "type": "Array"
    }, 
    "inet_ntop": {
        "descr": "", 
        "name": "inet_ntop", 
        "params": [
            {
                "descr": "A 32bit IPv4, or 128bit IPv6 address.", 
                "name": "in_addr"
            }
        ], 
        "path": "php/function.inet-ntop", 
        "syntax": "string inet_ntop ( string $in_addr )", 
        "type": "Networking"
    }, 
    "inet_pton": {
        "descr": "This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.", 
        "name": "inet_pton", 
        "params": [
            {
                "descr": "A human readable IPv4 or IPv6 address.", 
                "name": "address"
            }
        ], 
        "path": "php/function.inet-pton", 
        "syntax": "string inet_pton ( string $address )", 
        "type": "Networking"
    }, 
    "ini_get": {
        "descr": "Returns the value of the configuration option on success.", 
        "name": "ini_get", 
        "params": [
            {
                "descr": "The configuration option name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.ini-get", 
        "syntax": "string ini_get ( string $varname )", 
        "type": "Language"
    }, 
    "ini_get_all": {
        "descr": "Returns all the registered configuration options.", 
        "name": "ini_get_all", 
        "params": [
            {
                "descr": "An optional extension name. If set, the function return only options specific for that extension.", 
                "name": "extension"
            }, 
            {
                "descr": "Retrieve details settings or only the current value for each setting. ", 
                "name": "details"
            }
        ], 
        "path": "php/function.ini-get-all", 
        "syntax": "array ini_get_all ([ string $extension [, bool $details = true ]] )", 
        "type": "Language"
    }, 
    "ini_restore": {
        "descr": "Restores a given configuration option to its original value.", 
        "name": "ini_restore", 
        "params": [
            {
                "descr": "The configuration option name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.ini-restore", 
        "syntax": "void ini_restore ( string $varname )", 
        "type": "Language"
    }, 
    "ini_set": {
        "descr": "Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.", 
        "name": "ini_set", 
        "params": [
            {
                "descr": "Not all the available options can be changed using ini_set(). ", 
                "name": "varname"
            }, 
            {
                "descr": "The new value for the option.", 
                "name": "newvalue"
            }
        ], 
        "path": "php/function.ini-set", 
        "syntax": "string ini_set ( string $varname , string $newvalue )", 
        "type": "Language"
    }, 
    "inotify_add_watch": {
        "descr": "inotify_add_watch() adds a new watch or modify an existing watch for the file or directory specified in pathname.", 
        "name": "inotify_add_watch", 
        "params": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }, 
            {
                "descr": "File or directory to watch", 
                "name": "pathname"
            }, 
            {
                "descr": "Events to watch for. See Predefined Constants.", 
                "name": "mask"
            }
        ], 
        "path": "php/function.inotify-add-watch", 
        "syntax": "int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )", 
        "type": "File System"
    }, 
    "inotify_init": {
        "descr": "Initialize an inotify instance for use with inotify_add_watch()", 
        "name": "inotify_init", 
        "params": [], 
        "path": "php/function.inotify-init", 
        "syntax": "resource inotify_init ( void )", 
        "type": "File System"
    }, 
    "inotify_queue_len": {
        "descr": "This function allows to know if inotify_read() will block or not. If a number upper than zero is returned, there are pending events and inotify_read() will not block.", 
        "name": "inotify_queue_len", 
        "params": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }
        ], 
        "path": "php/function.inotify-queue-len", 
        "syntax": "int inotify_queue_len ( resource $inotify_instance )", 
        "type": "File System"
    }, 
    "inotify_read": {
        "descr": "Read inotify events from an inotify instance.", 
        "name": "inotify_read", 
        "params": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }
        ], 
        "path": "php/function.inotify-read", 
        "syntax": "array inotify_read ( resource $inotify_instance )", 
        "type": "File System"
    }, 
    "inotify_rm_watch": {
        "descr": "inotify_rm_watch() removes the watch watch_descriptor from the inotify instance inotify_instance.", 
        "name": "inotify_rm_watch", 
        "params": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }, 
            {
                "descr": "Watch to remove from the instance", 
                "name": "watch_descriptor"
            }
        ], 
        "path": "php/function.inotify-rm-watch", 
        "syntax": "bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )", 
        "type": "File System"
    }, 
    "interface_exists": {
        "descr": "Checks if the given interface has been defined.", 
        "name": "interface_exists", 
        "params": [
            {
                "descr": "The interface name", 
                "name": "interface_name"
            }, 
            {
                "descr": "Whether to call __autoload or not by default.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.interface-exists", 
        "syntax": "bool interface_exists ( string $interface_name [, bool $autoload = true ] )", 
        "type": "Classes and Functions"
    }, 
    "intl_error_name": {
        "descr": "Return ICU error code name.", 
        "name": "intl_error_name", 
        "params": [
            {
                "descr": "ICU error code.", 
                "name": "error_code"
            }
        ], 
        "path": "php/function.intl-error-name", 
        "syntax": "string intl_error_name ( int $error_code )", 
        "type": "Internationalization"
    }, 
    "intl_get_error_code": {
        "descr": "Useful to handle errors occurred in static methods when there's no object to get error code from.", 
        "name": "intl_get_error_code", 
        "params": [], 
        "path": "php/function.intl-get-error-code", 
        "syntax": "int intl_get_error_code ( void )", 
        "type": "Internationalization"
    }, 
    "intl_get_error_message": {
        "descr": "Get error message from last internationalization function called.", 
        "name": "intl_get_error_message", 
        "params": [], 
        "path": "php/function.intl-get-error-message", 
        "syntax": "string intl_get_error_message ( void )", 
        "type": "Internationalization"
    }, 
    "intl_is_failure": {
        "descr": "", 
        "name": "intl_is_failure", 
        "params": [
            {
                "descr": "is a value that returned by functions: intl_get_error_code(), collator_get_error_code() .", 
                "name": "error_code"
            }
        ], 
        "path": "php/function.intl-is-failure", 
        "syntax": "bool intl_is_failure ( int $error_code )", 
        "type": "Internationalization"
    }, 
    "intval": {
        "descr": "Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.", 
        "name": "intval", 
        "params": [
            {
                "descr": "The scalar value being converted to an integer", 
                "name": "var"
            }, 
            {
                "descr": "The base for the conversion  Note:  If base is 0, the base used is determined by the format of var:   if string includes a \"0x\" (or \"0X\") prefix, the base is taken as 16 (hex); otherwise,     if string starts with \"0\", the base is taken as 8 (octal); otherwise,     the base is taken as 10 (decimal).", 
                "name": "base"
            }
        ], 
        "path": "php/function.intval", 
        "syntax": "int intval ( mixed $var [, int $base = 10 ] )", 
        "type": "Variables"
    }, 
    "ip2long": {
        "descr": "The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.", 
        "name": "ip2long", 
        "params": [
            {
                "descr": "A standard format address.", 
                "name": "ip_address"
            }
        ], 
        "path": "php/function.ip2long", 
        "syntax": "int ip2long ( string $ip_address )", 
        "type": "Networking"
    }, 
    "iptcembed": {
        "descr": "Embeds binary IPTC data into a JPEG image.", 
        "name": "iptcembed", 
        "params": [
            {
                "descr": "The data to be written.", 
                "name": "iptcdata"
            }, 
            {
                "descr": "Path to the JPEG image.", 
                "name": "jpeg_file_name"
            }, 
            {
                "descr": "Spool flag. If the spool flag is over 2 then the JPEG will be returned as a string.", 
                "name": "spool"
            }
        ], 
        "path": "php/function.iptcembed", 
        "syntax": "mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )", 
        "type": "Image"
    }, 
    "iptcparse": {
        "descr": "Parses an \u00bb IPTC block into its single tags.", 
        "name": "iptcparse", 
        "params": [
            {
                "descr": "A binary IPTC block.", 
                "name": "iptcblock"
            }
        ], 
        "path": "php/function.iptcparse", 
        "syntax": "array iptcparse ( string $iptcblock )", 
        "type": "Image"
    }, 
    "is_a": {
        "descr": "Checks if the given object is of this class or has this class as one of its parents.", 
        "name": "is_a", 
        "params": [
            {
                "descr": "The tested object", 
                "name": "object"
            }, 
            {
                "descr": "The class name", 
                "name": "class_name"
            }, 
            {
                "descr": "If this parameter set to FALSE, string class name as object is not allowed. ", 
                "name": "allow_string"
            }
        ], 
        "path": "php/function.is-a", 
        "syntax": "bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ] )", 
        "type": "Classes and Functions"
    }, 
    "is_array": {
        "descr": "Finds whether the given variable is an array.", 
        "name": "is_array", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-array", 
        "syntax": "bool is_array ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_bool": {
        "descr": "Finds whether the given variable is a boolean.", 
        "name": "is_bool", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-bool", 
        "syntax": "bool is_bool ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_callable": {
        "descr": "Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.", 
        "name": "is_callable", 
        "params": [
            {
                "descr": "The callback function to check", 
                "name": "name"
            }, 
            {
                "descr": "If set to TRUE the function only verifies that name might be a function or method. ", 
                "name": "syntax_only"
            }, 
            {
                "descr": "Receives the \"callable name\". In the example below it is \"someClass::someMethod\". ", 
                "name": "callable_name"
            }
        ], 
        "path": "php/function.is-callable", 
        "syntax": "bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )", 
        "type": "Variables"
    }, 
    "is_dir": {
        "descr": "Tells whether the given filename is a directory.", 
        "name": "is_dir", 
        "params": [
            {
                "descr": "Path to the file. If filename is a relative filename, it will be checked relative to the current working directory. ", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-dir", 
        "syntax": "bool is_dir ( string $filename )", 
        "type": "File System"
    }, 
    "is_executable": {
        "descr": "Tells whether the filename is executable.", 
        "name": "is_executable", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-executable", 
        "syntax": "bool is_executable ( string $filename )", 
        "type": "File System"
    }, 
    "is_file": {
        "descr": "Tells whether the given file is a regular file.", 
        "name": "is_file", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-file", 
        "syntax": "bool is_file ( string $filename )", 
        "type": "File System"
    }, 
    "is_finite": {
        "descr": "Checks whether val is a legal finite on this platform.", 
        "name": "is_finite", 
        "params": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-finite", 
        "syntax": "bool is_finite ( float $val )", 
        "type": "Mathematics"
    }, 
    "is_float": {
        "descr": "Finds whether the type of the given variable is float.", 
        "name": "is_float", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-float", 
        "syntax": "bool is_float ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_infinite": {
        "descr": "Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.", 
        "name": "is_infinite", 
        "params": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-infinite", 
        "syntax": "bool is_infinite ( float $val )", 
        "type": "Mathematics"
    }, 
    "is_int": {
        "descr": "Finds whether the type of the given variable is integer.", 
        "name": "is_int", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-int", 
        "syntax": "bool is_int ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_link": {
        "descr": "Tells whether the given file is a symbolic link.", 
        "name": "is_link", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-link", 
        "syntax": "bool is_link ( string $filename )", 
        "type": "File System"
    }, 
    "is_nan": {
        "descr": "Checks whether val is 'not a number', like the result of acos(1.01).", 
        "name": "is_nan", 
        "params": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-nan", 
        "syntax": "bool is_nan ( float $val )", 
        "type": "Mathematics"
    }, 
    "is_null": {
        "descr": "Finds whether the given variable is NULL.", 
        "name": "is_null", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-null", 
        "syntax": "bool is_null ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_numeric": {
        "descr": "Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g. 0xf4c3b00c), Binary (e.g. 0b10100111001), Octal (e.g. 0777) notation is allowed too but only without sign, decimal and exponential part.", 
        "name": "is_numeric", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-numeric", 
        "syntax": "bool is_numeric ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_object": {
        "descr": "Finds whether the given variable is an object.", 
        "name": "is_object", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-object", 
        "syntax": "bool is_object ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_readable": {
        "descr": "Tells whether a file exists and is readable.", 
        "name": "is_readable", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-readable", 
        "syntax": "bool is_readable ( string $filename )", 
        "type": "File System"
    }, 
    "is_resource": {
        "descr": "Finds whether the given variable is a resource.", 
        "name": "is_resource", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-resource", 
        "syntax": "bool is_resource ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_scalar": {
        "descr": "Finds whether the given variable is a scalar.", 
        "name": "is_scalar", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-scalar", 
        "syntax": "bool is_scalar ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_soap_fault": {
        "descr": "This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).", 
        "name": "is_soap_fault", 
        "params": [
            {
                "descr": "The object to test.", 
                "name": "object"
            }
        ], 
        "path": "php/function.is-soap-fault", 
        "syntax": "bool is_soap_fault ( mixed $object )", 
        "type": "SOAP"
    }, 
    "is_string": {
        "descr": "Finds whether the type given variable is string.", 
        "name": "is_string", 
        "params": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-string", 
        "syntax": "bool is_string ( mixed $var )", 
        "type": "Variables"
    }, 
    "is_subclass_of": {
        "descr": "Checks if the given object has the class class_name as one of its parents.", 
        "name": "is_subclass_of", 
        "params": [
            {
                "descr": "A class name or an object instance", 
                "name": "object"
            }, 
            {
                "descr": "The class name", 
                "name": "class_name"
            }, 
            {
                "descr": "If this parameter set to false, string class name as object is not allowed. ", 
                "name": "allow_string"
            }
        ], 
        "path": "php/function.is-subclass-of", 
        "syntax": "bool is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )", 
        "type": "Classes and Functions"
    }, 
    "is_tainted": {
        "descr": "Checks whether a string is tainted", 
        "name": "is_tainted", 
        "params": [], 
        "path": "php/function.is-tainted", 
        "syntax": "bool is_tainted ( string $string )", 
        "type": "String"
    }, 
    "is_uploaded_file": {
        "descr": "Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd.", 
        "name": "is_uploaded_file", 
        "params": [
            {
                "descr": "The filename being checked.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-uploaded-file", 
        "syntax": "bool is_uploaded_file ( string $filename )", 
        "type": "File System"
    }, 
    "is_writable": {
        "descr": "Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.", 
        "name": "is_writable", 
        "params": [
            {
                "descr": "The filename being checked.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-writable", 
        "syntax": "bool is_writable ( string $filename )", 
        "type": "File System"
    }, 
    "isset": {
        "descr": "Determine if a variable is set and is not NULL.", 
        "name": "isset", 
        "params": [
            {
                "descr": "The variable to be checked.", 
                "name": "var"
            }, 
            {
                "descr": "Another variable ...", 
                "name": "..."
            }
        ], 
        "path": "php/function.isset", 
        "syntax": "bool isset ( mixed $var [, mixed $... ] )", 
        "type": "Variables"
    }, 
    "iterator_apply": {
        "descr": "Calls a function for every element in an iterator.", 
        "name": "iterator_apply", 
        "params": [
            {
                "descr": "The class to iterate over.", 
                "name": "iterator"
            }, 
            {
                "descr": "The callback function to call on every element. ", 
                "name": "function"
            }, 
            {
                "descr": "Arguments to pass to the callback function.", 
                "name": "args"
            }
        ], 
        "path": "php/function.iterator-apply", 
        "syntax": "int iterator_apply ( Traversable $iterator , callable $function [, array $args ] )", 
        "type": "SPL"
    }, 
    "iterator_count": {
        "descr": "Count the elements in an iterator.", 
        "name": "iterator_count", 
        "params": [
            {
                "descr": "The iterator being counted.", 
                "name": "iterator"
            }
        ], 
        "path": "php/function.iterator-count", 
        "syntax": "int iterator_count ( Traversable $iterator )", 
        "type": "SPL"
    }, 
    "iterator_to_array": {
        "descr": "Copy the elements of an iterator into an array.", 
        "name": "iterator_to_array", 
        "params": [
            {
                "descr": "The iterator being copied.", 
                "name": "iterator"
            }, 
            {
                "descr": "Whether to use the iterator element keys as index. ", 
                "name": "use_keys"
            }
        ], 
        "path": "php/function.iterator-to-array", 
        "syntax": "array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )", 
        "type": "SPL"
    }, 
    "jdtojewish": {
        "descr": "Converts a Julian Day Count to the Jewish Calendar.", 
        "name": "jdtojewish", 
        "params": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }, 
            {
                "descr": "If the hebrew parameter is set to TRUE, the fl parameter is used for Hebrew, string based, output format.", 
                "name": "hebrew"
            }, 
            {
                "descr": "The available formats are: CAL_JEWISH_ADD_ALAFIM_GERESH, CAL_JEWISH_ADD_ALAFIM, CAL_JEWISH_ADD_GERESHAYIM.", 
                "name": "fl"
            }
        ], 
        "path": "php/function.jdtojewish", 
        "syntax": "string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )", 
        "type": "Date and Time"
    }, 
    "jdtounix": {
        "descr": "This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is localtime (and not GMT).", 
        "name": "jdtounix", 
        "params": [
            {
                "descr": "A julian day number between 2440588 and 2465342.", 
                "name": "jday"
            }
        ], 
        "path": "php/function.jdtounix", 
        "syntax": "int jdtounix ( int $jday )", 
        "type": "Date and Time"
    }, 
    "jpeg2wbmp": {
        "descr": "Converts a JPEG file into a WBMP file.", 
        "name": "jpeg2wbmp", 
        "params": [
            {
                "descr": "Path to JPEG file.", 
                "name": "jpegname"
            }, 
            {
                "descr": "Path to destination WBMP file.", 
                "name": "wbmpname"
            }, 
            {
                "descr": "Destination image height.", 
                "name": "dest_height"
            }, 
            {
                "descr": "Destination image width.", 
                "name": "dest_width"
            }, 
            {
                "descr": "Threshold value, between 0 and 8 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.jpeg2wbmp", 
        "syntax": "bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )", 
        "type": "Image"
    }, 
    "json_decode": {
        "descr": "Takes a JSON encoded string and converts it into a PHP variable.", 
        "name": "json_decode", 
        "params": [
            {
                "descr": "The json string being decoded.   This function only works with UTF-8 encoded strings. ", 
                "name": "json"
            }, 
            {
                "descr": "When TRUE, returned objects will be converted into associative arrays.", 
                "name": "assoc"
            }, 
            {
                "descr": "User specified recursion depth.", 
                "name": "depth"
            }, 
            {
                "descr": "Bitmask of JSON decode options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.json-decode", 
        "syntax": "mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )", 
        "type": "JSON"
    }, 
    "json_encode": {
        "descr": "Returns a string containing the JSON representation of value.", 
        "name": "json_encode", 
        "params": [
            {
                "descr": "The value being encoded. Can be any type except a resource. ", 
                "name": "value"
            }, 
            {
                "descr": "Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_UNESCAPED_UNICODE. ", 
                "name": "options"
            }, 
            {
                "descr": "Set the maximum depth. Must be greater than zero.", 
                "name": "depth"
            }
        ], 
        "path": "php/function.json-encode", 
        "syntax": "string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )", 
        "type": "JSON"
    }, 
    "json_last_error": {
        "descr": "Returns the last error (if any) occurred during the last JSON encoding/decoding.", 
        "name": "json_last_error", 
        "params": [], 
        "path": "php/function.json-last-error", 
        "syntax": "int json_last_error ( void )", 
        "type": "JSON"
    }, 
    "json_last_error_msg": {
        "descr": "", 
        "name": "json_last_error_msg", 
        "params": [], 
        "path": "php/function.json-last-error-msg", 
        "syntax": "string json_last_error_msg ( void )", 
        "type": "JSON"
    }, 
    "key": {
        "descr": "key() returns the index element of the current array position.", 
        "name": "key", 
        "params": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.key", 
        "syntax": "mixed key ( array &$array )", 
        "type": "Array"
    }, 
    "krsort": {
        "descr": "Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.", 
        "name": "krsort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.krsort", 
        "syntax": "bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "ksort": {
        "descr": "Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.", 
        "name": "ksort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.ksort", 
        "syntax": "bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "lcfirst": {
        "descr": "Returns a string with the first character of str , lowercased if that character is alphabetic.", 
        "name": "lcfirst", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.lcfirst", 
        "syntax": "string lcfirst ( string $str )", 
        "type": "String"
    }, 
    "lcg_value": {
        "descr": "lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.", 
        "name": "lcg_value", 
        "params": [], 
        "path": "php/function.lcg-value", 
        "syntax": "float lcg_value ( void )", 
        "type": "Mathematics"
    }, 
    "lchgrp": {
        "descr": "Attempts to change the group of the symlink filename to group.", 
        "name": "lchgrp", 
        "params": [
            {
                "descr": "Path to the symlink.", 
                "name": "filename"
            }, 
            {
                "descr": "The group specified by name or number.", 
                "name": "group"
            }
        ], 
        "path": "php/function.lchgrp", 
        "syntax": "bool lchgrp ( string $filename , mixed $group )", 
        "type": "File System"
    }, 
    "lchown": {
        "descr": "Attempts to change the owner of the symlink filename to user user.", 
        "name": "lchown", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "User name or number.", 
                "name": "user"
            }
        ], 
        "path": "php/function.lchown", 
        "syntax": "bool lchown ( string $filename , mixed $user )", 
        "type": "File System"
    }, 
    "ldap_8859_to_t61": {
        "descr": "Translate ISO-8859 characters to t61 characters.", 
        "name": "ldap_8859_to_t61", 
        "params": [
            {
                "descr": "The text to be translated.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ldap-8859-to-t61", 
        "syntax": "string ldap_8859_to_t61 ( string $value )", 
        "type": "LDAP"
    }, 
    "ldap_add": {
        "descr": "Add entries in the LDAP directory.", 
        "name": "ldap_add", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "An array that specifies the information about the entry. ", 
                "name": "entry"
            }
        ], 
        "path": "php/function.ldap-add", 
        "syntax": "bool ldap_add ( resource $link_identifier , string $dn , array $entry )", 
        "type": "LDAP"
    }, 
    "ldap_bind": {
        "descr": "Binds to the LDAP directory with specified RDN and password.", 
        "name": "ldap_bind", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-bind", 
        "syntax": "bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )", 
        "type": "LDAP"
    }, 
    "ldap_compare": {
        "descr": "Compare value of attribute with value of same attribute in an LDAP directory entry.", 
        "name": "ldap_compare", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "The compared value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ldap-compare", 
        "syntax": "mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )", 
        "type": "LDAP"
    }, 
    "ldap_connect": {
        "descr": "Establishes a connection to a LDAP server on a specified hostname and port.", 
        "name": "ldap_connect", 
        "params": [
            {
                "descr": "If you are using OpenLDAP 2.x.x you can specify a URL instead of the hostname. ", 
                "name": "hostname"
            }, 
            {
                "descr": "The port to connect to. Not used when using URLs.", 
                "name": "port"
            }
        ], 
        "path": "php/function.ldap-connect", 
        "syntax": "resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )", 
        "type": "LDAP"
    }, 
    "ldap_control_paged_result": {
        "descr": "Enable LDAP pagination by sending the pagination control (page size, cookie...).", 
        "name": "ldap_control_paged_result", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "The number of entries by page.", 
                "name": "pagesize"
            }, 
            {
                "descr": "Indicates whether the pagination is critical of not. ", 
                "name": "iscritical"
            }, 
            {
                "descr": "An opaque structure sent by the server (ldap_control_paged_result_response()).", 
                "name": "cookie"
            }
        ], 
        "path": "php/function.ldap-control-paged-result", 
        "syntax": "bool ldap_control_paged_result ( resource $link , int $pagesize [, bool $iscritical = false [, string $cookie = \"\" ]] )", 
        "type": "LDAP"
    }, 
    "ldap_control_paged_result_response": {
        "descr": "Retrieve the pagination information send by the server.", 
        "name": "ldap_control_paged_result_response", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "An opaque structure sent by the server.", 
                "name": "result   cookie"
            }, 
            {
                "descr": "The estimated number of entries to retrieve.", 
                "name": "estimated"
            }
        ], 
        "path": "php/function.ldap-control-paged-result-response", 
        "syntax": "bool ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] )", 
        "type": "LDAP"
    }, 
    "ldap_count_entries": {
        "descr": "Returns the number of entries stored in the result of previous search operations.", 
        "name": "ldap_count_entries", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The internal LDAP result.", 
                "name": "result_identifier"
            }
        ], 
        "path": "php/function.ldap-count-entries", 
        "syntax": "int ldap_count_entries ( resource $link_identifier , resource $result_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_delete": {
        "descr": "Deletes a particular entry in LDAP directory.", 
        "name": "ldap_delete", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-delete", 
        "syntax": "bool ldap_delete ( resource $link_identifier , string $dn )", 
        "type": "LDAP"
    }, 
    "ldap_dn2ufn": {
        "descr": "Turns the specified dn, into a more user-friendly form, stripping off type names.", 
        "name": "ldap_dn2ufn", 
        "params": [
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-dn2ufn", 
        "syntax": "string ldap_dn2ufn ( string $dn )", 
        "type": "LDAP"
    }, 
    "ldap_err2str": {
        "descr": "Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.", 
        "name": "ldap_err2str", 
        "params": [
            {
                "descr": "The error number.", 
                "name": "errno"
            }
        ], 
        "path": "php/function.ldap-err2str", 
        "syntax": "string ldap_err2str ( int $errno )", 
        "type": "LDAP"
    }, 
    "ldap_errno": {
        "descr": "Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str().", 
        "name": "ldap_errno", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-errno", 
        "syntax": "int ldap_errno ( resource $link_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_error": {
        "descr": "Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.", 
        "name": "ldap_error", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-error", 
        "syntax": "string ldap_error ( resource $link_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_explode_dn": {
        "descr": "Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.", 
        "name": "ldap_explode_dn", 
        "params": [
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "Used to request if the RDNs are returned with only values or their attributes as well. ", 
                "name": "with_attrib"
            }
        ], 
        "path": "php/function.ldap-explode-dn", 
        "syntax": "array ldap_explode_dn ( string $dn , int $with_attrib )", 
        "type": "LDAP"
    }, 
    "ldap_first_attribute": {
        "descr": "Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively.", 
        "name": "ldap_first_attribute", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "ber_identifier is the identifier to internal memory location pointer. ", 
                "name": "result_entry_identifier   ber_identifier"
            }
        ], 
        "path": "php/function.ldap-first-attribute", 
        "syntax": "string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_first_entry": {
        "descr": "Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.", 
        "name": "ldap_first_entry", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-first-entry", 
        "syntax": "resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_first_reference": {
        "descr": "", 
        "name": "ldap_first_reference", 
        "params": [], 
        "path": "php/function.ldap-first-reference", 
        "syntax": "resource ldap_first_reference ( resource $link , resource $result )", 
        "type": "LDAP"
    }, 
    "ldap_free_result": {
        "descr": "Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.", 
        "name": "ldap_free_result", 
        "params": [], 
        "path": "php/function.ldap-free-result", 
        "syntax": "bool ldap_free_result ( resource $result_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_get_attributes": {
        "descr": "Reads attributes and values from an entry in the search result.", 
        "name": "ldap_get_attributes", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-attributes", 
        "syntax": "array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_get_dn": {
        "descr": "Finds out the DN of an entry in the result.", 
        "name": "ldap_get_dn", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-dn", 
        "syntax": "string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_get_entries": {
        "descr": "Reads multiple entries from the given result, and then reading the attributes and multiple values.", 
        "name": "ldap_get_entries", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-entries", 
        "syntax": "array ldap_get_entries ( resource $link_identifier , resource $result_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_get_option": {
        "descr": "Sets retval to the value of the specified option.", 
        "name": "ldap_get_option", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The parameter option can be one of: Option Type LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT integer LDAP_OPT_PROTOCOL_VERSION integer LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array", 
                "name": "option"
            }, 
            {
                "descr": "This will be set to the option value.", 
                "name": "retval"
            }
        ], 
        "path": "php/function.ldap-get-option", 
        "syntax": "bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )", 
        "type": "LDAP"
    }, 
    "ldap_get_values": {
        "descr": "Reads all the values of the attribute in the entry in the result.", 
        "name": "ldap_get_values", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-values", 
        "syntax": "array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )", 
        "type": "LDAP"
    }, 
    "ldap_get_values_len": {
        "descr": "Reads all the values of the attribute in the entry in the result.", 
        "name": "ldap_get_values_len", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-values-len", 
        "syntax": "array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )", 
        "type": "LDAP"
    }, 
    "ldap_list": {
        "descr": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.", 
        "name": "ldap_list", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "filter   attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-list", 
        "syntax": "resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "type": "LDAP"
    }, 
    "ldap_mod_add": {
        "descr": "Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function.", 
        "name": "ldap_mod_add", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-add", 
        "syntax": "bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )", 
        "type": "LDAP"
    }, 
    "ldap_mod_del": {
        "descr": "Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function.", 
        "name": "ldap_mod_del", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-del", 
        "syntax": "bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )", 
        "type": "LDAP"
    }, 
    "ldap_mod_replace": {
        "descr": "Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function.", 
        "name": "ldap_mod_replace", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-replace", 
        "syntax": "bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )", 
        "type": "LDAP"
    }, 
    "ldap_modify": {
        "descr": "Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add().", 
        "name": "ldap_modify", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-modify", 
        "syntax": "bool ldap_modify ( resource $link_identifier , string $dn , array $entry )", 
        "type": "LDAP"
    }, 
    "ldap_next_attribute": {
        "descr": "Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().", 
        "name": "ldap_next_attribute", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The internal state of the pointer is maintained by this parameter. ", 
                "name": "result_entry_identifier   ber_identifier"
            }
        ], 
        "path": "php/function.ldap-next-attribute", 
        "syntax": "string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_next_entry": {
        "descr": "Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().", 
        "name": "ldap_next_entry", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-next-entry", 
        "syntax": "resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )", 
        "type": "LDAP"
    }, 
    "ldap_next_reference": {
        "descr": "", 
        "name": "ldap_next_reference", 
        "params": [], 
        "path": "php/function.ldap-next-reference", 
        "syntax": "resource ldap_next_reference ( resource $link , resource $entry )", 
        "type": "LDAP"
    }, 
    "ldap_parse_reference": {
        "descr": "", 
        "name": "ldap_parse_reference", 
        "params": [], 
        "path": "php/function.ldap-parse-reference", 
        "syntax": "bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )", 
        "type": "LDAP"
    }, 
    "ldap_parse_result": {
        "descr": "", 
        "name": "ldap_parse_result", 
        "params": [], 
        "path": "php/function.ldap-parse-result", 
        "syntax": "bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )", 
        "type": "LDAP"
    }, 
    "ldap_read": {
        "descr": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.", 
        "name": "ldap_read", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "An empty filter is not allowed. ", 
                "name": "filter"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-read", 
        "syntax": "resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "type": "LDAP"
    }, 
    "ldap_rename": {
        "descr": "The entry specified by dn is renamed/moved.", 
        "name": "ldap_rename", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "The new RDN.", 
                "name": "newrdn"
            }, 
            {
                "descr": "The new parent/superior entry.", 
                "name": "newparent"
            }, 
            {
                "descr": "If TRUE the old RDN value(s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry.", 
                "name": "deleteoldrdn"
            }
        ], 
        "path": "php/function.ldap-rename", 
        "syntax": "bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )", 
        "type": "LDAP"
    }, 
    "ldap_sasl_bind": {
        "descr": "", 
        "name": "ldap_sasl_bind", 
        "params": [], 
        "path": "php/function.ldap-sasl-bind", 
        "syntax": "bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )", 
        "type": "LDAP"
    }, 
    "ldap_search": {
        "descr": "Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory.", 
        "name": "ldap_search", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "The search filter can be simple or advanced, using boolean operators in the format described in the LDAP documentation (see the \u00bb Netscape Directory SDK for full information on filters).", 
                "name": "filter"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-search", 
        "syntax": "resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "type": "LDAP"
    }, 
    "ldap_set_option": {
        "descr": "Sets the value of the specified option to be newval.", 
        "name": "ldap_set_option", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The parameter option can be one of: Option Type Available since LDAP_OPT_DEREF integer   LDAP_OPT_SIZELIMIT integer   LDAP_OPT_TIMELIMIT integer   LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0 LDAP_OPT_PROTOCOL_VERSION integer   LDAP_OPT_ERROR_NUMBER integer   LDAP_OPT_REFERRALS bool   LDAP_OPT_RESTART bool   LDAP_OPT_HOST_NAME string   LDAP_OPT_ERROR_STRING string   LDAP_OPT_MATCHED_DN string   LDAP_OPT_SERVER_CONTROLS array   LDAP_OPT_CLIENT_CONTROLS array    LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list of controls, this means that the value must be an array of controls. A control consists of an oid identifying the control, an optional value, and an optional flag for criticality. In PHP a control is given by an array containing an element with the key oid and string value, and two optional elements. The optional elements are key value with string value and key iscritical with boolean value. iscritical defaults to FALSE if not supplied. See \u00bb draft-ietf-ldapext-ldap-c-api-xx.txt for details. See also the second example below.", 
                "name": "option"
            }, 
            {
                "descr": "The new value for the specified option.", 
                "name": "newval"
            }
        ], 
        "path": "php/function.ldap-set-option", 
        "syntax": "bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )", 
        "type": "LDAP"
    }, 
    "ldap_set_rebind_proc": {
        "descr": "", 
        "name": "ldap_set_rebind_proc", 
        "params": [], 
        "path": "php/function.ldap-set-rebind-proc", 
        "syntax": "bool ldap_set_rebind_proc ( resource $link , callable $callback )", 
        "type": "LDAP"
    }, 
    "ldap_sort": {
        "descr": "Sort the result of a LDAP search, returned by ldap_search().", 
        "name": "ldap_sort", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "An search result identifier, returned by ldap_search().", 
                "name": "result"
            }, 
            {
                "descr": "The attribute to use as a key in the sort.", 
                "name": "sortfilter"
            }
        ], 
        "path": "php/function.ldap-sort", 
        "syntax": "bool ldap_sort ( resource $link , resource $result , string $sortfilter )", 
        "type": "LDAP"
    }, 
    "ldap_start_tls": {
        "descr": "", 
        "name": "ldap_start_tls", 
        "params": [], 
        "path": "php/function.ldap-start-tls", 
        "syntax": "bool ldap_start_tls ( resource $link )", 
        "type": "LDAP"
    }, 
    "ldap_t61_to_8859": {
        "descr": "", 
        "name": "ldap_t61_to_8859", 
        "params": [], 
        "path": "php/function.ldap-t61-to-8859", 
        "syntax": "string ldap_t61_to_8859 ( string $value )", 
        "type": "LDAP"
    }, 
    "ldap_unbind": {
        "descr": "Unbinds from the LDAP directory.", 
        "name": "ldap_unbind", 
        "params": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-unbind", 
        "syntax": "bool ldap_unbind ( resource $link_identifier )", 
        "type": "LDAP"
    }, 
    "levenshtein": {
        "descr": "The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).", 
        "name": "levenshtein", 
        "params": [
            {
                "descr": "One of the strings being evaluated for Levenshtein distance.", 
                "name": "str1"
            }, 
            {
                "descr": "One of the strings being evaluated for Levenshtein distance.", 
                "name": "str2"
            }, 
            {
                "descr": "Defines the cost of insertion.", 
                "name": "cost_ins"
            }, 
            {
                "descr": "Defines the cost of replacement.", 
                "name": "cost_rep"
            }, 
            {
                "descr": "Defines the cost of deletion.", 
                "name": "cost_del"
            }
        ], 
        "path": "php/function.levenshtein", 
        "syntax": "int levenshtein ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "libxml_clear_errors": {
        "descr": "libxml_clear_errors() clears the libxml error buffer.", 
        "name": "libxml_clear_errors", 
        "params": [], 
        "path": "php/function.libxml-clear-errors", 
        "syntax": "void libxml_clear_errors ( void )", 
        "type": "XML"
    }, 
    "libxml_disable_entity_loader": {
        "descr": "Disable/enable the ability to load external entities.", 
        "name": "libxml_disable_entity_loader", 
        "params": [
            {
                "descr": "Disable (TRUE) or enable (FALSE) libxml extensions (such as DOM, XMLWriter and XMLReader) to load external entities.", 
                "name": "disable"
            }
        ], 
        "path": "php/function.libxml-disable-entity-loader", 
        "syntax": "bool libxml_disable_entity_loader ([ bool $disable = true ] )", 
        "type": "XML"
    }, 
    "libxml_get_errors": {
        "descr": "Retrieve array of errors.", 
        "name": "libxml_get_errors", 
        "params": [], 
        "path": "php/function.libxml-get-errors", 
        "syntax": "array libxml_get_errors ( void )", 
        "type": "XML"
    }, 
    "libxml_get_last_error": {
        "descr": "Retrieve last error from libxml.", 
        "name": "libxml_get_last_error", 
        "params": [], 
        "path": "php/function.libxml-get-last-error", 
        "syntax": "LibXMLError libxml_get_last_error ( void )", 
        "type": "XML"
    }, 
    "libxml_set_external_entity_loader": {
        "descr": "Changes the default external entity loader.", 
        "name": "libxml_set_external_entity_loader", 
        "params": [
            {
                "descr": "A callable that takes three arguments. ", 
                "name": "resolver_function"
            }
        ], 
        "path": "php/function.libxml-set-external-entity-loader", 
        "syntax": "void libxml_set_external_entity_loader ( callable $resolver_function )", 
        "type": "XML"
    }, 
    "libxml_set_streams_context": {
        "descr": "Sets the streams context for the next libxml document load or write.", 
        "name": "libxml_set_streams_context", 
        "params": [
            {
                "descr": "The stream context resource (created with stream_context_create())", 
                "name": "streams_context"
            }
        ], 
        "path": "php/function.libxml-set-streams-context", 
        "syntax": "void libxml_set_streams_context ( resource $streams_context )", 
        "type": "XML"
    }, 
    "libxml_use_internal_errors": {
        "descr": "libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.", 
        "name": "libxml_use_internal_errors", 
        "params": [
            {
                "descr": "Enable (TRUE) user error handling or disable (FALSE) user error handling. ", 
                "name": "use_errors"
            }
        ], 
        "path": "php/function.libxml-use-internal-errors", 
        "syntax": "bool libxml_use_internal_errors ([ bool $use_errors = false ] )", 
        "type": "XML"
    }, 
    "link": {
        "descr": "link() creates a hard link.", 
        "name": "link", 
        "params": [
            {
                "descr": "Target of the link.", 
                "name": "target"
            }, 
            {
                "descr": "The link name.", 
                "name": "link"
            }
        ], 
        "path": "php/function.link", 
        "syntax": "bool link ( string $target , string $link )", 
        "type": "File System"
    }, 
    "linkinfo": {
        "descr": "Gets information about a link.", 
        "name": "linkinfo", 
        "params": [
            {
                "descr": "Path to the link.", 
                "name": "path"
            }
        ], 
        "path": "php/function.linkinfo", 
        "syntax": "int linkinfo ( string $path )", 
        "type": "File System"
    }, 
    "list": {
        "descr": "Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.", 
        "name": "list", 
        "params": [
            {
                "descr": "A variable.", 
                "name": "var1"
            }
        ], 
        "path": "php/function.list", 
        "syntax": "array list ( mixed $var1 [, mixed $... ] )", 
        "type": "Array"
    }, 
    "localeconv": {
        "descr": "Returns an associative array containing localized numeric and monetary formatting information.", 
        "name": "localeconv", 
        "params": [], 
        "path": "php/function.localeconv", 
        "syntax": "array localeconv ( void )", 
        "type": "String"
    }, 
    "localtime": {
        "descr": "The localtime() function returns an array identical to that of the structure returned by the C function call.", 
        "name": "localtime", 
        "params": [
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }, 
            {
                "descr": "If set to FALSE or not supplied then the array is returned as a regular, numerically indexed array. ", 
                "name": "is_associative"
            }
        ], 
        "path": "php/function.localtime", 
        "syntax": "array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )", 
        "type": "Date and Time"
    }, 
    "log": {
        "descr": "If the optional base parameter is specified, log() returns logbasearg, otherwise log() returns the natural logarithm of arg.", 
        "name": "log", 
        "params": [
            {
                "descr": "The value to calculate the logarithm for", 
                "name": "arg"
            }, 
            {
                "descr": "The optional logarithmic base to use (defaults to 'e' and so to the natural logarithm).", 
                "name": "base"
            }
        ], 
        "path": "php/function.log", 
        "syntax": "float log ( float $arg [, float $base = M_E ] )", 
        "type": "Mathematics"
    }, 
    "log10": {
        "descr": "Returns the base-10 logarithm of arg.", 
        "name": "log10", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.log10", 
        "syntax": "float log10 ( float $arg )", 
        "type": "Mathematics"
    }, 
    "log1p": {
        "descr": "log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.", 
        "name": "log1p", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "number"
            }
        ], 
        "path": "php/function.log1p", 
        "syntax": "float log1p ( float $number )", 
        "type": "Mathematics"
    }, 
    "long2ip": {
        "descr": "The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.", 
        "name": "long2ip", 
        "params": [
            {
                "descr": "A proper address representation.", 
                "name": "proper_address"
            }
        ], 
        "path": "php/function.long2ip", 
        "syntax": "string long2ip ( string $proper_address )", 
        "type": "Networking"
    }, 
    "lstat": {
        "descr": "Gathers the statistics of the file or symbolic link named by filename.", 
        "name": "lstat", 
        "params": [
            {
                "descr": "Path to a file or a symbolic link.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.lstat", 
        "syntax": "array lstat ( string $filename )", 
        "type": "File System"
    }, 
    "ltrim": {
        "descr": "Strip whitespace (or other characters) from the beginning of a string.", 
        "name": "ltrim", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can also specify the characters you want to strip, by means of the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.ltrim", 
        "syntax": "string ltrim ( string $str [, string $character_mask ] )", 
        "type": "String"
    }, 
    "mail": {
        "descr": "Sends an email.", 
        "name": "mail", 
        "params": [
            {
                "descr": "Receiver, or receivers of the mail. ", 
                "name": "to"
            }, 
            {
                "descr": "Subject of the email to be sent. ", 
                "name": "subject"
            }, 
            {
                "descr": "Message to be sent.   Each line should be separated with a CRLF (\\r\\n). ", 
                "name": "message"
            }, 
            {
                "descr": "String to be inserted at the end of the email header. ", 
                "name": "additional_headers (optional)"
            }, 
            {
                "descr": "The additional_parameters parameter can be used to pass additional flags as command line options to the program configured to be used when sending mail, as defined by the sendmail_path configuration setting. For example, this can be used to set the envelope sender address when using sendmail with the -f sendmail option.   This parameter is escaped by escapeshellcmd() internally to prevent command execution. escapeshellcmd() prevents command execution, but allows to add addtional parameters. For security reason, this parameter should be validated.   Since escapeshellcmd() is applied automatically, some characters that are allowed as email addresses by internet RFCs cannot be used. Programs that are required to use these characters mail() cannot be used.   The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent a 'X-Warning' header from being added to the message when the envelope sender (-f) is set using this method. For sendmail users, this file is /etc/mail/trusted-users.", 
                "name": "additional_parameters (optional)"
            }
        ], 
        "path": "php/function.mail", 
        "syntax": "bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )", 
        "type": "Mail"
    }, 
    "mailparse_determine_best_xfer_encoding": {
        "descr": "Figures out the best way of encoding the content read from the given file pointer.", 
        "name": "mailparse_determine_best_xfer_encoding", 
        "params": [
            {
                "descr": "A valid file pointer, which must be seek-able.", 
                "name": "fp"
            }
        ], 
        "path": "php/function.mailparse-determine-best-xfer-encoding", 
        "syntax": "string mailparse_determine_best_xfer_encoding ( resource $fp )", 
        "type": "Mail"
    }, 
    "mailparse_msg_create": {
        "descr": "Create a MIME mail resource.", 
        "name": "mailparse_msg_create", 
        "params": [], 
        "path": "php/function.mailparse-msg-create", 
        "syntax": "resource mailparse_msg_create ( void )", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_part": {
        "descr": "", 
        "name": "mailparse_msg_extract_part", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-part", 
        "syntax": "void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] )", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_part_file": {
        "descr": "Extracts/decodes a message section from the supplied filename.", 
        "name": "mailparse_msg_extract_part_file", 
        "params": [
            {
                "descr": "A valid MIME resource, created with mailparse_msg_create().", 
                "name": "mimemail"
            }, 
            {
                "descr": "Can be a file name or a valid stream resource.", 
                "name": "filename"
            }, 
            {
                "descr": "If set, this must be either a valid callback that will be passed the extracted section, or NULL to make this function return the extracted section. ", 
                "name": "callbackfunc"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-part-file", 
        "syntax": "string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] )", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_whole_part_file": {
        "descr": "", 
        "name": "mailparse_msg_extract_whole_part_file", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-whole-part-file", 
        "syntax": "string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callable $callbackfunc ] )", 
        "type": "Mail"
    }, 
    "mailparse_msg_free": {
        "descr": "Frees a MIME resource.", 
        "name": "mailparse_msg_free", 
        "params": [
            {
                "descr": "A valid MIME resource allocated by mailparse_msg_create() or mailparse_msg_parse_file().", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-free", 
        "syntax": "bool mailparse_msg_free ( resource $mimemail )", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_part": {
        "descr": "", 
        "name": "mailparse_msg_get_part", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-part", 
        "syntax": "resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_part_data": {
        "descr": "", 
        "name": "mailparse_msg_get_part_data", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-part-data", 
        "syntax": "array mailparse_msg_get_part_data ( resource $mimemail )", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_structure": {
        "descr": "", 
        "name": "mailparse_msg_get_structure", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-structure", 
        "syntax": "array mailparse_msg_get_structure ( resource $mimemail )", 
        "type": "Mail"
    }, 
    "mailparse_msg_parse": {
        "descr": "Incrementally parse data into the supplied mime mail resource.", 
        "name": "mailparse_msg_parse", 
        "params": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-parse", 
        "syntax": "bool mailparse_msg_parse ( resource $mimemail , string $data )", 
        "type": "Mail"
    }, 
    "mailparse_msg_parse_file": {
        "descr": "Parses a file. This is the optimal way of parsing a mail file that you have on disk.", 
        "name": "mailparse_msg_parse_file", 
        "params": [
            {
                "descr": "Path to the file holding the message. ", 
                "name": "filename"
            }
        ], 
        "path": "php/function.mailparse-msg-parse-file", 
        "syntax": "resource mailparse_msg_parse_file ( string $filename )", 
        "type": "Mail"
    }, 
    "mailparse_rfc822_parse_addresses": {
        "descr": "Parses a \u00bb RFC 822 compliant recipient list, such as that found in the To: header.", 
        "name": "mailparse_rfc822_parse_addresses", 
        "params": [
            {
                "descr": "A string containing addresses, like in: Wez Furlong <wez@example.com>, doe@example.com  Note:  This string must not include the header name.", 
                "name": "addresses"
            }
        ], 
        "path": "php/function.mailparse-rfc822-parse-addresses", 
        "syntax": "array mailparse_rfc822_parse_addresses ( string $addresses )", 
        "type": "Mail"
    }, 
    "mailparse_stream_encode": {
        "descr": "Streams data from the source file pointer, apply encoding and write to the destination file pointer.", 
        "name": "mailparse_stream_encode", 
        "params": [
            {
                "descr": "A valid file handle. The file is streamed through the parser.", 
                "name": "sourcefp"
            }, 
            {
                "descr": "The destination file handle in which the encoded data will be written.", 
                "name": "destfp"
            }, 
            {
                "descr": "One of the character encodings supported by the mbstring module.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mailparse-stream-encode", 
        "syntax": "bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )", 
        "type": "Mail"
    }, 
    "mailparse_uudecode_all": {
        "descr": "Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file.", 
        "name": "mailparse_uudecode_all", 
        "params": [
            {
                "descr": "A valid file pointer.", 
                "name": "fp"
            }
        ], 
        "path": "php/function.mailparse-uudecode-all", 
        "syntax": "array mailparse_uudecode_all ( resource $fp )", 
        "type": "Mail"
    }, 
    "max": {
        "descr": "If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.", 
        "name": "max", 
        "params": [
            {
                "descr": "An array containing the values.", 
                "name": "values"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value1"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value2"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "..."
            }
        ], 
        "path": "php/function.max", 
        "syntax": "mixed max ( array $values )", 
        "type": "Mathematics"
    }, 
    "mb_check_encoding": {
        "descr": "Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called \"Invalid Encoding Attack\".", 
        "name": "mb_check_encoding", 
        "params": [
            {
                "descr": "The byte stream to check. If it is omitted, this function checks all the input from the beginning of the request.", 
                "name": "var"
            }, 
            {
                "descr": "The expected encoding.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-check-encoding", 
        "syntax": "bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_convert_case": {
        "descr": "Performs case folding on a string, converted in the way specified by mode.", 
        "name": "mb_convert_case", 
        "params": [
            {
                "descr": "The string being converted.", 
                "name": "str"
            }, 
            {
                "descr": "The mode of the conversion. It can be one of MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.", 
                "name": "mode"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-convert-case", 
        "syntax": "string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_convert_encoding": {
        "descr": "Converts the character encoding of string str to to_encoding from optionally from_encoding.", 
        "name": "mb_convert_encoding", 
        "params": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "The type of encoding that str is being converted to.", 
                "name": "to_encoding"
            }, 
            {
                "descr": "Is specified by character code names before conversion. ", 
                "name": "from_encoding"
            }
        ], 
        "path": "php/function.mb-convert-encoding", 
        "syntax": "string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_convert_kana": {
        "descr": "Performs a \"han-kaku\" - \"zen-kaku\" conversion for string str. This function is only useful for Japanese.", 
        "name": "mb_convert_kana", 
        "params": [
            {
                "descr": "The string being converted.", 
                "name": "str"
            }, 
            {
                "descr": "The conversion option.   Specify with a combination of following options. ", 
                "name": "option"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-convert-kana", 
        "syntax": "string mb_convert_kana ( string $str [, string $option = \"KV\" [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_convert_variables": {
        "descr": "Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding.", 
        "name": "mb_convert_variables", 
        "params": [
            {
                "descr": "The encoding that the string is being converted to.", 
                "name": "to_encoding"
            }, 
            {
                "descr": "from_encoding is specified as an array or comma separated string, it tries to detect encoding from from-coding. ", 
                "name": "from_encoding"
            }, 
            {
                "descr": "vars is the reference to the variable being converted. ", 
                "name": "vars"
            }, 
            {
                "descr": "Additional vars.", 
                "name": "..."
            }
        ], 
        "path": "php/function.mb-convert-variables", 
        "syntax": "string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )", 
        "type": "Encoding"
    }, 
    "mb_decode_mimeheader": {
        "descr": "Decodes encoded-word string str in MIME header.", 
        "name": "mb_decode_mimeheader", 
        "params": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.mb-decode-mimeheader", 
        "syntax": "string mb_decode_mimeheader ( string $str )", 
        "type": "Encoding"
    }, 
    "mb_decode_numericentity": {
        "descr": "Convert numeric string reference of string str in a specified block to character.", 
        "name": "mb_decode_numericentity", 
        "params": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "convmap is an array that specifies the code area to convert.", 
                "name": "convmap"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-decode-numericentity", 
        "syntax": "string mb_decode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_detect_encoding": {
        "descr": "Detects character encoding in string str.", 
        "name": "mb_detect_encoding", 
        "params": [
            {
                "descr": "The string being detected.", 
                "name": "str"
            }, 
            {
                "descr": "encoding_list is list of character encoding. ", 
                "name": "encoding_list"
            }, 
            {
                "descr": "strict specifies whether to use the strict encoding detection or not. ", 
                "name": "strict"
            }
        ], 
        "path": "php/function.mb-detect-encoding", 
        "syntax": "string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )", 
        "type": "Encoding"
    }, 
    "mb_detect_order": {
        "descr": "Sets the automatic character encoding detection order to encoding_list.", 
        "name": "mb_detect_order", 
        "params": [
            {
                "descr": "encoding_list is an array or comma separated list of character encoding. ", 
                "name": "encoding_list"
            }
        ], 
        "path": "php/function.mb-detect-order", 
        "syntax": "mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )", 
        "type": "Encoding"
    }, 
    "mb_encode_mimeheader": {
        "descr": "Encodes a given string str by the MIME header encoding scheme.", 
        "name": "mb_encode_mimeheader", 
        "params": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "charset specifies the name of the character set in which str is represented in. ", 
                "name": "charset"
            }, 
            {
                "descr": "transfer_encoding specifies the scheme of MIME encoding. ", 
                "name": "transfer_encoding"
            }, 
            {
                "descr": "linefeed specifies the EOL (end-of-line) marker with which mb_encode_mimeheader() performs line-folding (a \u00bb RFC term, the act of breaking a line longer than a certain length into multiple lines. ", 
                "name": "linefeed"
            }, 
            {
                "descr": "Indentation of the first line (number of characters in the header before str).", 
                "name": "indent"
            }
        ], 
        "path": "php/function.mb-encode-mimeheader", 
        "syntax": "string mb_encode_mimeheader ( string $str [, string $charset = mb_internal_encoding() [, string $transfer_encoding = \"B\" [, string $linefeed = \"\\r\\n\" [, int $indent = 0 ]]]] )", 
        "type": "Encoding"
    }, 
    "mb_encode_numericentity": {
        "descr": "Converts specified character codes in string str from HTML numeric character reference to character code.", 
        "name": "mb_encode_numericentity", 
        "params": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "convmap is array specifies code area to convert.", 
                "name": "convmap"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-encode-numericentity", 
        "syntax": "string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )", 
        "type": "Encoding"
    }, 
    "mb_encoding_aliases": {
        "descr": "Returns an array of aliases for a known encoding type.", 
        "name": "mb_encoding_aliases", 
        "params": [
            {
                "descr": "The encoding type being checked, for aliases.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-encoding-aliases", 
        "syntax": "array mb_encoding_aliases ( string $encoding )", 
        "type": "Encoding"
    }, 
    "mb_ereg": {
        "descr": "", 
        "name": "mb_ereg", 
        "params": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search string.", 
                "name": "string"
            }, 
            {
                "descr": "Contains a substring of the matched string.", 
                "name": "regs"
            }
        ], 
        "path": "php/function.mb-ereg", 
        "syntax": "int mb_ereg ( string $pattern , string $string [, array $regs ] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_match": {
        "descr": "A regular expression match for a multibyte string", 
        "name": "mb_ereg_match", 
        "params": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being evaluated.", 
                "name": "string"
            }
        ], 
        "path": "php/function.mb-ereg-match", 
        "syntax": "bool mb_ereg_match ( string $pattern , string $string [, string $option = \"msr\" ] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_replace": {
        "descr": "", 
        "name": "mb_ereg_replace", 
        "params": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The replacement text.", 
                "name": "replacement"
            }, 
            {
                "descr": "The string being checked.", 
                "name": "string"
            }, 
            {
                "descr": "Matching condition can be set by option parameter. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-replace", 
        "syntax": "string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = \"msr\" ] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_replace_callback": {
        "descr": "Scans string for matches to pattern, then replaces the matched text with the output of callback function.", 
        "name": "mb_ereg_replace_callback", 
        "params": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "A callback that will be called and passed an array of matched elements in the subject string. ", 
                "name": "callback"
            }, 
            {
                "descr": "The string being checked.", 
                "name": "string"
            }, 
            {
                "descr": "Matching condition can be set by option parameter. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-replace-callback", 
        "syntax": "string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = \"msr\" ] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search": {
        "descr": "Performs a multibyte regular expression match for a predefined multibyte string.", 
        "name": "mb_ereg_search", 
        "params": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search", 
        "syntax": "bool mb_ereg_search ([ string $pattern [, string $option = \"ms\" ]] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_getpos": {
        "descr": "", 
        "name": "mb_ereg_search_getpos", 
        "params": [], 
        "path": "php/function.mb-ereg-search-getpos", 
        "syntax": "int mb_ereg_search_getpos ( void )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_getregs": {
        "descr": "", 
        "name": "mb_ereg_search_getregs", 
        "params": [], 
        "path": "php/function.mb-ereg-search-getregs", 
        "syntax": "array mb_ereg_search_getregs ( void )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_init": {
        "descr": "mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().", 
        "name": "mb_ereg_search_init", 
        "params": [
            {
                "descr": "The search string.", 
                "name": "string"
            }, 
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-init", 
        "syntax": "bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = \"msr\" ]] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_pos": {
        "descr": "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string", 
        "name": "mb_ereg_search_pos", 
        "params": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-pos", 
        "syntax": "array mb_ereg_search_pos ([ string $pattern [, string $option = \"ms\" ]] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_regs": {
        "descr": "Returns the matched part of a multibyte regular expression.", 
        "name": "mb_ereg_search_regs", 
        "params": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-regs", 
        "syntax": "array mb_ereg_search_regs ([ string $pattern [, string $option = \"ms\" ]] )", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_setpos": {
        "descr": "", 
        "name": "mb_ereg_search_setpos", 
        "params": [
            {
                "descr": "The position to set.", 
                "name": "position"
            }
        ], 
        "path": "php/function.mb-ereg-search-setpos", 
        "syntax": "bool mb_ereg_search_setpos ( int $position )", 
        "type": "Encoding"
    }, 
    "mb_eregi": {
        "descr": "", 
        "name": "mb_eregi", 
        "params": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being searched.", 
                "name": "string"
            }, 
            {
                "descr": "Contains a substring of the matched string.", 
                "name": "regs"
            }
        ], 
        "path": "php/function.mb-eregi", 
        "syntax": "int mb_eregi ( string $pattern , string $string [, array $regs ] )", 
        "type": "Encoding"
    }, 
    "mb_eregi_replace": {
        "descr": "", 
        "name": "mb_eregi_replace", 
        "params": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The replacement text.", 
                "name": "replace"
            }, 
            {
                "descr": "The searched string.", 
                "name": "string"
            }, 
            {
                "descr": "option has the same meaning as in mb_ereg_replace().", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-eregi-replace", 
        "syntax": "string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = \"msri\" ] )", 
        "type": "Encoding"
    }, 
    "mb_get_info": {
        "descr": "", 
        "name": "mb_get_info", 
        "params": [
            {
                "descr": "If type isn't specified or is specified to \"all\", an array having the elements \"internal_encoding\", \"http_output\", \"http_input\", \"func_overload\", \"mail_charset\", \"mail_header_encoding\", \"mail_body_encoding\" will be returned.   If type is specified as \"http_output\", \"http_input\", \"internal_encoding\", \"func_overload\", the specified setting parameter will be returned.", 
                "name": "type"
            }
        ], 
        "path": "php/function.mb-get-info", 
        "syntax": "mixed mb_get_info ([ string $type = \"all\" ] )", 
        "type": "Encoding"
    }, 
    "mb_http_input": {
        "descr": "", 
        "name": "mb_http_input", 
        "params": [
            {
                "descr": "Input string specifies the input type. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.mb-http-input", 
        "syntax": "mixed mb_http_input ([ string $type = \"\" ] )", 
        "type": "Encoding"
    }, 
    "mb_http_output": {
        "descr": "Set/Get the HTTP output character encoding. Output after this function is converted to encoding.", 
        "name": "mb_http_output", 
        "params": [
            {
                "descr": "If encoding is set, mb_http_output() sets the HTTP output character encoding to encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-http-output", 
        "syntax": "mixed mb_http_output ([ string $encoding = mb_http_output() ] )", 
        "type": "Encoding"
    }, 
    "mb_internal_encoding": {
        "descr": "Set/Get the internal character encoding", 
        "name": "mb_internal_encoding", 
        "params": [
            {
                "descr": "encoding is the character encoding name used for the HTTP input character encoding conversion, HTTP output character encoding conversion, and the default character encoding for string functions defined by the mbstring module. You should notice that the internal encoding is totally different from the one for multibyte regex.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-internal-encoding", 
        "syntax": "mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_language": {
        "descr": "Set/Get the current language.", 
        "name": "mb_language", 
        "params": [
            {
                "descr": "Used for encoding e-mail messages. ", 
                "name": "language"
            }
        ], 
        "path": "php/function.mb-language", 
        "syntax": "mixed mb_language ([ string $language = mb_language() ] )", 
        "type": "Encoding"
    }, 
    "mb_list_encodings": {
        "descr": "Returns an array containing all supported encodings.", 
        "name": "mb_list_encodings", 
        "params": [], 
        "path": "php/function.mb-list-encodings", 
        "syntax": "array mb_list_encodings ( void )", 
        "type": "Encoding"
    }, 
    "mb_output_handler": {
        "descr": "mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.", 
        "name": "mb_output_handler", 
        "params": [
            {
                "descr": "The contents of the output buffer.", 
                "name": "contents"
            }, 
            {
                "descr": "The status of the output buffer.", 
                "name": "status"
            }
        ], 
        "path": "php/function.mb-output-handler", 
        "syntax": "string mb_output_handler ( string $contents , int $status )", 
        "type": "Encoding"
    }, 
    "mb_parse_str": {
        "descr": "Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.", 
        "name": "mb_parse_str", 
        "params": [
            {
                "descr": "The URL encoded data.", 
                "name": "encoded_string"
            }, 
            {
                "descr": "An array containing decoded and character encoded converted values.", 
                "name": "result"
            }
        ], 
        "path": "php/function.mb-parse-str", 
        "syntax": "bool mb_parse_str ( string $encoded_string [, array &$result ] )", 
        "type": "Encoding"
    }, 
    "mb_preferred_mime_name": {
        "descr": "Get a MIME charset string for a specific encoding.", 
        "name": "mb_preferred_mime_name", 
        "params": [
            {
                "descr": "The encoding being checked.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-preferred-mime-name", 
        "syntax": "string mb_preferred_mime_name ( string $encoding )", 
        "type": "Encoding"
    }, 
    "mb_regex_encoding": {
        "descr": "Set/Get character encoding for a multibyte regex.", 
        "name": "mb_regex_encoding", 
        "params": [
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-regex-encoding", 
        "syntax": "mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_regex_set_options": {
        "descr": "", 
        "name": "mb_regex_set_options", 
        "params": [
            {
                "descr": "The options to set. This is a a string where each character is an option. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.mb-regex-set-options", 
        "syntax": "string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )", 
        "type": "Encoding"
    }, 
    "mb_send_mail": {
        "descr": "Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It's a wrapper function for mail(), so see also mail() for details.", 
        "name": "mb_send_mail", 
        "params": [
            {
                "descr": "The mail addresses being sent to. ", 
                "name": "to"
            }, 
            {
                "descr": "The subject of the mail.", 
                "name": "subject"
            }, 
            {
                "descr": "The message of the mail.", 
                "name": "message"
            }, 
            {
                "descr": "String to be inserted at the end of the email header. ", 
                "name": "additional_headers (optional)"
            }, 
            {
                "descr": "additional_parameter is a MTA command line parameter. ", 
                "name": "additional_parameter"
            }
        ], 
        "path": "php/function.mb-send-mail", 
        "syntax": "bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )", 
        "type": "Encoding"
    }, 
    "mb_split": {
        "descr": "", 
        "name": "mb_split", 
        "params": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being split.", 
                "name": "string"
            }, 
            {
                "descr": "If optional parameter limit is specified, it will be split in limit elements as maximum.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.mb-split", 
        "syntax": "array mb_split ( string $pattern , string $string [, int $limit = -1 ] )", 
        "type": "Encoding"
    }, 
    "mb_strcut": {
        "descr": "mb_strcut() extracts a substring from a string similarly to mb_substr(), but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the substr() function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.", 
        "name": "mb_strcut", 
        "params": [
            {
                "descr": "The string being cut.", 
                "name": "str"
            }, 
            {
                "descr": "Starting position in bytes.", 
                "name": "start"
            }, 
            {
                "descr": "Length in bytes. If omitted or NULL is passed, extract all bytes to the end of the string.", 
                "name": "length"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strcut", 
        "syntax": "string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strimwidth": {
        "descr": "Truncates string str to specified width.", 
        "name": "mb_strimwidth", 
        "params": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "The start position offset. Number of characters from the beginning of string. ", 
                "name": "start"
            }, 
            {
                "descr": "The width of the desired trim.", 
                "name": "width"
            }, 
            {
                "descr": "A string that is added to the end of string when string is truncated.", 
                "name": "trimmarker"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strimwidth", 
        "syntax": "string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker = \"\" [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_stripos": {
        "descr": "mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos(), mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_stripos", 
        "params": [
            {
                "descr": "The string from which to get the position of the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "The position in haystack to start searching", 
                "name": "offset"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-stripos", 
        "syntax": "int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_stristr": {
        "descr": "mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_stristr", 
        "params": [
            {
                "descr": "The string from which to get the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "before_needle"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-stristr", 
        "syntax": "string mb_stristr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strlen": {
        "descr": "Gets the length of a string.", 
        "name": "mb_strlen", 
        "params": [
            {
                "descr": "The string being checked for length.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strlen", 
        "syntax": "mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_strpos": {
        "descr": "Finds position of the first occurrence of a string in a string.", 
        "name": "mb_strpos", 
        "params": [
            {
                "descr": "The string being checked.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack. ", 
                "name": "needle"
            }, 
            {
                "descr": "The search offset. If it is not specified, 0 is used.", 
                "name": "offset"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strpos", 
        "syntax": "int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strrchr": {
        "descr": "mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.", 
        "name": "mb_strrchr", 
        "params": [
            {
                "descr": "The string from which to get the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "part"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrchr", 
        "syntax": "string mb_strrchr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strrichr": {
        "descr": "mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_strrichr", 
        "params": [
            {
                "descr": "The string from which to get the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "part"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrichr", 
        "syntax": "string mb_strrichr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strripos": {
        "descr": "mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.", 
        "name": "mb_strripos", 
        "params": [
            {
                "descr": "The string from which to get the position of the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "The position in haystack to start searching", 
                "name": "offset"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strripos", 
        "syntax": "int mb_strripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strrpos": {
        "descr": "Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1.", 
        "name": "mb_strrpos", 
        "params": [
            {
                "descr": "The string being checked, for the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack.", 
                "name": "needle"
            }, 
            {
                "descr": "May be specified to begin searching an arbitrary number of characters into the string. ", 
                "name": "offset"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrpos", 
        "syntax": "int mb_strrpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strstr": {
        "descr": "mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.", 
        "name": "mb_strstr", 
        "params": [
            {
                "descr": "The string from which to get the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "before_needle"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strstr", 
        "syntax": "string mb_strstr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_strtolower": {
        "descr": "Returns str with all alphabetic characters converted to lowercase.", 
        "name": "mb_strtolower", 
        "params": [
            {
                "descr": "The string being lowercased.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strtolower", 
        "syntax": "string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_strtoupper": {
        "descr": "Returns str with all alphabetic characters converted to uppercase.", 
        "name": "mb_strtoupper", 
        "params": [
            {
                "descr": "The string being uppercased.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strtoupper", 
        "syntax": "string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_strwidth": {
        "descr": "Returns the width of string str.", 
        "name": "mb_strwidth", 
        "params": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strwidth", 
        "syntax": "int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mb_substitute_character": {
        "descr": "Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value).", 
        "name": "mb_substitute_character", 
        "params": [
            {
                "descr": "Specify the Unicode value as an integer, or as one of the following strings:   \"none\": no output     \"long\": Output character code value (Example: U+3000, JIS+7E7E)     \"entity\": Output character entity (Example: \u0200)", 
                "name": "substrchar"
            }
        ], 
        "path": "php/function.mb-substitute-character", 
        "syntax": "mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )", 
        "type": "Encoding"
    }, 
    "mb_substr": {
        "descr": "Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.", 
        "name": "mb_substr", 
        "params": [
            {
                "descr": "The string to extract the substring from.", 
                "name": "str"
            }, 
            {
                "descr": "Position of first character to use from str.", 
                "name": "start"
            }, 
            {
                "descr": "Maximum number of characters to use from str. ", 
                "name": "length"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-substr", 
        "syntax": "string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "type": "Encoding"
    }, 
    "mb_substr_count": {
        "descr": "Counts the number of times the needle substring occurs in the haystack string.", 
        "name": "mb_substr_count", 
        "params": [
            {
                "descr": "The string being checked.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string being found.", 
                "name": "needle"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-substr-count", 
        "syntax": "int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )", 
        "type": "Encoding"
    }, 
    "mcrypt_cbc": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_cbc", 
        "params": [], 
        "path": "php/function.mcrypt-cbc", 
        "syntax": "string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_cfb": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_cfb", 
        "params": [], 
        "path": "php/function.mcrypt-cfb", 
        "syntax": "string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )", 
        "type": "Cryptography"
    }, 
    "mcrypt_create_iv": {
        "descr": "Creates an initialization vector (IV) from a random source.", 
        "name": "mcrypt_create_iv", 
        "params": [
            {
                "descr": "The size of the IV.", 
                "name": "size"
            }, 
            {
                "descr": "The source of the IV. The source can be MCRYPT_RAND (system random number generator), MCRYPT_DEV_RANDOM (read data from /dev/random) and MCRYPT_DEV_URANDOM (read data from /dev/urandom). ", 
                "name": "source"
            }
        ], 
        "path": "php/function.mcrypt-create-iv", 
        "syntax": "string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_decrypt": {
        "descr": "Decrypts the data and returns the unencrypted data.", 
        "name": "mcrypt_decrypt", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "The key with which the data was encrypted. ", 
                "name": "key"
            }, 
            {
                "descr": "The data that will be decrypted with the given cipher and mode. ", 
                "name": "data"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-decrypt", 
        "syntax": "string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_ecb": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_ecb", 
        "params": [], 
        "path": "php/function.mcrypt-ecb", 
        "syntax": "string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_algorithms_name": {
        "descr": "This function returns the name of the algorithm.", 
        "name": "mcrypt_enc_get_algorithms_name", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-algorithms-name", 
        "syntax": "string mcrypt_enc_get_algorithms_name ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_block_size": {
        "descr": "Gets the blocksize of the opened algorithm.", 
        "name": "mcrypt_enc_get_block_size", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-block-size", 
        "syntax": "int mcrypt_enc_get_block_size ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_iv_size": {
        "descr": "This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode.", 
        "name": "mcrypt_enc_get_iv_size", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-iv-size", 
        "syntax": "int mcrypt_enc_get_iv_size ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_key_size": {
        "descr": "Gets the maximum supported key size of the algorithm in bytes.", 
        "name": "mcrypt_enc_get_key_size", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-key-size", 
        "syntax": "int mcrypt_enc_get_key_size ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_modes_name": {
        "descr": "This function returns the name of the mode.", 
        "name": "mcrypt_enc_get_modes_name", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-modes-name", 
        "syntax": "string mcrypt_enc_get_modes_name ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_supported_key_sizes": {
        "descr": "Gets the supported key sizes of the opened algorithm.", 
        "name": "mcrypt_enc_get_supported_key_sizes", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-supported-key-sizes", 
        "syntax": "array mcrypt_enc_get_supported_key_sizes ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_algorithm": {
        "descr": "Tells whether the algorithm of the opened mode is a block algorithm.", 
        "name": "mcrypt_enc_is_block_algorithm", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-algorithm", 
        "syntax": "bool mcrypt_enc_is_block_algorithm ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_algorithm_mode": {
        "descr": "Tells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb)..", 
        "name": "mcrypt_enc_is_block_algorithm_mode", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-algorithm-mode", 
        "syntax": "bool mcrypt_enc_is_block_algorithm_mode ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_mode": {
        "descr": "Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).", 
        "name": "mcrypt_enc_is_block_mode", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-mode", 
        "syntax": "bool mcrypt_enc_is_block_mode ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_self_test": {
        "descr": "This function runs the self test on the algorithm specified by the descriptor td.", 
        "name": "mcrypt_enc_self_test", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-self-test", 
        "syntax": "int mcrypt_enc_self_test ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_encrypt": {
        "descr": "Encrypts the data and returns it.", 
        "name": "mcrypt_encrypt", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "The key with which the data will be encrypted. ", 
                "name": "key"
            }, 
            {
                "descr": "The data that will be encrypted with the given cipher and mode. ", 
                "name": "data"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-encrypt", 
        "syntax": "string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic": {
        "descr": "This function encrypts data. The data is padded with \"\\0\" to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data.", 
        "name": "mcrypt_generic", 
        "params": [
            {
                "descr": "The encryption descriptor.   The encryption handle should always be initialized with mcrypt_generic_init() with a key and an IV before calling this function. ", 
                "name": "td"
            }, 
            {
                "descr": "The data to encrypt.", 
                "name": "data"
            }
        ], 
        "path": "php/function.mcrypt-generic", 
        "syntax": "string mcrypt_generic ( resource $td , string $data )", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_deinit": {
        "descr": "This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.)", 
        "name": "mcrypt_generic_deinit", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-generic-deinit", 
        "syntax": "bool mcrypt_generic_deinit ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_end": {
        "descr": "", 
        "name": "mcrypt_generic_end", 
        "params": [], 
        "path": "php/function.mcrypt-generic-end", 
        "syntax": "bool mcrypt_generic_end ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_init": {
        "descr": "You need to call this function before every call to mcrypt_generic() or mdecrypt_generic().", 
        "name": "mcrypt_generic_init", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }, 
            {
                "descr": "The maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size() and every value smaller than this is legal.", 
                "name": "key"
            }, 
            {
                "descr": "The IV should normally have the size of the algorithms block size, but you must obtain the size by calling mcrypt_enc_get_iv_size(). ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-generic-init", 
        "syntax": "int mcrypt_generic_init ( resource $td , string $key , string $iv )", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_block_size": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.", 
        "name": "mcrypt_get_block_size", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-block-size", 
        "syntax": "int mcrypt_get_block_size ( int $cipher )", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_cipher_name": {
        "descr": "mcrypt_get_cipher_name() is used to get the name of the specified cipher.", 
        "name": "mcrypt_get_cipher_name", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }
        ], 
        "path": "php/function.mcrypt-get-cipher-name", 
        "syntax": "string mcrypt_get_cipher_name ( int $cipher )", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_iv_size": {
        "descr": "Gets the size of the IV belonging to a specific cipher/mode combination.", 
        "name": "mcrypt_get_iv_size", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\". ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-iv-size", 
        "syntax": "int mcrypt_get_iv_size ( string $cipher , string $mode )", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_key_size": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.", 
        "name": "mcrypt_get_key_size", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-key-size", 
        "syntax": "int mcrypt_get_key_size ( int $cipher )", 
        "type": "Cryptography"
    }, 
    "mcrypt_list_algorithms": {
        "descr": "Gets the list of all supported algorithms in the lib_dir parameter.", 
        "name": "mcrypt_list_algorithms", 
        "params": [
            {
                "descr": "Specifies the directory where all algorithms are located. ", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-list-algorithms", 
        "syntax": "array mcrypt_list_algorithms ([ string $lib_dir = ini_get(\"mcrypt.algorithms_dir\") ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_list_modes": {
        "descr": "Gets the list of all supported modes in the lib_dir parameter.", 
        "name": "mcrypt_list_modes", 
        "params": [
            {
                "descr": "Specifies the directory where all modes are located. ", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-list-modes", 
        "syntax": "array mcrypt_list_modes ([ string $lib_dir = ini_get(\"mcrypt.modes_dir\") ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_close": {
        "descr": "Closes the specified encryption handle.", 
        "name": "mcrypt_module_close", 
        "params": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-module-close", 
        "syntax": "bool mcrypt_module_close ( resource $td )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_algo_block_size": {
        "descr": "Gets the blocksize of the specified algorithm.", 
        "name": "mcrypt_module_get_algo_block_size", 
        "params": [
            {
                "descr": "The algorithm name.", 
                "name": "algorithm"
            }, 
            {
                "descr": "This optional parameter can contain the location where the mode module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-algo-block-size", 
        "syntax": "int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_algo_key_size": {
        "descr": "Gets the maximum supported keysize of the opened mode.", 
        "name": "mcrypt_module_get_algo_key_size", 
        "params": [
            {
                "descr": "The algorithm name.", 
                "name": "algorithm"
            }, 
            {
                "descr": "This optional parameter can contain the location where the mode module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-algo-key-size", 
        "syntax": "int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_supported_key_sizes": {
        "descr": "Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm.", 
        "name": "mcrypt_module_get_supported_key_sizes", 
        "params": [
            {
                "descr": "The algorithm to be used.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-supported-key-sizes", 
        "syntax": "array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_algorithm": {
        "descr": "This function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one.", 
        "name": "mcrypt_module_is_block_algorithm", 
        "params": [
            {
                "descr": "The algorithm to check.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-algorithm", 
        "syntax": "bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_algorithm_mode": {
        "descr": "This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).", 
        "name": "mcrypt_module_is_block_algorithm_mode", 
        "params": [
            {
                "descr": "The mode to check.", 
                "name": "mode"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-algorithm-mode", 
        "syntax": "bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_mode": {
        "descr": "This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).", 
        "name": "mcrypt_module_is_block_mode", 
        "params": [
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-mode", 
        "syntax": "bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_open": {
        "descr": "This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. \"twofish\" or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close().", 
        "name": "mcrypt_module_open", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The algorithm_directory parameter is used to locate the encryption module. ", 
                "name": "algorithm_directory"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "The mode_directory parameter is used to locate the encryption module. ", 
                "name": "mode_directory"
            }
        ], 
        "path": "php/function.mcrypt-module-open", 
        "syntax": "resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_self_test": {
        "descr": "This function runs the self test on the algorithm specified.", 
        "name": "mcrypt_module_self_test", 
        "params": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-self-test", 
        "syntax": "bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )", 
        "type": "Cryptography"
    }, 
    "mcrypt_ofb": {
        "descr": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_ofb", 
        "params": [], 
        "path": "php/function.mcrypt-ofb", 
        "syntax": "string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )", 
        "type": "Cryptography"
    }, 
    "md5": {
        "descr": "Calculates the MD5 hash of str using the \u00bb RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.", 
        "name": "md5", 
        "params": [
            {
                "descr": "The string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.md5", 
        "syntax": "string md5 ( string $str [, bool $raw_output = false ] )", 
        "type": "String"
    }, 
    "md5_file": {
        "descr": "Calculates the MD5 hash of the file specified by the filename parameter using the \u00bb RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.", 
        "name": "md5_file", 
        "params": [
            {
                "descr": "The filename", 
                "name": "filename"
            }, 
            {
                "descr": "When TRUE, returns the digest in raw binary format with a length of 16.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.md5-file", 
        "syntax": "string md5_file ( string $filename [, bool $raw_output = false ] )", 
        "type": "String"
    }, 
    "mdecrypt_generic": {
        "descr": "This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.", 
        "name": "mdecrypt_generic", 
        "params": [
            {
                "descr": "An encryption descriptor returned by mcrypt_module_open()", 
                "name": "td"
            }, 
            {
                "descr": "Encrypted data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.mdecrypt-generic", 
        "syntax": "string mdecrypt_generic ( resource $td , string $data )", 
        "type": "Cryptography"
    }, 
    "memory_get_peak_usage": {
        "descr": "Returns the peak of memory, in bytes, that's been allocated to your PHP script.", 
        "name": "memory_get_peak_usage", 
        "params": [
            {
                "descr": "Set this to TRUE to get the real size of memory allocated from system. ", 
                "name": "real_usage"
            }
        ], 
        "path": "php/function.memory-get-peak-usage", 
        "syntax": "int memory_get_peak_usage ([ bool $real_usage = false ] )", 
        "type": "Language"
    }, 
    "memory_get_usage": {
        "descr": "Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.", 
        "name": "memory_get_usage", 
        "params": [
            {
                "descr": "Set this to TRUE to get the real size of memory allocated from system. ", 
                "name": "real_usage"
            }
        ], 
        "path": "php/function.memory-get-usage", 
        "syntax": "int memory_get_usage ([ bool $real_usage = false ] )", 
        "type": "Language"
    }, 
    "metaphone": {
        "descr": "Calculates the metaphone key of str.", 
        "name": "metaphone", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "This parameter restricts the returned metaphone key to phonemes characters in length. ", 
                "name": "phonemes"
            }
        ], 
        "path": "php/function.metaphone", 
        "syntax": "string metaphone ( string $str [, int $phonemes = 0 ] )", 
        "type": "String"
    }, 
    "method_exists": {
        "descr": "Checks if the class method exists in the given object.", 
        "name": "method_exists", 
        "params": [
            {
                "descr": "An object instance or a class name", 
                "name": "object"
            }, 
            {
                "descr": "The method name", 
                "name": "method_name"
            }
        ], 
        "path": "php/function.method-exists", 
        "syntax": "bool method_exists ( mixed $object , string $method_name )", 
        "type": "Classes and Functions"
    }, 
    "microtime": {
        "descr": "microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.", 
        "name": "microtime", 
        "params": [
            {
                "descr": "If used and set to TRUE, microtime() will return a float instead of a string, as described in the return values section below.", 
                "name": "get_as_float"
            }
        ], 
        "path": "php/function.microtime", 
        "syntax": "mixed microtime ([ bool $get_as_float = false ] )", 
        "type": "Date and Time"
    }, 
    "mime_content_type": {
        "descr": "Returns the MIME content type for a file as determined by using information from the magic.mime file.", 
        "name": "mime_content_type", 
        "params": [
            {
                "descr": "Path to the tested file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.mime-content-type", 
        "syntax": "string mime_content_type ( string $filename )", 
        "type": "File System"
    }, 
    "min": {
        "descr": "If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.", 
        "name": "min", 
        "params": [
            {
                "descr": "An array containing the values.", 
                "name": "values"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value1"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value2"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "..."
            }
        ], 
        "path": "php/function.min", 
        "syntax": "mixed min ( array $values )", 
        "type": "Mathematics"
    }, 
    "mkdir": {
        "descr": "Attempts to create the directory specified by pathname.", 
        "name": "mkdir", 
        "params": [
            {
                "descr": "The directory path.", 
                "name": "pathname"
            }, 
            {
                "descr": "The mode is 0777 by default, which means the widest possible access. ", 
                "name": "mode"
            }, 
            {
                "descr": "Allows the creation of nested directories specified in the pathname.", 
                "name": "recursive"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.mkdir", 
        "syntax": "bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )", 
        "type": "File System"
    }, 
    "mktime": {
        "descr": "Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.", 
        "name": "mktime", 
        "params": [
            {
                "descr": "The number of the hour relative to the start of the day determined by month, day and year. ", 
                "name": "hour"
            }, 
            {
                "descr": "The number of the minute relative to the start of the hour. ", 
                "name": "minute"
            }, 
            {
                "descr": "The number of seconds relative to the start of the minute. ", 
                "name": "second"
            }, 
            {
                "descr": "The number of the month relative to the end of the previous year. ", 
                "name": "month"
            }, 
            {
                "descr": "The number of the day relative to the end of the previous month. ", 
                "name": "day"
            }, 
            {
                "descr": "The number of the year, may be a two or four digit value, with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. ", 
                "name": "year"
            }, 
            {
                "descr": "This parameter can be set to 1 if the time is during daylight savings time (DST), 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not. ", 
                "name": "is_dst"
            }
        ], 
        "path": "php/function.mktime", 
        "syntax": "int mktime ([ int $hour = date(\"H\") [, int $minute = date(\"i\") [, int $second = date(\"s\") [, int $month = date(\"n\") [, int $day = date(\"j\") [, int $year = date(\"Y\") [, int $is_dst = -1 ]]]]]]] )", 
        "type": "Date and Time"
    }, 
    "money_format": {
        "descr": "money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time.", 
        "name": "money_format", 
        "params": [
            {
                "descr": "The format specification consists of the following sequence: a % character optional flags optional field width optional left precision optional right precision a required conversion character Flags  One or more of the optional flags below can be used:  =f   The character = followed by a (single byte) character f to be used as the numeric fill character. The default fill character is space.", 
                "name": "format"
            }, 
            {
                "descr": "Disable the use of grouping characters (as defined by the current locale).", 
                "name": "^"
            }, 
            {
                "descr": "Specify the formatting style for positive and negative numbers. ", 
                "name": "+ or ("
            }, 
            {
                "descr": "Suppress the currency symbol from the output string.", 
                "name": "!"
            }, 
            {
                "descr": "If present, it will make all fields left-justified (padded to the right), as opposed to the default which is for the fields to be right-justified (padded to the left).", 
                "name": "-"
            }, 
            {
                "descr": "A decimal digit string specifying a minimum field width. ", 
                "name": "w"
            }, 
            {
                "descr": "The maximum number of digits (n) expected to the left of the decimal character (e.g. ", 
                "name": "#n"
            }, 
            {
                "descr": "A period followed by the number of digits (p) after the decimal character. ", 
                "name": ".p"
            }, 
            {
                "descr": "The number is formatted according to the locale's international currency format (e.g. ", 
                "name": "i"
            }, 
            {
                "descr": "The number is formatted according to the locale's national currency format (e.g. ", 
                "name": "n"
            }, 
            {
                "descr": "Returns the % character.", 
                "name": "%"
            }, 
            {
                "descr": "The number to be formatted.", 
                "name": "number"
            }
        ], 
        "path": "php/function.money-format", 
        "syntax": "string money_format ( string $format , float $number )", 
        "type": "String"
    }, 
    "move_uploaded_file": {
        "descr": "This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination.", 
        "name": "move_uploaded_file", 
        "params": [
            {
                "descr": "The filename of the uploaded file.", 
                "name": "filename"
            }, 
            {
                "descr": "The destination of the moved file.", 
                "name": "destination"
            }
        ], 
        "path": "php/function.move-uploaded-file", 
        "syntax": "bool move_uploaded_file ( string $filename , string $destination )", 
        "type": "File System"
    }, 
    "mt_getrandmax": {
        "descr": "", 
        "name": "mt_getrandmax", 
        "params": [], 
        "path": "php/function.mt-getrandmax", 
        "syntax": "int mt_getrandmax ( void )", 
        "type": "Mathematics"
    }, 
    "mt_rand": {
        "descr": "", 
        "name": "mt_rand", 
        "params": [
            {
                "descr": "Optional lowest value to be returned (default: 0)", 
                "name": "min"
            }, 
            {
                "descr": "Optional highest value to be returned (default: mt_getrandmax())", 
                "name": "max"
            }
        ], 
        "path": "php/function.mt-rand", 
        "syntax": "int mt_rand ( void )", 
        "type": "Mathematics"
    }, 
    "mt_srand": {
        "descr": "Seeds the random number generator with seed or with a random value if no seed is given.", 
        "name": "mt_srand", 
        "params": [
            {
                "descr": "An optional seed value", 
                "name": "seed"
            }
        ], 
        "path": "php/function.mt-srand", 
        "syntax": "void mt_srand ([ int $seed ] )", 
        "type": "Mathematics"
    }, 
    "mysqli": {
        "descr": "", 
        "name": "mysqli", 
        "params": [], 
        "path": "php/class.mysqli", 
        "syntax": "bool autocommit ( bool $mode )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$affected_rows": {
        "descr": "Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query.", 
        "name": "mysqli::$affected_rows", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.affected-rows", 
        "syntax": "int mysqli_affected_rows ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$client_info": {
        "descr": "Returns a string that represents the MySQL client library version.", 
        "name": "mysqli::$client_info", 
        "params": [], 
        "path": "php/mysqli.client-info", 
        "syntax": "string mysqli_get_client_info ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$client_version": {
        "descr": "Returns client version number as an integer.", 
        "name": "mysqli::$client_version", 
        "params": [], 
        "path": "php/mysqli.client-version", 
        "syntax": "int mysqli_get_client_version ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$connect_errno": {
        "descr": "Returns the last error code number from the last call to mysqli_connect().", 
        "name": "mysqli::$connect_errno", 
        "params": [], 
        "path": "php/mysqli.connect-errno", 
        "syntax": "int mysqli_connect_errno ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$connect_error": {
        "descr": "Returns the last error message string from the last call to mysqli_connect().", 
        "name": "mysqli::$connect_error", 
        "params": [], 
        "path": "php/mysqli.connect-error", 
        "syntax": "string mysqli_connect_error ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$errno": {
        "descr": "Returns the last error code for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$errno", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.errno", 
        "syntax": "int mysqli_errno ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$error": {
        "descr": "Returns the last error message for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$error", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.error", 
        "syntax": "string mysqli_error ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$error_list": {
        "descr": "Returns a array of errors for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$error_list", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.error-list", 
        "syntax": "array mysqli_error_list ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$field_count": {
        "descr": "Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the mysqli_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.", 
        "name": "mysqli::$field_count", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.field-count", 
        "syntax": "int mysqli_field_count ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$host_info": {
        "descr": "Returns a string describing the connection represented by the link parameter (including the server host name).", 
        "name": "mysqli::$host_info", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-host-info", 
        "syntax": "string mysqli_get_host_info ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$info": {
        "descr": "The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below:", 
        "name": "mysqli::$info", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.info", 
        "syntax": "string mysqli_info ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$insert_id": {
        "descr": "The mysqli_insert_id() function returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero.", 
        "name": "mysqli::$insert_id", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.insert-id", 
        "syntax": "mixed mysqli_insert_id ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$protocol_version": {
        "descr": "Returns an integer representing the MySQL protocol version used by the connection represented by the link parameter.", 
        "name": "mysqli::$protocol_version", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-proto-info", 
        "syntax": "int mysqli_get_proto_info ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$server_info": {
        "descr": "Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.", 
        "name": "mysqli::$server_info", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-server-info", 
        "syntax": "string mysqli_get_server_info ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$server_version": {
        "descr": "The mysqli_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer.", 
        "name": "mysqli::$server_version", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-server-version", 
        "syntax": "int mysqli_get_server_version ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$sqlstate": {
        "descr": "Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see \u00bb http://dev.mysql.com/doc/mysql/en/error-handling.html.", 
        "name": "mysqli::$sqlstate", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.sqlstate", 
        "syntax": "string mysqli_sqlstate ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$thread_id": {
        "descr": "The mysqli_thread_id() function returns the thread ID for the current connection which can then be killed using the mysqli_kill() function. If the connection is lost and you reconnect with mysqli_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it.", 
        "name": "mysqli::$thread_id", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.thread-id", 
        "syntax": "int mysqli_thread_id ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$warning_count": {
        "descr": "Returns the number of warnings from the last query in the connection.", 
        "name": "mysqli::$warning_count", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.warning-count", 
        "syntax": "int mysqli_warning_count ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::__construct": {
        "descr": "Opens a connection to the MySQL Server running on.", 
        "name": "mysqli::__construct", 
        "params": [
            {
                "descr": "Can be either a host name or an IP address. ", 
                "name": "host"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "username"
            }, 
            {
                "descr": "If not provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. ", 
                "name": "passwd"
            }, 
            {
                "descr": "If provided will specify the default database to be used when performing queries.", 
                "name": "dbname"
            }, 
            {
                "descr": "Specifies the port number to attempt to connect to the MySQL server.", 
                "name": "port"
            }, 
            {
                "descr": "Specifies the socket or named pipe that should be used. ", 
                "name": "socket"
            }
        ], 
        "path": "php/mysqli.construct", 
        "syntax": "mysqli mysqli_connect ([ string $host = ini_get(\"mysqli.default_host\") [, string $username = ini_get(\"mysqli.default_user\") [, string $passwd = ini_get(\"mysqli.default_pw\") [, string $dbname = \"\" [, int $port = ini_get(\"mysqli.default_port\") [, string $socket = ini_get(\"mysqli.default_socket\") ]]]]]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::autocommit": {
        "descr": "Turns on or off auto-commit mode on queries for the database connection.", 
        "name": "mysqli::autocommit", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Whether to turn on auto-commit or not.", 
                "name": "mode"
            }
        ], 
        "path": "php/mysqli.autocommit", 
        "syntax": "bool mysqli::autocommit ( bool $mode )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::begin_transaction": {
        "descr": "Procedural style:", 
        "name": "mysqli::begin_transaction", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.begin-transaction", 
        "syntax": "public bool mysqli::begin_transaction ([ int $flags [, string $name ]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::change_user": {
        "descr": "Changes the user of the specified database connection and sets the current database.", 
        "name": "mysqli::change_user", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "user"
            }, 
            {
                "descr": "The MySQL password.", 
                "name": "password"
            }, 
            {
                "descr": "The database to change to.   If desired, the NULL value may be passed resulting in only changing the user and not selecting a database. ", 
                "name": "database"
            }
        ], 
        "path": "php/mysqli.change-user", 
        "syntax": "bool mysqli::change_user ( string $user , string $password , string $database )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::character_set_name": {
        "descr": "Returns the current character set for the database connection.", 
        "name": "mysqli::character_set_name", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.character-set-name", 
        "syntax": "string mysqli::character_set_name ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::close": {
        "descr": "Closes a previously opened database connection.", 
        "name": "mysqli::close", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.close", 
        "syntax": "bool mysqli::close ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::commit": {
        "descr": "Commits the current transaction for the database connection.", 
        "name": "mysqli::commit", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A bitmask of MYSQLI_TRANS_COR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "If provided then COMMIT/*name*/ is executed.", 
                "name": "name"
            }
        ], 
        "path": "php/mysqli.commit", 
        "syntax": "bool mysqli::commit ([ int $flags [, string $name ]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::debug": {
        "descr": "Performs debugging operations using the Fred Fish debugging library.", 
        "name": "mysqli::debug", 
        "params": [
            {
                "descr": "A string representing the debugging operation to perform", 
                "name": "message"
            }
        ], 
        "path": "php/mysqli.debug", 
        "syntax": "bool mysqli::debug ( string $message )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::disable_reads_from_master": {
        "descr": "Procedural style", 
        "name": "mysqli::disable_reads_from_master", 
        "params": [], 
        "path": "php/function.mysqli-disable-reads-from-master", 
        "syntax": "void mysqli::disable_reads_from_master ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::dump_debug_info": {
        "descr": "This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.", 
        "name": "mysqli::dump_debug_info", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.dump-debug-info", 
        "syntax": "bool mysqli::dump_debug_info ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_charset": {
        "descr": "Returns a character set object providing several properties of the current active character set.", 
        "name": "mysqli::get_charset", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Character set name", 
                "name": "charset"
            }, 
            {
                "descr": "Collation name", 
                "name": "collation"
            }, 
            {
                "descr": "Directory the charset description was fetched from (?) or \"\" for built-in character sets", 
                "name": "dir"
            }, 
            {
                "descr": "Minimum character length in bytes", 
                "name": "min_length"
            }, 
            {
                "descr": "Maximum character length in bytes", 
                "name": "max_length"
            }, 
            {
                "descr": "Internal character set number", 
                "name": "number"
            }, 
            {
                "descr": "Character set status (?)", 
                "name": "state"
            }
        ], 
        "path": "php/mysqli.get-charset", 
        "syntax": "object mysqli::get_charset ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_client_info": {
        "descr": "Returns a string that represents the MySQL client library version.", 
        "name": "mysqli::get_client_info", 
        "params": [], 
        "path": "php/mysqli.get-client-info", 
        "syntax": "string mysqli::get_client_info ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_connection_stats": {
        "descr": "Returns statistics about the client connection. Available only with mysqlnd.", 
        "name": "mysqli::get_connection_stats", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-connection-stats", 
        "syntax": "bool mysqli::get_connection_stats ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_warnings": {
        "descr": "Procedural style", 
        "name": "mysqli::get_warnings", 
        "params": [], 
        "path": "php/mysqli.get-warnings", 
        "syntax": "mysqli_warning mysqli::get_warnings ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::init": {
        "descr": "Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect().", 
        "name": "mysqli::init", 
        "params": [], 
        "path": "php/mysqli.init", 
        "syntax": "mysqli mysqli::init ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::kill": {
        "descr": "This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function.", 
        "name": "mysqli::kill", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.kill", 
        "syntax": "bool mysqli::kill ( int $processid )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::more_results": {
        "descr": "Indicates if one or more result sets are available from a previous call to mysqli_multi_query().", 
        "name": "mysqli::more_results", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.more-results", 
        "syntax": "bool mysqli::more_results ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::multi_query": {
        "descr": "Executes one or multiple queries which are concatenated by a semicolon.", 
        "name": "mysqli::multi_query", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.multi-query", 
        "syntax": "bool mysqli::multi_query ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::next_result": {
        "descr": "Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().", 
        "name": "mysqli::next_result", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.next-result", 
        "syntax": "bool mysqli::next_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::options": {
        "descr": "Used to set extra connect options and affect behavior for a connection.", 
        "name": "mysqli::options", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The option that you want to set. ", 
                "name": "option"
            }, 
            {
                "descr": "The value for the option.", 
                "name": "value"
            }
        ], 
        "path": "php/mysqli.options", 
        "syntax": "bool mysqli::options ( int $option , mixed $value )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::ping": {
        "descr": "Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted.", 
        "name": "mysqli::ping", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.ping", 
        "syntax": "bool mysqli::ping ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::poll": {
        "descr": "Poll connections. Available only with mysqlnd. The method can be used as static.", 
        "name": "mysqli::poll", 
        "params": [
            {
                "descr": "List of connections to check for outstanding results that can be read.", 
                "name": "read"
            }, 
            {
                "descr": "List of connections on which an error occured, for example, query failure or lost connection.", 
                "name": "error"
            }, 
            {
                "descr": "List of connections rejected because no asynchronous query has been run on for which the function could poll results.", 
                "name": "reject"
            }, 
            {
                "descr": "Number of seconds to wait, must be non-negative.", 
                "name": "sec"
            }, 
            {
                "descr": "Number of microseconds to wait, must be non-negative.", 
                "name": "usec"
            }
        ], 
        "path": "php/mysqli.poll", 
        "syntax": "public static int mysqli::poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::prepare": {
        "descr": "Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.", 
        "name": "mysqli::prepare", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.  Note:  You should not add a terminating semicolon or \\g to the statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.prepare", 
        "syntax": "mysqli_stmt mysqli::prepare ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::query": {
        "descr": "Performs a query against the database.", 
        "name": "mysqli::query", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }, 
            {
                "descr": "Either the constant MYSQLI_USE_RESULT or MYSQLI_STORE_RESULT depending on the desired behavior. ", 
                "name": "resultmode"
            }
        ], 
        "path": "php/mysqli.query", 
        "syntax": "mixed mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_connect": {
        "descr": "Establish a connection to a MySQL database engine.", 
        "name": "mysqli::real_connect", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Can be either a host name or an IP address. ", 
                "name": "host"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "username"
            }, 
            {
                "descr": "If provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. ", 
                "name": "passwd"
            }, 
            {
                "descr": "If provided will specify the default database to be used when performing queries.", 
                "name": "dbname"
            }, 
            {
                "descr": "Specifies the port number to attempt to connect to the MySQL server.", 
                "name": "port"
            }, 
            {
                "descr": "Specifies the socket or named pipe that should be used. ", 
                "name": "socket"
            }, 
            {
                "descr": "With the parameter flags you can set different connection options:  Supported flags Name Description MYSQLI_CLIENT_COMPRESS Use compression protocol MYSQLI_CLIENT_FOUND_ROWS return number of matched rows, not the number of affected rows MYSQLI_CLIENT_IGNORE_SPACE Allow spaces after function names. Makes all function names reserved words. MYSQLI_CLIENT_INTERACTIVE  Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection  MYSQLI_CLIENT_SSL Use SSL (encryption) Note:  For security reasons the MULTI_STATEMENT flag is not supported in PHP. If you want to execute multiple queries use the mysqli_multi_query() function.", 
                "name": "flags"
            }
        ], 
        "path": "php/mysqli.real-connect", 
        "syntax": "bool mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_escape_string": {
        "descr": "This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection.", 
        "name": "mysqli::real_escape_string", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The string to be escaped.   Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.", 
                "name": "escapestr"
            }
        ], 
        "path": "php/mysqli.real-escape-string", 
        "syntax": "string mysqli::escape_string ( string $escapestr )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_query": {
        "descr": "Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions.", 
        "name": "mysqli::real_query", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.real-query", 
        "syntax": "bool mysqli::real_query ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::reap_async_query": {
        "descr": "Get result from async query. Available only with mysqlnd.", 
        "name": "mysqli::reap_async_query", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.reap-async-query", 
        "syntax": "public mysqli_result mysqli::reap_async_query ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::refresh": {
        "descr": "Flushes tables or caches, or resets the replication server information.", 
        "name": "mysqli::refresh", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The options to refresh, using the MYSQLI_REFRESH_* constants as documented within the MySQLi constants documentation. ", 
                "name": "options"
            }
        ], 
        "path": "php/mysqli.refresh", 
        "syntax": "public bool mysqli::refresh ( int $options )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::release_savepoint": {
        "descr": "Procedural style:", 
        "name": "mysqli::release_savepoint", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.release-savepoint", 
        "syntax": "public bool mysqli::release_savepoint ( string $name )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::rollback": {
        "descr": "Rollbacks the current transaction for the database.", 
        "name": "mysqli::rollback", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A bitmask of MYSQLI_TRANS_COR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "If provided then ROLLBACK/*name*/ is executed.", 
                "name": "name"
            }
        ], 
        "path": "php/mysqli.rollback", 
        "syntax": "bool mysqli::rollback ([ int $flags [, string $name ]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::rpl_query_type": {
        "descr": "Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.", 
        "name": "mysqli::rpl_query_type", 
        "params": [], 
        "path": "php/mysqli.rpl-query-type", 
        "syntax": "int mysqli::rpl_query_type ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::savepoint": {
        "descr": "Procedural style:", 
        "name": "mysqli::savepoint", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.savepoint", 
        "syntax": "public bool mysqli::savepoint ( string $name )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::select_db": {
        "descr": "Selects the default database to be used when performing queries against the database connection.", 
        "name": "mysqli::select_db", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The database name.", 
                "name": "dbname"
            }
        ], 
        "path": "php/mysqli.select-db", 
        "syntax": "bool mysqli::select_db ( string $dbname )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::send_query": {
        "descr": "Procedural style", 
        "name": "mysqli::send_query", 
        "params": [], 
        "path": "php/mysqli.send-query", 
        "syntax": "bool mysqli::send_query ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_charset": {
        "descr": "Sets the default character set to be used when sending data from and to the database server.", 
        "name": "mysqli::set_charset", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The charset to be set as default.", 
                "name": "charset"
            }
        ], 
        "path": "php/mysqli.set-charset", 
        "syntax": "bool mysqli::set_charset ( string $charset )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_local_infile_default": {
        "descr": "Deactivates a LOAD DATA INFILE LOCAL handler previously set with mysqli_set_local_infile_handler().", 
        "name": "mysqli::set_local_infile_default", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.set-local-infile-default", 
        "syntax": "void mysqli_set_local_infile_default ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_local_infile_handler": {
        "descr": "Set callback function for LOAD DATA LOCAL INFILE command", 
        "name": "mysqli::set_local_infile_handler", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A callback function or object method taking the following parameters:   stream  A PHP stream associated with the SQL commands INFILE", 
                "name": "read_func"
            }, 
            {
                "descr": "A string buffer to store the rewritten input into", 
                "name": "&buffer"
            }, 
            {
                "descr": "The maximum number of characters to be stored in the buffer", 
                "name": "buflen"
            }, 
            {
                "descr": "If an error occurs you can store an error message in here", 
                "name": "&errormsg"
            }
        ], 
        "path": "php/mysqli.set-local-infile-handler", 
        "syntax": "bool mysqli::set_local_infile_handler ( mysqli $link , callable $read_func )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::ssl_set": {
        "descr": "Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled.", 
        "name": "mysqli::ssl_set", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The path name to the key file.", 
                "name": "key"
            }, 
            {
                "descr": "The path name to the certificate file.", 
                "name": "cert"
            }, 
            {
                "descr": "The path name to the certificate authority file.", 
                "name": "ca"
            }, 
            {
                "descr": "The pathname to a directory that contains trusted SSL CA certificates in PEM format.", 
                "name": "capath"
            }, 
            {
                "descr": "A list of allowable ciphers to use for SSL encryption.", 
                "name": "cipher"
            }
        ], 
        "path": "php/mysqli.ssl-set", 
        "syntax": "bool mysqli::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::stat": {
        "descr": "mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.", 
        "name": "mysqli::stat", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.stat", 
        "syntax": "string mysqli::stat ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::stmt_init": {
        "descr": "Allocates and initializes a statement object suitable for mysqli_stmt_prepare().", 
        "name": "mysqli::stmt_init", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.stmt-init", 
        "syntax": "mysqli_stmt mysqli::stmt_init ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::store_result": {
        "descr": "Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.", 
        "name": "mysqli::store_result", 
        "params": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.store-result", 
        "syntax": "mysqli_result mysqli::store_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::thread_safe": {
        "descr": "Tells whether the client library is compiled as thread-safe.", 
        "name": "mysqli::thread_safe", 
        "params": [], 
        "path": "php/mysqli.thread-safe", 
        "syntax": "bool mysqli_thread_safe ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli::use_result": {
        "descr": "Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection.", 
        "name": "mysqli::use_result", 
        "params": [], 
        "path": "php/mysqli.use-result", 
        "syntax": "mysqli_result mysqli::use_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_disable_rpl_parse": {
        "descr": "", 
        "name": "mysqli_disable_rpl_parse", 
        "params": [], 
        "path": "php/function.mysqli-disable-rpl-parse", 
        "syntax": "bool mysqli_disable_rpl_parse ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver": {
        "descr": "", 
        "name": "mysqli_driver", 
        "params": [], 
        "path": "php/class.mysqli-driver", 
        "syntax": "void embedded_server_end ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::$report_mode": {
        "descr": "A function helpful in improving queries during code development and testing. Depending on the flags, it reports errors from mysqli function calls or queries that don't use an index (or use a bad index).", 
        "name": "mysqli_driver::$report_mode", 
        "params": [
            {
                "descr": "Supported flags Name Description MYSQLI_REPORT_OFF Turns reporting off MYSQLI_REPORT_ERROR Report errors from mysqli function calls MYSQLI_REPORT_STRICT  Throw mysqli_sql_exception for errors instead of warnings  MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query MYSQLI_REPORT_ALL Set all options (report all)", 
                "name": "flags"
            }
        ], 
        "path": "php/mysqli-driver.report-mode", 
        "syntax": "bool mysqli_report ( int $flags )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::embedded_server_end": {
        "descr": "Procedural style", 
        "name": "mysqli_driver::embedded_server_end", 
        "params": [], 
        "path": "php/mysqli-driver.embedded-server-end", 
        "syntax": "void mysqli_driver::embedded_server_end ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::embedded_server_start": {
        "descr": "Procedural style", 
        "name": "mysqli_driver::embedded_server_start", 
        "params": [], 
        "path": "php/mysqli-driver.embedded-server-start", 
        "syntax": "bool mysqli_driver::embedded_server_start ( bool $start , array $arguments , array $groups )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_enable_reads_from_master": {
        "descr": "", 
        "name": "mysqli_enable_reads_from_master", 
        "params": [], 
        "path": "php/function.mysqli-enable-reads-from-master", 
        "syntax": "bool mysqli_enable_reads_from_master ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_enable_rpl_parse": {
        "descr": "", 
        "name": "mysqli_enable_rpl_parse", 
        "params": [], 
        "path": "php/function.mysqli-enable-rpl-parse", 
        "syntax": "bool mysqli_enable_rpl_parse ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_cache_stats": {
        "descr": "", 
        "name": "mysqli_get_cache_stats", 
        "params": [], 
        "path": "php/function.mysqli-get-cache-stats", 
        "syntax": "array mysqli_get_cache_stats ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_client_stats": {
        "descr": "Returns client per-process statistics. Available only with mysqlnd.", 
        "name": "mysqli_get_client_stats", 
        "params": [], 
        "path": "php/mysqli.get-client-stats", 
        "syntax": "array mysqli_get_client_stats ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_client_version": {
        "descr": "Returns client version number as an integer.", 
        "name": "mysqli_get_client_version", 
        "params": [], 
        "path": "php/mysqli.get-client-version", 
        "syntax": "int mysqli_get_client_version ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_master_query": {
        "descr": "", 
        "name": "mysqli_master_query", 
        "params": [], 
        "path": "php/function.mysqli-master-query", 
        "syntax": "bool mysqli_master_query ( mysqli $link , string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result": {
        "descr": "", 
        "name": "mysqli_result", 
        "params": [], 
        "path": "php/class.mysqli-result", 
        "syntax": "bool data_seek ( int $offset )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$current_field": {
        "descr": "Returns the position of the field cursor used for the last mysqli_fetch_field() call. This value can be used as an argument to mysqli_field_seek().", 
        "name": "mysqli_result::$current_field", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.current-field", 
        "syntax": "int mysqli_field_tell ( mysqli_result $result )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$field_count": {
        "descr": "Returns the number of fields from specified result set.", 
        "name": "mysqli_result::$field_count", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.field-count", 
        "syntax": "int mysqli_num_fields ( mysqli_result $result )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$lengths": {
        "descr": "The mysqli_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set.", 
        "name": "mysqli_result::$lengths", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.lengths", 
        "syntax": "array mysqli_fetch_lengths ( mysqli_result $result )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$num_rows": {
        "descr": "Returns the number of rows in the result set.", 
        "name": "mysqli_result::$num_rows", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.num-rows", 
        "syntax": "int mysqli_num_rows ( mysqli_result $result )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::data_seek": {
        "descr": "The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.", 
        "name": "mysqli_result::data_seek", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field offset. Must be between zero and the total number of rows minus one (0..mysqli_num_rows() - 1).", 
                "name": "offset"
            }
        ], 
        "path": "php/mysqli-result.data-seek", 
        "syntax": "bool mysqli_result::data_seek ( int $offset )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_all": {
        "descr": "mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.", 
        "name": "mysqli_result::fetch_all", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "This optional parameter is a constant indicating what type of array should be produced from the current row data. ", 
                "name": "resulttype"
            }
        ], 
        "path": "php/mysqli-result.fetch-all", 
        "syntax": "mixed mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_array": {
        "descr": "Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter.", 
        "name": "mysqli_result::fetch_array", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "This optional parameter is a constant indicating what type of array should be produced from the current row data. ", 
                "name": "resulttype"
            }
        ], 
        "path": "php/mysqli-result.fetch-array", 
        "syntax": "mixed mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_assoc": {
        "descr": "Returns an associative array that corresponds to the fetched row or NULL if there are no more rows.", 
        "name": "mysqli_result::fetch_assoc", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-assoc", 
        "syntax": "array mysqli_result::fetch_assoc ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_field": {
        "descr": "Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.", 
        "name": "mysqli_result::fetch_field", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-field", 
        "syntax": "object mysqli_result::fetch_field ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_field_direct": {
        "descr": "Returns an object which contains field definition information from the specified result set.", 
        "name": "mysqli_result::fetch_field_direct", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field number. This value must be in the range from 0 to number of fields - 1.", 
                "name": "fieldnr"
            }
        ], 
        "path": "php/mysqli-result.fetch-field-direct", 
        "syntax": "object mysqli_result::fetch_field_direct ( int $fieldnr )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_fields": {
        "descr": "This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.", 
        "name": "mysqli_result::fetch_fields", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-fields", 
        "syntax": "array mysqli_result::fetch_fields ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_object": {
        "descr": "The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set.", 
        "name": "mysqli_result::fetch_object", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The name of the class to instantiate, set the properties of and return. ", 
                "name": "class_name"
            }, 
            {
                "descr": "An optional array of parameters to pass to the constructor for class_name objects.", 
                "name": "params"
            }
        ], 
        "path": "php/mysqli-result.fetch-object", 
        "syntax": "object mysqli_result::fetch_object ([ string $class_name [, array $params ]] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_row": {
        "descr": "Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.", 
        "name": "mysqli_result::fetch_row", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-row", 
        "syntax": "mixed mysqli_result::fetch_row ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::field_seek": {
        "descr": "Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset.", 
        "name": "mysqli_result::field_seek", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field number. This value must be in the range from 0 to number of fields - 1.", 
                "name": "fieldnr"
            }
        ], 
        "path": "php/mysqli-result.field-seek", 
        "syntax": "bool mysqli_result::field_seek ( int $fieldnr )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::free": {
        "descr": "Frees the memory associated with the result.", 
        "name": "mysqli_result::free", 
        "params": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.free", 
        "syntax": "void mysqli_result::free ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_rpl_parse_enabled": {
        "descr": "", 
        "name": "mysqli_rpl_parse_enabled", 
        "params": [], 
        "path": "php/function.mysqli-rpl-parse-enabled", 
        "syntax": "int mysqli_rpl_parse_enabled ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_rpl_probe": {
        "descr": "", 
        "name": "mysqli_rpl_probe", 
        "params": [], 
        "path": "php/function.mysqli-rpl-probe", 
        "syntax": "bool mysqli_rpl_probe ( mysqli $link )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_slave_query": {
        "descr": "", 
        "name": "mysqli_slave_query", 
        "params": [], 
        "path": "php/function.mysqli-slave-query", 
        "syntax": "bool mysqli_slave_query ( mysqli $link , string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt": {
        "descr": "", 
        "name": "mysqli_stmt", 
        "params": [], 
        "path": "php/class.mysqli-stmt", 
        "syntax": "int attr_get ( int $attr )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$affected_rows": {
        "descr": "Returns the number of rows affected by INSERT, UPDATE, or DELETE query.", 
        "name": "mysqli_stmt::$affected_rows", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.affected-rows", 
        "syntax": "int mysqli_stmt_affected_rows ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$errno": {
        "descr": "Returns the error code for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$errno", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.errno", 
        "syntax": "int mysqli_stmt_errno ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$error": {
        "descr": "Returns a containing the error message for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$error", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.error", 
        "syntax": "string mysqli_stmt_error ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$error_list": {
        "descr": "Returns an array of errors for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$error_list", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.error-list", 
        "syntax": "array mysqli_stmt_error_list ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$field_count": {
        "descr": "", 
        "name": "mysqli_stmt::$field_count", 
        "params": [], 
        "path": "php/mysqli-stmt.field-count", 
        "syntax": "int mysqli_stmt_field_count ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$insert_id": {
        "descr": "", 
        "name": "mysqli_stmt::$insert_id", 
        "params": [], 
        "path": "php/mysqli-stmt.insert-id", 
        "syntax": "mixed mysqli_stmt_insert_id ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$num_rows": {
        "descr": "Returns the number of rows in the result set. The use of mysqli_stmt_num_rows() depends on whether or not you used mysqli_stmt_store_result() to buffer the entire result set in the statement handle.", 
        "name": "mysqli_stmt::$num_rows", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.num-rows", 
        "syntax": "int mysqli_stmt_num_rows ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$param_count": {
        "descr": "Returns the number of parameter markers present in the prepared statement.", 
        "name": "mysqli_stmt::$param_count", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.param-count", 
        "syntax": "int mysqli_stmt_param_count ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$sqlstate": {
        "descr": "Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see \u00bb http://dev.mysql.com/doc/mysql/en/error-handling.html.", 
        "name": "mysqli_stmt::$sqlstate", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.sqlstate", 
        "syntax": "string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::attr_get": {
        "descr": "Gets the current value of a statement attribute.", 
        "name": "mysqli_stmt::attr_get", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The attribute that you want to get.", 
                "name": "attr"
            }
        ], 
        "path": "php/mysqli-stmt.attr-get", 
        "syntax": "int mysqli_stmt::attr_get ( int $attr )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::attr_set": {
        "descr": "Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.", 
        "name": "mysqli_stmt::attr_set", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The attribute that you want to set. ", 
                "name": "attr"
            }, 
            {
                "descr": "The value to assign to the attribute.", 
                "name": "mode"
            }
        ], 
        "path": "php/mysqli-stmt.attr-set", 
        "syntax": "bool mysqli_stmt::attr_set ( int $attr , int $mode )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::bind_param": {
        "descr": "Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare().", 
        "name": "mysqli_stmt::bind_param", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "A string that contains one or more characters which specify the types for the corresponding bind variables: Type specification chars Character Description i corresponding variable has type integer d corresponding variable has type double s corresponding variable has type string b corresponding variable is a blob and will be sent in packets", 
                "name": "types"
            }, 
            {
                "descr": "The number of variables and length of string types must match the parameters in the statement.", 
                "name": "var1"
            }
        ], 
        "path": "php/mysqli-stmt.bind-param", 
        "syntax": "bool mysqli_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::bind_result": {
        "descr": "Binds columns in the result set to variables.", 
        "name": "mysqli_stmt::bind_result", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The variable to be bound.", 
                "name": "var1"
            }
        ], 
        "path": "php/mysqli-stmt.bind-result", 
        "syntax": "bool mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::close": {
        "descr": "Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.", 
        "name": "mysqli_stmt::close", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.close", 
        "syntax": "bool mysqli_stmt::close ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::data_seek": {
        "descr": "Seeks to an arbitrary result pointer in the statement result set.", 
        "name": "mysqli_stmt::data_seek", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "Must be between zero and the total number of rows minus one (0.. ", 
                "name": "offset"
            }
        ], 
        "path": "php/mysqli-stmt.data-seek", 
        "syntax": "void mysqli_stmt::data_seek ( int $offset )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::execute": {
        "descr": "Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data.", 
        "name": "mysqli_stmt::execute", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.execute", 
        "syntax": "bool mysqli_stmt::execute ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::fetch": {
        "descr": "Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result().", 
        "name": "mysqli_stmt::fetch", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.fetch", 
        "syntax": "bool mysqli_stmt::fetch ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::free_result": {
        "descr": "Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().", 
        "name": "mysqli_stmt::free_result", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.free-result", 
        "syntax": "void mysqli_stmt::free_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::get_result": {
        "descr": "Call to return a result set from a prepared statement query.", 
        "name": "mysqli_stmt::get_result", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.get-result", 
        "syntax": "mysqli_result mysqli_stmt::get_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::get_warnings": {
        "descr": "Procedural style", 
        "name": "mysqli_stmt::get_warnings", 
        "params": [], 
        "path": "php/mysqli-stmt.get-warnings", 
        "syntax": "object mysqli_stmt::get_warnings ( mysqli_stmt $stmt )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::more_results": {
        "descr": "Checks if there are more query results from a multiple query.", 
        "name": "mysqli_stmt::more_results", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.more-results", 
        "syntax": "public bool mysqli_stmt::more_results ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::next_result": {
        "descr": "Reads the next result from a multiple query.", 
        "name": "mysqli_stmt::next_result", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.next-result", 
        "syntax": "public bool mysqli_stmt::next_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::prepare": {
        "descr": "Prepares the SQL query pointed to by the null-terminated string query.", 
        "name": "mysqli_stmt::prepare", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The query, as a string. It must consist of a single SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli-stmt.prepare", 
        "syntax": "mixed mysqli_stmt::prepare ( string $query )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::reset": {
        "descr": "Resets a prepared statement on client and server to state after prepare.", 
        "name": "mysqli_stmt::reset", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.reset", 
        "syntax": "bool mysqli_stmt::reset ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::result_metadata": {
        "descr": "If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information.", 
        "name": "mysqli_stmt::result_metadata", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.result-metadata", 
        "syntax": "mysqli_result mysqli_stmt::result_metadata ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::send_long_data": {
        "descr": "Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.", 
        "name": "mysqli_stmt::send_long_data", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "Indicates which parameter to associate the data with. ", 
                "name": "param_nr"
            }, 
            {
                "descr": "A string containing data to be sent.", 
                "name": "data"
            }
        ], 
        "path": "php/mysqli-stmt.send-long-data", 
        "syntax": "bool mysqli_stmt::send_long_data ( int $param_nr , string $data )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::store_result": {
        "descr": "You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data.", 
        "name": "mysqli_stmt::store_result", 
        "params": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.store-result", 
        "syntax": "bool mysqli_stmt::store_result ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning": {
        "descr": "", 
        "name": "mysqli_warning", 
        "params": [], 
        "path": "php/class.mysqli-warning", 
        "syntax": "public __construct ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning::__construct": {
        "descr": "", 
        "name": "mysqli_warning::__construct", 
        "params": [], 
        "path": "php/mysqli-warning.construct", 
        "syntax": "public mysqli_warning::__construct ( void )", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning::next": {
        "descr": "", 
        "name": "mysqli_warning::next", 
        "params": [], 
        "path": "php/mysqli-warning.next", 
        "syntax": "public void mysqli_warning::next ( void )", 
        "type": "Database/MySQL"
    }, 
    "natcasesort": {
        "descr": "natcasesort() is a case insensitive version of natsort().", 
        "name": "natcasesort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.natcasesort", 
        "syntax": "bool natcasesort ( array &$array )", 
        "type": "Array"
    }, 
    "natsort": {
        "descr": "This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen in the example below.", 
        "name": "natsort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.natsort", 
        "syntax": "bool natsort ( array &$array )", 
        "type": "Array"
    }, 
    "next": {
        "descr": "next() behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.", 
        "name": "next", 
        "params": [
            {
                "descr": "The array being affected.", 
                "name": "array"
            }
        ], 
        "path": "php/function.next", 
        "syntax": "mixed next ( array &$array )", 
        "type": "Array"
    }, 
    "ngettext": {
        "descr": "The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.", 
        "name": "ngettext", 
        "params": [], 
        "path": "php/function.ngettext", 
        "syntax": "string ngettext ( string $msgid1 , string $msgid2 , int $n )", 
        "type": "Encoding"
    }, 
    "nl2br": {
        "descr": "Returns string with '<br />' or '<br>' inserted before all newlines (\\r\\n, \\n\\r, \\n and \\r).", 
        "name": "nl2br", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "Whether to use XHTML compatible line breaks or not.", 
                "name": "is_xhtml"
            }
        ], 
        "path": "php/function.nl2br", 
        "syntax": "string nl2br ( string $string [, bool $is_xhtml = true ] )", 
        "type": "String"
    }, 
    "nl_langinfo": {
        "descr": "nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv(), which returns all of the elements, nl_langinfo() allows you to select any specific element.", 
        "name": "nl_langinfo", 
        "params": [
            {
                "descr": "item may be an integer value of the element or the constant name of the element. ", 
                "name": "item"
            }
        ], 
        "path": "php/function.nl-langinfo", 
        "syntax": "string nl_langinfo ( int $item )", 
        "type": "String"
    }, 
    "number_format": {
        "descr": "This function accepts either one, two, or four parameters (not three):", 
        "name": "number_format", 
        "params": [
            {
                "descr": "The number being formatted.", 
                "name": "number"
            }, 
            {
                "descr": "Sets the number of decimal points.", 
                "name": "decimals"
            }, 
            {
                "descr": "Sets the separator for the decimal point.", 
                "name": "dec_point"
            }, 
            {
                "descr": "Sets the thousands separator.", 
                "name": "thousands_sep"
            }
        ], 
        "path": "php/function.number-format", 
        "syntax": "string number_format ( float $number [, int $decimals = 0 ] )", 
        "type": "String"
    }, 
    "oauth_get_sbs": {
        "descr": "Generates a Signature Base String according to pecl/oauth.", 
        "name": "oauth_get_sbs", 
        "params": [
            {
                "descr": "The HTTP method.", 
                "name": "http_method"
            }, 
            {
                "descr": "URI to encode.", 
                "name": "uri"
            }, 
            {
                "descr": "Array of request parameters.", 
                "name": "request_parameters"
            }
        ], 
        "path": "php/function.oauth-get-sbs", 
        "syntax": "string oauth_get_sbs ( string $http_method , string $uri [, array $request_parameters ] )", 
        "type": "OAuth"
    }, 
    "oauth_urlencode": {
        "descr": "Encodes a URI to \u00bb RFC 3986.", 
        "name": "oauth_urlencode", 
        "params": [
            {
                "descr": "URI to encode.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.oauth-urlencode", 
        "syntax": "string oauth_urlencode ( string $uri )", 
        "type": "OAuth"
    }, 
    "ob_clean": {
        "descr": "This function discards the contents of the output buffer.", 
        "name": "ob_clean", 
        "params": [], 
        "path": "php/function.ob-clean", 
        "syntax": "void ob_clean ( void )", 
        "type": "Networking"
    }, 
    "ob_deflatehandler": {
        "descr": "For use with ob_start().", 
        "name": "ob_deflatehandler", 
        "params": [], 
        "path": "php/function.ob-deflatehandler", 
        "syntax": "string ob_deflatehandler ( string $data , int $mode )", 
        "type": "HTTP"
    }, 
    "ob_end_clean": {
        "descr": "This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called.", 
        "name": "ob_end_clean", 
        "params": [], 
        "path": "php/function.ob-end-clean", 
        "syntax": "bool ob_end_clean ( void )", 
        "type": "Networking"
    }, 
    "ob_end_flush": {
        "descr": "This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.", 
        "name": "ob_end_flush", 
        "params": [], 
        "path": "php/function.ob-end-flush", 
        "syntax": "bool ob_end_flush ( void )", 
        "type": "Networking"
    }, 
    "ob_etaghandler": {
        "descr": "For use with ob_start().", 
        "name": "ob_etaghandler", 
        "params": [], 
        "path": "php/function.ob-etaghandler", 
        "syntax": "string ob_etaghandler ( string $data , int $mode )", 
        "type": "HTTP"
    }, 
    "ob_flush": {
        "descr": "This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called.", 
        "name": "ob_flush", 
        "params": [], 
        "path": "php/function.ob-flush", 
        "syntax": "void ob_flush ( void )", 
        "type": "Networking"
    }, 
    "ob_get_clean": {
        "descr": "Gets the current buffer contents and delete current output buffer.", 
        "name": "ob_get_clean", 
        "params": [], 
        "path": "php/function.ob-get-clean", 
        "syntax": "string ob_get_clean ( void )", 
        "type": "Networking"
    }, 
    "ob_get_contents": {
        "descr": "Gets the contents of the output buffer without clearing it.", 
        "name": "ob_get_contents", 
        "params": [], 
        "path": "php/function.ob-get-contents", 
        "syntax": "string ob_get_contents ( void )", 
        "type": "Networking"
    }, 
    "ob_get_flush": {
        "descr": "ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering.", 
        "name": "ob_get_flush", 
        "params": [], 
        "path": "php/function.ob-get-flush", 
        "syntax": "string ob_get_flush ( void )", 
        "type": "Networking"
    }, 
    "ob_get_length": {
        "descr": "This will return the length of the contents in the output buffer.", 
        "name": "ob_get_length", 
        "params": [], 
        "path": "php/function.ob-get-length", 
        "syntax": "int ob_get_length ( void )", 
        "type": "Networking"
    }, 
    "ob_get_level": {
        "descr": "Returns the nesting level of the output buffering mechanism.", 
        "name": "ob_get_level", 
        "params": [], 
        "path": "php/function.ob-get-level", 
        "syntax": "int ob_get_level ( void )", 
        "type": "Networking"
    }, 
    "ob_get_status": {
        "descr": "ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.", 
        "name": "ob_get_status", 
        "params": [
            {
                "descr": "TRUE to return all active output buffer levels. ", 
                "name": "full_status"
            }
        ], 
        "path": "php/function.ob-get-status", 
        "syntax": "array ob_get_status ([ bool $full_status  = FALSE ] )", 
        "type": "Networking"
    }, 
    "ob_gzhandler": {
        "descr": "ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept (\"gzip\", \"deflate\" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns FALSE.", 
        "name": "ob_gzhandler", 
        "params": [], 
        "path": "php/function.ob-gzhandler", 
        "syntax": "string ob_gzhandler ( string $buffer , int $mode )", 
        "type": "Networking"
    }, 
    "ob_iconv_handler": {
        "descr": "Converts the string encoded in internal_encoding to output_encoding.", 
        "name": "ob_iconv_handler", 
        "params": [], 
        "path": "php/function.ob-iconv-handler", 
        "syntax": "string ob_iconv_handler ( string $contents , int $status )", 
        "type": "Encoding"
    }, 
    "ob_implicit_flush": {
        "descr": "ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.", 
        "name": "ob_implicit_flush", 
        "params": [
            {
                "descr": "TRUE to turn implicit flushing on, FALSE otherwise.", 
                "name": "flag"
            }
        ], 
        "path": "php/function.ob-implicit-flush", 
        "syntax": "void ob_implicit_flush ([ int $flag = true ] )", 
        "type": "Networking"
    }, 
    "ob_inflatehandler": {
        "descr": "For use with ob_start().", 
        "name": "ob_inflatehandler", 
        "params": [], 
        "path": "php/function.ob-inflatehandler", 
        "syntax": "string ob_inflatehandler ( string $data , int $mode )", 
        "type": "HTTP"
    }, 
    "ob_list_handlers": {
        "descr": "Lists all output handlers in use.", 
        "name": "ob_list_handlers", 
        "params": [], 
        "path": "php/function.ob-list-handlers", 
        "syntax": "array ob_list_handlers ( void )", 
        "type": "Networking"
    }, 
    "ob_start": {
        "descr": "This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.", 
        "name": "ob_start", 
        "params": [
            {
                "descr": "An optional output_callback function may be specified. ", 
                "name": "output_callback"
            }, 
            {
                "descr": "Bitmask of PHP_OUTPUT_HANDLER_* constants.", 
                "name": "phase"
            }, 
            {
                "descr": "If the optional parameter chunk_size is passed, the buffer will be flushed after any output call which causes the buffer's length to equal or exceed chunk_size. ", 
                "name": "chunk_size"
            }, 
            {
                "descr": "The flags parameter is a bitmask that controls the operations that can be performed on the output buffer. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.ob-start", 
        "syntax": "bool ob_start ([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]] )", 
        "type": "Networking"
    }, 
    "ob_tidyhandler": {
        "descr": "Callback function for ob_start() to repair the buffer.", 
        "name": "ob_tidyhandler", 
        "params": [
            {
                "descr": "The buffer.", 
                "name": "input"
            }, 
            {
                "descr": "The buffer mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.ob-tidyhandler", 
        "syntax": "string ob_tidyhandler ( string $input [, int $mode ] )", 
        "type": "HTML"
    }, 
    "octdec": {
        "descr": "Returns the decimal equivalent of the octal number represented by the octal_string argument.", 
        "name": "octdec", 
        "params": [
            {
                "descr": "The octal string to convert", 
                "name": "octal_string"
            }
        ], 
        "path": "php/function.octdec", 
        "syntax": "number octdec ( string $octal_string )", 
        "type": "Mathematics"
    }, 
    "odbc_autocommit": {
        "descr": "Toggles autocommit behaviour.", 
        "name": "odbc_autocommit", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "If OnOff is TRUE, auto-commit is enabled, if it is FALSE auto-commit is disabled.", 
                "name": "OnOff"
            }
        ], 
        "path": "php/function.odbc-autocommit", 
        "syntax": "mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )", 
        "type": "Database"
    }, 
    "odbc_binmode": {
        "descr": "Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY.", 
        "name": "odbc_binmode", 
        "params": [
            {
                "descr": "The result identifier.   If result_id is 0, the settings apply as default for new results. ", 
                "name": "result_id"
            }, 
            {
                "descr": "Possible values for mode are:   ODBC_BINMODE_PASSTHRU: Passthru BINARY data     ODBC_BINMODE_RETURN: Return as is     ODBC_BINMODE_CONVERT: Convert to char and return", 
                "name": "mode"
            }
        ], 
        "path": "php/function.odbc-binmode", 
        "syntax": "bool odbc_binmode ( resource $result_id , int $mode )", 
        "type": "Database"
    }, 
    "odbc_close": {
        "descr": "Closes down the connection to the database server.", 
        "name": "odbc_close", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-close", 
        "syntax": "void odbc_close ( resource $connection_id )", 
        "type": "Database"
    }, 
    "odbc_close_all": {
        "descr": "odbc_close_all() will close down all connections to database server(s).", 
        "name": "odbc_close_all", 
        "params": [], 
        "path": "php/function.odbc-close-all", 
        "syntax": "void odbc_close_all ( void )", 
        "type": "Database"
    }, 
    "odbc_columnprivileges": {
        "descr": "Lists columns and associated privileges for the given table.", 
        "name": "odbc_columnprivileges", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The column_name argument accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "column_name"
            }
        ], 
        "path": "php/function.odbc-columnprivileges", 
        "syntax": "resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )", 
        "type": "Database"
    }, 
    "odbc_columns": {
        "descr": "Lists all columns in the requested range.", 
        "name": "odbc_columns", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "schema"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The column name.", 
                "name": "column_name"
            }
        ], 
        "path": "php/function.odbc-columns", 
        "syntax": "resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )", 
        "type": "Database"
    }, 
    "odbc_commit": {
        "descr": "Commits all pending transactions on the connection.", 
        "name": "odbc_commit", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-commit", 
        "syntax": "bool odbc_commit ( resource $connection_id )", 
        "type": "Database"
    }, 
    "odbc_connect": {
        "descr": "", 
        "name": "odbc_connect", 
        "params": [
            {
                "descr": "The database source name for the connection. ", 
                "name": "dsn"
            }, 
            {
                "descr": "The username.", 
                "name": "user"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "This sets the type of cursor to be used for this connection. ", 
                "name": "cursor_type"
            }
        ], 
        "path": "php/function.odbc-connect", 
        "syntax": "resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )", 
        "type": "Database"
    }, 
    "odbc_cursor": {
        "descr": "Gets the cursorname for the given result_id.", 
        "name": "odbc_cursor", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-cursor", 
        "syntax": "string odbc_cursor ( resource $result_id )", 
        "type": "Database"
    }, 
    "odbc_data_source": {
        "descr": "This function will return the list of available DSN (after calling it several times).", 
        "name": "odbc_data_source", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The fetch_type can be one of two constant types: SQL_FETCH_FIRST, SQL_FETCH_NEXT. ", 
                "name": "fetch_type"
            }
        ], 
        "path": "php/function.odbc-data-source", 
        "syntax": "array odbc_data_source ( resource $connection_id , int $fetch_type )", 
        "type": "Database"
    }, 
    "odbc_error": {
        "descr": "", 
        "name": "odbc_error", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-error", 
        "syntax": "string odbc_error ([ resource $connection_id ] )", 
        "type": "Database"
    }, 
    "odbc_errormsg": {
        "descr": "", 
        "name": "odbc_errormsg", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-errormsg", 
        "syntax": "string odbc_errormsg ([ resource $connection_id ] )", 
        "type": "Database"
    }, 
    "odbc_exec": {
        "descr": "Sends an SQL statement to the database server.", 
        "name": "odbc_exec", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The SQL statement.", 
                "name": "query_string"
            }, 
            {
                "descr": "This parameter is currently not used.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.odbc-exec", 
        "syntax": "resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )", 
        "type": "Database"
    }, 
    "odbc_execute": {
        "descr": "Executes a statement prepared with odbc_prepare().", 
        "name": "odbc_execute", 
        "params": [
            {
                "descr": "The result id resource, from odbc_prepare().", 
                "name": "result_id"
            }, 
            {
                "descr": "Parameters in parameter_array will be substituted for placeholders in the prepared statement in order. ", 
                "name": "parameters_array"
            }
        ], 
        "path": "php/function.odbc-execute", 
        "syntax": "bool odbc_execute ( resource $result_id [, array $parameters_array ] )", 
        "type": "Database"
    }, 
    "odbc_fetch_array": {
        "descr": "Fetch an associative array from an ODBC query. See the changelog below for when this function is available.", 
        "name": "odbc_fetch_array", 
        "params": [
            {
                "descr": "The result resource from odbc_exec().", 
                "name": "result"
            }, 
            {
                "descr": "Optionally choose which row number to retrieve.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-array", 
        "syntax": "array odbc_fetch_array ( resource $result [, int $rownumber ] )", 
        "type": "Database"
    }, 
    "odbc_fetch_into": {
        "descr": "Fetch one result row into array.", 
        "name": "odbc_fetch_into", 
        "params": [
            {
                "descr": "The result resource.", 
                "name": "result_id"
            }, 
            {
                "descr": "The result array that can be of any type since it will be converted to type array. ", 
                "name": "result_array"
            }, 
            {
                "descr": "The row number.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-into", 
        "syntax": "int odbc_fetch_into ( resource $result_id , array &$result_array [, int $rownumber ] )", 
        "type": "Database"
    }, 
    "odbc_fetch_object": {
        "descr": "Fetch an object from an ODBC query. See the changelog below for when this function is available.", 
        "name": "odbc_fetch_object", 
        "params": [
            {
                "descr": "The result resource from odbc_exec().", 
                "name": "result"
            }, 
            {
                "descr": "Optionally choose which row number to retrieve.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-object", 
        "syntax": "object odbc_fetch_object ( resource $result [, int $rownumber ] )", 
        "type": "Database"
    }, 
    "odbc_fetch_row": {
        "descr": "Fetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().", 
        "name": "odbc_fetch_row", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "If row_number is not specified, odbc_fetch_row() will try to fetch the next row in the result set. ", 
                "name": "row_number"
            }
        ], 
        "path": "php/function.odbc-fetch-row", 
        "syntax": "bool odbc_fetch_row ( resource $result_id [, int $row_number ] )", 
        "type": "Database"
    }, 
    "odbc_field_len": {
        "descr": "Gets the length of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_len", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-len", 
        "syntax": "int odbc_field_len ( resource $result_id , int $field_number )", 
        "type": "Database"
    }, 
    "odbc_field_name": {
        "descr": "Gets the name of the field occupying the given column number in the given result identifier.", 
        "name": "odbc_field_name", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-name", 
        "syntax": "string odbc_field_name ( resource $result_id , int $field_number )", 
        "type": "Database"
    }, 
    "odbc_field_num": {
        "descr": "Gets the number of the column slot that corresponds to the named field in the given result identifier.", 
        "name": "odbc_field_num", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field name.", 
                "name": "field_name"
            }
        ], 
        "path": "php/function.odbc-field-num", 
        "syntax": "int odbc_field_num ( resource $result_id , string $field_name )", 
        "type": "Database"
    }, 
    "odbc_field_scale": {
        "descr": "Gets the scale of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_scale", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-scale", 
        "syntax": "int odbc_field_scale ( resource $result_id , int $field_number )", 
        "type": "Database"
    }, 
    "odbc_field_type": {
        "descr": "Gets the SQL type of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_type", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-type", 
        "syntax": "string odbc_field_type ( resource $result_id , int $field_number )", 
        "type": "Database"
    }, 
    "odbc_foreignkeys": {
        "descr": "Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table", 
        "name": "odbc_foreignkeys", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The primary key qualifier.", 
                "name": "pk_qualifier"
            }, 
            {
                "descr": "The primary key owner.", 
                "name": "pk_owner"
            }, 
            {
                "descr": "The primary key table.", 
                "name": "pk_table"
            }, 
            {
                "descr": "The foreign key qualifier.", 
                "name": "fk_qualifier"
            }, 
            {
                "descr": "The foreign key owner.", 
                "name": "fk_owner"
            }, 
            {
                "descr": "The foreign key table.", 
                "name": "fk_table"
            }
        ], 
        "path": "php/function.odbc-foreignkeys", 
        "syntax": "resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )", 
        "type": "Database"
    }, 
    "odbc_free_result": {
        "descr": "Free resources associated with a result.", 
        "name": "odbc_free_result", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-free-result", 
        "syntax": "bool odbc_free_result ( resource $result_id )", 
        "type": "Database"
    }, 
    "odbc_gettypeinfo": {
        "descr": "Retrieves information about data types supported by the data source.", 
        "name": "odbc_gettypeinfo", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The data type, which can be used to restrict the information to a single data type.", 
                "name": "data_type"
            }
        ], 
        "path": "php/function.odbc-gettypeinfo", 
        "syntax": "resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )", 
        "type": "Database"
    }, 
    "odbc_longreadlen": {
        "descr": "Enables handling of LONG and LONGVARBINARY columns.", 
        "name": "odbc_longreadlen", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The number of bytes returned to PHP is controlled by the parameter length. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.odbc-longreadlen", 
        "syntax": "bool odbc_longreadlen ( resource $result_id , int $length )", 
        "type": "Database"
    }, 
    "odbc_next_result": {
        "descr": "Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.", 
        "name": "odbc_next_result", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-next-result", 
        "syntax": "bool odbc_next_result ( resource $result_id )", 
        "type": "Database"
    }, 
    "odbc_num_fields": {
        "descr": "Gets the number of fields (columns) in an ODBC result.", 
        "name": "odbc_num_fields", 
        "params": [
            {
                "descr": "The result identifier returned by odbc_exec().", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-num-fields", 
        "syntax": "int odbc_num_fields ( resource $result_id )", 
        "type": "Database"
    }, 
    "odbc_num_rows": {
        "descr": "Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.", 
        "name": "odbc_num_rows", 
        "params": [
            {
                "descr": "The result identifier returned by odbc_exec().", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-num-rows", 
        "syntax": "int odbc_num_rows ( resource $result_id )", 
        "type": "Database"
    }, 
    "odbc_pconnect": {
        "descr": "Opens a persistent database connection.", 
        "name": "odbc_pconnect", 
        "params": [], 
        "path": "php/function.odbc-pconnect", 
        "syntax": "resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )", 
        "type": "Database"
    }, 
    "odbc_prepare": {
        "descr": "Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute().", 
        "name": "odbc_prepare", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The query string statement being prepared.", 
                "name": "query_string"
            }
        ], 
        "path": "php/function.odbc-prepare", 
        "syntax": "resource odbc_prepare ( resource $connection_id , string $query_string )", 
        "type": "Database"
    }, 
    "odbc_primarykeys": {
        "descr": "Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.", 
        "name": "odbc_primarykeys", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-primarykeys", 
        "syntax": "resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )", 
        "type": "Database"
    }, 
    "odbc_procedurecolumns": {
        "descr": "Retrieve information about parameters to procedures.", 
        "name": "odbc_procedurecolumns", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "owner"
            }, 
            {
                "descr": "The proc. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "proc"
            }, 
            {
                "descr": "The column. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "column"
            }
        ], 
        "path": "php/function.odbc-procedurecolumns", 
        "syntax": "resource odbc_procedurecolumns ( resource $connection_id )", 
        "type": "Database"
    }, 
    "odbc_procedures": {
        "descr": "Lists all procedures in the requested range.", 
        "name": "odbc_procedures", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "owner"
            }, 
            {
                "descr": "The name. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "name"
            }
        ], 
        "path": "php/function.odbc-procedures", 
        "syntax": "resource odbc_procedures ( resource $connection_id )", 
        "type": "Database"
    }, 
    "odbc_result": {
        "descr": "Get result data", 
        "name": "odbc_result", 
        "params": [
            {
                "descr": "The ODBC resource.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field name being retrieved. ", 
                "name": "field"
            }
        ], 
        "path": "php/function.odbc-result", 
        "syntax": "mixed odbc_result ( resource $result_id , mixed $field )", 
        "type": "Database"
    }, 
    "odbc_result_all": {
        "descr": "Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format.", 
        "name": "odbc_result_all", 
        "params": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "Additional overall table formatting.", 
                "name": "format"
            }
        ], 
        "path": "php/function.odbc-result-all", 
        "syntax": "int odbc_result_all ( resource $result_id [, string $format ] )", 
        "type": "Database"
    }, 
    "odbc_rollback": {
        "descr": "Rolls back all pending statements on the connection.", 
        "name": "odbc_rollback", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-rollback", 
        "syntax": "bool odbc_rollback ( resource $connection_id )", 
        "type": "Database"
    }, 
    "odbc_setoption": {
        "descr": "This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.", 
        "name": "odbc_setoption", 
        "params": [
            {
                "descr": "Is a connection id or result id on which to change the settings. ", 
                "name": "id"
            }, 
            {
                "descr": "Is the ODBC function to use. The value should be 1 for SQLSetConnectOption() and 2 for SQLSetStmtOption().", 
                "name": "function"
            }, 
            {
                "descr": "The option to set.", 
                "name": "option"
            }, 
            {
                "descr": "The value for the given option.", 
                "name": "param"
            }
        ], 
        "path": "php/function.odbc-setoption", 
        "syntax": "bool odbc_setoption ( resource $id , int $function , int $option , int $param )", 
        "type": "Database"
    }, 
    "odbc_specialcolumns": {
        "descr": "Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.", 
        "name": "odbc_specialcolumns", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "When the type argument is SQL_BEST_ROWID, odbc_specialcolumns() returns the column or columns that uniquely identify each row in the table. ", 
                "name": "type"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table.", 
                "name": "table"
            }, 
            {
                "descr": "The scope, which orders the result set.", 
                "name": "scope"
            }, 
            {
                "descr": "The nullable option.", 
                "name": "nullable"
            }
        ], 
        "path": "php/function.odbc-specialcolumns", 
        "syntax": "resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable )", 
        "type": "Database"
    }, 
    "odbc_statistics": {
        "descr": "Get statistics about a table and its indexes.", 
        "name": "odbc_statistics", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The unique attribute.", 
                "name": "unique"
            }, 
            {
                "descr": "The accuracy.", 
                "name": "accuracy"
            }
        ], 
        "path": "php/function.odbc-statistics", 
        "syntax": "resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )", 
        "type": "Database"
    }, 
    "odbc_tableprivileges": {
        "descr": "Lists tables in the requested range and the privileges associated with each table.", 
        "name": "odbc_tableprivileges", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)", 
                "name": "owner"
            }, 
            {
                "descr": "The name. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)", 
                "name": "name"
            }
        ], 
        "path": "php/function.odbc-tableprivileges", 
        "syntax": "resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )", 
        "type": "Database"
    }, 
    "odbc_tables": {
        "descr": "Lists all tables in the requested range.", 
        "name": "odbc_tables", 
        "params": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "owner"
            }, 
            {
                "descr": "The name. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "name"
            }, 
            {
                "descr": "If table_type is not an empty string, it must contain a list of comma-separated values for the types of interest; each value may be enclosed in single quotes (') or unquoted. ", 
                "name": "types"
            }
        ], 
        "path": "php/function.odbc-tables", 
        "syntax": "resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )", 
        "type": "Database"
    }, 
    "opendir": {
        "descr": "Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.", 
        "name": "opendir", 
        "params": [
            {
                "descr": "The directory path that is to be opened", 
                "name": "path"
            }, 
            {
                "descr": "For a description of the context parameter, refer to the streams section of the manual.", 
                "name": "context"
            }
        ], 
        "path": "php/function.opendir", 
        "syntax": "resource opendir ( string $path [, resource $context ] )", 
        "type": "File System"
    }, 
    "openlog": {
        "descr": "openlog() opens a connection to the system logger for a program.", 
        "name": "openlog", 
        "params": [
            {
                "descr": "The string ident is added to each message.", 
                "name": "ident"
            }, 
            {
                "descr": "The option argument is used to indicate what logging options will be used when generating a log message. ", 
                "name": "option"
            }, 
            {
                "descr": "The facility argument is used to specify what type of program is logging the message. ", 
                "name": "facility"
            }
        ], 
        "path": "php/function.openlog", 
        "syntax": "bool openlog ( string $ident , int $option , int $facility )", 
        "type": "Networking"
    }, 
    "openssl_cipher_iv_length": {
        "descr": "Gets the cipher iv length.", 
        "name": "openssl_cipher_iv_length", 
        "params": [
            {
                "descr": "The method.", 
                "name": "method"
            }
        ], 
        "path": "php/function.openssl-cipher-iv-length", 
        "syntax": "int openssl_cipher_iv_length ( string $method )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_export": {
        "descr": "openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.", 
        "name": "openssl_csr_export", 
        "params": [
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "csr   out   notext"
            }
        ], 
        "path": "php/function.openssl-csr-export", 
        "syntax": "bool openssl_csr_export ( resource $csr , string &$out [, bool $notext = true ] )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_export_to_file": {
        "descr": "openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.", 
        "name": "openssl_csr_export_to_file", 
        "params": [
            {
                "descr": "Path to the output file.", 
                "name": "csr   outfilename"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-csr-export-to-file", 
        "syntax": "bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext = true ] )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_get_public_key": {
        "descr": "", 
        "name": "openssl_csr_get_public_key", 
        "params": [], 
        "path": "php/function.openssl-csr-get-public-key", 
        "syntax": "resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_get_subject": {
        "descr": "", 
        "name": "openssl_csr_get_subject", 
        "params": [], 
        "path": "php/function.openssl-csr-get-subject", 
        "syntax": "array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_new": {
        "descr": "openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate.", 
        "name": "openssl_csr_new", 
        "params": [
            {
                "descr": "The Distinguished Name to be used in the certificate.", 
                "name": "dn"
            }, 
            {
                "descr": "privkey should be set to a private key that was previously generated by openssl_pkey_new() (or otherwise obtained from the other openssl_pkey family of functions). ", 
                "name": "privkey"
            }, 
            {
                "descr": "By default, the information in your system openssl.conf is used to initialize the request; you can specify a configuration file section by setting the config_section_section key of configargs. ", 
                "name": "configargs"
            }, 
            {
                "descr": "extraattribs is used to specify additional configuration options for the CSR. ", 
                "name": "extraattribs"
            }
        ], 
        "path": "php/function.openssl-csr-new", 
        "syntax": "mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_csr_sign": {
        "descr": "openssl_csr_sign() generates an x509 certificate resource from the given CSR.", 
        "name": "openssl_csr_sign", 
        "params": [
            {
                "descr": "A CSR previously generated by openssl_csr_new(). ", 
                "name": "csr"
            }, 
            {
                "descr": "The generated certificate will be signed by cacert. ", 
                "name": "cacert"
            }, 
            {
                "descr": "priv_key is the private key that corresponds to cacert.", 
                "name": "priv_key"
            }, 
            {
                "descr": "days specifies the length of time for which the generated certificate will be valid, in days.", 
                "name": "days"
            }, 
            {
                "descr": "You can finetune the CSR signing by configargs. ", 
                "name": "configargs"
            }, 
            {
                "descr": "An optional the serial number of issued certificate. ", 
                "name": "serial"
            }
        ], 
        "path": "php/function.openssl-csr-sign", 
        "syntax": "resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_decrypt": {
        "descr": "Takes a raw or base64 encoded string and decrypts it using a given method and key.", 
        "name": "openssl_decrypt", 
        "params": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The cipher method.", 
                "name": "method"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.", 
                "name": "options"
            }, 
            {
                "descr": "A non-NULL Initialization Vector.", 
                "name": "iv"
            }
        ], 
        "path": "php/function.openssl-decrypt", 
        "syntax": "string openssl_decrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = \"\" ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_dh_compute_key": {
        "descr": "", 
        "name": "openssl_dh_compute_key", 
        "params": [
            {
                "descr": "Public key", 
                "name": "pub_key"
            }, 
            {
                "descr": "DH key", 
                "name": "dh_key"
            }
        ], 
        "path": "php/function.openssl-dh-compute-key", 
        "syntax": "string openssl_dh_compute_key ( string $pub_key , resource $dh_key )", 
        "type": "Cryptography"
    }, 
    "openssl_digest": {
        "descr": "Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.", 
        "name": "openssl_digest", 
        "params": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The digest method.", 
                "name": "method"
            }, 
            {
                "descr": "Setting to TRUE will return as raw output data, otherwise the return value is binhex encoded.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.openssl-digest", 
        "syntax": "string openssl_digest ( string $data , string $method [, bool $raw_output = false ] )", 
        "type": "Cryptography"
    }, 
    "openssl_encrypt": {
        "descr": "Encrypts given data with given method and key, returns a raw or base64 encoded string", 
        "name": "openssl_encrypt", 
        "params": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The cipher method.", 
                "name": "method"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.", 
                "name": "options"
            }, 
            {
                "descr": "A non-NULL Initialization Vector.", 
                "name": "iv"
            }
        ], 
        "path": "php/function.openssl-encrypt", 
        "syntax": "string openssl_encrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = \"\" ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_error_string": {
        "descr": "openssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.", 
        "name": "openssl_error_string", 
        "params": [], 
        "path": "php/function.openssl-error-string", 
        "syntax": "string openssl_error_string ( void )", 
        "type": "Cryptography"
    }, 
    "openssl_free_key": {
        "descr": "openssl_free_key() frees the key associated with the specified key_identifier from memory.", 
        "name": "openssl_free_key", 
        "params": [], 
        "path": "php/function.openssl-free-key", 
        "syntax": "void openssl_free_key ( resource $key_identifier )", 
        "type": "Cryptography"
    }, 
    "openssl_get_cipher_methods": {
        "descr": "Gets a list of available cipher methods.", 
        "name": "openssl_get_cipher_methods", 
        "params": [
            {
                "descr": "Set to TRUE if cipher aliases should be included within the returned array.", 
                "name": "aliases"
            }
        ], 
        "path": "php/function.openssl-get-cipher-methods", 
        "syntax": "array openssl_get_cipher_methods ([ bool $aliases = false ] )", 
        "type": "Cryptography"
    }, 
    "openssl_get_md_methods": {
        "descr": "Gets a list of available digest methods.", 
        "name": "openssl_get_md_methods", 
        "params": [
            {
                "descr": "Set to TRUE if digest aliases should be included within the returned array.", 
                "name": "aliases"
            }
        ], 
        "path": "php/function.openssl-get-md-methods", 
        "syntax": "array openssl_get_md_methods ([ bool $aliases = false ] )", 
        "type": "Cryptography"
    }, 
    "openssl_open": {
        "descr": "openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.", 
        "name": "openssl_open", 
        "params": [
            {
                "descr": "If the call is successful the opened data is returned in this parameter.", 
                "name": "sealed_data   open_data"
            }
        ], 
        "path": "php/function.openssl-open", 
        "syntax": "bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pbkdf2": {
        "descr": "", 
        "name": "openssl_pbkdf2", 
        "params": [], 
        "path": "php/function.openssl-pbkdf2", 
        "syntax": "string openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_export": {
        "descr": "openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.", 
        "name": "openssl_pkcs12_export", 
        "params": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "On success, this will hold the PKCS#12.", 
                "name": "out"
            }, 
            {
                "descr": "Private key component of PKCS#12 file.", 
                "name": "priv_key"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-export", 
        "syntax": "bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_export_to_file": {
        "descr": "openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.", 
        "name": "openssl_pkcs12_export_to_file", 
        "params": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "Path to the output file.", 
                "name": "filename"
            }, 
            {
                "descr": "Private key component of PKCS#12 file.", 
                "name": "priv_key"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-export-to-file", 
        "syntax": "bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_read": {
        "descr": "openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.", 
        "name": "openssl_pkcs12_read", 
        "params": [
            {
                "descr": "On success, this will hold the Certificate Store Data.", 
                "name": "pkcs12   certs"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-read", 
        "syntax": "bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_decrypt": {
        "descr": "Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.", 
        "name": "openssl_pkcs7_decrypt", 
        "params": [
            {
                "descr": "The decrypted message is written to the file specified by outfilename.", 
                "name": "infilename   outfilename"
            }
        ], 
        "path": "php/function.openssl-pkcs7-decrypt", 
        "syntax": "bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_encrypt": {
        "descr": "openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.", 
        "name": "openssl_pkcs7_encrypt", 
        "params": [
            {
                "descr": "Either a lone X.509 certificate, or an array of X.509 certificates.", 
                "name": "infile   outfile   recipcerts"
            }, 
            {
                "descr": "headers is an array of headers that will be prepended to the data after it has been encrypted. ", 
                "name": "headers"
            }, 
            {
                "descr": "flags can be used to specify options that affect the encoding process - see PKCS7 constants.", 
                "name": "flags"
            }, 
            {
                "descr": "One of cipher constants.", 
                "name": "cipherid"
            }
        ], 
        "path": "php/function.openssl-pkcs7-encrypt", 
        "syntax": "bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_sign": {
        "descr": "openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.", 
        "name": "openssl_pkcs7_sign", 
        "params": [
            {
                "descr": "headers is an array of headers that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more information about the format of this parameter).", 
                "name": "infilename   outfilename   signcert   privkey   headers"
            }, 
            {
                "descr": "flags can be used to alter the output - see PKCS7 constants.", 
                "name": "flags"
            }, 
            {
                "descr": "extracerts specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used.", 
                "name": "extracerts"
            }
        ], 
        "path": "php/function.openssl-pkcs7-sign", 
        "syntax": "bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_verify": {
        "descr": "openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.", 
        "name": "openssl_pkcs7_verify", 
        "params": [
            {
                "descr": "Path to the message.", 
                "name": "filename"
            }, 
            {
                "descr": "flags can be used to affect how the signature is verified - see PKCS7 constants for more information.", 
                "name": "flags"
            }, 
            {
                "descr": "If the outfilename is specified, it should be a string holding the name of a file into which the certificates of the persons that signed the messages will be stored in PEM format.", 
                "name": "outfilename"
            }, 
            {
                "descr": "If the cainfo is specified, it should hold information about the trusted CA certificates to use in the verification process - see certificate verification for more information about this parameter.", 
                "name": "cainfo"
            }, 
            {
                "descr": "If the extracerts is specified, it is the filename of a file containing a bunch of certificates to use as untrusted CAs.", 
                "name": "extracerts"
            }, 
            {
                "descr": "You can specify a filename with content that will be filled with the verified data, but with the signature information stripped.", 
                "name": "content"
            }
        ], 
        "path": "php/function.openssl-pkcs7-verify", 
        "syntax": "mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_export": {
        "descr": "openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).", 
        "name": "openssl_pkey_export", 
        "params": [
            {
                "descr": "The key is optionally protected by passphrase.", 
                "name": "key   out   passphrase"
            }, 
            {
                "descr": "configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-export", 
        "syntax": "bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_export_to_file": {
        "descr": "openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.", 
        "name": "openssl_pkey_export_to_file", 
        "params": [
            {
                "descr": "Path to the output file.", 
                "name": "key   outfilename"
            }, 
            {
                "descr": "The key can be optionally protected by a passphrase.", 
                "name": "passphrase"
            }, 
            {
                "descr": "configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-export-to-file", 
        "syntax": "bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_free": {
        "descr": "This function frees a private key created by openssl_pkey_new().", 
        "name": "openssl_pkey_free", 
        "params": [
            {
                "descr": "Resource holding the key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-pkey-free", 
        "syntax": "void openssl_pkey_free ( resource $key )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_details": {
        "descr": "This function returns the key details (bits, key, type).", 
        "name": "openssl_pkey_get_details", 
        "params": [
            {
                "descr": "Resource holding the key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-pkey-get-details", 
        "syntax": "array openssl_pkey_get_details ( resource $key )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_private": {
        "descr": "openssl_get_privatekey() parses key and prepares it for use by other functions.", 
        "name": "openssl_pkey_get_private", 
        "params": [
            {
                "descr": "key can be one of the following: a string having the format file://path/to/file.pem. ", 
                "name": "key"
            }, 
            {
                "descr": "The optional parameter passphrase must be used if the specified key is encrypted (protected by a passphrase).", 
                "name": "passphrase"
            }
        ], 
        "path": "php/function.openssl-pkey-get-private", 
        "syntax": "resource openssl_pkey_get_private ( mixed $key [, string $passphrase = \"\" ] )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_public": {
        "descr": "openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.", 
        "name": "openssl_pkey_get_public", 
        "params": [
            {
                "descr": "certificate can be one of the following: an X.509 certificate resource a string having the format file://path/to/file.pem. ", 
                "name": "certificate"
            }
        ], 
        "path": "php/function.openssl-pkey-get-public", 
        "syntax": "resource openssl_pkey_get_public ( mixed $certificate )", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_new": {
        "descr": "openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public().", 
        "name": "openssl_pkey_new", 
        "params": [
            {
                "descr": "You can finetune the key generation (such as specifying the number of bits) using configargs. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-new", 
        "syntax": "resource openssl_pkey_new ([ array $configargs ] )", 
        "type": "Cryptography"
    }, 
    "openssl_private_decrypt": {
        "descr": "openssl_private_decrypt() decrypts data that was previous encrypted via openssl_public_encrypt() and stores the result into decrypted.", 
        "name": "openssl_private_decrypt", 
        "params": [
            {
                "descr": "key must be the private key corresponding that was used to encrypt the data.", 
                "name": "data   decrypted   key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-private-decrypt", 
        "syntax": "bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "type": "Cryptography"
    }, 
    "openssl_private_encrypt": {
        "descr": "openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt().", 
        "name": "openssl_private_encrypt", 
        "params": [
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.", 
                "name": "data   crypted   key   padding"
            }
        ], 
        "path": "php/function.openssl-private-encrypt", 
        "syntax": "bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "type": "Cryptography"
    }, 
    "openssl_public_decrypt": {
        "descr": "openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted.", 
        "name": "openssl_public_decrypt", 
        "params": [
            {
                "descr": "key must be the public key corresponding that was used to encrypt the data.", 
                "name": "data   decrypted   key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-public-decrypt", 
        "syntax": "bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "type": "Cryptography"
    }, 
    "openssl_public_encrypt": {
        "descr": "openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt().", 
        "name": "openssl_public_encrypt", 
        "params": [
            {
                "descr": "This will hold the result of the encryption.", 
                "name": "data   crypted"
            }, 
            {
                "descr": "The public key.", 
                "name": "key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-public-encrypt", 
        "syntax": "bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "type": "Cryptography"
    }, 
    "openssl_random_pseudo_bytes": {
        "descr": "Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter.", 
        "name": "openssl_random_pseudo_bytes", 
        "params": [
            {
                "descr": "The length of the desired string of bytes. ", 
                "name": "length"
            }, 
            {
                "descr": "If passed into the function, this will hold a boolean value that determines if the algorithm used was \"cryptographically strong\", e.g., safe for usage with GPG, passwords, etc. ", 
                "name": "crypto_strong"
            }
        ], 
        "path": "php/function.openssl-random-pseudo-bytes", 
        "syntax": "string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )", 
        "type": "Cryptography"
    }, 
    "openssl_seal": {
        "descr": "openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.", 
        "name": "openssl_seal", 
        "params": [], 
        "path": "php/function.openssl-seal", 
        "syntax": "int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method ] )", 
        "type": "Cryptography"
    }, 
    "openssl_sign": {
        "descr": "openssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. Note that the data itself is not encrypted.", 
        "name": "openssl_sign", 
        "params": [
            {
                "descr": "The string of data you wish to sign", 
                "name": "data"
            }, 
            {
                "descr": "If the call was successful the signature is returned in signature.", 
                "name": "signature"
            }, 
            {
                "descr": "resource - a key, returned by openssl_get_privatekey()   string - a PEM formatted key", 
                "name": "priv_key_id"
            }, 
            {
                "descr": "int - one of these Signature Algorithms. ", 
                "name": "signature_alg"
            }
        ], 
        "path": "php/function.openssl-sign", 
        "syntax": "bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )", 
        "type": "Cryptography"
    }, 
    "openssl_verify": {
        "descr": "openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.", 
        "name": "openssl_verify", 
        "params": [
            {
                "descr": "The string of data used to generate the signature previously", 
                "name": "data"
            }, 
            {
                "descr": "A raw binary string, generated by openssl_sign() or similar means", 
                "name": "signature"
            }, 
            {
                "descr": "resource - a key, returned by openssl_get_publickey()   string - a PEM formatted key, example, \"-----BEGIN PUBLIC KEY----- MIIBCgK...\"", 
                "name": "pub_key_id"
            }, 
            {
                "descr": "int - one of these Signature Algorithms. ", 
                "name": "signature_alg"
            }
        ], 
        "path": "php/function.openssl-verify", 
        "syntax": "int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_check_private_key": {
        "descr": "Checks whether the given key is the private key that corresponds to cert.", 
        "name": "openssl_x509_check_private_key", 
        "params": [
            {
                "descr": "The certificate.", 
                "name": "cert"
            }, 
            {
                "descr": "The private key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-x509-check-private-key", 
        "syntax": "bool openssl_x509_check_private_key ( mixed $cert , mixed $key )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_checkpurpose": {
        "descr": "openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.", 
        "name": "openssl_x509_checkpurpose", 
        "params": [
            {
                "descr": "The examined certificate.", 
                "name": "x509cert"
            }, 
            {
                "descr": "openssl_x509_checkpurpose() purposes Constant Description X509_PURPOSE_SSL_CLIENT Can the certificate be used for the client side of an SSL connection? X509_PURPOSE_SSL_SERVER Can the certificate be used for the server side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert be used for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the cert be used to sign S/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can the cert be used to encrypt S/MIME email? X509_PURPOSE_CRL_SIGN Can the cert be used to sign a certificate revocation list (CRL)? X509_PURPOSE_ANY Can the cert be used for Any/All purposes?  These options are not bitfields - you may specify one only!", 
                "name": "purpose"
            }, 
            {
                "descr": "cainfo should be an array of trusted CA files/dirs as described in Certificate Verification.", 
                "name": "cainfo"
            }, 
            {
                "descr": "If specified, this should be the name of a PEM encoded file holding certificates that can be used to help verify the certificate, although no trust is placed in the certificates that come from that file.", 
                "name": "untrustedfile"
            }
        ], 
        "path": "php/function.openssl-x509-checkpurpose", 
        "syntax": "int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_export": {
        "descr": "openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.", 
        "name": "openssl_x509_export", 
        "params": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "On success, this will hold the PEM.", 
                "name": "output"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-x509-export", 
        "syntax": "bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext = TRUE ] )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_export_to_file": {
        "descr": "openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.", 
        "name": "openssl_x509_export_to_file", 
        "params": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "Path to the output file.", 
                "name": "outfilename"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-x509-export-to-file", 
        "syntax": "bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext = TRUE ] )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_free": {
        "descr": "openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.", 
        "name": "openssl_x509_free", 
        "params": [], 
        "path": "php/function.openssl-x509-free", 
        "syntax": "void openssl_x509_free ( resource $x509cert )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_parse": {
        "descr": "openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.", 
        "name": "openssl_x509_parse", 
        "params": [
            {
                "descr": "shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName.", 
                "name": "x509cert   shortnames"
            }
        ], 
        "path": "php/function.openssl-x509-parse", 
        "syntax": "array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )", 
        "type": "Cryptography"
    }, 
    "openssl_x509_read": {
        "descr": "openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.", 
        "name": "openssl_x509_read", 
        "params": [], 
        "path": "php/function.openssl-x509-read", 
        "syntax": "resource openssl_x509_read ( mixed $x509certdata )", 
        "type": "Cryptography"
    }, 
    "ord": {
        "descr": "Returns the ASCII value of the first character of string.", 
        "name": "ord", 
        "params": [
            {
                "descr": "A character.", 
                "name": "string"
            }
        ], 
        "path": "php/function.ord", 
        "syntax": "int ord ( string $string )", 
        "type": "String"
    }, 
    "output_add_rewrite_var": {
        "descr": "This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. Please note that absolute URLs (http://example.com/..) aren't rewritten.", 
        "name": "output_add_rewrite_var", 
        "params": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }, 
            {
                "descr": "The variable value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.output-add-rewrite-var", 
        "syntax": "bool output_add_rewrite_var ( string $name , string $value )", 
        "type": "Networking"
    }, 
    "output_reset_rewrite_vars": {
        "descr": "This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function or the session mechanism (if session.use_trans_sid was set on session_start()).", 
        "name": "output_reset_rewrite_vars", 
        "params": [], 
        "path": "php/function.output-reset-rewrite-vars", 
        "syntax": "bool output_reset_rewrite_vars ( void )", 
        "type": "Networking"
    }, 
    "pack": {
        "descr": "Pack given arguments into a binary string according to format.", 
        "name": "pack", 
        "params": [
            {
                "descr": "The format string consists of format codes followed by an optional repeater argument. ", 
                "name": "format"
            }
        ], 
        "path": "php/function.pack", 
        "syntax": "string pack ( string $format [, mixed $args [, mixed $... ]] )", 
        "type": "Language"
    }, 
    "parse_ini_file": {
        "descr": "parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.", 
        "name": "parse_ini_file", 
        "params": [
            {
                "descr": "The filename of the ini file being parsed.", 
                "name": "filename"
            }, 
            {
                "descr": "By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. ", 
                "name": "process_sections"
            }, 
            {
                "descr": "Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. ", 
                "name": "scanner_mode"
            }
        ], 
        "path": "php/function.parse-ini-file", 
        "syntax": "array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )", 
        "type": "File System"
    }, 
    "parse_ini_string": {
        "descr": "parse_ini_string() returns the settings in string ini in an associative array.", 
        "name": "parse_ini_string", 
        "params": [
            {
                "descr": "The contents of the ini file being parsed.", 
                "name": "ini"
            }, 
            {
                "descr": "By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. ", 
                "name": "process_sections"
            }, 
            {
                "descr": "Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. ", 
                "name": "scanner_mode"
            }
        ], 
        "path": "php/function.parse-ini-string", 
        "syntax": "array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )", 
        "type": "File System"
    }, 
    "parse_str": {
        "descr": "Parses str as if it were the query string passed via a URL and sets variables in the current scope.", 
        "name": "parse_str", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the second parameter arr is present, variables are stored in this variable as array elements instead.", 
                "name": "arr"
            }
        ], 
        "path": "php/function.parse-str", 
        "syntax": "void parse_str ( string $str [, array &$arr ] )", 
        "type": "String"
    }, 
    "parse_url": {
        "descr": "This function parses a URL and returns an associative array containing any of the various components of the URL that are present.", 
        "name": "parse_url", 
        "params": [
            {
                "descr": "The URL to parse. Invalid characters are replaced by _.", 
                "name": "url"
            }, 
            {
                "descr": "Specify one of PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT to retrieve just a specific URL component as a string (except when PHP_URL_PORT is given, in which case the return value will be an integer).", 
                "name": "component"
            }
        ], 
        "path": "php/function.parse-url", 
        "syntax": "mixed parse_url ( string $url [, int $component = -1 ] )", 
        "type": "Networking"
    }, 
    "passthru": {
        "descr": "The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.", 
        "name": "passthru", 
        "params": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the return_var argument is present, the return status of the Unix command will be placed here.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.passthru", 
        "syntax": "void passthru ( string $command [, int &$return_var ] )", 
        "type": "Process Control"
    }, 
    "password_get_info": {
        "descr": "When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash.", 
        "name": "password_get_info", 
        "params": [
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }
        ], 
        "path": "php/function.password-get-info", 
        "syntax": "array password_get_info ( string $hash )", 
        "type": "Cryptography"
    }, 
    "password_hash": {
        "descr": "password_hash() creates a new password hash using a strong one-way hashing algorithm. password_hash() is compatible with crypt(). Therefore, password hashes created by crypt() can be used with password_hash().", 
        "name": "password_hash", 
        "params": [
            {
                "descr": "The user's password.  Caution  Using the PASSWORD_BCRYPT for the algo parameter, will result in the password parameter being truncated to a maximum length of 72 characters. ", 
                "name": "password"
            }, 
            {
                "descr": "A password algorithm constant denoting the algorithm to use when hashing the password.", 
                "name": "algo"
            }, 
            {
                "descr": "An associative array containing options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.password-hash", 
        "syntax": "string password_hash ( string $password , integer $algo [, array $options ] )", 
        "type": "Cryptography"
    }, 
    "password_needs_rehash": {
        "descr": "This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.", 
        "name": "password_needs_rehash", 
        "params": [
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }, 
            {
                "descr": "A password algorithm constant denoting the algorithm to use when hashing the password.", 
                "name": "algo"
            }, 
            {
                "descr": "An associative array containing options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.password-needs-rehash", 
        "syntax": "boolean password_needs_rehash ( string $hash , string $algo [, string $options ] )", 
        "type": "Cryptography"
    }, 
    "password_verify": {
        "descr": "Verifies that the given hash matches the given password.", 
        "name": "password_verify", 
        "params": [
            {
                "descr": "The user's password.", 
                "name": "password"
            }, 
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }
        ], 
        "path": "php/function.password-verify", 
        "syntax": "boolean password_verify ( string $password , string $hash )", 
        "type": "Cryptography"
    }, 
    "pathinfo": {
        "descr": "pathinfo() returns information about path: either an associative array or a string, depending on options.", 
        "name": "pathinfo", 
        "params": [
            {
                "descr": "The path to be parsed.", 
                "name": "path"
            }, 
            {
                "descr": "If present, specifies a specific element to be returned; one of PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pathinfo", 
        "syntax": "mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )", 
        "type": "File System"
    }, 
    "pclose": {
        "descr": "Closes a file pointer to a pipe opened by popen().", 
        "name": "pclose", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must have been returned by a successful call to popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.pclose", 
        "syntax": "int pclose ( resource $handle )", 
        "type": "File System"
    }, 
    "pfsockopen": {
        "descr": "This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen().", 
        "name": "pfsockopen", 
        "params": [], 
        "path": "php/function.pfsockopen", 
        "syntax": "resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]] )", 
        "type": "Networking"
    }, 
    "pg_affected_rows": {
        "descr": "pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries.", 
        "name": "pg_affected_rows", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-affected-rows", 
        "syntax": "int pg_affected_rows ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_cancel_query": {
        "descr": "pg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query().", 
        "name": "pg_cancel_query", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-cancel-query", 
        "syntax": "bool pg_cancel_query ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_client_encoding": {
        "descr": "PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers.", 
        "name": "pg_client_encoding", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-client-encoding", 
        "syntax": "string pg_client_encoding ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_close": {
        "descr": "pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource.", 
        "name": "pg_close", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-close", 
        "syntax": "bool pg_close ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connect": {
        "descr": "pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.", 
        "name": "pg_connect", 
        "params": [
            {
                "descr": "The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. ", 
                "name": "connection_string"
            }, 
            {
                "descr": "If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection.", 
                "name": "connect_type"
            }
        ], 
        "path": "php/function.pg-connect", 
        "syntax": "resource pg_connect ( string $connection_string [, int $connect_type ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_busy": {
        "descr": "pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked.", 
        "name": "pg_connection_busy", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-busy", 
        "syntax": "bool pg_connection_busy ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_reset": {
        "descr": "pg_connection_reset() resets the connection. It is useful for error recovery.", 
        "name": "pg_connection_reset", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-reset", 
        "syntax": "bool pg_connection_reset ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_status": {
        "descr": "pg_connection_status() returns the status of the specified connection.", 
        "name": "pg_connection_status", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-status", 
        "syntax": "int pg_connection_status ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_convert": {
        "descr": "pg_convert() checks and converts the values in assoc_array into suitable values for use in an SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise.", 
        "name": "pg_convert", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table against which to convert types.", 
                "name": "table_name"
            }, 
            {
                "descr": "Data to be converted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_IGNORE_DEFAULT, PGSQL_CONV_FORCE_NULL or PGSQL_CONV_IGNORE_NOT_NULL, combined.", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-convert", 
        "syntax": "array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_copy_from": {
        "descr": "pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.", 
        "name": "pg_copy_from", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to copy the rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array of data to be copied into table_name. ", 
                "name": "rows"
            }, 
            {
                "descr": "The token that separates values for each field in each element of rows. ", 
                "name": "delimiter"
            }, 
            {
                "descr": "How SQL NULL values are represented in the rows. ", 
                "name": "null_as"
            }
        ], 
        "path": "php/function.pg-copy-from", 
        "syntax": "bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_copy_to": {
        "descr": "pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.", 
        "name": "pg_copy_to", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to copy the data into rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "The token that separates values for each field in each element of rows. ", 
                "name": "delimiter"
            }, 
            {
                "descr": "How SQL NULL values are represented in the rows. ", 
                "name": "null_as"
            }
        ], 
        "path": "php/function.pg-copy-to", 
        "syntax": "array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_dbname": {
        "descr": "pg_dbname() returns the name of the database that the given PostgreSQL connection resource.", 
        "name": "pg_dbname", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-dbname", 
        "syntax": "string pg_dbname ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_delete": {
        "descr": "pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options.", 
        "name": "pg_delete", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to delete rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be deleted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-delete", 
        "syntax": "mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_end_copy": {
        "descr": "pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.", 
        "name": "pg_end_copy", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-end-copy", 
        "syntax": "bool pg_end_copy ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_bytea": {
        "descr": "pg_escape_bytea() escapes string for bytea datatype. It returns escaped string.", 
        "name": "pg_escape_bytea", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text or binary data to be inserted into a bytea column.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-bytea", 
        "syntax": "string pg_escape_bytea ([ resource $connection ], string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_identifier": {
        "descr": "pg_escape_identifier() escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. pg_escape_identifier() adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), pg_escape_literal() or pg_escape_string() muse be used. For bytea type fields, pg_escape_bytea() must be used instead.", 
        "name": "pg_escape_identifier", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-identifier", 
        "syntax": "string pg_escape_identifier ([ resource $connection ], string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_literal": {
        "descr": "pg_escape_literal() escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. pg_escape_literal() adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of pg_escape_string(). If the type of the column is bytea, pg_escape_bytea() must be used instead. For escaping identifiers (e.g. table, field names), pg_escape_identifier() must be used.", 
        "name": "pg_escape_literal", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-literal", 
        "syntax": "string pg_escape_literal ([ resource $connection ], string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_string": {
        "descr": "pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. pg_escape_literal() is more preferred way to escape SQL parameters for PostgreSQL. addslashes() must not be used with PostgreSQL. If the type of the column is bytea, pg_escape_bytea() must be used instead. pg_escape_identifier() must be used to escape identifiers (e.g. table names, field names)", 
        "name": "pg_escape_string", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-string", 
        "syntax": "string pg_escape_string ([ resource $connection ], string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_execute": {
        "descr": "Sends a request to execute a prepared statement with given parameters, and waits for the result.", 
        "name": "pg_execute", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the prepared statement to execute. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-execute", 
        "syntax": "resource pg_execute ([ resource $connection ], string $stmtname , array $params )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_all": {
        "descr": "pg_fetch_all() returns an array that contains all rows (records) in the result resource.", 
        "name": "pg_fetch_all", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-fetch-all", 
        "syntax": "array pg_fetch_all ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_all_columns": {
        "descr": "pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource.", 
        "name": "pg_fetch_all_columns", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Column number, zero-based, to be retrieved from the result resource. ", 
                "name": "column"
            }
        ], 
        "path": "php/function.pg-fetch-all-columns", 
        "syntax": "array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_array": {
        "descr": "pg_fetch_array() returns an array that corresponds to the fetched row (record).", 
        "name": "pg_fetch_array", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "An optional parameter that controls how the returned array is indexed. ", 
                "name": "result_type"
            }
        ], 
        "path": "php/function.pg-fetch-array", 
        "syntax": "array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_assoc": {
        "descr": "pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records).", 
        "name": "pg_fetch_assoc", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-fetch-assoc", 
        "syntax": "array pg_fetch_assoc ( resource $result [, int $row ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_object": {
        "descr": "pg_fetch_object() returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.", 
        "name": "pg_fetch_object", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "Ignored and deprecated.", 
                "name": "result_type"
            }, 
            {
                "descr": "The name of the class to instantiate, set the properties of and return. ", 
                "name": "class_name"
            }, 
            {
                "descr": "An optional array of parameters to pass to the constructor for class_name objects.", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-fetch-object", 
        "syntax": "object pg_fetch_object ( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_result": {
        "descr": "pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource.", 
        "name": "pg_fetch_result", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "A string representing the name of the field (column) to fetch, otherwise an int representing the field number to fetch. ", 
                "name": "field"
            }
        ], 
        "path": "php/function.pg-fetch-result", 
        "syntax": "string pg_fetch_result ( resource $result , int $row , mixed $field )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_row": {
        "descr": "pg_fetch_row() fetches one row of data from the result associated with the specified result resource.", 
        "name": "pg_fetch_row", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-fetch-row", 
        "syntax": "array pg_fetch_row ( resource $result [, int $row ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_is_null": {
        "descr": "pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not.", 
        "name": "pg_field_is_null", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "Field number (starting from 0) as an integer or the field name as a string.", 
                "name": "field"
            }
        ], 
        "path": "php/function.pg-field-is-null", 
        "syntax": "int pg_field_is_null ( resource $result , int $row , mixed $field )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_name": {
        "descr": "pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0.", 
        "name": "pg_field_name", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-name", 
        "syntax": "string pg_field_name ( resource $result , int $field_number )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_num": {
        "descr": "pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource.", 
        "name": "pg_field_num", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_name"
            }
        ], 
        "path": "php/function.pg-field-num", 
        "syntax": "int pg_field_num ( resource $result , string $field_name )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_prtlen": {
        "descr": "pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return FALSE on an error.", 
        "name": "pg_field_prtlen", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-field-prtlen", 
        "syntax": "int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_size": {
        "descr": "pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.", 
        "name": "pg_field_size", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-size", 
        "syntax": "int pg_field_size ( resource $result , int $field_number )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_table": {
        "descr": "pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.", 
        "name": "pg_field_table", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }, 
            {
                "descr": "By default the tables name that field belongs to is returned but if oid_only is set to TRUE, then the oid will instead be returned.", 
                "name": "oid_only"
            }
        ], 
        "path": "php/function.pg-field-table", 
        "syntax": "mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only = false ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_type": {
        "descr": "pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource.", 
        "name": "pg_field_type", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-type", 
        "syntax": "string pg_field_type ( resource $result , int $field_number )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_type_oid": {
        "descr": "pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource.", 
        "name": "pg_field_type_oid", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-type-oid", 
        "syntax": "int pg_field_type_oid ( resource $result , int $field_number )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_free_result": {
        "descr": "pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource.", 
        "name": "pg_free_result", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-free-result", 
        "syntax": "bool pg_free_result ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_notify": {
        "descr": "pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.", 
        "name": "pg_get_notify", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "An optional parameter that controls how the returned array is indexed. ", 
                "name": "result_type"
            }
        ], 
        "path": "php/function.pg-get-notify", 
        "syntax": "array pg_get_notify ( resource $connection [, int $result_type ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_pid": {
        "descr": "pg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not.", 
        "name": "pg_get_pid", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-get-pid", 
        "syntax": "int pg_get_pid ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_result": {
        "descr": "pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query(), pg_send_query_params() or pg_send_execute().", 
        "name": "pg_get_result", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-get-result", 
        "syntax": "resource pg_get_result ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_host": {
        "descr": "pg_host() returns the host name of the given PostgreSQL connection resource is connected to.", 
        "name": "pg_host", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-host", 
        "syntax": "string pg_host ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_insert": {
        "descr": "pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options.", 
        "name": "pg_insert", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to insert rows. ", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be inserted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-insert", 
        "syntax": "mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_error": {
        "descr": "pg_last_error() returns the last error message for a given connection.", 
        "name": "pg_last_error", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-last-error", 
        "syntax": "string pg_last_error ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_notice": {
        "descr": "pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table.", 
        "name": "pg_last_notice", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-last-notice", 
        "syntax": "string pg_last_notice ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_oid": {
        "descr": "pg_last_oid() is used to retrieve the OID assigned to an inserted row.", 
        "name": "pg_last_oid", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-last-oid", 
        "syntax": "string pg_last_oid ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_close": {
        "descr": "pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open().", 
        "name": "pg_lo_close", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-lo-close", 
        "syntax": "bool pg_lo_close ( resource $large_object )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_create": {
        "descr": "pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).", 
        "name": "pg_lo_create", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. ", 
                "name": "object_id"
            }
        ], 
        "path": "php/function.pg-lo-create", 
        "syntax": "int pg_lo_create ([ resource $connection [, mixed $object_id ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_export": {
        "descr": "pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.", 
        "name": "pg_lo_export", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }, 
            {
                "descr": "The full path and file name of the file in which to write the large object on the client filesystem.", 
                "name": "pathname"
            }
        ], 
        "path": "php/function.pg-lo-export", 
        "syntax": "bool pg_lo_export ([ resource $connection ], int $oid , string $pathname )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_import": {
        "descr": "pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source.", 
        "name": "pg_lo_import", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The full path and file name of the file on the client filesystem from which to read the large object data.", 
                "name": "pathname"
            }, 
            {
                "descr": "If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. ", 
                "name": "object_id"
            }
        ], 
        "path": "php/function.pg-lo-import", 
        "syntax": "int pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_open": {
        "descr": "pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated.", 
        "name": "pg_lo_open", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }, 
            {
                "descr": "Can be either \"r\" for read-only, \"w\" for write only or \"rw\" for read and write.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.pg-lo-open", 
        "syntax": "resource pg_lo_open ( resource $connection , int $oid , string $mode )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_read": {
        "descr": "pg_lo_read() reads at most len bytes from a large object and returns it as a string.", 
        "name": "pg_lo_read", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "An optional maximum number of bytes to return.", 
                "name": "len"
            }
        ], 
        "path": "php/function.pg-lo-read", 
        "syntax": "string pg_lo_read ( resource $large_object [, int $len = 8192 ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_read_all": {
        "descr": "pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.", 
        "name": "pg_lo_read_all", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }
        ], 
        "path": "php/function.pg-lo-read-all", 
        "syntax": "int pg_lo_read_all ( resource $large_object )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_seek": {
        "descr": "pg_lo_seek() seeks a position within a large object resource.", 
        "name": "pg_lo_seek", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The number of bytes to seek.", 
                "name": "offset"
            }, 
            {
                "descr": "One of the constants PGSQL_SEEK_SET (seek from object start), PGSQL_SEEK_CUR (seek from current position) or PGSQL_SEEK_END (seek from object end) .", 
                "name": "whence"
            }
        ], 
        "path": "php/function.pg-lo-seek", 
        "syntax": "bool pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_tell": {
        "descr": "pg_lo_tell() returns the current position (offset from the beginning) of a large object.", 
        "name": "pg_lo_tell", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }
        ], 
        "path": "php/function.pg-lo-tell", 
        "syntax": "int pg_lo_tell ( resource $large_object )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_truncate": {
        "descr": "pg_lo_truncate() truncates a a large object resource.", 
        "name": "pg_lo_truncate", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The number of bytes to truncate.", 
                "name": "size"
            }
        ], 
        "path": "php/function.pg-lo-truncate", 
        "syntax": "bool pg_lo_truncate ( resource $large_object , int $size )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_unlink": {
        "descr": "pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure.", 
        "name": "pg_lo_unlink", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }
        ], 
        "path": "php/function.pg-lo-unlink", 
        "syntax": "bool pg_lo_unlink ( resource $connection , int $oid )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_write": {
        "descr": "pg_lo_write() writes data into a large object at the current seek position.", 
        "name": "pg_lo_write", 
        "params": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The data to be written to the large object. ", 
                "name": "data"
            }, 
            {
                "descr": "An optional maximum number of bytes to write. ", 
                "name": "len"
            }
        ], 
        "path": "php/function.pg-lo-write", 
        "syntax": "int pg_lo_write ( resource $large_object , string $data [, int $len ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_meta_data": {
        "descr": "pg_meta_data() returns table definition for table_name as an array.", 
        "name": "pg_meta_data", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the table.", 
                "name": "table_name"
            }
        ], 
        "path": "php/function.pg-meta-data", 
        "syntax": "array pg_meta_data ( resource $connection , string $table_name )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_num_fields": {
        "descr": "pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource.", 
        "name": "pg_num_fields", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-num-fields", 
        "syntax": "int pg_num_fields ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_num_rows": {
        "descr": "pg_num_rows() will return the number of rows in a PostgreSQL result resource.", 
        "name": "pg_num_rows", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-num-rows", 
        "syntax": "int pg_num_rows ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_options": {
        "descr": "pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.", 
        "name": "pg_options", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-options", 
        "syntax": "string pg_options ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_parameter_status": {
        "descr": "Looks up a current parameter setting of the server.", 
        "name": "pg_parameter_status", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "Possible param_name values include server_version, server_encoding, client_encoding, is_superuser, session_authorization, DateStyle, TimeZone, and integer_datetimes.", 
                "name": "param_name"
            }
        ], 
        "path": "php/function.pg-parameter-status", 
        "syntax": "string pg_parameter_status ([ resource $connection ], string $param_name )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_pconnect": {
        "descr": "pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.", 
        "name": "pg_pconnect", 
        "params": [
            {
                "descr": "The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. ", 
                "name": "connection_string"
            }, 
            {
                "descr": "If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection.", 
                "name": "connect_type"
            }
        ], 
        "path": "php/function.pg-pconnect", 
        "syntax": "resource pg_pconnect ( string $connection_string [, int $connect_type ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_ping": {
        "descr": "pg_ping() pings a database connection and tries to reconnect it if it is broken.", 
        "name": "pg_ping", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-ping", 
        "syntax": "bool pg_ping ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_port": {
        "descr": "pg_port() returns the port number that the given PostgreSQL connection resource is connected to.", 
        "name": "pg_port", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-port", 
        "syntax": "int pg_port ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_prepare": {
        "descr": "pg_prepare() creates a prepared statement for later execution with pg_execute() or pg_send_execute(). This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. pg_prepare() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.", 
        "name": "pg_prepare", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name to give the prepared statement. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-prepare", 
        "syntax": "resource pg_prepare ([ resource $connection ], string $stmtname , string $query )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_put_line": {
        "descr": "pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's COPY FROM command.", 
        "name": "pg_put_line", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A line of text to be sent directly to the PostgreSQL backend. ", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-put-line", 
        "syntax": "bool pg_put_line ([ resource $connection ], string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_query": {
        "descr": "pg_query() executes the query on the specified database connection. pg_query_params() should be preferred in most cases.", 
        "name": "pg_query", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The SQL statement or statements to be executed. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-query", 
        "syntax": "resource pg_query ([ resource $connection ], string $query )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_query_params": {
        "descr": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.", 
        "name": "pg_query_params", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-query-params", 
        "syntax": "resource pg_query_params ([ resource $connection ], string $query , array $params )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_error": {
        "descr": "pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error().", 
        "name": "pg_result_error", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-result-error", 
        "syntax": "string pg_result_error ( resource $result )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_error_field": {
        "descr": "pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode.", 
        "name": "pg_result_error_field", 
        "params": [
            {
                "descr": "A PostgreSQL query result resource from a previously executed statement.", 
                "name": "result"
            }, 
            {
                "descr": "Possible fieldcode values are: PGSQL_DIAG_SEVERITY, PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL, PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION, PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only), PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only), PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE, PGSQL_DIAG_SOURCE_LINE or PGSQL_DIAG_SOURCE_FUNCTION.", 
                "name": "fieldcode"
            }
        ], 
        "path": "php/function.pg-result-error-field", 
        "syntax": "string pg_result_error_field ( resource $result , int $fieldcode )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_seek": {
        "descr": "pg_result_seek() sets the internal row offset in a result resource.", 
        "name": "pg_result_seek", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row to move the internal offset to in the result resource. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.pg-result-seek", 
        "syntax": "bool pg_result_seek ( resource $result , int $offset )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_status": {
        "descr": "pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result", 
        "name": "pg_result_status", 
        "params": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Either PGSQL_STATUS_LONG to return the numeric status of the result, or PGSQL_STATUS_STRING to return the command tag of the result. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.pg-result-status", 
        "syntax": "mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_select": {
        "descr": "pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array.", 
        "name": "pg_select", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to select rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be retrieved.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-select", 
        "syntax": "mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_execute": {
        "descr": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).", 
        "name": "pg_send_execute", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the prepared statement to execute. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-send-execute", 
        "syntax": "bool pg_send_execute ( resource $connection , string $stmtname , array $params )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_prepare": {
        "descr": "Sends a request to create a prepared statement with the given parameters, without waiting for completion.", 
        "name": "pg_send_prepare", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name to give the prepared statement. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-send-prepare", 
        "syntax": "bool pg_send_prepare ( resource $connection , string $stmtname , string $query )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_query": {
        "descr": "pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query(), it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result().", 
        "name": "pg_send_query", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The SQL statement or statements to be executed. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-send-query", 
        "syntax": "bool pg_send_query ( resource $connection , string $query )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_query_params": {
        "descr": "Submits a command and separate parameters to the server without waiting for the result(s).", 
        "name": "pg_send_query_params", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-send-query-params", 
        "syntax": "bool pg_send_query_params ( resource $connection , string $query , array $params )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_set_client_encoding": {
        "descr": "pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.", 
        "name": "pg_set_client_encoding", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The required client encoding. One of SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5 or WIN1250. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.pg-set-client-encoding", 
        "syntax": "int pg_set_client_encoding ([ resource $connection ], string $encoding )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_set_error_verbosity": {
        "descr": "Determines the verbosity of messages returned by pg_last_error() and pg_result_error().", 
        "name": "pg_set_error_verbosity", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The required verbosity: PGSQL_ERRORS_TERSE, PGSQL_ERRORS_DEFAULT or PGSQL_ERRORS_VERBOSE.", 
                "name": "verbosity"
            }
        ], 
        "path": "php/function.pg-set-error-verbosity", 
        "syntax": "int pg_set_error_verbosity ([ resource $connection ], int $verbosity )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_trace": {
        "descr": "pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.", 
        "name": "pg_trace", 
        "params": [
            {
                "descr": "The full path and file name of the file in which to write the trace log. ", 
                "name": "pathname"
            }, 
            {
                "descr": "An optional file access mode, same as for fopen().", 
                "name": "mode"
            }, 
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-trace", 
        "syntax": "bool pg_trace ( string $pathname [, string $mode = \"w\" [, resource $connection ]] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_transaction_status": {
        "descr": "Returns the current in-transaction status of the server.", 
        "name": "pg_transaction_status", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-transaction-status", 
        "syntax": "int pg_transaction_status ( resource $connection )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_tty": {
        "descr": "pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource.", 
        "name": "pg_tty", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-tty", 
        "syntax": "string pg_tty ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_unescape_bytea": {
        "descr": "pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.", 
        "name": "pg_unescape_bytea", 
        "params": [
            {
                "descr": "A string containing PostgreSQL bytea data to be converted into a PHP binary string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-unescape-bytea", 
        "syntax": "string pg_unescape_bytea ( string $data )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_untrace": {
        "descr": "Stop tracing started by pg_trace().", 
        "name": "pg_untrace", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-untrace", 
        "syntax": "bool pg_untrace ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_update": {
        "descr": "pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options.", 
        "name": "pg_update", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to update rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are what matched rows are to be updated to.", 
                "name": "data"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be updated.", 
                "name": "condition"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-update", 
        "syntax": "mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_version": {
        "descr": "pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.", 
        "name": "pg_version", 
        "params": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-version", 
        "syntax": "array pg_version ([ resource $connection ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "php_check_syntax": {
        "descr": "Performs a syntax (lint) check on the specified filename testing for scripting errors.", 
        "name": "php_check_syntax", 
        "params": [
            {
                "descr": "The name of the file being checked.", 
                "name": "filename"
            }, 
            {
                "descr": "If the error_message parameter is used, it will contain the error message generated by the syntax check. ", 
                "name": "error_message"
            }
        ], 
        "path": "php/function.php-check-syntax", 
        "syntax": "bool php_check_syntax ( string $filename [, string &$error_message ] )", 
        "type": "Language"
    }, 
    "php_ini_loaded_file": {
        "descr": "Check if a php.ini file is loaded, and retrieve its path.", 
        "name": "php_ini_loaded_file", 
        "params": [], 
        "path": "php/function.php-ini-loaded-file", 
        "syntax": "string php_ini_loaded_file ( void )", 
        "type": "Language"
    }, 
    "php_ini_scanned_files": {
        "descr": "php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation.", 
        "name": "php_ini_scanned_files", 
        "params": [], 
        "path": "php/function.php-ini-scanned-files", 
        "syntax": "string php_ini_scanned_files ( void )", 
        "type": "Language"
    }, 
    "php_logo_guid": {
        "descr": "This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On.", 
        "name": "php_logo_guid", 
        "params": [], 
        "path": "php/function.php-logo-guid", 
        "syntax": "string php_logo_guid ( void )", 
        "type": "Language"
    }, 
    "php_sapi_name": {
        "descr": "", 
        "name": "php_sapi_name", 
        "params": [], 
        "path": "php/function.php-sapi-name", 
        "syntax": "string php_sapi_name ( void )", 
        "type": "Language"
    }, 
    "php_strip_whitespace": {
        "descr": "Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.", 
        "name": "php_strip_whitespace", 
        "params": [
            {
                "descr": "Path to the PHP file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.php-strip-whitespace", 
        "syntax": "string php_strip_whitespace ( string $filename )", 
        "type": "Language"
    }, 
    "php_uname": {
        "descr": "php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.", 
        "name": "php_uname", 
        "params": [
            {
                "descr": "mode is a single character that defines what information is returned:   'a': This is the default. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.php-uname", 
        "syntax": "string php_uname ([ string $mode = \"a\" ] )", 
        "type": "Language"
    }, 
    "php_user_filter": {
        "descr": "", 
        "name": "php_user_filter", 
        "params": [], 
        "path": "php/class.php-user-filter", 
        "syntax": "public int filter ( resource $in , resource $out , int &$consumed , bool $closing )", 
        "type": "Streams"
    }, 
    "php_user_filter::filter": {
        "descr": "This method is called whenever data is read from or written to the attached stream (such as with fread() or fwrite()).", 
        "name": "php_user_filter::filter", 
        "params": [
            {
                "descr": "in is a resource pointing to a bucket brigade which contains one or more bucket objects containing data to be filtered.", 
                "name": "in"
            }, 
            {
                "descr": "out is a resource pointing to a second bucket brigade into which your modified buckets should be placed.", 
                "name": "out"
            }, 
            {
                "descr": "consumed, which must always be declared by reference, should be incremented by the length of the data which your filter reads in and alters. ", 
                "name": "consumed"
            }, 
            {
                "descr": "If the stream is in the process of closing (and therefore this is the last pass through the filterchain), the closing parameter will be set to TRUE.", 
                "name": "closing"
            }
        ], 
        "path": "php/php-user-filter.filter", 
        "syntax": "public int php_user_filter::filter ( resource $in , resource $out , int &$consumed , bool $closing )", 
        "type": "Streams"
    }, 
    "php_user_filter::onClose": {
        "descr": "This method is called upon filter shutdown (typically, this is also during stream shutdown), and is executed after the flush method is called. If any resources were allocated or initialized during onCreate() this would be the time to destroy or dispose of them.", 
        "name": "php_user_filter::onClose", 
        "params": [], 
        "path": "php/php-user-filter.onclose", 
        "syntax": "public void php_user_filter::onClose ( void )", 
        "type": "Streams"
    }, 
    "php_user_filter::onCreate": {
        "descr": "This method is called during instantiation of the filter class object. If your filter allocates or initializes any other resources (such as a buffer), this is the place to do it.", 
        "name": "php_user_filter::onCreate", 
        "params": [], 
        "path": "php/php-user-filter.oncreate", 
        "syntax": "public bool php_user_filter::onCreate ( void )", 
        "type": "Streams"
    }, 
    "phpcredits": {
        "descr": "This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.", 
        "name": "phpcredits", 
        "params": [
            {
                "descr": "To generate a custom credits page, you may want to use the flag parameter. ", 
                "name": "flag"
            }
        ], 
        "path": "php/function.phpcredits", 
        "syntax": "bool phpcredits ([ int $flag = CREDITS_ALL ] )", 
        "type": "Language"
    }, 
    "phpinfo": {
        "descr": "Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.", 
        "name": "phpinfo", 
        "params": [
            {
                "descr": "The output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter. ", 
                "name": "what"
            }
        ], 
        "path": "php/function.phpinfo", 
        "syntax": "bool phpinfo ([ int $what = INFO_ALL ] )", 
        "type": "Language"
    }, 
    "phpversion": {
        "descr": "Returns a string containing the version of the currently running PHP parser or extension.", 
        "name": "phpversion", 
        "params": [
            {
                "descr": "An optional extension name.", 
                "name": "extension"
            }
        ], 
        "path": "php/function.phpversion", 
        "syntax": "string phpversion ([ string $extension ] )", 
        "type": "Language"
    }, 
    "pi": {
        "descr": "", 
        "name": "pi", 
        "params": [], 
        "path": "php/function.pi", 
        "syntax": "float pi ( void )", 
        "type": "Mathematics"
    }, 
    "png2wbmp": {
        "descr": "Converts a PNG file into a WBMP file.", 
        "name": "png2wbmp", 
        "params": [
            {
                "descr": "Path to PNG file.", 
                "name": "pngname"
            }, 
            {
                "descr": "Path to destination WBMP file.", 
                "name": "wbmpname"
            }, 
            {
                "descr": "Destination image height.", 
                "name": "dest_height"
            }, 
            {
                "descr": "Destination image width.", 
                "name": "dest_width"
            }, 
            {
                "descr": "Threshold value, between 0 and 8 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.png2wbmp", 
        "syntax": "bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )", 
        "type": "Image"
    }, 
    "popen": {
        "descr": "Opens a pipe to a process executed by forking the command given by command.", 
        "name": "popen", 
        "params": [
            {
                "descr": "The command", 
                "name": "command"
            }, 
            {
                "descr": "The mode", 
                "name": "mode"
            }
        ], 
        "path": "php/function.popen", 
        "syntax": "resource popen ( string $command , string $mode )", 
        "type": "File System"
    }, 
    "posix_access": {
        "descr": "posix_access() checks the user's permission of a file.", 
        "name": "posix_access", 
        "params": [
            {
                "descr": "The name of the file to be tested.", 
                "name": "file"
            }, 
            {
                "descr": "A mask consisting of one or more of POSIX_F_OK, POSIX_R_OK, POSIX_W_OK and POSIX_X_OK. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.posix-access", 
        "syntax": "bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )", 
        "type": "Process Control"
    }, 
    "posix_ctermid": {
        "descr": "Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()", 
        "name": "posix_ctermid", 
        "params": [], 
        "path": "php/function.posix-ctermid", 
        "syntax": "string posix_ctermid ( void )", 
        "type": "Process Control"
    }, 
    "posix_get_last_error": {
        "descr": "Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror().", 
        "name": "posix_get_last_error", 
        "params": [], 
        "path": "php/function.posix-get-last-error", 
        "syntax": "int posix_get_last_error ( void )", 
        "type": "Process Control"
    }, 
    "posix_getcwd": {
        "descr": "Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()", 
        "name": "posix_getcwd", 
        "params": [], 
        "path": "php/function.posix-getcwd", 
        "syntax": "string posix_getcwd ( void )", 
        "type": "Process Control"
    }, 
    "posix_getegid": {
        "descr": "Return the numeric effective group ID of the current process.", 
        "name": "posix_getegid", 
        "params": [], 
        "path": "php/function.posix-getegid", 
        "syntax": "int posix_getegid ( void )", 
        "type": "Process Control"
    }, 
    "posix_geteuid": {
        "descr": "Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.", 
        "name": "posix_geteuid", 
        "params": [], 
        "path": "php/function.posix-geteuid", 
        "syntax": "int posix_geteuid ( void )", 
        "type": "Process Control"
    }, 
    "posix_getgid": {
        "descr": "Return the numeric real group ID of the current process.", 
        "name": "posix_getgid", 
        "params": [], 
        "path": "php/function.posix-getgid", 
        "syntax": "int posix_getgid ( void )", 
        "type": "Process Control"
    }, 
    "posix_getgrgid": {
        "descr": "Gets information about a group provided its id.", 
        "name": "posix_getgrgid", 
        "params": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-getgrgid", 
        "syntax": "array posix_getgrgid ( int $gid )", 
        "type": "Process Control"
    }, 
    "posix_getgrnam": {
        "descr": "Gets information about a group provided its name.", 
        "name": "posix_getgrnam", 
        "params": [
            {
                "descr": "The name of the group", 
                "name": "name"
            }
        ], 
        "path": "php/function.posix-getgrnam", 
        "syntax": "array posix_getgrnam ( string $name )", 
        "type": "Process Control"
    }, 
    "posix_getgroups": {
        "descr": "Gets the group set of the current process.", 
        "name": "posix_getgroups", 
        "params": [], 
        "path": "php/function.posix-getgroups", 
        "syntax": "array posix_getgroups ( void )", 
        "type": "Process Control"
    }, 
    "posix_getlogin": {
        "descr": "Returns the login name of the user owning the current process.", 
        "name": "posix_getlogin", 
        "params": [], 
        "path": "php/function.posix-getlogin", 
        "syntax": "string posix_getlogin ( void )", 
        "type": "Process Control"
    }, 
    "posix_getpgid": {
        "descr": "Returns the process group identifier of the process pid or FALSE on failure.", 
        "name": "posix_getpgid", 
        "params": [
            {
                "descr": "The process id.", 
                "name": "pid"
            }
        ], 
        "path": "php/function.posix-getpgid", 
        "syntax": "int posix_getpgid ( int $pid )", 
        "type": "Process Control"
    }, 
    "posix_getpgrp": {
        "descr": "Return the process group identifier of the current process.", 
        "name": "posix_getpgrp", 
        "params": [], 
        "path": "php/function.posix-getpgrp", 
        "syntax": "int posix_getpgrp ( void )", 
        "type": "Process Control"
    }, 
    "posix_getpid": {
        "descr": "Return the process identifier of the current process.", 
        "name": "posix_getpid", 
        "params": [], 
        "path": "php/function.posix-getpid", 
        "syntax": "int posix_getpid ( void )", 
        "type": "Process Control"
    }, 
    "posix_getppid": {
        "descr": "Return the process identifier of the parent process of the current process.", 
        "name": "posix_getppid", 
        "params": [], 
        "path": "php/function.posix-getppid", 
        "syntax": "int posix_getppid ( void )", 
        "type": "Process Control"
    }, 
    "posix_getpwnam": {
        "descr": "Returns an array of information about the given user.", 
        "name": "posix_getpwnam", 
        "params": [
            {
                "descr": "An alphanumeric username.", 
                "name": "username"
            }
        ], 
        "path": "php/function.posix-getpwnam", 
        "syntax": "array posix_getpwnam ( string $username )", 
        "type": "Process Control"
    }, 
    "posix_getpwuid": {
        "descr": "Returns an array of information about the user referenced by the given user ID.", 
        "name": "posix_getpwuid", 
        "params": [
            {
                "descr": "The user identifier.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-getpwuid", 
        "syntax": "array posix_getpwuid ( int $uid )", 
        "type": "Process Control"
    }, 
    "posix_getrlimit": {
        "descr": "posix_getrlimit() returns an array of information about the current resource's soft and hard limits.", 
        "name": "posix_getrlimit", 
        "params": [], 
        "path": "php/function.posix-getrlimit", 
        "syntax": "array posix_getrlimit ( void )", 
        "type": "Process Control"
    }, 
    "posix_getsid": {
        "descr": "Return the session id of the process pid. The session id of a process is the process group id of the session leader.", 
        "name": "posix_getsid", 
        "params": [
            {
                "descr": "The process identifier. If set to 0, the current process is assumed. ", 
                "name": "pid"
            }
        ], 
        "path": "php/function.posix-getsid", 
        "syntax": "int posix_getsid ( int $pid )", 
        "type": "Process Control"
    }, 
    "posix_getuid": {
        "descr": "Return the numeric real user ID of the current process.", 
        "name": "posix_getuid", 
        "params": [], 
        "path": "php/function.posix-getuid", 
        "syntax": "int posix_getuid ( void )", 
        "type": "Process Control"
    }, 
    "posix_initgroups": {
        "descr": "Calculates the group access list for the user specified in name.", 
        "name": "posix_initgroups", 
        "params": [
            {
                "descr": "The user to calculate the list for.", 
                "name": "name"
            }, 
            {
                "descr": "Typically the group number from the password file.", 
                "name": "base_group_id"
            }
        ], 
        "path": "php/function.posix-initgroups", 
        "syntax": "bool posix_initgroups ( string $name , int $base_group_id )", 
        "type": "Process Control"
    }, 
    "posix_isatty": {
        "descr": "Determines if the file descriptor fd refers to a valid terminal type device.", 
        "name": "posix_isatty", 
        "params": [
            {
                "descr": "The file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.posix-isatty", 
        "syntax": "bool posix_isatty ( int $fd )", 
        "type": "Process Control"
    }, 
    "posix_kill": {
        "descr": "Send the signal sig to the process with the process identifier pid.", 
        "name": "posix_kill", 
        "params": [
            {
                "descr": "The process identifier.", 
                "name": "pid"
            }, 
            {
                "descr": "One of the PCNTL signals constants.", 
                "name": "sig"
            }
        ], 
        "path": "php/function.posix-kill", 
        "syntax": "bool posix_kill ( int $pid , int $sig )", 
        "type": "Process Control"
    }, 
    "posix_mkfifo": {
        "descr": "posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.", 
        "name": "posix_mkfifo", 
        "params": [
            {
                "descr": "Path to the FIFO file.", 
                "name": "pathname"
            }, 
            {
                "descr": "The second parameter mode has to be given in octal notation (e.g. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.posix-mkfifo", 
        "syntax": "bool posix_mkfifo ( string $pathname , int $mode )", 
        "type": "Process Control"
    }, 
    "posix_mknod": {
        "descr": "Creates a special or ordinary file.", 
        "name": "posix_mknod", 
        "params": [
            {
                "descr": "The file to create", 
                "name": "pathname"
            }, 
            {
                "descr": "This parameter is constructed by a bitwise OR between file type (one of the following constants: POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.", 
                "name": "mode"
            }, 
            {
                "descr": "The major device kernel identifier (required to pass when using S_IFCHR or S_IFBLK).", 
                "name": "major"
            }, 
            {
                "descr": "The minor device kernel identifier.", 
                "name": "minor"
            }
        ], 
        "path": "php/function.posix-mknod", 
        "syntax": "bool posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] )", 
        "type": "Process Control"
    }, 
    "posix_setegid": {
        "descr": "Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_setegid", 
        "params": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-setegid", 
        "syntax": "bool posix_setegid ( int $gid )", 
        "type": "Process Control"
    }, 
    "posix_seteuid": {
        "descr": "Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_seteuid", 
        "params": [
            {
                "descr": "The user id.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-seteuid", 
        "syntax": "bool posix_seteuid ( int $uid )", 
        "type": "Process Control"
    }, 
    "posix_setgid": {
        "descr": "Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last.", 
        "name": "posix_setgid", 
        "params": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-setgid", 
        "syntax": "bool posix_setgid ( int $gid )", 
        "type": "Process Control"
    }, 
    "posix_setpgid": {
        "descr": "Let the process pid join the process group pgid.", 
        "name": "posix_setpgid", 
        "params": [
            {
                "descr": "The process id.", 
                "name": "pid"
            }, 
            {
                "descr": "The process group id.", 
                "name": "pgid"
            }
        ], 
        "path": "php/function.posix-setpgid", 
        "syntax": "bool posix_setpgid ( int $pid , int $pgid )", 
        "type": "Process Control"
    }, 
    "posix_setsid": {
        "descr": "Make the current process a session leader.", 
        "name": "posix_setsid", 
        "params": [], 
        "path": "php/function.posix-setsid", 
        "syntax": "int posix_setsid ( void )", 
        "type": "Process Control"
    }, 
    "posix_setuid": {
        "descr": "Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_setuid", 
        "params": [
            {
                "descr": "The user id.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-setuid", 
        "syntax": "bool posix_setuid ( int $uid )", 
        "type": "Process Control"
    }, 
    "posix_strerror": {
        "descr": "Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error().", 
        "name": "posix_strerror", 
        "params": [
            {
                "descr": "A POSIX error number, returned by posix_get_last_error(). ", 
                "name": "errno"
            }
        ], 
        "path": "php/function.posix-strerror", 
        "syntax": "string posix_strerror ( int $errno )", 
        "type": "Process Control"
    }, 
    "posix_times": {
        "descr": "Gets information about the current CPU usage.", 
        "name": "posix_times", 
        "params": [], 
        "path": "php/function.posix-times", 
        "syntax": "array posix_times ( void )", 
        "type": "Process Control"
    }, 
    "posix_ttyname": {
        "descr": "Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.", 
        "name": "posix_ttyname", 
        "params": [
            {
                "descr": "The file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.posix-ttyname", 
        "syntax": "string posix_ttyname ( int $fd )", 
        "type": "Process Control"
    }, 
    "posix_uname": {
        "descr": "Gets information about the system.", 
        "name": "posix_uname", 
        "params": [], 
        "path": "php/function.posix-uname", 
        "syntax": "array posix_uname ( void )", 
        "type": "Process Control"
    }, 
    "pow": {
        "descr": "Returns base raised to the power of exp.", 
        "name": "pow", 
        "params": [
            {
                "descr": "The base to use", 
                "name": "base"
            }, 
            {
                "descr": "The exponent", 
                "name": "exp"
            }
        ], 
        "path": "php/function.pow", 
        "syntax": "number pow ( number $base , number $exp )", 
        "type": "Mathematics"
    }, 
    "preg_filter": {
        "descr": "preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.", 
        "name": "preg_filter", 
        "params": [], 
        "path": "php/function.preg-filter", 
        "syntax": "mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "type": "String"
    }, 
    "preg_grep": {
        "descr": "Returns the array consisting of the elements of the input array that match the given pattern.", 
        "name": "preg_grep", 
        "params": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input array.", 
                "name": "input"
            }, 
            {
                "descr": "If set to PREG_GREP_INVERT, this function returns the elements of the input array that do not match the given pattern.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.preg-grep", 
        "syntax": "array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )", 
        "type": "String"
    }, 
    "preg_last_error": {
        "descr": "Returns the error code of the last PCRE regex execution.", 
        "name": "preg_last_error", 
        "params": [], 
        "path": "php/function.preg-last-error", 
        "syntax": "int preg_last_error ( void )", 
        "type": "String"
    }, 
    "preg_match": {
        "descr": "Searches subject for a match to the regular expression given in pattern.", 
        "name": "preg_match", 
        "params": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "If matches is provided, then it is filled with the results of search. ", 
                "name": "matches"
            }, 
            {
                "descr": "flags can be the following flag:  PREG_OFFSET_CAPTURE   If this flag is passed, for every occurring match the appendant string offset will also be returned. ", 
                "name": "flags"
            }, 
            {
                "descr": "Normally, the search starts from the beginning of the subject string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.preg-match", 
        "syntax": "int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )", 
        "type": "String"
    }, 
    "preg_match_all": {
        "descr": "Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags.", 
        "name": "preg_match_all", 
        "params": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "Array of all matches in multi-dimensional array ordered according to flags.", 
                "name": "matches"
            }, 
            {
                "descr": "Can be a combination of the following flags (note that it doesn't make sense to use PREG_PATTERN_ORDER together with PREG_SET_ORDER):  PREG_PATTERN_ORDER   Orders results so that $matches[0] is an array of full pattern matches, $matches[1] is an array of strings matched by the first parenthesized subpattern, and so on.    <?phppreg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\",\u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0</b><div\u00a0align=left>this\u00a0is\u00a0a\u00a0test</div>\",\u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_PATTERN_ORDER);echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\";echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\";?>  The above example will output:  <b>example: </b>, <div align=left>this is a test</div>example: , this is a test   So, $out[0] contains array of strings that matched full pattern, and $out[1] contains array of strings enclosed by tags.", 
                "name": "flags"
            }, 
            {
                "descr": "Orders results so that $matches[0] is an array of first set of matches, $matches[1] is an array of second set of matches, and so on. ", 
                "name": "PREG_SET_ORDER"
            }, 
            {
                "descr": "If this flag is passed, for every occurring match the appendant string offset will also be returned. ", 
                "name": "PREG_OFFSET_CAPTURE"
            }, 
            {
                "descr": "Normally, the search starts from the beginning of the subject string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.preg-match-all", 
        "syntax": "int preg_match_all ( string $pattern , string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )", 
        "type": "String"
    }, 
    "preg_quote": {
        "descr": "preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.", 
        "name": "preg_quote", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional delimiter is specified, it will also be escaped. ", 
                "name": "delimiter"
            }
        ], 
        "path": "php/function.preg-quote", 
        "syntax": "string preg_quote ( string $str [, string $delimiter = NULL ] )", 
        "type": "String"
    }, 
    "preg_replace": {
        "descr": "Searches subject for matches to pattern and replaces them with replacement.", 
        "name": "preg_replace", 
        "params": [
            {
                "descr": "The pattern to search for. It can be either a string or an array with strings. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The string or an array with strings to replace. ", 
                "name": "replacement"
            }, 
            {
                "descr": "The string or an array with strings to search and replace. ", 
                "name": "subject"
            }, 
            {
                "descr": "The maximum possible replacements for each pattern in each subject string. ", 
                "name": "limit"
            }, 
            {
                "descr": "If specified, this variable will be filled with the number of replacements done.", 
                "name": "count"
            }
        ], 
        "path": "php/function.preg-replace", 
        "syntax": "mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "type": "String"
    }, 
    "preg_replace_callback": {
        "descr": "The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.", 
        "name": "preg_replace_callback", 
        "params": [
            {
                "descr": "The pattern to search for. It can be either a string or an array with strings.", 
                "name": "pattern"
            }, 
            {
                "descr": "A callback that will be called and passed an array of matched elements in the subject string. ", 
                "name": "callback"
            }, 
            {
                "descr": "The string or an array with strings to search and replace.", 
                "name": "subject"
            }, 
            {
                "descr": "The maximum possible replacements for each pattern in each subject string. ", 
                "name": "limit"
            }, 
            {
                "descr": "If specified, this variable will be filled with the number of replacements done.", 
                "name": "count"
            }
        ], 
        "path": "php/function.preg-replace-callback", 
        "syntax": "mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "type": "String"
    }, 
    "preg_split": {
        "descr": "Split the given string by a regular expression.", 
        "name": "preg_split", 
        "params": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "If specified, then only substrings up to limit are returned with the rest of the string being placed in the last substring. ", 
                "name": "limit"
            }, 
            {
                "descr": "flags can be any combination of the following flags (combined with the | bitwise operator):  PREG_SPLIT_NO_EMPTY   If this flag is set, only non-empty pieces will be returned by preg_split().", 
                "name": "flags"
            }, 
            {
                "descr": "If this flag is set, parenthesized expression in the delimiter pattern will be captured and returned as well.", 
                "name": "PREG_SPLIT_DELIM_CAPTURE"
            }, 
            {
                "descr": "If this flag is set, for every occurring match the appendant string offset will also be returned. ", 
                "name": "PREG_SPLIT_OFFSET_CAPTURE"
            }
        ], 
        "path": "php/function.preg-split", 
        "syntax": "array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )", 
        "type": "String"
    }, 
    "prev": {
        "descr": "Rewind the internal array pointer.", 
        "name": "prev", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.prev", 
        "syntax": "mixed prev ( array &$array )", 
        "type": "Array"
    }, 
    "print": {
        "descr": "Outputs arg.", 
        "name": "print", 
        "params": [
            {
                "descr": "The input data.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.print", 
        "syntax": "int print ( string $arg )", 
        "type": "String"
    }, 
    "print_r": {
        "descr": "print_r() displays information about a variable in a way that's readable by humans.", 
        "name": "print_r", 
        "params": [
            {
                "descr": "The expression to be printed.", 
                "name": "expression"
            }, 
            {
                "descr": "If you would like to capture the output of print_r(), use the return parameter. ", 
                "name": "return"
            }
        ], 
        "path": "php/function.print-r", 
        "syntax": "mixed print_r ( mixed $expression [, bool $return = false ] )", 
        "type": "Variables"
    }, 
    "printf": {
        "descr": "", 
        "name": "printf", 
        "params": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.printf", 
        "syntax": "int printf ( string $format [, mixed $args [, mixed $... ]] )", 
        "type": "String"
    }, 
    "proc_close": {
        "descr": "proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.", 
        "name": "proc_close", 
        "params": [
            {
                "descr": "The proc_open() resource that will be closed.", 
                "name": "process"
            }
        ], 
        "path": "php/function.proc-close", 
        "syntax": "int proc_close ( resource $process )", 
        "type": "Process Control"
    }, 
    "proc_get_status": {
        "descr": "proc_get_status() fetches data about a process opened using proc_open().", 
        "name": "proc_get_status", 
        "params": [
            {
                "descr": "The proc_open() resource that will be evaluated.", 
                "name": "process"
            }
        ], 
        "path": "php/function.proc-get-status", 
        "syntax": "array proc_get_status ( resource $process )", 
        "type": "Process Control"
    }, 
    "proc_nice": {
        "descr": "proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority.", 
        "name": "proc_nice", 
        "params": [
            {
                "descr": "The increment value of the priority change.", 
                "name": "increment"
            }
        ], 
        "path": "php/function.proc-nice", 
        "syntax": "bool proc_nice ( int $increment )", 
        "type": "Process Control"
    }, 
    "proc_open": {
        "descr": "proc_open() is similar to popen() but provides a much greater degree of control over the program execution.", 
        "name": "proc_open", 
        "params": [
            {
                "descr": "The command to execute", 
                "name": "cmd"
            }, 
            {
                "descr": "An indexed array where the key represents the descriptor number and the value represents how PHP will pass that descriptor to the child process. ", 
                "name": "descriptorspec"
            }, 
            {
                "descr": "Will be set to an indexed array of file pointers that correspond to PHP's end of any pipes that are created.", 
                "name": "pipes"
            }, 
            {
                "descr": "The initial working dir for the command. ", 
                "name": "cwd"
            }, 
            {
                "descr": "An array with the environment variables for the command that will be run, or NULL to use the same environment as the current PHP process", 
                "name": "env"
            }, 
            {
                "descr": "Allows you to specify additional options. ", 
                "name": "other_options"
            }
        ], 
        "path": "php/function.proc-open", 
        "syntax": "resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )", 
        "type": "Process Control"
    }, 
    "proc_terminate": {
        "descr": "Signals a process (created using proc_open()) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate.", 
        "name": "proc_terminate", 
        "params": [
            {
                "descr": "The proc_open() resource that will be closed.", 
                "name": "process"
            }, 
            {
                "descr": "This optional parameter is only useful on POSIX operating systems; you may specify a signal to send to the process using the kill(2) system call. ", 
                "name": "signal"
            }
        ], 
        "path": "php/function.proc-terminate", 
        "syntax": "bool proc_terminate ( resource $process [, int $signal = 15 ] )", 
        "type": "Process Control"
    }, 
    "property_exists": {
        "descr": "This function checks if the given property exists in the specified class.", 
        "name": "property_exists", 
        "params": [
            {
                "descr": "The class name or an object of the class to test for", 
                "name": "class"
            }, 
            {
                "descr": "The name of the property", 
                "name": "property"
            }
        ], 
        "path": "php/function.property-exists", 
        "syntax": "bool property_exists ( mixed $class , string $property )", 
        "type": "Classes and Functions"
    }, 
    "putenv": {
        "descr": "Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.", 
        "name": "putenv", 
        "params": [
            {
                "descr": "The setting, like \"FOO=BAR\"", 
                "name": "setting"
            }
        ], 
        "path": "php/function.putenv", 
        "syntax": "bool putenv ( string $setting )", 
        "type": "Language"
    }, 
    "quoted_printable_decode": {
        "descr": "This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to \u00bb RFC2045, section 6.7, not \u00bb RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line).", 
        "name": "quoted_printable_decode", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quoted-printable-decode", 
        "syntax": "string quoted_printable_decode ( string $str )", 
        "type": "String"
    }, 
    "quoted_printable_encode": {
        "descr": "Returns a quoted printable string created according to \u00bb RFC2045, section 6.7.", 
        "name": "quoted_printable_encode", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quoted-printable-encode", 
        "syntax": "string quoted_printable_encode ( string $str )", 
        "type": "String"
    }, 
    "quotemeta": {
        "descr": "Returns a version of str with a backslash character (\\) before every character that is among these:", 
        "name": "quotemeta", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quotemeta", 
        "syntax": "string quotemeta ( string $str )", 
        "type": "String"
    }, 
    "rad2deg": {
        "descr": "This function converts number from radian to degrees.", 
        "name": "rad2deg", 
        "params": [
            {
                "descr": "A radian value", 
                "name": "number"
            }
        ], 
        "path": "php/function.rad2deg", 
        "syntax": "float rad2deg ( float $number )", 
        "type": "Mathematics"
    }, 
    "rand": {
        "descr": "", 
        "name": "rand", 
        "params": [
            {
                "descr": "The lowest value to return (default: 0)", 
                "name": "min"
            }, 
            {
                "descr": "The highest value to return (default: getrandmax())", 
                "name": "max"
            }
        ], 
        "path": "php/function.rand", 
        "syntax": "int rand ( void )", 
        "type": "Mathematics"
    }, 
    "range": {
        "descr": "Create an array containing a range of elements.", 
        "name": "range", 
        "params": [
            {
                "descr": "First value of the sequence.", 
                "name": "start"
            }, 
            {
                "descr": "The sequence is ended upon reaching the end value.", 
                "name": "end"
            }, 
            {
                "descr": "If a step value is given, it will be used as the increment between elements in the sequence. ", 
                "name": "step"
            }
        ], 
        "path": "php/function.range", 
        "syntax": "array range ( mixed $start , mixed $end [, number $step = 1 ] )", 
        "type": "Array"
    }, 
    "rawurldecode": {
        "descr": "Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.", 
        "name": "rawurldecode", 
        "params": [
            {
                "descr": "The URL to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.rawurldecode", 
        "syntax": "string rawurldecode ( string $str )", 
        "type": "Networking"
    }, 
    "rawurlencode": {
        "descr": "Encodes the given string according to \u00bb RFC 3986.", 
        "name": "rawurlencode", 
        "params": [
            {
                "descr": "The URL to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.rawurlencode", 
        "syntax": "string rawurlencode ( string $str )", 
        "type": "Networking"
    }, 
    "readdir": {
        "descr": "Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.", 
        "name": "readdir", 
        "params": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.readdir", 
        "syntax": "string readdir ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "readfile": {
        "descr": "Reads a file and writes it to the output buffer.", 
        "name": "readfile", 
        "params": [
            {
                "descr": "The filename being read.", 
                "name": "filename"
            }, 
            {
                "descr": "You can use the optional second parameter and set it to TRUE, if you want to search for the file in the include_path, too.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A context stream resource.", 
                "name": "context"
            }
        ], 
        "path": "php/function.readfile", 
        "syntax": "int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )", 
        "type": "File System"
    }, 
    "readgzfile": {
        "descr": "Reads a file, decompresses it and writes it to standard output.", 
        "name": "readgzfile", 
        "params": [
            {
                "descr": "The file name. This file will be opened from the filesystem and its contents written to standard output.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.readgzfile", 
        "syntax": "int readgzfile ( string $filename [, int $use_include_path = 0 ] )", 
        "type": "Compression"
    }, 
    "readlink": {
        "descr": "readlink() does the same as the readlink C function.", 
        "name": "readlink", 
        "params": [
            {
                "descr": "The symbolic link path.", 
                "name": "path"
            }
        ], 
        "path": "php/function.readlink", 
        "syntax": "string readlink ( string $path )", 
        "type": "File System"
    }, 
    "realpath": {
        "descr": "realpath() expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path and returns the canonicalized absolute pathname.", 
        "name": "realpath", 
        "params": [
            {
                "descr": "The path being checked. Note:  Whilst a path must be supplied, the value can be blank or NULL In these cases, the value is interpreted as the current directory.", 
                "name": "path"
            }
        ], 
        "path": "php/function.realpath", 
        "syntax": "string realpath ( string $path )", 
        "type": "File System"
    }, 
    "realpath_cache_get": {
        "descr": "Get the contents of the realpath cache.", 
        "name": "realpath_cache_get", 
        "params": [], 
        "path": "php/function.realpath-cache-get", 
        "syntax": "array realpath_cache_get ( void )", 
        "type": "File System"
    }, 
    "realpath_cache_size": {
        "descr": "Get the amount of memory used by the realpath cache.", 
        "name": "realpath_cache_size", 
        "params": [], 
        "path": "php/function.realpath-cache-size", 
        "syntax": "int realpath_cache_size ( void )", 
        "type": "File System"
    }, 
    "register_shutdown_function": {
        "descr": "Registers a callback to be executed after script execution finishes or exit() is called.", 
        "name": "register_shutdown_function", 
        "params": [
            {
                "descr": "The shutdown callback to register. ", 
                "name": "callback"
            }, 
            {
                "descr": "It is possible to pass parameters to the shutdown function by passing additional parameters.", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.register-shutdown-function", 
        "syntax": "void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )", 
        "type": "Classes and Functions"
    }, 
    "register_tick_function": {
        "descr": "", 
        "name": "register_tick_function", 
        "params": [
            {
                "descr": "The function name as a string, or an array consisting of an object and a method.", 
                "name": "function"
            }
        ], 
        "path": "php/function.register-tick-function", 
        "syntax": "bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )", 
        "type": "Classes and Functions"
    }, 
    "rename": {
        "descr": "Attempts to rename oldname to newname, moving it between directories if necessary. If newname exists, it will be overwritten.", 
        "name": "rename", 
        "params": [
            {
                "descr": "Note:  The old name. The wrapper used in oldname must match the wrapper used in newname.", 
                "name": "oldname"
            }, 
            {
                "descr": "The new name.", 
                "name": "newname"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.rename", 
        "syntax": "bool rename ( string $oldname , string $newname [, resource $context ] )", 
        "type": "File System"
    }, 
    "reset": {
        "descr": "reset() rewinds array's internal pointer to the first element and returns the value of the first array element.", 
        "name": "reset", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.reset", 
        "syntax": "mixed reset ( array &$array )", 
        "type": "Array"
    }, 
    "restore_error_handler": {
        "descr": "Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function).", 
        "name": "restore_error_handler", 
        "params": [], 
        "path": "php/function.restore-error-handler", 
        "syntax": "bool restore_error_handler ( void )", 
        "type": "Errors"
    }, 
    "restore_exception_handler": {
        "descr": "Used after changing the exception handler function using set_exception_handler(), to revert to the previous exception handler (which could be the built-in or a user defined function).", 
        "name": "restore_exception_handler", 
        "params": [], 
        "path": "php/function.restore-exception-handler", 
        "syntax": "bool restore_exception_handler ( void )", 
        "type": "Errors"
    }, 
    "restore_include_path": {
        "descr": "", 
        "name": "restore_include_path", 
        "params": [], 
        "path": "php/function.restore-include-path", 
        "syntax": "void restore_include_path ( void )", 
        "type": "Language"
    }, 
    "rewind": {
        "descr": "Sets the file position indicator for handle to the beginning of the file stream.", 
        "name": "rewind", 
        "params": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.rewind", 
        "syntax": "bool rewind ( resource $handle )", 
        "type": "File System"
    }, 
    "rewinddir": {
        "descr": "Resets the directory stream indicated by dir_handle to the beginning of the directory.", 
        "name": "rewinddir", 
        "params": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.rewinddir", 
        "syntax": "void rewinddir ([ resource $dir_handle ] )", 
        "type": "File System"
    }, 
    "rmdir": {
        "descr": "Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.", 
        "name": "rmdir", 
        "params": [
            {
                "descr": "Path to the directory.", 
                "name": "dirname"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.rmdir", 
        "syntax": "bool rmdir ( string $dirname [, resource $context ] )", 
        "type": "File System"
    }, 
    "round": {
        "descr": "Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).", 
        "name": "round", 
        "params": [
            {
                "descr": "The value to round", 
                "name": "val"
            }, 
            {
                "descr": "The optional number of decimal digits to round to.", 
                "name": "precision"
            }, 
            {
                "descr": "Use one of the following constants to specify the mode in which rounding occurs. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.round", 
        "syntax": "float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )", 
        "type": "Mathematics"
    }, 
    "rsort": {
        "descr": "This function sorts an array in reverse order (highest to lowest).", 
        "name": "rsort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.rsort", 
        "syntax": "bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "rtrim": {
        "descr": "This function returns a string with whitespace stripped from the end of str.", 
        "name": "rtrim", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can also specify the characters you want to strip, by means of the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.rtrim", 
        "syntax": "string rtrim ( string $str [, string $character_mask ] )", 
        "type": "String"
    }, 
    "runkit_class_adopt": {
        "descr": "", 
        "name": "runkit_class_adopt", 
        "params": [
            {
                "descr": "Name of class to be adopted", 
                "name": "classname"
            }, 
            {
                "descr": "Parent class which child class is extending", 
                "name": "parentname"
            }
        ], 
        "path": "php/function.runkit-class-adopt", 
        "syntax": "bool runkit_class_adopt ( string $classname , string $parentname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_class_emancipate": {
        "descr": "", 
        "name": "runkit_class_emancipate", 
        "params": [
            {
                "descr": "Name of class to emancipate", 
                "name": "classname"
            }
        ], 
        "path": "php/function.runkit-class-emancipate", 
        "syntax": "bool runkit_class_emancipate ( string $classname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_add": {
        "descr": "", 
        "name": "runkit_constant_add", 
        "params": [
            {
                "descr": "Name of constant to declare. Either a string to indicate a global constant, or classname::constname to indicate a class constant.", 
                "name": "constname"
            }, 
            {
                "descr": "NULL, Bool, Long, Double, String, or Resource value to store in the new constant.", 
                "name": "value"
            }
        ], 
        "path": "php/function.runkit-constant-add", 
        "syntax": "bool runkit_constant_add ( string $constname , mixed $value )", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_redefine": {
        "descr": "", 
        "name": "runkit_constant_redefine", 
        "params": [
            {
                "descr": "Constant to redefine. Either string indicating global constant, or classname::constname indicating class constant.", 
                "name": "constname"
            }, 
            {
                "descr": "New value to assign to constant.", 
                "name": "newvalue"
            }
        ], 
        "path": "php/function.runkit-constant-redefine", 
        "syntax": "bool runkit_constant_redefine ( string $constname , mixed $newvalue )", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_remove": {
        "descr": "", 
        "name": "runkit_constant_remove", 
        "params": [
            {
                "descr": "Name of constant to remove. Either a string indicating a global constant, or classname::constname indicating a class constant.", 
                "name": "constname"
            }
        ], 
        "path": "php/function.runkit-constant-remove", 
        "syntax": "bool runkit_constant_remove ( string $constname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_add": {
        "descr": "", 
        "name": "runkit_function_add", 
        "params": [
            {
                "descr": "Name of function to be created", 
                "name": "funcname"
            }, 
            {
                "descr": "Comma separated argument list", 
                "name": "arglist"
            }, 
            {
                "descr": "Code making up the function", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-function-add", 
        "syntax": "bool runkit_function_add ( string $funcname , string $arglist , string $code )", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_copy": {
        "descr": "", 
        "name": "runkit_function_copy", 
        "params": [
            {
                "descr": "Name of existing function", 
                "name": "funcname"
            }, 
            {
                "descr": "Name of new function to copy definition to", 
                "name": "targetname"
            }
        ], 
        "path": "php/function.runkit-function-copy", 
        "syntax": "bool runkit_function_copy ( string $funcname , string $targetname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_redefine": {
        "descr": "", 
        "name": "runkit_function_redefine", 
        "params": [
            {
                "descr": "Name of function to redefine", 
                "name": "funcname"
            }, 
            {
                "descr": "New list of arguments to be accepted by function", 
                "name": "arglist"
            }, 
            {
                "descr": "New code implementation", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-function-redefine", 
        "syntax": "bool runkit_function_redefine ( string $funcname , string $arglist , string $code )", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_remove": {
        "descr": "", 
        "name": "runkit_function_remove", 
        "params": [
            {
                "descr": "Name of function to be deleted", 
                "name": "funcname"
            }
        ], 
        "path": "php/function.runkit-function-remove", 
        "syntax": "bool runkit_function_remove ( string $funcname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_rename": {
        "descr": "", 
        "name": "runkit_function_rename", 
        "params": [
            {
                "descr": "Current function name", 
                "name": "funcname"
            }, 
            {
                "descr": "New function name", 
                "name": "newname"
            }
        ], 
        "path": "php/function.runkit-function-rename", 
        "syntax": "bool runkit_function_rename ( string $funcname , string $newname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_import": {
        "descr": "Similar to include however any code residing outside of a function or class is simply ignored. Additionally, depending on the value of flags, any functions or classes which already exist in the currently running environment will be automatically overwritten by their new definitions.", 
        "name": "runkit_import", 
        "params": [
            {
                "descr": "Filename to import function and class definitions from", 
                "name": "filename"
            }, 
            {
                "descr": "Bitwise OR of the RUNKIT_IMPORT_* family of constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-import", 
        "syntax": "bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )", 
        "type": "Classes and Functions"
    }, 
    "runkit_lint": {
        "descr": "The runkit_lint() function performs a syntax (lint) check on the specified php code testing for scripting errors. This is similar to using php -l from the command line except runkit_lint() accepts actual code rather than a filename.", 
        "name": "runkit_lint", 
        "params": [
            {
                "descr": "PHP Code to be lint checked", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-lint", 
        "syntax": "bool runkit_lint ( string $code )", 
        "type": "Classes and Functions"
    }, 
    "runkit_lint_file": {
        "descr": "The runkit_lint_file() function performs a syntax (lint) check on the specified filename testing for scripting errors. This is similar to using php -l from the commandline.", 
        "name": "runkit_lint_file", 
        "params": [
            {
                "descr": "File containing PHP Code to be lint checked", 
                "name": "filename"
            }
        ], 
        "path": "php/function.runkit-lint-file", 
        "syntax": "bool runkit_lint_file ( string $filename )", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_add": {
        "descr": "", 
        "name": "runkit_method_add", 
        "params": [
            {
                "descr": "The class to which this method will be added", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to add", 
                "name": "methodname"
            }, 
            {
                "descr": "Comma-delimited list of arguments for the newly-created method", 
                "name": "args"
            }, 
            {
                "descr": "The code to be evaluated when methodname is called", 
                "name": "code"
            }, 
            {
                "descr": "The type of method to create, can be RUNKIT_ACC_PUBLIC, RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE  Note:  This parameter is only used as of PHP 5, because, prior to this, all methods were public.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-method-add", 
        "syntax": "bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_copy": {
        "descr": "", 
        "name": "runkit_method_copy", 
        "params": [
            {
                "descr": "Destination class for copied method", 
                "name": "dClass"
            }, 
            {
                "descr": "Destination method name", 
                "name": "dMethod"
            }, 
            {
                "descr": "Source class of the method to copy", 
                "name": "sClass"
            }, 
            {
                "descr": "Name of the method to copy from the source class. ", 
                "name": "sMethod"
            }
        ], 
        "path": "php/function.runkit-method-copy", 
        "syntax": "bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_redefine": {
        "descr": "", 
        "name": "runkit_method_redefine", 
        "params": [
            {
                "descr": "The class in which to redefine the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to redefine", 
                "name": "methodname"
            }, 
            {
                "descr": "Comma-delimited list of arguments for the redefined method", 
                "name": "args"
            }, 
            {
                "descr": "The new code to be evaluated when methodname is called", 
                "name": "code"
            }, 
            {
                "descr": "The redefined method can be RUNKIT_ACC_PUBLIC, RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE  Note:  This parameter is only used as of PHP 5, because, prior to this, all methods were public.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-method-redefine", 
        "syntax": "bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_remove": {
        "descr": "", 
        "name": "runkit_method_remove", 
        "params": [
            {
                "descr": "The class in which to remove the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to remove", 
                "name": "methodname"
            }
        ], 
        "path": "php/function.runkit-method-remove", 
        "syntax": "bool runkit_method_remove ( string $classname , string $methodname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_rename": {
        "descr": "", 
        "name": "runkit_method_rename", 
        "params": [
            {
                "descr": "The class in which to rename the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to rename", 
                "name": "methodname"
            }, 
            {
                "descr": "The new name to give to the renamed method", 
                "name": "newname"
            }
        ], 
        "path": "php/function.runkit-method-rename", 
        "syntax": "bool runkit_method_rename ( string $classname , string $methodname , string $newname )", 
        "type": "Classes and Functions"
    }, 
    "runkit_return_value_used": {
        "descr": "", 
        "name": "runkit_return_value_used", 
        "params": [], 
        "path": "php/function.runkit-return-value-used", 
        "syntax": "bool runkit_return_value_used ( void )", 
        "type": "Classes and Functions"
    }, 
    "runkit_sandbox_output_handler": {
        "descr": "Ordinarily, anything output (such as with echo or print) will be output as though it were printed from the parent's scope. Using runkit_sandbox_output_handler() however, output generated by the sandbox (including errors), can be captured by a function outside of the sandbox.", 
        "name": "runkit_sandbox_output_handler", 
        "params": [
            {
                "descr": "Object instance of Runkit_Sandbox class on which to set output handling.", 
                "name": "sandbox"
            }, 
            {
                "descr": "Name of a function which expects one parameter. ", 
                "name": "callback"
            }
        ], 
        "path": "php/function.runkit-sandbox-output-handler", 
        "syntax": "mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )", 
        "type": "Classes and Functions"
    }, 
    "runkit_superglobals": {
        "descr": "", 
        "name": "runkit_superglobals", 
        "params": [], 
        "path": "php/function.runkit-superglobals", 
        "syntax": "array runkit_superglobals ( void )", 
        "type": "Classes and Functions"
    }, 
    "scandir": {
        "descr": "Returns an array of files and directories from the directory.", 
        "name": "scandir", 
        "params": [
            {
                "descr": "The directory that will be scanned.", 
                "name": "directory"
            }, 
            {
                "descr": "By default, the sorted order is alphabetical in ascending order. ", 
                "name": "sorting_order"
            }, 
            {
                "descr": "For a description of the context parameter, refer to the streams section of the manual.", 
                "name": "context"
            }
        ], 
        "path": "php/function.scandir", 
        "syntax": "array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )", 
        "type": "File System"
    }, 
    "serialize": {
        "descr": "Generates a storable representation of a value.", 
        "name": "serialize", 
        "params": [
            {
                "descr": "The value to be serialized. serialize() handles all types, except the resource-type. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.serialize", 
        "syntax": "string serialize ( mixed $value )", 
        "type": "Variables"
    }, 
    "session_cache_expire": {
        "descr": "session_cache_expire() returns the current setting of session.cache_expire.", 
        "name": "session_cache_expire", 
        "params": [
            {
                "descr": "If new_cache_expire is given, the current cache expire is replaced with new_cache_expire. ", 
                "name": "new_cache_expire"
            }
        ], 
        "path": "php/function.session-cache-expire", 
        "syntax": "int session_cache_expire ([ string $new_cache_expire ] )", 
        "type": "Sessions"
    }, 
    "session_cache_limiter": {
        "descr": "session_cache_limiter() returns the name of the current cache limiter.", 
        "name": "session_cache_limiter", 
        "params": [
            {
                "descr": "If cache_limiter is specified, the name of the current cache limiter is changed to the new value. ", 
                "name": "cache_limiter"
            }
        ], 
        "path": "php/function.session-cache-limiter", 
        "syntax": "string session_cache_limiter ([ string $cache_limiter ] )", 
        "type": "Sessions"
    }, 
    "session_decode": {
        "descr": "session_decode() decodes the serialized session data provided in $data, and populates the $_SESSION superglobal with the result.", 
        "name": "session_decode", 
        "params": [
            {
                "descr": "The encoded data to be stored.", 
                "name": "data"
            }
        ], 
        "path": "php/function.session-decode", 
        "syntax": "bool session_decode ( string $data )", 
        "type": "Sessions"
    }, 
    "session_destroy": {
        "descr": "", 
        "name": "session_destroy", 
        "params": [], 
        "path": "php/function.session-destroy", 
        "syntax": "bool session_destroy ( void )", 
        "type": "Sessions"
    }, 
    "session_encode": {
        "descr": "session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.", 
        "name": "session_encode", 
        "params": [], 
        "path": "php/function.session-encode", 
        "syntax": "string session_encode ( void )", 
        "type": "Sessions"
    }, 
    "session_get_cookie_params": {
        "descr": "Gets the session cookie parameters.", 
        "name": "session_get_cookie_params", 
        "params": [], 
        "path": "php/function.session-get-cookie-params", 
        "syntax": "array session_get_cookie_params ( void )", 
        "type": "Sessions"
    }, 
    "session_id": {
        "descr": "session_id() is used to get or set the session id for the current session.", 
        "name": "session_id", 
        "params": [
            {
                "descr": "If id is specified, it will replace the current session id. ", 
                "name": "id"
            }
        ], 
        "path": "php/function.session-id", 
        "syntax": "string session_id ([ string $id ] )", 
        "type": "Sessions"
    }, 
    "session_is_registered": {
        "descr": "Finds out whether a global variable is registered in a session.", 
        "name": "session_is_registered", 
        "params": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-is-registered", 
        "syntax": "bool session_is_registered ( string $name )", 
        "type": "Sessions"
    }, 
    "session_module_name": {
        "descr": "session_module_name() gets the name of the current session module.", 
        "name": "session_module_name", 
        "params": [
            {
                "descr": "If module is specified, that module will be used instead.", 
                "name": "module"
            }
        ], 
        "path": "php/function.session-module-name", 
        "syntax": "string session_module_name ([ string $module ] )", 
        "type": "Sessions"
    }, 
    "session_name": {
        "descr": "session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name.", 
        "name": "session_name", 
        "params": [
            {
                "descr": "The session name references the name of the session, which is used in cookies and URLs (e.g. ", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-name", 
        "syntax": "string session_name ([ string $name ] )", 
        "type": "Sessions"
    }, 
    "session_pgsql_add_error": {
        "descr": "", 
        "name": "session_pgsql_add_error", 
        "params": [], 
        "path": "php/function.session-pgsql-add-error", 
        "syntax": "bool session_pgsql_add_error ( int $error_level [, string $error_message ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_get_error": {
        "descr": "Get the number of errors and optional the error messages.", 
        "name": "session_pgsql_get_error", 
        "params": [
            {
                "descr": "Set to TRUE the literal error message for each error is also returned.", 
                "name": "with_error_message"
            }
        ], 
        "path": "php/function.session-pgsql-get-error", 
        "syntax": "array session_pgsql_get_error ([ bool $with_error_message = false ] )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_get_field": {
        "descr": "", 
        "name": "session_pgsql_get_field", 
        "params": [], 
        "path": "php/function.session-pgsql-get-field", 
        "syntax": "string session_pgsql_get_field ( void )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_reset": {
        "descr": "Reset the connection to the session database servers.", 
        "name": "session_pgsql_reset", 
        "params": [], 
        "path": "php/function.session-pgsql-reset", 
        "syntax": "bool session_pgsql_reset ( void )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_set_field": {
        "descr": "", 
        "name": "session_pgsql_set_field", 
        "params": [], 
        "path": "php/function.session-pgsql-set-field", 
        "syntax": "bool session_pgsql_set_field ( string $value )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_status": {
        "descr": "", 
        "name": "session_pgsql_status", 
        "params": [], 
        "path": "php/function.session-pgsql-status", 
        "syntax": "array session_pgsql_status ( void )", 
        "type": "Database/PostgreSQL"
    }, 
    "session_regenerate_id": {
        "descr": "session_regenerate_id() will replace the current session id with a new one, and keep the current session information.", 
        "name": "session_regenerate_id", 
        "params": [
            {
                "descr": "Whether to delete the old associated session file or not.", 
                "name": "delete_old_session"
            }
        ], 
        "path": "php/function.session-regenerate-id", 
        "syntax": "bool session_regenerate_id ([ bool $delete_old_session = false ] )", 
        "type": "Sessions"
    }, 
    "session_register": {
        "descr": "session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session.", 
        "name": "session_register", 
        "params": [
            {
                "descr": "A string holding the name of a variable or an array consisting of variable names or other arrays.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-register", 
        "syntax": "bool session_register ( mixed $name [, mixed $... ] )", 
        "type": "Sessions"
    }, 
    "session_register_shutdown": {
        "descr": "Registers session_write_close() as a shutdown function.", 
        "name": "session_register_shutdown", 
        "params": [], 
        "path": "php/function.session-register-shutdown", 
        "syntax": "void session_register_shutdown ( void )", 
        "type": "Sessions"
    }, 
    "session_save_path": {
        "descr": "session_save_path() returns the path of the current directory used to save session data.", 
        "name": "session_save_path", 
        "params": [
            {
                "descr": "Session data path. If specified, the path to which data is saved will be changed. ", 
                "name": "path"
            }
        ], 
        "path": "php/function.session-save-path", 
        "syntax": "string session_save_path ([ string $path ] )", 
        "type": "Sessions"
    }, 
    "session_set_cookie_params": {
        "descr": "Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called.", 
        "name": "session_set_cookie_params", 
        "params": [
            {
                "descr": "Lifetime of the session cookie, defined in seconds.", 
                "name": "lifetime"
            }, 
            {
                "descr": "Path on the domain where the cookie will work. ", 
                "name": "path"
            }, 
            {
                "descr": "Cookie domain, for example 'www.php.net'. ", 
                "name": "domain"
            }, 
            {
                "descr": "If TRUE cookie will only be sent over secure connections.", 
                "name": "secure"
            }, 
            {
                "descr": "If set to TRUE then PHP will attempt to send the httponly flag when setting the session cookie.", 
                "name": "httponly"
            }
        ], 
        "path": "php/function.session-set-cookie-params", 
        "syntax": "void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )", 
        "type": "Sessions"
    }, 
    "session_set_save_handler": {
        "descr": "session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.", 
        "name": "session_set_save_handler", 
        "params": [
            {
                "descr": "An instance of a class implementing SessionHandlerInterface, such as SessionHandler, to register as the session handler. ", 
                "name": "sessionhandler"
            }, 
            {
                "descr": "Register session_write_close() as a register_shutdown_function() function.", 
                "name": "register_shutdown"
            }, 
            {
                "descr": "The open callback works like a constructor in classes and is executed when the session is being opened. ", 
                "name": "open(string $savePath, string $sessionName)"
            }, 
            {
                "descr": "The close callback works like a destructor in classes and is executed after the session write callback has been called. ", 
                "name": "close()"
            }, 
            {
                "descr": "The read callback must always return a session encoded (serialized) string, or an empty string if there is no data to read. ", 
                "name": "read(string $sessionId)"
            }, 
            {
                "descr": "The write callback is called when the session needs to be saved and closed. ", 
                "name": "write(string $sessionId, string $data)"
            }, 
            {
                "descr": "This callback is executed when a session is destroyed with session_destroy() or with session_regenerate_id() with the destroy parameter set to TRUE. ", 
                "name": "destroy($sessionId)"
            }, 
            {
                "descr": "The garbage collector callback is invoked internally by PHP periodically in order to purge old session data. ", 
                "name": "gc($lifetime)"
            }
        ], 
        "path": "php/function.session-set-save-handler", 
        "syntax": "bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc )", 
        "type": "Sessions"
    }, 
    "session_start": {
        "descr": "session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.", 
        "name": "session_start", 
        "params": [], 
        "path": "php/function.session-start", 
        "syntax": "bool session_start ( void )", 
        "type": "Sessions"
    }, 
    "session_status": {
        "descr": "session_status() is used to return the current session status.", 
        "name": "session_status", 
        "params": [], 
        "path": "php/function.session-status", 
        "syntax": "int session_status ( void )", 
        "type": "Sessions"
    }, 
    "session_unregister": {
        "descr": "session_unregister() unregisters the global variable named name from the current session.", 
        "name": "session_unregister", 
        "params": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-unregister", 
        "syntax": "bool session_unregister ( string $name )", 
        "type": "Sessions"
    }, 
    "session_unset": {
        "descr": "The session_unset() function frees all session variables currently registered.", 
        "name": "session_unset", 
        "params": [], 
        "path": "php/function.session-unset", 
        "syntax": "void session_unset ( void )", 
        "type": "Sessions"
    }, 
    "session_write_close": {
        "descr": "End the current session and store session data.", 
        "name": "session_write_close", 
        "params": [], 
        "path": "php/function.session-write-close", 
        "syntax": "void session_write_close ( void )", 
        "type": "Sessions"
    }, 
    "set_error_handler": {
        "descr": "Sets a user function (error_handler) to handle errors in a script.", 
        "name": "set_error_handler", 
        "params": [
            {
                "descr": "A callback with the following signature. ", 
                "name": "error_handler"
            }, 
            {
                "descr": "The second parameter, errstr, contains the error message, as a string.", 
                "name": "errstr"
            }, 
            {
                "descr": "The third parameter is optional, errfile, which contains the filename that the error was raised in, as a string.", 
                "name": "errfile"
            }, 
            {
                "descr": "The fourth parameter is optional, errline, which contains the line number the error was raised at, as an integer.", 
                "name": "errline"
            }, 
            {
                "descr": "The fifth parameter is optional, errcontext, which is an array that points to the active symbol table at the point the error occurred. ", 
                "name": "errcontext"
            }, 
            {
                "descr": "Can be used to mask the triggering of the error_handler function just like the error_reporting ini setting controls which errors are shown. ", 
                "name": "error_types"
            }
        ], 
        "path": "php/function.set-error-handler", 
        "syntax": "mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )", 
        "type": "Errors"
    }, 
    "set_exception_handler": {
        "descr": "Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.", 
        "name": "set_exception_handler", 
        "params": [
            {
                "descr": "Name of the function to be called when an uncaught exception occurs. ", 
                "name": "exception_handler"
            }
        ], 
        "path": "php/function.set-exception-handler", 
        "syntax": "callable set_exception_handler ( callable $exception_handler )", 
        "type": "Errors"
    }, 
    "set_include_path": {
        "descr": "Sets the include_path configuration option for the duration of the script.", 
        "name": "set_include_path", 
        "params": [
            {
                "descr": "The new value for the include_path", 
                "name": "new_include_path"
            }
        ], 
        "path": "php/function.set-include-path", 
        "syntax": "string set_include_path ( string $new_include_path )", 
        "type": "Language"
    }, 
    "set_magic_quotes_runtime": {
        "descr": "Set the current active configuration setting of magic_quotes_runtime.", 
        "name": "set_magic_quotes_runtime", 
        "params": [
            {
                "descr": "FALSE for off, TRUE for on.", 
                "name": "new_setting"
            }
        ], 
        "path": "php/function.set-magic-quotes-runtime", 
        "syntax": "bool set_magic_quotes_runtime ( bool $new_setting )", 
        "type": "Language"
    }, 
    "set_time_limit": {
        "descr": "Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.", 
        "name": "set_time_limit", 
        "params": [
            {
                "descr": "The maximum execution time, in seconds. ", 
                "name": "seconds"
            }
        ], 
        "path": "php/function.set-time-limit", 
        "syntax": "void set_time_limit ( int $seconds )", 
        "type": "Language"
    }, 
    "setcookie": {
        "descr": "setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace.", 
        "name": "setcookie", 
        "params": [
            {
                "descr": "The name of the cookie.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the cookie. This value is stored on the clients computer; do not store sensitive information. ", 
                "name": "value"
            }, 
            {
                "descr": "The time the cookie expires. This is a Unix timestamp so is in number of seconds since the epoch. ", 
                "name": "expire"
            }, 
            {
                "descr": "The path on the server in which the cookie will be available on. ", 
                "name": "path"
            }, 
            {
                "descr": "The domain that the cookie is available to. ", 
                "name": "domain"
            }, 
            {
                "descr": "Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client. ", 
                "name": "secure"
            }, 
            {
                "descr": "When TRUE the cookie will be made accessible only through the HTTP protocol. ", 
                "name": "httponly"
            }
        ], 
        "path": "php/function.setcookie", 
        "syntax": "bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )", 
        "type": "Networking"
    }, 
    "setlocale": {
        "descr": "Sets locale information.", 
        "name": "setlocale", 
        "params": [
            {
                "descr": "category is a named constant specifying the category of the functions affected by the locale setting:   LC_ALL for all of the below     LC_COLLATE for string comparison, see strcoll()     LC_CTYPE for character classification and conversion, for example strtoupper()     LC_MONETARY for localeconv()     LC_NUMERIC for decimal separator (See also localeconv())     LC_TIME for date and time formatting with strftime()     LC_MESSAGES for system responses (available if PHP was compiled with libintl)", 
                "name": "category"
            }, 
            {
                "descr": "If locale is NULL or the empty string \"\", the locale names will be set from the values of environment variables with the same names as the above categories, or from \"LANG\". ", 
                "name": "locale"
            }, 
            {
                "descr": "(Optional string or array parameters to try as locale settings until success.)", 
                "name": "..."
            }
        ], 
        "path": "php/function.setlocale", 
        "syntax": "string setlocale ( int $category , string $locale [, string $... ] )", 
        "type": "String"
    }, 
    "setrawcookie": {
        "descr": "setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.", 
        "name": "setrawcookie", 
        "params": [], 
        "path": "php/function.setrawcookie", 
        "syntax": "bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )", 
        "type": "Networking"
    }, 
    "settype": {
        "descr": "Set the type of variable var to type.", 
        "name": "settype", 
        "params": [
            {
                "descr": "The variable being converted.", 
                "name": "var"
            }, 
            {
                "descr": "Possibles values of type are:   \"boolean\" (or, since PHP 4.2.0, \"bool\")     \"integer\" (or, since PHP 4.2.0, \"int\")     \"float\" (only possible since PHP 4.2.0, for older versions use the deprecated variant \"double\")     \"string\"     \"array\"     \"object\"     \"null\" (since PHP 4.2.0)", 
                "name": "type"
            }
        ], 
        "path": "php/function.settype", 
        "syntax": "bool settype ( mixed &$var , string $type )", 
        "type": "Variables"
    }, 
    "sha1": {
        "descr": "", 
        "name": "sha1", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional raw_output is set to TRUE, then the sha1 digest is instead returned in raw binary format with a length of 20, otherwise the returned value is a 40-character hexadecimal number.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.sha1", 
        "syntax": "string sha1 ( string $str [, bool $raw_output = false ] )", 
        "type": "String"
    }, 
    "sha1_file": {
        "descr": "", 
        "name": "sha1_file", 
        "params": [
            {
                "descr": "The filename of the file to hash.", 
                "name": "filename"
            }, 
            {
                "descr": "When TRUE, returns the digest in raw binary format with a length of 20.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.sha1-file", 
        "syntax": "string sha1_file ( string $filename [, bool $raw_output = false ] )", 
        "type": "String"
    }, 
    "shell_exec": {
        "descr": "This function is identical to the backtick operator.", 
        "name": "shell_exec", 
        "params": [
            {
                "descr": "The command that will be executed.", 
                "name": "cmd"
            }
        ], 
        "path": "php/function.shell-exec", 
        "syntax": "string shell_exec ( string $cmd )", 
        "type": "Process Control"
    }, 
    "shuffle": {
        "descr": "This function shuffles (randomizes the order of the elements in) an array.", 
        "name": "shuffle", 
        "params": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.shuffle", 
        "syntax": "bool shuffle ( array &$array )", 
        "type": "Array"
    }, 
    "similar_text": {
        "descr": "This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.", 
        "name": "similar_text", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "first"
            }, 
            {
                "descr": "The second string.", 
                "name": "second"
            }, 
            {
                "descr": "By passing a reference as third argument, similar_text() will calculate the similarity in percent for you.", 
                "name": "percent"
            }
        ], 
        "path": "php/function.similar-text", 
        "syntax": "int similar_text ( string $first , string $second [, float &$percent ] )", 
        "type": "String"
    }, 
    "simplexml_import_dom": {
        "descr": "This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.", 
        "name": "simplexml_import_dom", 
        "params": [
            {
                "descr": "A DOM Element node", 
                "name": "node"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_import_dom() will return an object of the specified class. ", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.simplexml-import-dom", 
        "syntax": "SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = \"SimpleXMLElement\" ] )", 
        "type": "XML"
    }, 
    "simplexml_load_file": {
        "descr": "Convert the well-formed XML document in the given file to an object.", 
        "name": "simplexml_load_file", 
        "params": [
            {
                "descr": "Path to the XML file  Note:  Libxml 2 unescapes the URI, so if you want to pass e.g. ", 
                "name": "filename"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_load_file() will return an object of the specified class. ", 
                "name": "class_name"
            }, 
            {
                "descr": "Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }, 
            {
                "descr": "Namespace prefix or URI.", 
                "name": "ns"
            }, 
            {
                "descr": "TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/function.simplexml-load-file", 
        "syntax": "SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix = false ]]]] )", 
        "type": "XML"
    }, 
    "simplexml_load_string": {
        "descr": "Takes a well-formed XML string and returns it as an object.", 
        "name": "simplexml_load_string", 
        "params": [
            {
                "descr": "A well-formed XML string", 
                "name": "data"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_load_string() will return an object of the specified class. ", 
                "name": "class_name"
            }, 
            {
                "descr": "Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }, 
            {
                "descr": "Namespace prefix or URI.", 
                "name": "ns"
            }, 
            {
                "descr": "TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/function.simplexml-load-string", 
        "syntax": "SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix = false ]]]] )", 
        "type": "XML"
    }, 
    "sin": {
        "descr": "sin() returns the sine of the arg parameter. The arg parameter is in radians.", 
        "name": "sin", 
        "params": [
            {
                "descr": "A value in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sin", 
        "syntax": "float sin ( float $arg )", 
        "type": "Mathematics"
    }, 
    "sinh": {
        "descr": "Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.", 
        "name": "sinh", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sinh", 
        "syntax": "float sinh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "sleep": {
        "descr": "", 
        "name": "sleep", 
        "params": [
            {
                "descr": "Halt time in seconds.", 
                "name": "seconds"
            }
        ], 
        "path": "php/function.sleep", 
        "syntax": "int sleep ( int $seconds )", 
        "type": "Language"
    }, 
    "socket_accept": {
        "descr": "After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.", 
        "name": "socket_accept", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-accept", 
        "syntax": "resource socket_accept ( resource $socket )", 
        "type": "Networking"
    }, 
    "socket_bind": {
        "descr": "Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen().", 
        "name": "socket_bind", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "If the socket is of the AF_INET family, the address is an IP in dotted-quad notation (e.g. ", 
                "name": "address"
            }, 
            {
                "descr": "The port parameter is only used when binding an AF_INET socket, and designates the port on which to listen for connections.", 
                "name": "port (Optional)"
            }
        ], 
        "path": "php/function.socket-bind", 
        "syntax": "bool socket_bind ( resource $socket , string $address [, int $port = 0 ] )", 
        "type": "Networking"
    }, 
    "socket_clear_error": {
        "descr": "This function clears the error code on the given socket or the global last socket error if no socket is specified.", 
        "name": "socket_clear_error", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-clear-error", 
        "syntax": "void socket_clear_error ([ resource $socket ] )", 
        "type": "Networking"
    }, 
    "socket_close": {
        "descr": "socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.", 
        "name": "socket_close", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-close", 
        "syntax": "void socket_close ( resource $socket )", 
        "type": "Networking"
    }, 
    "socket_cmsg_space": {
        "descr": "Calculates the size of the buffer that should be allocated for receiving the ancillary data.", 
        "name": "socket_cmsg_space", 
        "params": [], 
        "path": "php/function.socket-cmsg-space", 
        "syntax": "int socket_cmsg_space ( int $level , int $type )", 
        "type": "Networking"
    }, 
    "socket_connect": {
        "descr": "Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create().", 
        "name": "socket_connect", 
        "params": [
            {
                "descr": "The address parameter is either an IPv4 address in dotted-quad notation (e.g. ", 
                "name": "socket   address"
            }, 
            {
                "descr": "The port parameter is only used and is mandatory when connecting to an AF_INET or an AF_INET6 socket, and designates the port on the remote host to which a connection should be made.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-connect", 
        "syntax": "bool socket_connect ( resource $socket , string $address [, int $port = 0 ] )", 
        "type": "Networking"
    }, 
    "socket_create": {
        "descr": "Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.", 
        "name": "socket_create", 
        "params": [
            {
                "descr": "The domain parameter specifies the protocol family to be used by the socket. ", 
                "name": "domain"
            }, 
            {
                "descr": "The type parameter selects the type of communication to be used by the socket. ", 
                "name": "type"
            }, 
            {
                "descr": "The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. ", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.socket-create", 
        "syntax": "resource socket_create ( int $domain , int $type , int $protocol )", 
        "type": "Networking"
    }, 
    "socket_create_listen": {
        "descr": "socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections.", 
        "name": "socket_create_listen", 
        "params": [
            {
                "descr": "The port on which to listen on all interfaces.", 
                "name": "port"
            }, 
            {
                "descr": "The backlog parameter defines the maximum length the queue of pending connections may grow to. ", 
                "name": "backlog"
            }
        ], 
        "path": "php/function.socket-create-listen", 
        "syntax": "resource socket_create_listen ( int $port [, int $backlog = 128 ] )", 
        "type": "Networking"
    }, 
    "socket_create_pair": {
        "descr": "socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).", 
        "name": "socket_create_pair", 
        "params": [
            {
                "descr": "The domain parameter specifies the protocol family to be used by the socket. ", 
                "name": "domain"
            }, 
            {
                "descr": "The type parameter selects the type of communication to be used by the socket. ", 
                "name": "type"
            }, 
            {
                "descr": "The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. ", 
                "name": "protocol"
            }, 
            {
                "descr": "Reference to an array in which the two socket resources will be inserted.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.socket-create-pair", 
        "syntax": "bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )", 
        "type": "Networking"
    }, 
    "socket_get_option": {
        "descr": "The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.", 
        "name": "socket_get_option", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The level parameter specifies the protocol level at which the option resides. ", 
                "name": "level"
            }, 
            {
                "descr": "Available Socket Options Option Description Type SO_DEBUG  Reports whether debugging information is being recorded. ", 
                "name": "optname"
            }
        ], 
        "path": "php/function.socket-get-option", 
        "syntax": "mixed socket_get_option ( resource $socket , int $level , int $optname )", 
        "type": "Networking"
    }, 
    "socket_getpeername": {
        "descr": "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.", 
        "name": "socket_getpeername", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "If the given socket is of type AF_INET or AF_INET6, socket_getpeername() will return the peers (remote) IP address in appropriate notation (e.g. ", 
                "name": "address"
            }, 
            {
                "descr": "If given, this will hold the port associated to address.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-getpeername", 
        "syntax": "bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )", 
        "type": "Networking"
    }, 
    "socket_getsockname": {
        "descr": "", 
        "name": "socket_getsockname", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "If the given socket is of type AF_INET or AF_INET6, socket_getsockname() will return the local IP address in appropriate notation (e.g. ", 
                "name": "addr"
            }, 
            {
                "descr": "If provided, this will hold the associated port.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-getsockname", 
        "syntax": "bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )", 
        "type": "Networking"
    }, 
    "socket_import_stream": {
        "descr": "Imports a stream that encapsulates a socket into a socket extension resource.", 
        "name": "socket_import_stream", 
        "params": [
            {
                "descr": "The stream resource to import.", 
                "name": "stream"
            }
        ], 
        "path": "php/function.socket-import-stream", 
        "syntax": "resource socket_import_stream ( resource $stream )", 
        "type": "Networking"
    }, 
    "socket_last_error": {
        "descr": "If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code.", 
        "name": "socket_last_error", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-last-error", 
        "syntax": "int socket_last_error ([ resource $socket ] )", 
        "type": "Networking"
    }, 
    "socket_listen": {
        "descr": "After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket.", 
        "name": "socket_listen", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "A maximum of backlog incoming connections will be queued for processing. ", 
                "name": "backlog"
            }
        ], 
        "path": "php/function.socket-listen", 
        "syntax": "bool socket_listen ( resource $socket [, int $backlog = 0 ] )", 
        "type": "Networking"
    }, 
    "socket_read": {
        "descr": "The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.", 
        "name": "socket_read", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The maximum number of bytes read is specified by the length parameter. ", 
                "name": "length"
            }, 
            {
                "descr": "Optional type parameter is a named constant:   PHP_BINARY_READ (Default) - use the system recv() function. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.socket-read", 
        "syntax": "string socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] )", 
        "type": "Networking"
    }, 
    "socket_recv": {
        "descr": "The socket_recv() function receives len bytes of data in buf from socket. socket_recv() can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.", 
        "name": "socket_recv", 
        "params": [
            {
                "descr": "The socket must be a socket resource previously created by socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The data received will be fetched to the variable specified with buf. ", 
                "name": "buf"
            }, 
            {
                "descr": "Up to len bytes will be fetched from remote host.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.socket-recv", 
        "syntax": "int socket_recv ( resource $socket , string &$buf , int $len , int $flags )", 
        "type": "Networking"
    }, 
    "socket_recvfrom": {
        "descr": "The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.", 
        "name": "socket_recvfrom", 
        "params": [
            {
                "descr": "The socket must be a socket resource previously created by socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The data received will be fetched to the variable specified with buf.", 
                "name": "buf"
            }, 
            {
                "descr": "Up to len bytes will be fetched from remote host.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "If the socket is of the type AF_UNIX type, name is the path to the file. ", 
                "name": "name"
            }, 
            {
                "descr": "This argument only applies to AF_INET and AF_INET6 sockets, and specifies the remote port from which the data is received. ", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-recvfrom", 
        "syntax": "int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )", 
        "type": "Networking"
    }, 
    "socket_recvmsg": {
        "descr": "", 
        "name": "socket_recvmsg", 
        "params": [], 
        "path": "php/function.socket-recvmsg", 
        "syntax": "int socket_recvmsg ( resource $socket , string $message [, int $flags ] )", 
        "type": "Networking"
    }, 
    "socket_select": {
        "descr": "socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.", 
        "name": "socket_select", 
        "params": [
            {
                "descr": "The sockets listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a socket resource is also ready on end-of-file, in which case a socket_read() will return a zero length string).", 
                "name": "read"
            }, 
            {
                "descr": "The sockets listed in the write array will be watched to see if a write will not block.", 
                "name": "write"
            }, 
            {
                "descr": "The sockets listed in the except array will be watched for exceptions.", 
                "name": "except"
            }, 
            {
                "descr": "The tv_sec and tv_usec together form the timeout parameter. ", 
                "name": "tv_sec"
            }
        ], 
        "path": "php/function.socket-select", 
        "syntax": "int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )", 
        "type": "Networking"
    }, 
    "socket_send": {
        "descr": "The function socket_send() sends len bytes to the socket socket from buf.", 
        "name": "socket_send", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "A buffer containing the data that will be sent to the remote host.", 
                "name": "buf"
            }, 
            {
                "descr": "The number of bytes that will be sent to the remote host from buf.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.socket-send", 
        "syntax": "int socket_send ( resource $socket , string $buf , int $len , int $flags )", 
        "type": "Networking"
    }, 
    "socket_sendmsg": {
        "descr": "", 
        "name": "socket_sendmsg", 
        "params": [], 
        "path": "php/function.socket-sendmsg", 
        "syntax": "int socket_sendmsg ( resource $socket , array $message , int $flags )", 
        "type": "Networking"
    }, 
    "socket_sendto": {
        "descr": "The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.", 
        "name": "socket_sendto", 
        "params": [
            {
                "descr": "A valid socket resource created using socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The sent data will be taken from buffer buf.", 
                "name": "buf"
            }, 
            {
                "descr": "len bytes from buf will be sent.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "IP address of the remote host.", 
                "name": "addr"
            }, 
            {
                "descr": "port is the remote port number at which the data will be sent.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-sendto", 
        "syntax": "int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ] )", 
        "type": "Networking"
    }, 
    "socket_set_block": {
        "descr": "The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter.", 
        "name": "socket_set_block", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-set-block", 
        "syntax": "bool socket_set_block ( resource $socket )", 
        "type": "Networking"
    }, 
    "socket_set_nonblock": {
        "descr": "The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter.", 
        "name": "socket_set_nonblock", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-set-nonblock", 
        "syntax": "bool socket_set_nonblock ( resource $socket )", 
        "type": "Networking"
    }, 
    "socket_set_option": {
        "descr": "The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.", 
        "name": "socket_set_option", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The level parameter specifies the protocol level at which the option resides. ", 
                "name": "level"
            }, 
            {
                "descr": "The available socket options are the same as those for the socket_get_option() function.", 
                "name": "optname"
            }, 
            {
                "descr": "The option value.", 
                "name": "optval"
            }
        ], 
        "path": "php/function.socket-set-option", 
        "syntax": "bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )", 
        "type": "Networking"
    }, 
    "socket_shutdown": {
        "descr": "The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket", 
        "name": "socket_shutdown", 
        "params": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The value of how can be one of the following: possible values for how 0  Shutdown socket reading  1  Shutdown socket writing  2  Shutdown socket reading and writing", 
                "name": "how"
            }
        ], 
        "path": "php/function.socket-shutdown", 
        "syntax": "bool socket_shutdown ( resource $socket [, int $how = 2 ] )", 
        "type": "Networking"
    }, 
    "socket_strerror": {
        "descr": "socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text.", 
        "name": "socket_strerror", 
        "params": [
            {
                "descr": "A valid socket error number, likely produced by socket_last_error().", 
                "name": "errno"
            }
        ], 
        "path": "php/function.socket-strerror", 
        "syntax": "string socket_strerror ( int $errno )", 
        "type": "Networking"
    }, 
    "socket_write": {
        "descr": "The function socket_write() writes to the socket from the given buffer.", 
        "name": "socket_write", 
        "params": [
            {
                "descr": "The buffer to be written.", 
                "name": "socket   buffer"
            }, 
            {
                "descr": "The optional parameter length can specify an alternate length of bytes written to the socket. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.socket-write", 
        "syntax": "int socket_write ( resource $socket , string $buffer [, int $length = 0 ] )", 
        "type": "Networking"
    }, 
    "solr_get_version": {
        "descr": "This function returns the current version of the extension as a string.", 
        "name": "solr_get_version", 
        "params": [], 
        "path": "php/function.solr-get-version", 
        "syntax": "string solr_get_version ( void )", 
        "type": "Solr"
    }, 
    "sort": {
        "descr": "This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.", 
        "name": "sort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The optional second parameter sort_flags may be used to modify the sorting behavior using these values:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings    SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()     SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()     SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.sort", 
        "syntax": "bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "type": "Array"
    }, 
    "soundex": {
        "descr": "Calculates the soundex key of str.", 
        "name": "soundex", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.soundex", 
        "syntax": "string soundex ( string $str )", 
        "type": "String"
    }, 
    "spl_autoload": {
        "descr": "This function is intended to be used as a default implementation for __autoload(). If nothing else is specified and spl_autoload_register() is called without any parameters then this function will be used for any later call to __autoload().", 
        "name": "spl_autoload", 
        "params": [
            {
                "descr": "The lowercased name of the class (and namespace) being instantiated.", 
                "name": "class_name"
            }, 
            {
                "descr": "By default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions .inc and .php.", 
                "name": "file_extensions"
            }
        ], 
        "path": "php/function.spl-autoload", 
        "syntax": "void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )", 
        "type": "SPL"
    }, 
    "spl_autoload_call": {
        "descr": "This function can be used to manually search for a class or interface using the registered __autoload functions.", 
        "name": "spl_autoload_call", 
        "params": [
            {
                "descr": "The class name being searched.", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.spl-autoload-call", 
        "syntax": "void spl_autoload_call ( string $class_name )", 
        "type": "SPL"
    }, 
    "spl_autoload_extensions": {
        "descr": "This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.", 
        "name": "spl_autoload_extensions", 
        "params": [
            {
                "descr": "When calling without an argument, it simply returns the current list of extensions each separated by comma. ", 
                "name": "file_extensions"
            }
        ], 
        "path": "php/function.spl-autoload-extensions", 
        "syntax": "string spl_autoload_extensions ([ string $file_extensions ] )", 
        "type": "SPL"
    }, 
    "spl_autoload_functions": {
        "descr": "Get all registered __autoload() functions.", 
        "name": "spl_autoload_functions", 
        "params": [], 
        "path": "php/function.spl-autoload-functions", 
        "syntax": "array spl_autoload_functions ( void )", 
        "type": "SPL"
    }, 
    "spl_autoload_register": {
        "descr": "Register a function with the spl provided __autoload stack. If the stack is not yet activated it will be activated.", 
        "name": "spl_autoload_register", 
        "params": [
            {
                "descr": "The autoload function being registered. ", 
                "name": "autoload_function"
            }, 
            {
                "descr": "This parameter specifies whether spl_autoload_register() should throw exceptions when the autoload_function cannot be registered.", 
                "name": "throw"
            }, 
            {
                "descr": "If true, spl_autoload_register() will prepend the autoloader on the autoload stack instead of appending it.", 
                "name": "prepend"
            }
        ], 
        "path": "php/function.spl-autoload-register", 
        "syntax": "bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )", 
        "type": "SPL"
    }, 
    "spl_autoload_unregister": {
        "descr": "Unregister a function from the spl provided __autoload stack. If the stack is activated and empty after unregistering the given function then it will be deactivated.", 
        "name": "spl_autoload_unregister", 
        "params": [
            {
                "descr": "The autoload function being unregistered.", 
                "name": "autoload_function"
            }
        ], 
        "path": "php/function.spl-autoload-unregister", 
        "syntax": "bool spl_autoload_unregister ( mixed $autoload_function )", 
        "type": "SPL"
    }, 
    "spl_classes": {
        "descr": "This function returns an array with the current available SPL classes.", 
        "name": "spl_classes", 
        "params": [], 
        "path": "php/function.spl-classes", 
        "syntax": "array spl_classes ( void )", 
        "type": "SPL"
    }, 
    "spl_object_hash": {
        "descr": "This function returns a unique identifier for the object. This id can be used as a hash key for storing objects or for identifying an object.", 
        "name": "spl_object_hash", 
        "params": [
            {
                "descr": "Any object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.spl-object-hash", 
        "syntax": "string spl_object_hash ( object $obj )", 
        "type": "SPL"
    }, 
    "split": {
        "descr": "Splits a string into array by regular expression.", 
        "name": "split", 
        "params": [
            {
                "descr": "Case sensitive regular expression. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.split", 
        "syntax": "array split ( string $pattern , string $string [, int $limit = -1 ] )", 
        "type": "String"
    }, 
    "spliti": {
        "descr": "Splits a string into array by regular expression.", 
        "name": "spliti", 
        "params": [
            {
                "descr": "Case insensitive regular expression. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.spliti", 
        "syntax": "array spliti ( string $pattern , string $string [, int $limit = -1 ] )", 
        "type": "String"
    }, 
    "sprintf": {
        "descr": "Returns a string produced according to the formatting string format.", 
        "name": "sprintf", 
        "params": [
            {
                "descr": "The format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result, and conversion specifications, each of which results in fetching its own parameter. This applies to both sprintf() and printf().   Each conversion specification consists of a percent sign (%), followed by one or more of these elements, in order:   An optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well, and was added in PHP 4.3.0.     An optional padding specifier that says what character will be used for padding the results to the right string size. This may be a space character or a 0 (zero character). The default is to pad with spaces. An alternate padding character can be specified by prefixing it with a single quote ('). See the examples below.     An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified.     An optional number, a width specifier that says how many characters (minimum) this conversion should result in.     An optional precision specifier in the form of a period (`.') followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string.     A type specifier that says what type the argument data should be treated as. Possible types:  % - a literal percent character. No argument is required.   b - the argument is treated as an integer, and presented as a binary number.   c - the argument is treated as an integer, and presented as the character with that ASCII value.   d - the argument is treated as an integer, and presented as a (signed) decimal number.   e - the argument is treated as scientific notation (e.g. 1.2e+2). The precision specifier stands for the number of digits after the decimal point since PHP 5.2.1. In earlier versions, it was taken as number of significant digits (one less).   E - like %e but uses uppercase letter (e.g. 1.2E+2).   f - the argument is treated as a float, and presented as a floating-point number (locale aware).   F - the argument is treated as a float, and presented as a floating-point number (non-locale aware). Available since PHP 4.3.10 and PHP 5.0.3.   g - shorter of %e and %f.   G - shorter of %E and %f.   o - the argument is treated as an integer, and presented as an octal number.   s - the argument is treated as and presented as a string.   u - the argument is treated as an integer, and presented as an unsigned decimal number.   x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters).   X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).    Variables will be co-erced to a suitable type for the specifier: Type Handling Type Specifiers string s integer  d, u, c, o, x, X, b  double  g, G, e, E, f, F  Warning  Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results    The format string supports argument numbering/swapping. Here is an example:  Example #1 Argument swapping  <?php$num\u00a0=\u00a05;$location\u00a0=\u00a0'tree';$format\u00a0=\u00a0'There\u00a0are\u00a0%d\u00a0monkeys\u00a0in\u00a0the\u00a0%s';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   This will output \"There are 5 monkeys in the tree\". But imagine we are creating a format string in a separate file, commonly because we would like to internationalize it and we rewrite it as:  Example #2 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%s\u00a0contains\u00a0%d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   We now have a problem. The order of the placeholders in the format string does not match the order of the arguments in the code. We would like to leave the code as is and simply indicate in the format string which arguments the placeholders refer to. We would write the format string like this instead:  Example #3 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   An added benefit here is that you can repeat the placeholders without adding more arguments in the code. For example:  Example #4 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0That\\'s\u00a0a\u00a0nice\u00a0%2$s\u00a0full\u00a0of\u00a0%1$d\u00a0monkeys.';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   When using argument swapping, the n$ position specifier must come immediately after the percent sign (%), before any other specifiers, as shown in the example below.  Example #5 Position specifier with other specifiers  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$04d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>  The above example will output:  The tree contains 0005 monkeys   Note:  Attempting to use a position specifier greater than PHP_INT_MAX will result in sprintf() generating warnings.   Warning  The c type specifier ignores padding and width", 
                "name": "format"
            }
        ], 
        "path": "php/function.sprintf", 
        "syntax": "string sprintf ( string $format [, mixed $args [, mixed $... ]] )", 
        "type": "String"
    }, 
    "sql_regcase": {
        "descr": "Creates a regular expression for a case insensitive match.", 
        "name": "sql_regcase", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.sql-regcase", 
        "syntax": "string sql_regcase ( string $string )", 
        "type": "String"
    }, 
    "sqlsrv_begin_transaction": {
        "descr": "The transaction begun by sqlsrv_begin_transaction() includes all statements that were executed after the call to sqlsrv_begin_transaction() and before calls to sqlsrv_rollback() or sqlsrv_commit(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see \u00bb SQLSRV Transactions.", 
        "name": "sqlsrv_begin_transaction", 
        "params": [
            {
                "descr": "The connection resource returned by a call to sqlsrv_connect().", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-begin-transaction", 
        "syntax": "bool sqlsrv_begin_transaction ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_cancel": {
        "descr": "Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After sqlsrv_cancel() has been called, the specified statement can be re-executed if it was created with sqlsrv_prepare(). Calling sqlsrv_cancel() is not necessary if all the results associated with the statement have been consumed.", 
        "name": "sqlsrv_cancel", 
        "params": [
            {
                "descr": "The statement resource to be cancelled.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-cancel", 
        "syntax": "bool sqlsrv_cancel ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_client_info": {
        "descr": "Returns information about the client and specified connection", 
        "name": "sqlsrv_client_info", 
        "params": [
            {
                "descr": "The connection about which information is returned.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-client-info", 
        "syntax": "array sqlsrv_client_info ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_close": {
        "descr": "Closes an open connection and releases resourses associated with the connection.", 
        "name": "sqlsrv_close", 
        "params": [
            {
                "descr": "The connection to be closed.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-close", 
        "syntax": "bool sqlsrv_close ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_commit": {
        "descr": "Commits a transaction that was begun with sqlsrv_begin_transaction(). The connection is returned to auto-commit mode after sqlsrv_commit() is called. The transaction that is committed includes all statements that were executed after the call to sqlsrv_begin_transaction(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see \u00bb SQLSRV Transactions.", 
        "name": "sqlsrv_commit", 
        "params": [
            {
                "descr": "The connection on which the transaction is to be committed.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-commit", 
        "syntax": "bool sqlsrv_commit ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_configure": {
        "descr": "Changes the driver error handling and logging configurations.", 
        "name": "sqlsrv_configure", 
        "params": [
            {
                "descr": "The name of the setting to set. ", 
                "name": "setting"
            }, 
            {
                "descr": "The value of the specified setting. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.sqlsrv-configure", 
        "syntax": "bool sqlsrv_configure ( string $setting , mixed $value )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_connect": {
        "descr": "Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include \"UID\" and \"PWD\" in the connection options array.", 
        "name": "sqlsrv_connect", 
        "params": [
            {
                "descr": "The name of the server to which a connection is established. ", 
                "name": "serverName"
            }, 
            {
                "descr": "An associative array that specifies options for connecting to the server. ", 
                "name": "connectionInfo"
            }
        ], 
        "path": "php/function.sqlsrv-connect", 
        "syntax": "resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_errors": {
        "descr": "Returns error and warning information about the last SQLSRV operation performed.", 
        "name": "sqlsrv_errors", 
        "params": [
            {
                "descr": "Determines whether error information, warning information, or both are returned. ", 
                "name": "errorsOrWarnings"
            }
        ], 
        "path": "php/function.sqlsrv-errors", 
        "syntax": "mixed sqlsrv_errors ([ int $errorsOrWarnings ] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_execute": {
        "descr": "Executes a statement prepared with sqlsrv_prepare(). This function is ideal for executing a prepared statement multiple times with different parameter values.", 
        "name": "sqlsrv_execute", 
        "params": [
            {
                "descr": "A statement resource returned by sqlsrv_prepare().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-execute", 
        "syntax": "bool sqlsrv_execute ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch": {
        "descr": "Makes the next row in a result set available for reading. Use sqlsrv_get_field() to read the fields of the row.", 
        "name": "sqlsrv_fetch", 
        "params": [
            {
                "descr": "A statement resource created by executing sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The row to be accessed. This parameter can only be used if the specified statement was prepared with a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch", 
        "syntax": "mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch_array": {
        "descr": "Returns the next available row of data as an associative array, a numeric array, or both (the default).", 
        "name": "sqlsrv_fetch_array", 
        "params": [
            {
                "descr": "A statement resource returned by sqlsrv_query or sqlsrv_prepare.", 
                "name": "stmt"
            }, 
            {
                "descr": "A predefined constant specifying the type of array to return. ", 
                "name": "fetchType"
            }, 
            {
                "descr": "Specifies the row to access in a result set that uses a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch-array", 
        "syntax": "array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch_object": {
        "descr": "Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values.", 
        "name": "sqlsrv_fetch_object", 
        "params": [
            {
                "descr": "A statement resource created by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The name of the class to instantiate. ", 
                "name": "className"
            }, 
            {
                "descr": "Values passed to the constructor of the specified class. ", 
                "name": "ctorParams"
            }, 
            {
                "descr": "The row to be accessed. This parameter can only be used if the specified statement was prepared with a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch-object", 
        "syntax": "mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_field_metadata": {
        "descr": "Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query(). sqlsrv_field_metadata() can be called on a statement before or after statement execution.", 
        "name": "sqlsrv_field_metadata", 
        "params": [
            {
                "descr": "The statment resource for which metadata is returned.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-field-metadata", 
        "syntax": "mixed sqlsrv_field_metadata ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_free_stmt": {
        "descr": "Frees all resources for the specified statement. The statement cannot be used after sqlsrv_free_stmt() has been called on it. If sqlsrv_free_stmt() is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back.", 
        "name": "sqlsrv_free_stmt", 
        "params": [
            {
                "descr": "The statment for which resources are freed. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-free-stmt", 
        "syntax": "bool sqlsrv_free_stmt ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_get_config": {
        "descr": "Returns the value of the specified configuration setting.", 
        "name": "sqlsrv_get_config", 
        "params": [
            {
                "descr": "The name of the setting for which the value is returned. ", 
                "name": "setting"
            }
        ], 
        "path": "php/function.sqlsrv-get-config", 
        "syntax": "mixed sqlsrv_get_config ( string $setting )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_get_field": {
        "descr": "Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0.", 
        "name": "sqlsrv_get_field", 
        "params": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The index of the field to be retrieved. ", 
                "name": "fieldIndex"
            }, 
            {
                "descr": "The PHP data type for the returned field data. ", 
                "name": "getAsType"
            }
        ], 
        "path": "php/function.sqlsrv-get-field", 
        "syntax": "mixed sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_has_rows": {
        "descr": "Indicates whether the specified statement has rows.", 
        "name": "sqlsrv_has_rows", 
        "params": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-has-rows", 
        "syntax": "bool sqlsrv_has_rows ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_next_result": {
        "descr": "Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters.", 
        "name": "sqlsrv_next_result", 
        "params": [
            {
                "descr": "The statment on which the next result is being called.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-next-result", 
        "syntax": "mixed sqlsrv_next_result ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_num_fields": {
        "descr": "Retrieves the number of fields (columns) on a statement.", 
        "name": "sqlsrv_num_fields", 
        "params": [
            {
                "descr": "The statment for which the number of fields is returned. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-num-fields", 
        "syntax": "mixed sqlsrv_num_fields ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_num_rows": {
        "descr": "Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see sqlsrv_query(), sqlsrv_prepare(), or \u00bb Specifying a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation.", 
        "name": "sqlsrv_num_rows", 
        "params": [
            {
                "descr": "The statement for which the row count is returned. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-num-rows", 
        "syntax": "mixed sqlsrv_num_rows ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_prepare": {
        "descr": "Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values.", 
        "name": "sqlsrv_prepare", 
        "params": [
            {
                "descr": "A connection resource returned by sqlsrv_connect().", 
                "name": "conn"
            }, 
            {
                "descr": "The string that defines the query to be prepared and executed.", 
                "name": "sql"
            }, 
            {
                "descr": "An array specifying parameter information when executing a parameterized query. ", 
                "name": "params"
            }, 
            {
                "descr": "An array specifing query property options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.sqlsrv-prepare", 
        "syntax": "mixed sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_query": {
        "descr": "Prepares and executes a query.", 
        "name": "sqlsrv_query", 
        "params": [
            {
                "descr": "A connection resource returned by sqlsrv_connect().", 
                "name": "conn"
            }, 
            {
                "descr": "The string that defines the query to be prepared and executed.", 
                "name": "sql"
            }, 
            {
                "descr": "An array specifying parameter information when executing a parameterized query. ", 
                "name": "params"
            }, 
            {
                "descr": "An array specifing query property options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.sqlsrv-query", 
        "syntax": "mixed sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_rollback": {
        "descr": "Rolls back a transaction that was begun with sqlsrv_begin_transaction() and returns the connection to auto-commit mode.", 
        "name": "sqlsrv_rollback", 
        "params": [
            {
                "descr": "The connection resource returned by a call to sqlsrv_connect().", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-rollback", 
        "syntax": "bool sqlsrv_rollback ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_rows_affected": {
        "descr": "Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see sqlsrv_num_rows().", 
        "name": "sqlsrv_rows_affected", 
        "params": [
            {
                "descr": "The executed statement resource for which the number of affected rows is returned.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-rows-affected", 
        "syntax": "int sqlsrv_rows_affected ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_send_stream_data": {
        "descr": "Send data from parameter streams to the server. Up to 8 KB of data is sent with each call.", 
        "name": "sqlsrv_send_stream_data", 
        "params": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-send-stream-data", 
        "syntax": "bool sqlsrv_send_stream_data ( resource $stmt )", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_server_info": {
        "descr": "Returns information about the server.", 
        "name": "sqlsrv_server_info", 
        "params": [
            {
                "descr": "The connection resource that connects the client and the server.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-server-info", 
        "syntax": "array sqlsrv_server_info ( resource $conn )", 
        "type": "Database/SQL Server"
    }, 
    "sqrt": {
        "descr": "Returns the square root of arg.", 
        "name": "sqrt", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sqrt", 
        "syntax": "float sqrt ( float $arg )", 
        "type": "Mathematics"
    }, 
    "srand": {
        "descr": "Seeds the random number generator with seed or with a random value if no seed is given.", 
        "name": "srand", 
        "params": [
            {
                "descr": "Optional seed value", 
                "name": "seed"
            }
        ], 
        "path": "php/function.srand", 
        "syntax": "void srand ([ int $seed ] )", 
        "type": "Mathematics"
    }, 
    "sscanf": {
        "descr": "The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf().", 
        "name": "sscanf", 
        "params": [
            {
                "descr": "The input string being parsed.", 
                "name": "str"
            }, 
            {
                "descr": "The interpreted format for str, which is described in the documentation for sprintf() with following differences:  Function is not locale-aware. ", 
                "name": "format"
            }, 
            {
                "descr": "Optionally pass in variables by reference that will contain the parsed values.", 
                "name": "..."
            }
        ], 
        "path": "php/function.sscanf", 
        "syntax": "mixed sscanf ( string $str , string $format [, mixed &$... ] )", 
        "type": "String"
    }, 
    "ssh2_auth_agent": {
        "descr": "Authenticate over SSH using the ssh agent", 
        "name": "ssh2_auth_agent", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }
        ], 
        "path": "php/function.ssh2-auth-agent", 
        "syntax": "bool ssh2_auth_agent ( resource $session , string $username )", 
        "type": "Networking"
    }, 
    "ssh2_auth_hostbased_file": {
        "descr": "Authenticate using a public hostkey read from a file.", 
        "name": "ssh2_auth_hostbased_file", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "If privkeyfile is encrypted (which it should be), the passphrase must be provided.", 
                "name": "username   hostname   pubkeyfile   privkeyfile   passphrase"
            }, 
            {
                "descr": "If local_username is omitted, then the value for username will be used for it.", 
                "name": "local_username"
            }
        ], 
        "path": "php/function.ssh2-auth-hostbased-file", 
        "syntax": "bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )", 
        "type": "Networking"
    }, 
    "ssh2_auth_none": {
        "descr": "Attempt \"none\" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.", 
        "name": "ssh2_auth_none", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }
        ], 
        "path": "php/function.ssh2-auth-none", 
        "syntax": "mixed ssh2_auth_none ( resource $session , string $username )", 
        "type": "Networking"
    }, 
    "ssh2_auth_password": {
        "descr": "Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method.", 
        "name": "ssh2_auth_password", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }, 
            {
                "descr": "Password for username", 
                "name": "password"
            }
        ], 
        "path": "php/function.ssh2-auth-password", 
        "syntax": "bool ssh2_auth_password ( resource $session , string $username , string $password )", 
        "type": "Networking"
    }, 
    "ssh2_auth_pubkey_file": {
        "descr": "Authenticate using a public key read from a file.", 
        "name": "ssh2_auth_pubkey_file", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "The public key file needs to be in OpenSSH's format. ", 
                "name": "username   pubkeyfile"
            }, 
            {
                "descr": "If privkeyfile is encrypted (which it should be), the passphrase must be provided.", 
                "name": "privkeyfile   passphrase"
            }
        ], 
        "path": "php/function.ssh2-auth-pubkey-file", 
        "syntax": "bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )", 
        "type": "Networking"
    }, 
    "ssh2_connect": {
        "descr": "Establish a connection to a remote SSH server.", 
        "name": "ssh2_connect", 
        "params": [
            {
                "descr": "methods may be an associative array with up to four parameters as described below. ", 
                "name": "host   port   methods"
            }, 
            {
                "descr": "callbacks may be an associative array with any or all of the following parameters. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.ssh2-connect", 
        "syntax": "resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )", 
        "type": "Networking"
    }, 
    "ssh2_exec": {
        "descr": "Execute a command at the remote end and allocate a channel for it.", 
        "name": "ssh2_exec", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "env may be passed as an associative array of name/value pairs to set in the target environment.", 
                "name": "command   pty   env"
            }, 
            {
                "descr": "Width of the virtual terminal.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the virtual terminal.", 
                "name": "height"
            }, 
            {
                "descr": "width_height_type should be one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.", 
                "name": "width_height_type"
            }
        ], 
        "path": "php/function.ssh2-exec", 
        "syntax": "resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )", 
        "type": "Networking"
    }, 
    "ssh2_fetch_stream": {
        "descr": "Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1).", 
        "name": "ssh2_fetch_stream", 
        "params": [
            {
                "descr": "An SSH2 channel stream.", 
                "name": "channel   streamid"
            }
        ], 
        "path": "php/function.ssh2-fetch-stream", 
        "syntax": "resource ssh2_fetch_stream ( resource $channel , int $streamid )", 
        "type": "Networking"
    }, 
    "ssh2_fingerprint": {
        "descr": "Returns a server hostkey hash from an active session.", 
        "name": "ssh2_fingerprint", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "flags may be either of SSH2_FINGERPRINT_MD5 or SSH2_FINGERPRINT_SHA1 logically ORed with SSH2_FINGERPRINT_HEX or SSH2_FINGERPRINT_RAW.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.ssh2-fingerprint", 
        "syntax": "string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )", 
        "type": "Networking"
    }, 
    "ssh2_methods_negotiated": {
        "descr": "Returns list of negotiated methods.", 
        "name": "ssh2_methods_negotiated", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-methods-negotiated", 
        "syntax": "array ssh2_methods_negotiated ( resource $session )", 
        "type": "Networking"
    }, 
    "ssh2_publickey_add": {
        "descr": "", 
        "name": "ssh2_publickey_add", 
        "params": [
            {
                "descr": "Publickey Subsystem resource created by ssh2_publickey_init().", 
                "name": "pkey"
            }, 
            {
                "descr": "Publickey algorithm (e.g.): ssh-dss, ssh-rsa", 
                "name": "algoname"
            }, 
            {
                "descr": "Publickey blob as raw binary data", 
                "name": "blob"
            }, 
            {
                "descr": "If the specified key already exists, should it be overwritten?", 
                "name": "overwrite"
            }, 
            {
                "descr": "Associative array of attributes to assign to this public key. ", 
                "name": "attributes"
            }
        ], 
        "path": "php/function.ssh2-publickey-add", 
        "syntax": "bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = false [, array $attributes ]] )", 
        "type": "Networking"
    }, 
    "ssh2_publickey_init": {
        "descr": "Request the Publickey subsystem from an already connected SSH2 server.", 
        "name": "ssh2_publickey_init", 
        "params": [], 
        "path": "php/function.ssh2-publickey-init", 
        "syntax": "resource ssh2_publickey_init ( resource $session )", 
        "type": "Networking"
    }, 
    "ssh2_publickey_list": {
        "descr": "List currently authorized publickeys.", 
        "name": "ssh2_publickey_list", 
        "params": [
            {
                "descr": "Publickey Subsystem resource", 
                "name": "pkey"
            }
        ], 
        "path": "php/function.ssh2-publickey-list", 
        "syntax": "array ssh2_publickey_list ( resource $pkey )", 
        "type": "Networking"
    }, 
    "ssh2_publickey_remove": {
        "descr": "Removes an authorized publickey.", 
        "name": "ssh2_publickey_remove", 
        "params": [
            {
                "descr": "Publickey Subsystem Resource", 
                "name": "pkey"
            }, 
            {
                "descr": "Publickey algorithm (e.g.): ssh-dss, ssh-rsa", 
                "name": "algoname"
            }, 
            {
                "descr": "Publickey blob as raw binary data", 
                "name": "blob"
            }
        ], 
        "path": "php/function.ssh2-publickey-remove", 
        "syntax": "bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )", 
        "type": "Networking"
    }, 
    "ssh2_scp_recv": {
        "descr": "Copy a file from the remote server to the local filesystem using the SCP protocol.", 
        "name": "ssh2_scp_recv", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Path to the remote file.", 
                "name": "remote_file"
            }, 
            {
                "descr": "Path to the local file.", 
                "name": "local_file"
            }
        ], 
        "path": "php/function.ssh2-scp-recv", 
        "syntax": "bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )", 
        "type": "Networking"
    }, 
    "ssh2_scp_send": {
        "descr": "Copy a file from the local filesystem to the remote server using the SCP protocol.", 
        "name": "ssh2_scp_send", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Path to the local file.", 
                "name": "local_file"
            }, 
            {
                "descr": "Path to the remote file.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The file will be created with the mode specified by create_mode.", 
                "name": "create_mode"
            }
        ], 
        "path": "php/function.ssh2-scp-send", 
        "syntax": "bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] )", 
        "type": "Networking"
    }, 
    "ssh2_sftp": {
        "descr": "Request the SFTP subsystem from an already connected SSH2 server.", 
        "name": "ssh2_sftp", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-sftp", 
        "syntax": "resource ssh2_sftp ( resource $session )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_chmod": {
        "descr": "Attempts to change the mode of the specified file to that given in mode.", 
        "name": "ssh2_sftp_chmod", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Permissions on the file. See the chmod() for more details on this parameter.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.ssh2-sftp-chmod", 
        "syntax": "bool ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_lstat": {
        "descr": "Stats a symbolic link on the remote filesystem without following the link.", 
        "name": "ssh2_sftp_lstat", 
        "params": [
            {
                "descr": "Path to the remote symbolic link.", 
                "name": "sftp   path"
            }
        ], 
        "path": "php/function.ssh2-sftp-lstat", 
        "syntax": "array ssh2_sftp_lstat ( resource $sftp , string $path )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_mkdir": {
        "descr": "Creates a directory on the remote file server with permissions set to mode.", 
        "name": "ssh2_sftp_mkdir", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path of the new directory.", 
                "name": "dirname"
            }, 
            {
                "descr": "Permissions on the new directory.", 
                "name": "mode"
            }, 
            {
                "descr": "If recursive is TRUE any parent directories required for dirname will be automatically created as well.", 
                "name": "recursive"
            }
        ], 
        "path": "php/function.ssh2-sftp-mkdir", 
        "syntax": "bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = false ]] )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_readlink": {
        "descr": "Returns the target of a symbolic link.", 
        "name": "ssh2_sftp_readlink", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path of the symbolic link.", 
                "name": "link"
            }
        ], 
        "path": "php/function.ssh2-sftp-readlink", 
        "syntax": "string ssh2_sftp_readlink ( resource $sftp , string $link )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_realpath": {
        "descr": "Translates filename into the effective real path on the remote filesystem.", 
        "name": "ssh2_sftp_realpath", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-realpath", 
        "syntax": "string ssh2_sftp_realpath ( resource $sftp , string $filename )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_rename": {
        "descr": "Renames a file on the remote filesystem.", 
        "name": "ssh2_sftp_rename", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "The current file that is being renamed.", 
                "name": "from"
            }, 
            {
                "descr": "The new file name that replaces from.", 
                "name": "to"
            }
        ], 
        "path": "php/function.ssh2-sftp-rename", 
        "syntax": "bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_rmdir": {
        "descr": "Removes a directory from the remote file server.", 
        "name": "ssh2_sftp_rmdir", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-rmdir", 
        "syntax": "bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_stat": {
        "descr": "Stats a file on the remote filesystem following any symbolic links.", 
        "name": "ssh2_sftp_stat", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-stat", 
        "syntax": "array ssh2_sftp_stat ( resource $sftp , string $path )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_symlink": {
        "descr": "Creates a symbolic link named link on the remote filesystem pointing to target.", 
        "name": "ssh2_sftp_symlink", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Target of the symbolic link.", 
                "name": "target"
            }
        ], 
        "path": "php/function.ssh2-sftp-symlink", 
        "syntax": "bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )", 
        "type": "Networking"
    }, 
    "ssh2_sftp_unlink": {
        "descr": "Deletes a file on the remote filesystem.", 
        "name": "ssh2_sftp_unlink", 
        "params": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-unlink", 
        "syntax": "bool ssh2_sftp_unlink ( resource $sftp , string $filename )", 
        "type": "Networking"
    }, 
    "ssh2_shell": {
        "descr": "Open a shell at the remote end and allocate a stream for it.", 
        "name": "ssh2_shell", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "term_type should correspond to one of the entries in the target system's /etc/termcap file.", 
                "name": "term_type"
            }, 
            {
                "descr": "env may be passed as an associative array of name/value pairs to set in the target environment.", 
                "name": "env"
            }, 
            {
                "descr": "Width of the virtual terminal.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the virtual terminal.", 
                "name": "height"
            }, 
            {
                "descr": "width_height_type should be one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.", 
                "name": "width_height_type"
            }
        ], 
        "path": "php/function.ssh2-shell", 
        "syntax": "resource ssh2_shell ( resource $session [, string $term_type = \"vanilla\" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )", 
        "type": "Networking"
    }, 
    "ssh2_tunnel": {
        "descr": "Open a socket stream to an arbitrary host/port by way of the currently connected SSH server.", 
        "name": "ssh2_tunnel", 
        "params": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-tunnel", 
        "syntax": "resource ssh2_tunnel ( resource $session , string $host , int $port )", 
        "type": "Networking"
    }, 
    "stat": {
        "descr": "Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink.", 
        "name": "stat", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.stat", 
        "syntax": "array stat ( string $filename )", 
        "type": "File System"
    }, 
    "stats_absolute_deviation": {
        "descr": "", 
        "name": "stats_absolute_deviation", 
        "params": [], 
        "path": "php/function.stats-absolute-deviation", 
        "syntax": "float stats_absolute_deviation ( array $a )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_beta": {
        "descr": "Method Cumulative distribution function (P) is calculated directly by code associated with the following reference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit Computation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18 (1993), 360-373. Computation of other parameters involve a search for a value that produces the desired value of P. The search relies on the monotonicity of P with the other parameter. Note The beta density is proportional to t^(A-1) * (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square distribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P + Q = 1.0. X -- Upper limit of integration of beta density. Input range: [0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0. A -- The first parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded by parameter number I if STATUS is negative. Lower search bound if STATUS is 1. Upper search bound if STATUS is 2.", 
        "name": "stats_cdf_beta", 
        "params": [
            {
                "descr": "Integer indicating which of the next four argument values is to be calculated from the others. ", 
                "name": "par1   par2   par3   which"
            }
        ], 
        "path": "php/function.stats-cdf-beta", 
        "syntax": "float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_binomial": {
        "descr": "", 
        "name": "stats_cdf_binomial", 
        "params": [], 
        "path": "php/function.stats-cdf-binomial", 
        "syntax": "float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_cauchy": {
        "descr": "", 
        "name": "stats_cdf_cauchy", 
        "params": [], 
        "path": "php/function.stats-cdf-cauchy", 
        "syntax": "float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_chisquare": {
        "descr": "", 
        "name": "stats_cdf_chisquare", 
        "params": [], 
        "path": "php/function.stats-cdf-chisquare", 
        "syntax": "float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_exponential": {
        "descr": "", 
        "name": "stats_cdf_exponential", 
        "params": [], 
        "path": "php/function.stats-cdf-exponential", 
        "syntax": "float stats_cdf_exponential ( float $par1 , float $par2 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_f": {
        "descr": "", 
        "name": "stats_cdf_f", 
        "params": [], 
        "path": "php/function.stats-cdf-f", 
        "syntax": "float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_gamma": {
        "descr": "", 
        "name": "stats_cdf_gamma", 
        "params": [], 
        "path": "php/function.stats-cdf-gamma", 
        "syntax": "float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_laplace": {
        "descr": "", 
        "name": "stats_cdf_laplace", 
        "params": [], 
        "path": "php/function.stats-cdf-laplace", 
        "syntax": "float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_logistic": {
        "descr": "", 
        "name": "stats_cdf_logistic", 
        "params": [], 
        "path": "php/function.stats-cdf-logistic", 
        "syntax": "float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_negative_binomial": {
        "descr": "", 
        "name": "stats_cdf_negative_binomial", 
        "params": [], 
        "path": "php/function.stats-cdf-negative-binomial", 
        "syntax": "float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_noncentral_chisquare": {
        "descr": "", 
        "name": "stats_cdf_noncentral_chisquare", 
        "params": [], 
        "path": "php/function.stats-cdf-noncentral-chisquare", 
        "syntax": "float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_noncentral_f": {
        "descr": "", 
        "name": "stats_cdf_noncentral_f", 
        "params": [], 
        "path": "php/function.stats-cdf-noncentral-f", 
        "syntax": "float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_poisson": {
        "descr": "", 
        "name": "stats_cdf_poisson", 
        "params": [], 
        "path": "php/function.stats-cdf-poisson", 
        "syntax": "float stats_cdf_poisson ( float $par1 , float $par2 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_t": {
        "descr": "", 
        "name": "stats_cdf_t", 
        "params": [], 
        "path": "php/function.stats-cdf-t", 
        "syntax": "float stats_cdf_t ( float $par1 , float $par2 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_uniform": {
        "descr": "", 
        "name": "stats_cdf_uniform", 
        "params": [], 
        "path": "php/function.stats-cdf-uniform", 
        "syntax": "float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_cdf_weibull": {
        "descr": "", 
        "name": "stats_cdf_weibull", 
        "params": [], 
        "path": "php/function.stats-cdf-weibull", 
        "syntax": "float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_covariance": {
        "descr": "", 
        "name": "stats_covariance", 
        "params": [], 
        "path": "php/function.stats-covariance", 
        "syntax": "float stats_covariance ( array $a , array $b )", 
        "type": "Mathematics"
    }, 
    "stats_den_uniform": {
        "descr": "", 
        "name": "stats_den_uniform", 
        "params": [], 
        "path": "php/function.stats-den-uniform", 
        "syntax": "float stats_den_uniform ( float $x , float $a , float $b )", 
        "type": "Mathematics"
    }, 
    "stats_dens_beta": {
        "descr": "", 
        "name": "stats_dens_beta", 
        "params": [], 
        "path": "php/function.stats-dens-beta", 
        "syntax": "float stats_dens_beta ( float $x , float $a , float $b )", 
        "type": "Mathematics"
    }, 
    "stats_dens_cauchy": {
        "descr": "", 
        "name": "stats_dens_cauchy", 
        "params": [], 
        "path": "php/function.stats-dens-cauchy", 
        "syntax": "float stats_dens_cauchy ( float $x , float $ave , float $stdev )", 
        "type": "Mathematics"
    }, 
    "stats_dens_chisquare": {
        "descr": "", 
        "name": "stats_dens_chisquare", 
        "params": [], 
        "path": "php/function.stats-dens-chisquare", 
        "syntax": "float stats_dens_chisquare ( float $x , float $dfr )", 
        "type": "Mathematics"
    }, 
    "stats_dens_exponential": {
        "descr": "", 
        "name": "stats_dens_exponential", 
        "params": [], 
        "path": "php/function.stats-dens-exponential", 
        "syntax": "float stats_dens_exponential ( float $x , float $scale )", 
        "type": "Mathematics"
    }, 
    "stats_dens_f": {
        "descr": "", 
        "name": "stats_dens_f", 
        "params": [], 
        "path": "php/function.stats-dens-f", 
        "syntax": "float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )", 
        "type": "Mathematics"
    }, 
    "stats_dens_gamma": {
        "descr": "", 
        "name": "stats_dens_gamma", 
        "params": [], 
        "path": "php/function.stats-dens-gamma", 
        "syntax": "float stats_dens_gamma ( float $x , float $shape , float $scale )", 
        "type": "Mathematics"
    }, 
    "stats_dens_laplace": {
        "descr": "", 
        "name": "stats_dens_laplace", 
        "params": [], 
        "path": "php/function.stats-dens-laplace", 
        "syntax": "float stats_dens_laplace ( float $x , float $ave , float $stdev )", 
        "type": "Mathematics"
    }, 
    "stats_dens_logistic": {
        "descr": "", 
        "name": "stats_dens_logistic", 
        "params": [], 
        "path": "php/function.stats-dens-logistic", 
        "syntax": "float stats_dens_logistic ( float $x , float $ave , float $stdev )", 
        "type": "Mathematics"
    }, 
    "stats_dens_negative_binomial": {
        "descr": "", 
        "name": "stats_dens_negative_binomial", 
        "params": [], 
        "path": "php/function.stats-dens-negative-binomial", 
        "syntax": "float stats_dens_negative_binomial ( float $x , float $n , float $pi )", 
        "type": "Mathematics"
    }, 
    "stats_dens_normal": {
        "descr": "", 
        "name": "stats_dens_normal", 
        "params": [], 
        "path": "php/function.stats-dens-normal", 
        "syntax": "float stats_dens_normal ( float $x , float $ave , float $stdev )", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_binomial": {
        "descr": "", 
        "name": "stats_dens_pmf_binomial", 
        "params": [], 
        "path": "php/function.stats-dens-pmf-binomial", 
        "syntax": "float stats_dens_pmf_binomial ( float $x , float $n , float $pi )", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_hypergeometric": {
        "descr": "", 
        "name": "stats_dens_pmf_hypergeometric", 
        "params": [], 
        "path": "php/function.stats-dens-pmf-hypergeometric", 
        "syntax": "float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_poisson": {
        "descr": "", 
        "name": "stats_dens_pmf_poisson", 
        "params": [], 
        "path": "php/function.stats-dens-pmf-poisson", 
        "syntax": "float stats_dens_pmf_poisson ( float $x , float $lb )", 
        "type": "Mathematics"
    }, 
    "stats_dens_t": {
        "descr": "", 
        "name": "stats_dens_t", 
        "params": [], 
        "path": "php/function.stats-dens-t", 
        "syntax": "float stats_dens_t ( float $x , float $dfr )", 
        "type": "Mathematics"
    }, 
    "stats_dens_weibull": {
        "descr": "", 
        "name": "stats_dens_weibull", 
        "params": [], 
        "path": "php/function.stats-dens-weibull", 
        "syntax": "float stats_dens_weibull ( float $x , float $a , float $b )", 
        "type": "Mathematics"
    }, 
    "stats_harmonic_mean": {
        "descr": "", 
        "name": "stats_harmonic_mean", 
        "params": [], 
        "path": "php/function.stats-harmonic-mean", 
        "syntax": "number stats_harmonic_mean ( array $a )", 
        "type": "Mathematics"
    }, 
    "stats_kurtosis": {
        "descr": "", 
        "name": "stats_kurtosis", 
        "params": [], 
        "path": "php/function.stats-kurtosis", 
        "syntax": "float stats_kurtosis ( array $a )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_beta": {
        "descr": "Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng.", 
        "name": "stats_rand_gen_beta", 
        "params": [], 
        "path": "php/function.stats-rand-gen-beta", 
        "syntax": "float stats_rand_gen_beta ( float $a , float $b )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_chisquare": {
        "descr": "", 
        "name": "stats_rand_gen_chisquare", 
        "params": [], 
        "path": "php/function.stats-rand-gen-chisquare", 
        "syntax": "float stats_rand_gen_chisquare ( float $df )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_exponential": {
        "descr": "", 
        "name": "stats_rand_gen_exponential", 
        "params": [], 
        "path": "php/function.stats-rand-gen-exponential", 
        "syntax": "float stats_rand_gen_exponential ( float $av )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_f": {
        "descr": "Generates a random deviate from the F (variance ratio) distribution with \"dfn\" degrees of freedom in the numerator and \"dfd\" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates.", 
        "name": "stats_rand_gen_f", 
        "params": [], 
        "path": "php/function.stats-rand-gen-f", 
        "syntax": "float stats_rand_gen_f ( float $dfn , float $dfd )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_funiform": {
        "descr": "", 
        "name": "stats_rand_gen_funiform", 
        "params": [], 
        "path": "php/function.stats-rand-gen-funiform", 
        "syntax": "float stats_rand_gen_funiform ( float $low , float $high )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_gamma": {
        "descr": "Generates random deviates from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).", 
        "name": "stats_rand_gen_gamma", 
        "params": [
            {
                "descr": "location parameter of Gamma distribution (a > 0).", 
                "name": "a"
            }, 
            {
                "descr": "shape parameter of Gamma distribution (r > 0).", 
                "name": "r"
            }
        ], 
        "path": "php/function.stats-rand-gen-gamma", 
        "syntax": "float stats_rand_gen_gamma ( float $a , float $r )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ibinomial": {
        "descr": "", 
        "name": "stats_rand_gen_ibinomial", 
        "params": [], 
        "path": "php/function.stats-rand-gen-ibinomial", 
        "syntax": "int stats_rand_gen_ibinomial ( int $n , float $pp )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ibinomial_negative": {
        "descr": "", 
        "name": "stats_rand_gen_ibinomial_negative", 
        "params": [], 
        "path": "php/function.stats-rand-gen-ibinomial-negative", 
        "syntax": "int stats_rand_gen_ibinomial_negative ( int $n , float $p )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_int": {
        "descr": "", 
        "name": "stats_rand_gen_int", 
        "params": [], 
        "path": "php/function.stats-rand-gen-int", 
        "syntax": "int stats_rand_gen_int ( void )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ipoisson": {
        "descr": "", 
        "name": "stats_rand_gen_ipoisson", 
        "params": [], 
        "path": "php/function.stats-rand-gen-ipoisson", 
        "syntax": "int stats_rand_gen_ipoisson ( float $mu )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_iuniform": {
        "descr": "", 
        "name": "stats_rand_gen_iuniform", 
        "params": [], 
        "path": "php/function.stats-rand-gen-iuniform", 
        "syntax": "int stats_rand_gen_iuniform ( int $low , int $high )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncenral_chisquare": {
        "descr": "", 
        "name": "stats_rand_gen_noncenral_chisquare", 
        "params": [], 
        "path": "php/function.stats-rand-gen-noncenral-chisquare", 
        "syntax": "float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncentral_f": {
        "descr": "", 
        "name": "stats_rand_gen_noncentral_f", 
        "params": [], 
        "path": "php/function.stats-rand-gen-noncentral-f", 
        "syntax": "float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncentral_t": {
        "descr": "", 
        "name": "stats_rand_gen_noncentral_t", 
        "params": [], 
        "path": "php/function.stats-rand-gen-noncentral-t", 
        "syntax": "float stats_rand_gen_noncentral_t ( float $df , float $xnonc )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_normal": {
        "descr": "", 
        "name": "stats_rand_gen_normal", 
        "params": [], 
        "path": "php/function.stats-rand-gen-normal", 
        "syntax": "float stats_rand_gen_normal ( float $av , float $sd )", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_t": {
        "descr": "", 
        "name": "stats_rand_gen_t", 
        "params": [], 
        "path": "php/function.stats-rand-gen-t", 
        "syntax": "float stats_rand_gen_t ( float $df )", 
        "type": "Mathematics"
    }, 
    "stats_rand_get_seeds": {
        "descr": "", 
        "name": "stats_rand_get_seeds", 
        "params": [], 
        "path": "php/function.stats-rand-get-seeds", 
        "syntax": "array stats_rand_get_seeds ( void )", 
        "type": "Mathematics"
    }, 
    "stats_rand_phrase_to_seeds": {
        "descr": "", 
        "name": "stats_rand_phrase_to_seeds", 
        "params": [], 
        "path": "php/function.stats-rand-phrase-to-seeds", 
        "syntax": "array stats_rand_phrase_to_seeds ( string $phrase )", 
        "type": "Mathematics"
    }, 
    "stats_rand_ranf": {
        "descr": "", 
        "name": "stats_rand_ranf", 
        "params": [], 
        "path": "php/function.stats-rand-ranf", 
        "syntax": "float stats_rand_ranf ( void )", 
        "type": "Mathematics"
    }, 
    "stats_rand_setall": {
        "descr": "", 
        "name": "stats_rand_setall", 
        "params": [], 
        "path": "php/function.stats-rand-setall", 
        "syntax": "void stats_rand_setall ( int $iseed1 , int $iseed2 )", 
        "type": "Mathematics"
    }, 
    "stats_skew": {
        "descr": "", 
        "name": "stats_skew", 
        "params": [], 
        "path": "php/function.stats-skew", 
        "syntax": "float stats_skew ( array $a )", 
        "type": "Mathematics"
    }, 
    "stats_standard_deviation": {
        "descr": "", 
        "name": "stats_standard_deviation", 
        "params": [], 
        "path": "php/function.stats-standard-deviation", 
        "syntax": "float stats_standard_deviation ( array $a [, bool $sample = false ] )", 
        "type": "Mathematics"
    }, 
    "stats_stat_binomial_coef": {
        "descr": "", 
        "name": "stats_stat_binomial_coef", 
        "params": [], 
        "path": "php/function.stats-stat-binomial-coef", 
        "syntax": "float stats_stat_binomial_coef ( int $x , int $n )", 
        "type": "Mathematics"
    }, 
    "stats_stat_correlation": {
        "descr": "", 
        "name": "stats_stat_correlation", 
        "params": [], 
        "path": "php/function.stats-stat-correlation", 
        "syntax": "float stats_stat_correlation ( array $arr1 , array $arr2 )", 
        "type": "Mathematics"
    }, 
    "stats_stat_gennch": {
        "descr": "", 
        "name": "stats_stat_gennch", 
        "params": [], 
        "path": "php/function.stats-stat-gennch", 
        "syntax": "float stats_stat_gennch ( int $n )", 
        "type": "Mathematics"
    }, 
    "stats_stat_independent_t": {
        "descr": "", 
        "name": "stats_stat_independent_t", 
        "params": [], 
        "path": "php/function.stats-stat-independent-t", 
        "syntax": "float stats_stat_independent_t ( array $arr1 , array $arr2 )", 
        "type": "Mathematics"
    }, 
    "stats_stat_innerproduct": {
        "descr": "", 
        "name": "stats_stat_innerproduct", 
        "params": [], 
        "path": "php/function.stats-stat-innerproduct", 
        "syntax": "float stats_stat_innerproduct ( array $arr1 , array $arr2 )", 
        "type": "Mathematics"
    }, 
    "stats_stat_noncentral_t": {
        "descr": "", 
        "name": "stats_stat_noncentral_t", 
        "params": [], 
        "path": "php/function.stats-stat-noncentral-t", 
        "syntax": "float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )", 
        "type": "Mathematics"
    }, 
    "stats_stat_paired_t": {
        "descr": "", 
        "name": "stats_stat_paired_t", 
        "params": [], 
        "path": "php/function.stats-stat-paired-t", 
        "syntax": "float stats_stat_paired_t ( array $arr1 , array $arr2 )", 
        "type": "Mathematics"
    }, 
    "stats_stat_percentile": {
        "descr": "", 
        "name": "stats_stat_percentile", 
        "params": [], 
        "path": "php/function.stats-stat-percentile", 
        "syntax": "float stats_stat_percentile ( float $df , float $xnonc )", 
        "type": "Mathematics"
    }, 
    "stats_stat_powersum": {
        "descr": "", 
        "name": "stats_stat_powersum", 
        "params": [], 
        "path": "php/function.stats-stat-powersum", 
        "syntax": "float stats_stat_powersum ( array $arr , float $power )", 
        "type": "Mathematics"
    }, 
    "stats_variance": {
        "descr": "", 
        "name": "stats_variance", 
        "params": [], 
        "path": "php/function.stats-variance", 
        "syntax": "float stats_variance ( array $a [, bool $sample = false ] )", 
        "type": "Mathematics"
    }, 
    "str_getcsv": {
        "descr": "Parses a string input for fields in CSV format and returns an array containing the fields read.", 
        "name": "str_getcsv", 
        "params": [
            {
                "descr": "The string to parse.", 
                "name": "input"
            }, 
            {
                "descr": "Set the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "Set the field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "Set the escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/function.str-getcsv", 
        "syntax": "array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '\"' [, string $escape = '\\\\' ]]] )", 
        "type": "String"
    }, 
    "str_ireplace": {
        "descr": "This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don't need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.", 
        "name": "str_ireplace", 
        "params": [
            {
                "descr": "The value being searched for, otherwise known as the needle. ", 
                "name": "search"
            }, 
            {
                "descr": "The replacement value that replaces found search values. ", 
                "name": "replace"
            }, 
            {
                "descr": "The string or array being searched and replaced on, otherwise known as the haystack. ", 
                "name": "subject"
            }, 
            {
                "descr": "If passed, this will be set to the number of replacements performed.", 
                "name": "count"
            }
        ], 
        "path": "php/function.str-ireplace", 
        "syntax": "mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )", 
        "type": "String"
    }, 
    "str_pad": {
        "descr": "This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.", 
        "name": "str_pad", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "input"
            }, 
            {
                "descr": "If the value of pad_length is negative, less than, or equal to the length of the input string, no padding takes place.", 
                "name": "pad_length"
            }, 
            {
                "descr": "Note:  The pad_string may be truncated if the required number of padding characters can't be evenly divided by the pad_string's length.", 
                "name": "pad_string"
            }, 
            {
                "descr": "Optional argument pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. ", 
                "name": "pad_type"
            }
        ], 
        "path": "php/function.str-pad", 
        "syntax": "string str_pad ( string $input , int $pad_length [, string $pad_string = \" \" [, int $pad_type = STR_PAD_RIGHT ]] )", 
        "type": "String"
    }, 
    "str_repeat": {
        "descr": "Returns input repeated multiplier times.", 
        "name": "str_repeat", 
        "params": [
            {
                "descr": "The string to be repeated.", 
                "name": "input"
            }, 
            {
                "descr": "Number of time the input string should be repeated. ", 
                "name": "multiplier"
            }
        ], 
        "path": "php/function.str-repeat", 
        "syntax": "string str_repeat ( string $input , int $multiplier )", 
        "type": "String"
    }, 
    "str_replace": {
        "descr": "This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.", 
        "name": "str_replace", 
        "params": [
            {
                "descr": "The value being searched for, otherwise known as the needle. ", 
                "name": "search"
            }, 
            {
                "descr": "The replacement value that replaces found search values. ", 
                "name": "replace"
            }, 
            {
                "descr": "The string or array being searched and replaced on, otherwise known as the haystack. ", 
                "name": "subject"
            }, 
            {
                "descr": "If passed, this will be set to the number of replacements performed.", 
                "name": "count"
            }
        ], 
        "path": "php/function.str-replace", 
        "syntax": "mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )", 
        "type": "String"
    }, 
    "str_rot13": {
        "descr": "Performs the ROT13 encoding on the str argument and returns the resulting string.", 
        "name": "str_rot13", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.str-rot13", 
        "syntax": "string str_rot13 ( string $str )", 
        "type": "String"
    }, 
    "str_shuffle": {
        "descr": "", 
        "name": "str_shuffle", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.str-shuffle", 
        "syntax": "string str_shuffle ( string $str )", 
        "type": "String"
    }, 
    "str_split": {
        "descr": "Converts a string to an array.", 
        "name": "str_split", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "Maximum length of the chunk.", 
                "name": "split_length"
            }
        ], 
        "path": "php/function.str-split", 
        "syntax": "array str_split ( string $string [, int $split_length = 1 ] )", 
        "type": "String"
    }, 
    "str_word_count": {
        "descr": "Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below.", 
        "name": "str_word_count", 
        "params": [
            {
                "descr": "The string", 
                "name": "string"
            }, 
            {
                "descr": "Specify the return value of this function. ", 
                "name": "format"
            }, 
            {
                "descr": "A list of additional characters which will be considered as 'word'", 
                "name": "charlist"
            }
        ], 
        "path": "php/function.str-word-count", 
        "syntax": "mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )", 
        "type": "String"
    }, 
    "strcasecmp": {
        "descr": "Binary safe case-insensitive string comparison.", 
        "name": "strcasecmp", 
        "params": [
            {
                "descr": "The first string", 
                "name": "str1"
            }, 
            {
                "descr": "The second string", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcasecmp", 
        "syntax": "int strcasecmp ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "strcmp": {
        "descr": "", 
        "name": "strcmp", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcmp", 
        "syntax": "int strcmp ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "strcoll": {
        "descr": "Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.", 
        "name": "strcoll", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcoll", 
        "syntax": "int strcoll ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "strcspn": {
        "descr": "Returns the length of the initial segment of str1 which does not contain any of the characters in str2.", 
        "name": "strcspn", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "The start position of the string to examine.", 
                "name": "start"
            }, 
            {
                "descr": "The length of the string to examine.", 
                "name": "length"
            }
        ], 
        "path": "php/function.strcspn", 
        "syntax": "int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )", 
        "type": "String"
    }, 
    "streamWrapper": {
        "descr": "", 
        "name": "streamWrapper", 
        "params": [], 
        "path": "php/class.streamwrapper", 
        "syntax": "__construct ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::__construct": {
        "descr": "Called when opening the stream wrapper, right before streamWrapper::stream_open().", 
        "name": "streamWrapper::__construct", 
        "params": [], 
        "path": "php/streamwrapper.construct", 
        "syntax": "streamWrapper::__construct ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::__destruct": {
        "descr": "Called when closing the stream wrapper, right before streamWrapper::stream_flush().", 
        "name": "streamWrapper::__destruct", 
        "params": [], 
        "path": "php/streamwrapper.destruct", 
        "syntax": "streamWrapper::__destruct ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_closedir": {
        "descr": "This method is called in response to closedir().", 
        "name": "streamWrapper::dir_closedir", 
        "params": [], 
        "path": "php/streamwrapper.dir-closedir", 
        "syntax": "public bool streamWrapper::dir_closedir ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_opendir": {
        "descr": "This method is called in response to opendir().", 
        "name": "streamWrapper::dir_opendir", 
        "params": [
            {
                "descr": "Specifies the URL that was passed to opendir(). ", 
                "name": "path"
            }, 
            {
                "descr": "Whether or not to enforce safe_mode (0x04).", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.dir-opendir", 
        "syntax": "public bool streamWrapper::dir_opendir ( string $path , int $options )", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_readdir": {
        "descr": "This method is called in response to readdir().", 
        "name": "streamWrapper::dir_readdir", 
        "params": [], 
        "path": "php/streamwrapper.dir-readdir", 
        "syntax": "public string streamWrapper::dir_readdir ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_rewinddir": {
        "descr": "This method is called in response to rewinddir().", 
        "name": "streamWrapper::dir_rewinddir", 
        "params": [], 
        "path": "php/streamwrapper.dir-rewinddir", 
        "syntax": "public bool streamWrapper::dir_rewinddir ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::mkdir": {
        "descr": "This method is called in response to mkdir().", 
        "name": "streamWrapper::mkdir", 
        "params": [
            {
                "descr": "Directory which should be created.", 
                "name": "path"
            }, 
            {
                "descr": "The value passed to mkdir().", 
                "name": "mode"
            }, 
            {
                "descr": "A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.mkdir", 
        "syntax": "public bool streamWrapper::mkdir ( string $path , int $mode , int $options )", 
        "type": "Streams"
    }, 
    "streamWrapper::rename": {
        "descr": "This method is called in response to rename().", 
        "name": "streamWrapper::rename", 
        "params": [
            {
                "descr": "The URL to the current file.", 
                "name": "path_from"
            }, 
            {
                "descr": "The URL which the path_from should be renamed to.", 
                "name": "path_to"
            }
        ], 
        "path": "php/streamwrapper.rename", 
        "syntax": "public bool streamWrapper::rename ( string $path_from , string $path_to )", 
        "type": "Streams"
    }, 
    "streamWrapper::rmdir": {
        "descr": "This method is called in response to rmdir().", 
        "name": "streamWrapper::rmdir", 
        "params": [
            {
                "descr": "The directory URL which should be removed.", 
                "name": "path"
            }, 
            {
                "descr": "A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.rmdir", 
        "syntax": "public bool streamWrapper::rmdir ( string $path , int $options )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_cast": {
        "descr": "This method is called in response to stream_select().", 
        "name": "streamWrapper::stream_cast", 
        "params": [
            {
                "descr": "Can be STREAM_CAST_FOR_SELECT when stream_select() is calling stream_cast() or STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.", 
                "name": "cast_as"
            }
        ], 
        "path": "php/streamwrapper.stream-cast", 
        "syntax": "public resource streamWrapper::stream_cast ( int $cast_as )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_close": {
        "descr": "This method is called in response to fclose().", 
        "name": "streamWrapper::stream_close", 
        "params": [], 
        "path": "php/streamwrapper.stream-close", 
        "syntax": "public void streamWrapper::stream_close ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_eof": {
        "descr": "This method is called in response to feof().", 
        "name": "streamWrapper::stream_eof", 
        "params": [], 
        "path": "php/streamwrapper.stream-eof", 
        "syntax": "public bool streamWrapper::stream_eof ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_flush": {
        "descr": "This method is called in response to fflush().", 
        "name": "streamWrapper::stream_flush", 
        "params": [], 
        "path": "php/streamwrapper.stream-flush", 
        "syntax": "public bool streamWrapper::stream_flush ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_lock": {
        "descr": "This method is called in response to flock(), when file_put_contents() (when flags contains LOCK_EX), stream_set_blocking() and when closing the stream (LOCK_UN).", 
        "name": "streamWrapper::stream_lock", 
        "params": [
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }
        ], 
        "path": "php/streamwrapper.stream-lock", 
        "syntax": "public bool streamWrapper::stream_lock ( int $operation )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_metadata": {
        "descr": "This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL:", 
        "name": "streamWrapper::stream_metadata", 
        "params": [
            {
                "descr": "The file path or URL to set metadata. ", 
                "name": "path"
            }, 
            {
                "descr": "One of: STREAM_META_TOUCH (The method was called in response to touch()) STREAM_META_OWNER_NAME (The method was called in response to chown() with string parameter) STREAM_META_OWNER (The method was called in response to chown()) STREAM_META_GROUP_NAME (The method was called in response to chgrp()) STREAM_META_GROUP (The method was called in response to chgrp()) STREAM_META_ACCESS (The method was called in response to chmod())", 
                "name": "option"
            }, 
            {
                "descr": "If option is STREAM_META_TOUCH: Array consisting of two arguments of the touch() function. ", 
                "name": "value"
            }
        ], 
        "path": "php/streamwrapper.stream-metadata", 
        "syntax": "public bool streamWrapper::stream_metadata ( string $path , int $option , mixed $value )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_open": {
        "descr": "This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).", 
        "name": "streamWrapper::stream_open", 
        "params": [
            {
                "descr": "Specifies the URL that was passed to the original function. ", 
                "name": "path"
            }, 
            {
                "descr": "The mode used to open the file, as detailed for fopen(). ", 
                "name": "mode"
            }, 
            {
                "descr": "Holds additional flags set by the streams API. ", 
                "name": "options"
            }, 
            {
                "descr": "If the path is opened successfully, and STREAM_USE_PATH is set in options, opened_path should be set to the full path of the file/resource that was actually opened.", 
                "name": "opened_path"
            }
        ], 
        "path": "php/streamwrapper.stream-open", 
        "syntax": "public bool streamWrapper::stream_open ( string $path , string $mode , int $options , string &$opened_path )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_read": {
        "descr": "This method is called in response to fread() and fgets().", 
        "name": "streamWrapper::stream_read", 
        "params": [
            {
                "descr": "How many bytes of data from the current position should be returned.", 
                "name": "count"
            }
        ], 
        "path": "php/streamwrapper.stream-read", 
        "syntax": "public string streamWrapper::stream_read ( int $count )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_seek": {
        "descr": "This method is called in response to fseek().", 
        "name": "streamWrapper::stream_seek", 
        "params": [
            {
                "descr": "The stream offset to seek to.", 
                "name": "offset"
            }, 
            {
                "descr": "Possible values: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/streamwrapper.stream-seek", 
        "syntax": "public bool streamWrapper::stream_seek ( int $offset , int $whence  = SEEK_SET )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_set_option": {
        "descr": "This method is called to set options on the stream.", 
        "name": "streamWrapper::stream_set_option", 
        "params": [
            {
                "descr": "One of: STREAM_OPTION_BLOCKING (The method was called in response to stream_set_blocking()) STREAM_OPTION_READ_TIMEOUT (The method was called in response to stream_set_timeout()) STREAM_OPTION_WRITE_BUFFER (The method was called in response to stream_set_write_buffer())", 
                "name": "option"
            }, 
            {
                "descr": "If option is STREAM_OPTION_BLOCKING: requested blocking mode (1 meaning block 0 not blocking). ", 
                "name": "arg1"
            }, 
            {
                "descr": "If option is STREAM_OPTION_BLOCKING: This option is not set. ", 
                "name": "arg2"
            }
        ], 
        "path": "php/streamwrapper.stream-set-option", 
        "syntax": "public bool streamWrapper::stream_set_option ( int $option , int $arg1 , int $arg2 )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_stat": {
        "descr": "This method is called in response to fstat().", 
        "name": "streamWrapper::stream_stat", 
        "params": [], 
        "path": "php/streamwrapper.stream-stat", 
        "syntax": "public array streamWrapper::stream_stat ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_tell": {
        "descr": "This method is called in response to fseek() to determine the current position.", 
        "name": "streamWrapper::stream_tell", 
        "params": [], 
        "path": "php/streamwrapper.stream-tell", 
        "syntax": "public int streamWrapper::stream_tell ( void )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_truncate": {
        "descr": "Will respond to truncation, e.g., through ftruncate().", 
        "name": "streamWrapper::stream_truncate", 
        "params": [
            {
                "descr": "The new size.", 
                "name": "new_size"
            }
        ], 
        "path": "php/streamwrapper.stream-truncate", 
        "syntax": "public bool streamWrapper::stream_truncate ( int $new_size )", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_write": {
        "descr": "This method is called in response to fwrite().", 
        "name": "streamWrapper::stream_write", 
        "params": [
            {
                "descr": "Should be stored into the underlying stream. ", 
                "name": "data"
            }
        ], 
        "path": "php/streamwrapper.stream-write", 
        "syntax": "public int streamWrapper::stream_write ( string $data )", 
        "type": "Streams"
    }, 
    "streamWrapper::unlink": {
        "descr": "This method is called in response to unlink().", 
        "name": "streamWrapper::unlink", 
        "params": [
            {
                "descr": "The file URL which should be deleted.", 
                "name": "path"
            }
        ], 
        "path": "php/streamwrapper.unlink", 
        "syntax": "public bool streamWrapper::unlink ( string $path )", 
        "type": "Streams"
    }, 
    "streamWrapper::url_stat": {
        "descr": "This method is called in response to all stat() related functions, such as:", 
        "name": "streamWrapper::url_stat", 
        "params": [
            {
                "descr": "The file path or URL to stat. Note that in the case of a URL, it must be a :// delimited URL. ", 
                "name": "path"
            }, 
            {
                "descr": "Holds additional flags set by the streams API. ", 
                "name": "flags"
            }
        ], 
        "path": "php/streamwrapper.url-stat", 
        "syntax": "public array streamWrapper::url_stat ( string $path , int $flags )", 
        "type": "Streams"
    }, 
    "stream_bucket_append": {
        "descr": "", 
        "name": "stream_bucket_append", 
        "params": [], 
        "path": "php/function.stream-bucket-append", 
        "syntax": "void stream_bucket_append ( resource $brigade , resource $bucket )", 
        "type": "Streams"
    }, 
    "stream_bucket_make_writeable": {
        "descr": "", 
        "name": "stream_bucket_make_writeable", 
        "params": [], 
        "path": "php/function.stream-bucket-make-writeable", 
        "syntax": "object stream_bucket_make_writeable ( resource $brigade )", 
        "type": "Streams"
    }, 
    "stream_bucket_new": {
        "descr": "", 
        "name": "stream_bucket_new", 
        "params": [], 
        "path": "php/function.stream-bucket-new", 
        "syntax": "object stream_bucket_new ( resource $stream , string $buffer )", 
        "type": "Streams"
    }, 
    "stream_bucket_prepend": {
        "descr": "This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter().", 
        "name": "stream_bucket_prepend", 
        "params": [
            {
                "descr": "brigade is a resource pointing to a bucket brigade which contains one or more bucket objects.", 
                "name": "brigade"
            }, 
            {
                "descr": "A bucket object.", 
                "name": "bucket"
            }
        ], 
        "path": "php/function.stream-bucket-prepend", 
        "syntax": "void stream_bucket_prepend ( resource $brigade , resource $bucket )", 
        "type": "Streams"
    }, 
    "stream_context_create": {
        "descr": "Creates and returns a stream context with any options supplied in options preset.", 
        "name": "stream_context_create", 
        "params": [
            {
                "descr": "Must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. ", 
                "name": "options"
            }, 
            {
                "descr": "Must be an associative array in the format $arr['parameter'] = $value. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-context-create", 
        "syntax": "resource stream_context_create ([ array $options [, array $params ]] )", 
        "type": "Streams"
    }, 
    "stream_context_get_default": {
        "descr": "", 
        "name": "stream_context_get_default", 
        "params": [
            {
                "descr": "options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-get-default", 
        "syntax": "resource stream_context_get_default ([ array $options ] )", 
        "type": "Streams"
    }, 
    "stream_context_get_options": {
        "descr": "", 
        "name": "stream_context_get_options", 
        "params": [
            {
                "descr": "The stream or context to get options from", 
                "name": "stream_or_context"
            }
        ], 
        "path": "php/function.stream-context-get-options", 
        "syntax": "array stream_context_get_options ( resource $stream_or_context )", 
        "type": "Streams"
    }, 
    "stream_context_get_params": {
        "descr": "Retrieves parameter and options information from the stream or context.", 
        "name": "stream_context_get_params", 
        "params": [
            {
                "descr": "A stream resource or a context resource", 
                "name": "stream_or_context"
            }
        ], 
        "path": "php/function.stream-context-get-params", 
        "syntax": "array stream_context_get_params ( resource $stream_or_context )", 
        "type": "Streams"
    }, 
    "stream_context_set_default": {
        "descr": "", 
        "name": "stream_context_set_default", 
        "params": [
            {
                "descr": "The options to set for the default context. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-set-default", 
        "syntax": "resource stream_context_set_default ( array $options )", 
        "type": "Streams"
    }, 
    "stream_context_set_option": {
        "descr": "", 
        "name": "stream_context_set_option", 
        "params": [
            {
                "descr": "The stream or context resource to apply the options to.", 
                "name": "stream_or_context"
            }, 
            {
                "descr": "The options to set for the default context. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-set-option", 
        "syntax": "bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )", 
        "type": "Streams"
    }, 
    "stream_context_set_params": {
        "descr": "Sets parameters on the specified context.", 
        "name": "stream_context_set_params", 
        "params": [
            {
                "descr": "The stream or context to apply the parameters too.", 
                "name": "stream_or_context"
            }, 
            {
                "descr": "An array of parameters to set.  Note:  params should be an associative array of the structure: $params['paramname'] = \"paramvalue\";.", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-context-set-params", 
        "syntax": "bool stream_context_set_params ( resource $stream_or_context , array $params )", 
        "type": "Streams"
    }, 
    "stream_copy_to_stream": {
        "descr": "Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.", 
        "name": "stream_copy_to_stream", 
        "params": [
            {
                "descr": "The source stream", 
                "name": "source"
            }, 
            {
                "descr": "The destination stream", 
                "name": "dest"
            }, 
            {
                "descr": "Maximum bytes to copy", 
                "name": "maxlength"
            }, 
            {
                "descr": "The offset where to start to copy data", 
                "name": "offset"
            }
        ], 
        "path": "php/function.stream-copy-to-stream", 
        "syntax": "int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )", 
        "type": "Streams"
    }, 
    "stream_encoding": {
        "descr": "", 
        "name": "stream_encoding", 
        "params": [], 
        "path": "php/function.stream-encoding", 
        "syntax": "bool stream_encoding ( resource $stream [, string $encoding ] )", 
        "type": "Streams"
    }, 
    "stream_filter_append": {
        "descr": "Adds filtername to the list of filters attached to stream.", 
        "name": "stream_filter_append", 
        "params": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The filter name.", 
                "name": "filtername"
            }, 
            {
                "descr": "By default, stream_filter_append() will attach the filter to the read filter chain if the file was opened for reading (i.e. ", 
                "name": "read_write"
            }, 
            {
                "descr": "This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-filter-append", 
        "syntax": "resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )", 
        "type": "Streams"
    }, 
    "stream_filter_prepend": {
        "descr": "Adds filtername to the list of filters attached to stream.", 
        "name": "stream_filter_prepend", 
        "params": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The filter name.", 
                "name": "filtername"
            }, 
            {
                "descr": "By default, stream_filter_prepend() will attach the filter to the read filter chain if the file was opened for reading (i.e. ", 
                "name": "read_write"
            }, 
            {
                "descr": "This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-filter-prepend", 
        "syntax": "resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )", 
        "type": "Streams"
    }, 
    "stream_filter_register": {
        "descr": "stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.).", 
        "name": "stream_filter_register", 
        "params": [
            {
                "descr": "The filter name to be registered.", 
                "name": "filtername"
            }, 
            {
                "descr": "To implement a filter, you need to define a class as an extension of php_user_filter with a number of member functions. ", 
                "name": "classname"
            }
        ], 
        "path": "php/function.stream-filter-register", 
        "syntax": "bool stream_filter_register ( string $filtername , string $classname )", 
        "type": "Streams"
    }, 
    "stream_filter_remove": {
        "descr": "Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.", 
        "name": "stream_filter_remove", 
        "params": [
            {
                "descr": "The stream filter to be removed.", 
                "name": "stream_filter"
            }
        ], 
        "path": "php/function.stream-filter-remove", 
        "syntax": "bool stream_filter_remove ( resource $stream_filter )", 
        "type": "Streams"
    }, 
    "stream_get_contents": {
        "descr": "Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.", 
        "name": "stream_get_contents", 
        "params": [
            {
                "descr": "A stream resource (e.g. returned from fopen())", 
                "name": "handle (resource)"
            }, 
            {
                "descr": "The maximum bytes to read. Defaults to -1 (read all the remaining buffer).", 
                "name": "maxlength (integer)"
            }, 
            {
                "descr": "Seek to the specified offset before reading. ", 
                "name": "offset (integer)"
            }
        ], 
        "path": "php/function.stream-get-contents", 
        "syntax": "string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )", 
        "type": "Streams"
    }, 
    "stream_get_filters": {
        "descr": "", 
        "name": "stream_get_filters", 
        "params": [], 
        "path": "php/function.stream-get-filters", 
        "syntax": "array stream_get_filters ( void )", 
        "type": "Streams"
    }, 
    "stream_get_line": {
        "descr": "Gets a line from the given handle.", 
        "name": "stream_get_line", 
        "params": [
            {
                "descr": "A valid file handle.", 
                "name": "handle"
            }, 
            {
                "descr": "The number of bytes to read from the handle.", 
                "name": "length"
            }, 
            {
                "descr": "An optional string delimiter.", 
                "name": "ending"
            }
        ], 
        "path": "php/function.stream-get-line", 
        "syntax": "string stream_get_line ( resource $handle , int $length [, string $ending ] )", 
        "type": "Streams"
    }, 
    "stream_get_meta_data": {
        "descr": "Returns information about an existing stream.", 
        "name": "stream_get_meta_data", 
        "params": [
            {
                "descr": "The stream can be any stream created by fopen(), fsockopen() and pfsockopen().", 
                "name": "stream"
            }
        ], 
        "path": "php/function.stream-get-meta-data", 
        "syntax": "array stream_get_meta_data ( resource $stream )", 
        "type": "Streams"
    }, 
    "stream_get_transports": {
        "descr": "", 
        "name": "stream_get_transports", 
        "params": [], 
        "path": "php/function.stream-get-transports", 
        "syntax": "array stream_get_transports ( void )", 
        "type": "Streams"
    }, 
    "stream_get_wrappers": {
        "descr": "Retrieve list of registered streams available on the running system.", 
        "name": "stream_get_wrappers", 
        "params": [], 
        "path": "php/function.stream-get-wrappers", 
        "syntax": "array stream_get_wrappers ( void )", 
        "type": "Streams"
    }, 
    "stream_is_local": {
        "descr": "Checks if a stream, or a URL, is a local one or not.", 
        "name": "stream_is_local", 
        "params": [
            {
                "descr": "The stream resource or URL to check.", 
                "name": "stream_or_url"
            }
        ], 
        "path": "php/function.stream-is-local", 
        "syntax": "bool stream_is_local ( mixed $stream_or_url )", 
        "type": "Streams"
    }, 
    "stream_notification_callback": {
        "descr": "A callable function, used by the notification context parameter, called during an event.", 
        "name": "stream_notification_callback", 
        "params": [
            {
                "descr": "One of the STREAM_NOTIFY_* notification constants.", 
                "name": "notification_code"
            }, 
            {
                "descr": "One of the STREAM_NOTIFY_SEVERITY_* notification constants.", 
                "name": "severity"
            }, 
            {
                "descr": "Passed if a descriptive message is available for the event.", 
                "name": "message"
            }, 
            {
                "descr": "Passed if a descriptive message code is available for the event. ", 
                "name": "message_code"
            }, 
            {
                "descr": "If applicable, the bytes_transferred will be populated.", 
                "name": "bytes_transferred"
            }, 
            {
                "descr": "If applicable, the bytes_max will be populated.", 
                "name": "bytes_max"
            }
        ], 
        "path": "php/function.stream-notification-callback", 
        "syntax": "void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )", 
        "type": "Streams"
    }, 
    "stream_resolve_include_path": {
        "descr": "Resolve filename against the include path according to the same rules as fopen()/include.", 
        "name": "stream_resolve_include_path", 
        "params": [
            {
                "descr": "The filename to resolve.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.stream-resolve-include-path", 
        "syntax": "string stream_resolve_include_path ( string $filename )", 
        "type": "Streams"
    }, 
    "stream_select": {
        "descr": "The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.", 
        "name": "stream_select", 
        "params": [
            {
                "descr": "The streams listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a stream resource is also ready on end-of-file, in which case an fread() will return a zero length string).", 
                "name": "read"
            }, 
            {
                "descr": "The streams listed in the write array will be watched to see if a write will not block.", 
                "name": "write"
            }, 
            {
                "descr": "The streams listed in the except array will be watched for high priority exceptional (\"out-of-band\") data arriving. ", 
                "name": "except"
            }, 
            {
                "descr": "The tv_sec and tv_usec together form the timeout parameter, tv_sec specifies the number of seconds while tv_usec the number of microseconds. ", 
                "name": "tv_sec"
            }, 
            {
                "descr": "See tv_sec description.", 
                "name": "tv_usec"
            }
        ], 
        "path": "php/function.stream-select", 
        "syntax": "int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )", 
        "type": "Streams"
    }, 
    "stream_set_blocking": {
        "descr": "Sets blocking or non-blocking mode on a stream.", 
        "name": "stream_set_blocking", 
        "params": [
            {
                "descr": "The stream.", 
                "name": "stream"
            }, 
            {
                "descr": "If mode is 0, the given stream will be switched to non-blocking mode, and if 1, it will be switched to blocking mode. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.stream-set-blocking", 
        "syntax": "bool stream_set_blocking ( resource $stream , int $mode )", 
        "type": "Streams"
    }, 
    "stream_set_chunk_size": {
        "descr": "Set the stream chunk size.", 
        "name": "stream_set_chunk_size", 
        "params": [
            {
                "descr": "The target stream.", 
                "name": "fp"
            }, 
            {
                "descr": "The desired new chunk size.", 
                "name": "chunk_size"
            }
        ], 
        "path": "php/function.stream-set-chunk-size", 
        "syntax": "int stream_set_chunk_size ( resource $fp , int $chunk_size )", 
        "type": "Streams"
    }, 
    "stream_set_read_buffer": {
        "descr": "Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations.", 
        "name": "stream_set_read_buffer", 
        "params": [
            {
                "descr": "The file pointer.", 
                "name": "stream"
            }, 
            {
                "descr": "The number of bytes to buffer. If buffer is 0 then read operations are unbuffered. ", 
                "name": "buffer"
            }
        ], 
        "path": "php/function.stream-set-read-buffer", 
        "syntax": "int stream_set_read_buffer ( resource $stream , int $buffer )", 
        "type": "Streams"
    }, 
    "stream_set_timeout": {
        "descr": "Sets the timeout value on stream, expressed in the sum of seconds and microseconds.", 
        "name": "stream_set_timeout", 
        "params": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The seconds part of the timeout to be set.", 
                "name": "seconds"
            }, 
            {
                "descr": "The microseconds part of the timeout to be set.", 
                "name": "microseconds"
            }
        ], 
        "path": "php/function.stream-set-timeout", 
        "syntax": "bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )", 
        "type": "Streams"
    }, 
    "stream_set_write_buffer": {
        "descr": "Sets the buffering for write operations on the given stream to buffer bytes.", 
        "name": "stream_set_write_buffer", 
        "params": [
            {
                "descr": "The file pointer.", 
                "name": "stream"
            }, 
            {
                "descr": "The number of bytes to buffer. If buffer is 0 then write operations are unbuffered. ", 
                "name": "buffer"
            }
        ], 
        "path": "php/function.stream-set-write-buffer", 
        "syntax": "int stream_set_write_buffer ( resource $stream , int $buffer )", 
        "type": "Streams"
    }, 
    "stream_socket_accept": {
        "descr": "Accept a connection on a socket previously created by stream_socket_server().", 
        "name": "stream_socket_accept", 
        "params": [
            {
                "descr": "The server socket to accept a connection from.", 
                "name": "server_socket"
            }, 
            {
                "descr": "Override the default socket accept timeout. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Will be set to the name (address) of the client which connected, if included and available from the selected transport. ", 
                "name": "peername"
            }
        ], 
        "path": "php/function.stream-socket-accept", 
        "syntax": "resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get(\"default_socket_timeout\") [, string &$peername ]] )", 
        "type": "Streams"
    }, 
    "stream_socket_client": {
        "descr": "Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem.", 
        "name": "stream_socket_client", 
        "params": [
            {
                "descr": "Address to the socket to connect to.", 
                "name": "remote_socket"
            }, 
            {
                "descr": "Will be set to the system level error number if connection fails.", 
                "name": "errno"
            }, 
            {
                "descr": "Will be set to the system level error message if the connection fails.", 
                "name": "errstr"
            }, 
            {
                "descr": "Number of seconds until the connect() system call should timeout. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Bitmask field which may be set to any combination of connection flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.stream-socket-client", 
        "syntax": "resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )", 
        "type": "Streams"
    }, 
    "stream_socket_enable_crypto": {
        "descr": "", 
        "name": "stream_socket_enable_crypto", 
        "params": [
            {
                "descr": "The stream resource.", 
                "name": "stream"
            }, 
            {
                "descr": "Enable/disable cryptography on the stream.", 
                "name": "enable"
            }, 
            {
                "descr": "Setup encryption on the stream. ", 
                "name": "crypto_type"
            }, 
            {
                "descr": "Seed the stream with settings from session_stream.", 
                "name": "session_stream"
            }
        ], 
        "path": "php/function.stream-socket-enable-crypto", 
        "syntax": "mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )", 
        "type": "Streams"
    }, 
    "stream_socket_get_name": {
        "descr": "Returns the local or remote name of a given socket connection.", 
        "name": "stream_socket_get_name", 
        "params": [
            {
                "descr": "The socket to get the name of.", 
                "name": "handle"
            }, 
            {
                "descr": "If set to TRUE the remote socket name will be returned, if set to FALSE the local socket name will be returned.", 
                "name": "want_peer"
            }
        ], 
        "path": "php/function.stream-socket-get-name", 
        "syntax": "string stream_socket_get_name ( resource $handle , bool $want_peer )", 
        "type": "Streams"
    }, 
    "stream_socket_pair": {
        "descr": "stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).", 
        "name": "stream_socket_pair", 
        "params": [
            {
                "descr": "The protocol family to be used: STREAM_PF_INET, STREAM_PF_INET6 or STREAM_PF_UNIX", 
                "name": "domain"
            }, 
            {
                "descr": "The type of communication to be used: STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM", 
                "name": "type"
            }, 
            {
                "descr": "The protocol to be used: STREAM_IPPROTO_ICMP, STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.stream-socket-pair", 
        "syntax": "array stream_socket_pair ( int $domain , int $type , int $protocol )", 
        "type": "Streams"
    }, 
    "stream_socket_recvfrom": {
        "descr": "stream_socket_recvfrom() accepts data from a remote socket up to length bytes.", 
        "name": "stream_socket_recvfrom", 
        "params": [
            {
                "descr": "The remote socket.", 
                "name": "socket"
            }, 
            {
                "descr": "The number of bytes to receive from the socket.", 
                "name": "length"
            }, 
            {
                "descr": "The value of flags can be any combination of the following: Possible values for flags STREAM_OOB  Process OOB (out-of-band) data. ", 
                "name": "flags"
            }, 
            {
                "descr": "If address is provided it will be populated with the address of the remote socket.", 
                "name": "address"
            }
        ], 
        "path": "php/function.stream-socket-recvfrom", 
        "syntax": "string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )", 
        "type": "Streams"
    }, 
    "stream_socket_sendto": {
        "descr": "Sends the specified data through the socket.", 
        "name": "stream_socket_sendto", 
        "params": [
            {
                "descr": "The socket to send data to.", 
                "name": "socket"
            }, 
            {
                "descr": "The data to be sent.", 
                "name": "data"
            }, 
            {
                "descr": "The value of flags can be any combination of the following: possible values for flags STREAM_OOB  Process OOB (out-of-band) data.", 
                "name": "flags"
            }, 
            {
                "descr": "The address specified when the socket stream was created will be used unless an alternate address is specified in address. ", 
                "name": "address"
            }
        ], 
        "path": "php/function.stream-socket-sendto", 
        "syntax": "int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )", 
        "type": "Streams"
    }, 
    "stream_socket_server": {
        "descr": "Creates a stream or datagram socket on the specified local_socket.", 
        "name": "stream_socket_server", 
        "params": [
            {
                "descr": "The type of socket created is determined by the transport specified using standard URL formatting: transport://target. ", 
                "name": "local_socket"
            }, 
            {
                "descr": "If the optional errno and errstr arguments are present they will be set to indicate the actual system level error that occurred in the system-level socket(), bind(), and listen() calls. ", 
                "name": "errno"
            }, 
            {
                "descr": "See errno description.", 
                "name": "errstr"
            }, 
            {
                "descr": "A bitmask field which may be set to any combination of socket creation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.stream-socket-server", 
        "syntax": "resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )", 
        "type": "Streams"
    }, 
    "stream_socket_shutdown": {
        "descr": "Shutdowns (partially or not) a full-duplex connection.", 
        "name": "stream_socket_shutdown", 
        "params": [
            {
                "descr": "An open stream (opened with stream_socket_client(), for example)", 
                "name": "stream"
            }, 
            {
                "descr": "One of the following constants: STREAM_SHUT_RD (disable further receptions), STREAM_SHUT_WR (disable further transmissions) or STREAM_SHUT_RDWR (disable further receptions and transmissions).", 
                "name": "how"
            }
        ], 
        "path": "php/function.stream-socket-shutdown", 
        "syntax": "bool stream_socket_shutdown ( resource $stream , int $how )", 
        "type": "Streams"
    }, 
    "stream_supports_lock": {
        "descr": "Tells whether the stream supports locking through flock().", 
        "name": "stream_supports_lock", 
        "params": [
            {
                "descr": "The stream to check.", 
                "name": "stream"
            }
        ], 
        "path": "php/function.stream-supports-lock", 
        "syntax": "bool stream_supports_lock ( resource $stream )", 
        "type": "Streams"
    }, 
    "stream_wrapper_register": {
        "descr": "Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.).", 
        "name": "stream_wrapper_register", 
        "params": [
            {
                "descr": "The wrapper name to be registered.", 
                "name": "protocol"
            }, 
            {
                "descr": "The classname which implements the protocol.", 
                "name": "classname"
            }, 
            {
                "descr": "Should be set to STREAM_IS_URL if protocol is a URL protocol. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.stream-wrapper-register", 
        "syntax": "bool stream_wrapper_register ( string $protocol , string $classname [, int $flags  = 0 ] )", 
        "type": "Streams"
    }, 
    "stream_wrapper_restore": {
        "descr": "Restores a built-in wrapper previously unregistered with stream_wrapper_unregister().", 
        "name": "stream_wrapper_restore", 
        "params": [], 
        "path": "php/function.stream-wrapper-restore", 
        "syntax": "bool stream_wrapper_restore ( string $protocol )", 
        "type": "Streams"
    }, 
    "stream_wrapper_unregister": {
        "descr": "Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().", 
        "name": "stream_wrapper_unregister", 
        "params": [], 
        "path": "php/function.stream-wrapper-unregister", 
        "syntax": "bool stream_wrapper_unregister ( string $protocol )", 
        "type": "Streams"
    }, 
    "strftime": {
        "descr": "Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale().", 
        "name": "strftime", 
        "params": [
            {
                "descr": "The following characters are recognized in the format parameter string format Description Example returned values Day --- --- %a An abbreviated textual representation of the day Sun through Sat %A A full textual representation of the day Sunday through Saturday %d Two-digit day of the month (with leading zeros) 01 to 31 %e  Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.   1 to 31 %j Day of the year, 3 digits with leading zeros 001 to 366 %u ISO-8601 numeric representation of the day of the week 1 (for Monday) though 7 (for Sunday) %w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) Week --- --- %U Week number of the given year, starting with the first Sunday as the first week 13 (for the 13th full week of the year) %V ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week 01 through 53 (where 53 accounts for an overlapping week) %W A numeric representation of the week of the year, starting with the first Monday as the first week 46 (for the 46th week of the year beginning with a Monday) Month --- --- %b Abbreviated month name, based on the locale Jan through Dec %B Full month name, based on the locale January through December %h Abbreviated month name, based on the locale (an alias of %b) Jan through Dec %m Two digit representation of the month 01 (for January) through 12 (for December) Year --- --- %C Two digit representation of the century (year divided by 100, truncated to an integer) 19 for the 20th Century %g Two digit representation of the year going by ISO-8601:1988 standards (see %V) Example: 09 for the week of January 6, 2009 %G The full four-digit version of %g Example: 2008 for the week of January 3, 2009 %y Two digit representation of the year Example: 09 for 2009, 79 for 1979 %Y Four digit representation for the year Example: 2038 Time --- --- %H Two digit representation of the hour in 24-hour format 00 through 23 %k Two digit representation of the hour in 24-hour format, with a space preceding single digits  0 through 23 %I Two digit representation of the hour in 12-hour format 01 through 12 %l (lower-case 'L') Hour in 12-hour format, with a space preceding single digits  1 through 12 %M Two digit representation of the minute 00 through 59 %p UPPER-CASE 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23 %P lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23 %r Same as \"%I:%M:%S %p\" Example: 09:34:17 PM for 21:34:17 %R Same as \"%H:%M\" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S Two digit representation of the second 00 through 59 %T Same as \"%H:%M:%S\" Example: 21:34:17 for 09:34:17 PM %X Preferred time representation based on locale, without the date Example: 03:59:16 or 15:59:16 %z The time zone offset. Not implemented as described on Windows. See below for more information. Example: -0500 for US Eastern Time %Z The time zone abbreviation. Not implemented as described on Windows. See below for more information. Example: EST for Eastern Time Time and Date Stamps --- --- %c Preferred date and time stamp based on locale Example: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D Same as \"%m/%d/%y\" Example: 02/05/09 for February 5, 2009 %F Same as \"%Y-%m-%d\" (commonly used in database datestamps) Example: 2009-02-05 for February 5, 2009 %s Unix Epoch Time timestamp (same as the time() function) Example: 305815200 for September 10, 1979 08:40:00 AM %x Preferred date representation based on locale, without the time Example: 02/05/09 for February 5, 2009 Miscellaneous --- --- %n A newline character (\"\\n\") --- %t A Tab character (\"\\t\") --- %% A literal percentage character (\"%\") ---  Maximum length of this parameter is 1023 characters.  Warning  Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1. As a result, %u may not function as described in this manual.   Warning  Windows only:   The %e modifier is not supported in the Windows implementation of this function. To achieve this value, the %#d modifier can be used instead. The example below illustrates how to write a cross platform compatible function.   The %z and %Z modifiers both return the time zone name instead of the offset or abbreviation.   Warning  Mac OS X only: The %P modifier is not supported in the Mac OS X implementation of this function.", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.strftime", 
        "syntax": "string strftime ( string $format [, int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "strip_tags": {
        "descr": "This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.", 
        "name": "strip_tags", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can use the optional second parameter to specify tags which should not be stripped. ", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.strip-tags", 
        "syntax": "string strip_tags ( string $str [, string $allowable_tags ] )", 
        "type": "String"
    }, 
    "stripcslashes": {
        "descr": "Returns a string with backslashes stripped off. Recognizes C-like \\n, \\r ..., octal and hexadecimal representation.", 
        "name": "stripcslashes", 
        "params": [
            {
                "descr": "The string to be unescaped.", 
                "name": "str"
            }
        ], 
        "path": "php/function.stripcslashes", 
        "syntax": "string stripcslashes ( string $str )", 
        "type": "String"
    }, 
    "stripos": {
        "descr": "Find the numeric position of the first occurrence of needle in the haystack string.", 
        "name": "stripos", 
        "params": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "Note that the needle may be a string of one or more characters. ", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.stripos", 
        "syntax": "int stripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "String"
    }, 
    "stripslashes": {
        "descr": "Un-quotes a quoted string.", 
        "name": "stripslashes", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.stripslashes", 
        "syntax": "string stripslashes ( string $str )", 
        "type": "String"
    }, 
    "stristr": {
        "descr": "Returns all of haystack starting from and including the first occurrence of needle to the end.", 
        "name": "stristr", 
        "params": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, stristr() returns the part of the haystack before the first occurrence of the needle (excluding needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.stristr", 
        "syntax": "string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )", 
        "type": "String"
    }, 
    "strlen": {
        "descr": "Returns the length of the given string.", 
        "name": "strlen", 
        "params": [
            {
                "descr": "The string being measured for length.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strlen", 
        "syntax": "int strlen ( string $string )", 
        "type": "String"
    }, 
    "strnatcasecmp": {
        "descr": "This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool's \u00bb Natural Order String Comparison page.", 
        "name": "strnatcasecmp", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strnatcasecmp", 
        "syntax": "int strnatcasecmp ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "strnatcmp": {
        "descr": "This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a \"natural ordering\". Note that this comparison is case sensitive.", 
        "name": "strnatcmp", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strnatcmp", 
        "syntax": "int strnatcmp ( string $str1 , string $str2 )", 
        "type": "String"
    }, 
    "strncasecmp": {
        "descr": "This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.", 
        "name": "strncasecmp", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "The length of strings to be used in the comparison.", 
                "name": "len"
            }
        ], 
        "path": "php/function.strncasecmp", 
        "syntax": "int strncasecmp ( string $str1 , string $str2 , int $len )", 
        "type": "String"
    }, 
    "strncmp": {
        "descr": "This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.", 
        "name": "strncmp", 
        "params": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "Number of characters to use in the comparison.", 
                "name": "len"
            }
        ], 
        "path": "php/function.strncmp", 
        "syntax": "int strncmp ( string $str1 , string $str2 , int $len )", 
        "type": "String"
    }, 
    "strpbrk": {
        "descr": "strpbrk() searches the haystack string for a char_list.", 
        "name": "strpbrk", 
        "params": [
            {
                "descr": "The string where char_list is looked for.", 
                "name": "haystack"
            }, 
            {
                "descr": "This parameter is case sensitive.", 
                "name": "char_list"
            }
        ], 
        "path": "php/function.strpbrk", 
        "syntax": "string strpbrk ( string $haystack , string $char_list )", 
        "type": "String"
    }, 
    "strpos": {
        "descr": "Find the numeric position of the first occurrence of needle in the haystack string.", 
        "name": "strpos", 
        "params": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strpos", 
        "syntax": "mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )", 
        "type": "String"
    }, 
    "strptime": {
        "descr": "strptime() returns an array with the date parsed, or FALSE on error.", 
        "name": "strptime", 
        "params": [
            {
                "descr": "The string to parse (e.g. returned from strftime()).", 
                "name": "date (string)"
            }, 
            {
                "descr": "The format used in date (e.g. the same as used in strftime()). ", 
                "name": "format (string)"
            }
        ], 
        "path": "php/function.strptime", 
        "syntax": "array strptime ( string $date , string $format )", 
        "type": "Date and Time"
    }, 
    "strrchr": {
        "descr": "This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.", 
        "name": "strrchr", 
        "params": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle contains more than one character, only the first is used. ", 
                "name": "needle"
            }
        ], 
        "path": "php/function.strrchr", 
        "syntax": "string strrchr ( string $haystack , mixed $needle )", 
        "type": "String"
    }, 
    "strrev": {
        "descr": "Returns string, reversed.", 
        "name": "strrev", 
        "params": [
            {
                "descr": "The string to be reversed.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strrev", 
        "syntax": "string strrev ( string $string )", 
        "type": "String"
    }, 
    "strripos": {
        "descr": "Find the numeric position of the last occurrence of needle in the haystack string.", 
        "name": "strripos", 
        "params": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strripos", 
        "syntax": "int strripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "String"
    }, 
    "strrpos": {
        "descr": "Find the numeric position of the last occurrence of needle in the haystack string.", 
        "name": "strrpos", 
        "params": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strrpos", 
        "syntax": "int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "type": "String"
    }, 
    "strspn": {
        "descr": "Finds the length of the initial segment of subject that contains only characters from mask.", 
        "name": "strspn", 
        "params": [
            {
                "descr": "The string to examine.", 
                "name": "subject"
            }, 
            {
                "descr": "The list of allowable characters.", 
                "name": "mask"
            }, 
            {
                "descr": "The position in subject to start searching. ", 
                "name": "start"
            }, 
            {
                "descr": "The length of the segment from subject to examine. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.strspn", 
        "syntax": "int strspn ( string $subject , string $mask [, int $start [, int $length ]] )", 
        "type": "String"
    }, 
    "strstr": {
        "descr": "Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack.", 
        "name": "strstr", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.strstr", 
        "syntax": "string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )", 
        "type": "String"
    }, 
    "strtok": {
        "descr": "strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like \"This is an example string\" you could tokenize this string into its individual words by using the space character as the token.", 
        "name": "strtok", 
        "params": [
            {
                "descr": "The string being split up into smaller strings (tokens).", 
                "name": "str"
            }, 
            {
                "descr": "The delimiter used when splitting up str.", 
                "name": "token"
            }
        ], 
        "path": "php/function.strtok", 
        "syntax": "string strtok ( string $str , string $token )", 
        "type": "String"
    }, 
    "strtolower": {
        "descr": "Returns string with all alphabetic characters converted to lowercase.", 
        "name": "strtolower", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.strtolower", 
        "syntax": "string strtolower ( string $str )", 
        "type": "String"
    }, 
    "strtotime": {
        "descr": "", 
        "name": "strtotime", 
        "params": [
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats.", 
                "name": "time"
            }, 
            {
                "descr": "The timestamp which is used as a base for the calculation of relative dates.", 
                "name": "now"
            }
        ], 
        "path": "php/function.strtotime", 
        "syntax": "int strtotime ( string $time [, int $now = time() ] )", 
        "type": "Date and Time"
    }, 
    "strtoupper": {
        "descr": "Returns string with all alphabetic characters converted to uppercase.", 
        "name": "strtoupper", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strtoupper", 
        "syntax": "string strtoupper ( string $string )", 
        "type": "String"
    }, 
    "strtr": {
        "descr": "If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments.", 
        "name": "strtr", 
        "params": [
            {
                "descr": "The string being translated.", 
                "name": "str"
            }, 
            {
                "descr": "The string being translated to to.", 
                "name": "from"
            }, 
            {
                "descr": "The string replacing from.", 
                "name": "to"
            }, 
            {
                "descr": "The replace_pairs parameter may be used instead of to and from, in which case it's an array in the form array('from' => 'to', ...).", 
                "name": "replace_pairs"
            }
        ], 
        "path": "php/function.strtr", 
        "syntax": "string strtr ( string $str , string $from , string $to )", 
        "type": "String"
    }, 
    "strval": {
        "descr": "", 
        "name": "strval", 
        "params": [
            {
                "descr": "The variable that is being converted to a string. ", 
                "name": "var"
            }
        ], 
        "path": "php/function.strval", 
        "syntax": "string strval ( mixed $var )", 
        "type": "Variables"
    }, 
    "substr": {
        "descr": "Returns the portion of string specified by the start and length parameters.", 
        "name": "substr", 
        "params": [
            {
                "descr": "The input string. Must be one character or longer.", 
                "name": "string"
            }, 
            {
                "descr": "If start is non-negative, the returned string will start at the start'th position in string, counting from zero. ", 
                "name": "start"
            }, 
            {
                "descr": "If length is given and is positive, the string returned will contain at most length characters beginning from start (depending on the length of string). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr", 
        "syntax": "string substr ( string $string , int $start [, int $length ] )", 
        "type": "String"
    }, 
    "substr_compare": {
        "descr": "substr_compare() compares main_str from position offset with str up to length characters.", 
        "name": "substr_compare", 
        "params": [
            {
                "descr": "The main string being compared.", 
                "name": "main_str"
            }, 
            {
                "descr": "The secondary string being compared.", 
                "name": "str"
            }, 
            {
                "descr": "The start position for the comparison. ", 
                "name": "offset"
            }, 
            {
                "descr": "The length of the comparison. The default value is the largest of the length of the str compared to the length of main_str less the offset.", 
                "name": "length"
            }, 
            {
                "descr": "If case_insensitivity is TRUE, comparison is case insensitive.", 
                "name": "case_insensitivity"
            }
        ], 
        "path": "php/function.substr-compare", 
        "syntax": "int substr_compare ( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = false ]] )", 
        "type": "String"
    }, 
    "substr_count": {
        "descr": "substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive.", 
        "name": "substr_count", 
        "params": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "The substring to search for", 
                "name": "needle"
            }, 
            {
                "descr": "The offset where to start counting", 
                "name": "offset"
            }, 
            {
                "descr": "The maximum length after the specified offset to search for the substring. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr-count", 
        "syntax": "int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )", 
        "type": "String"
    }, 
    "substr_replace": {
        "descr": "substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.", 
        "name": "substr_replace", 
        "params": [
            {
                "descr": "The input string.   An array of strings can be provided, in which case the replacements will occur on each string in turn. ", 
                "name": "string"
            }, 
            {
                "descr": "The replacement string.", 
                "name": "replacement"
            }, 
            {
                "descr": "If start is positive, the replacing will begin at the start'th offset into string. ", 
                "name": "start"
            }, 
            {
                "descr": "If given and is positive, it represents the length of the portion of string which is to be replaced. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr-replace", 
        "syntax": "mixed substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] )", 
        "type": "String"
    }, 
    "symlink": {
        "descr": "symlink() creates a symbolic link to the existing target with the specified name link.", 
        "name": "symlink", 
        "params": [
            {
                "descr": "Target of the link.", 
                "name": "target"
            }, 
            {
                "descr": "The link name.", 
                "name": "link"
            }
        ], 
        "path": "php/function.symlink", 
        "syntax": "bool symlink ( string $target , string $link )", 
        "type": "File System"
    }, 
    "sys_get_temp_dir": {
        "descr": "Returns the path of the directory PHP stores temporary files in by default.", 
        "name": "sys_get_temp_dir", 
        "params": [], 
        "path": "php/function.sys-get-temp-dir", 
        "syntax": "string sys_get_temp_dir ( void )", 
        "type": "Language"
    }, 
    "sys_getloadavg": {
        "descr": "Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.", 
        "name": "sys_getloadavg", 
        "params": [], 
        "path": "php/function.sys-getloadavg", 
        "syntax": "array sys_getloadavg ( void )", 
        "type": "Language"
    }, 
    "syslog": {
        "descr": "syslog() generates a log message that will be distributed by the system logger.", 
        "name": "syslog", 
        "params": [
            {
                "descr": "priority is a combination of the facility and the level. ", 
                "name": "priority"
            }, 
            {
                "descr": "The message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno.", 
                "name": "message"
            }
        ], 
        "path": "php/function.syslog", 
        "syntax": "bool syslog ( int $priority , string $message )", 
        "type": "Networking"
    }, 
    "system": {
        "descr": "system() is just like the C version of the function in that it executes the given command and outputs the result.", 
        "name": "system", 
        "params": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the return_var argument is present, then the return status of the executed command will be written to this variable.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.system", 
        "syntax": "string system ( string $command [, int &$return_var ] )", 
        "type": "Process Control"
    }, 
    "taint": {
        "descr": "Make a string tainted. This is used for testing purpose only.", 
        "name": "taint", 
        "params": [], 
        "path": "php/function.taint", 
        "syntax": "bool taint ( string &$string [, string $... ] )", 
        "type": "String"
    }, 
    "tan": {
        "descr": "tan() returns the tangent of the arg parameter. The arg parameter is in radians.", 
        "name": "tan", 
        "params": [
            {
                "descr": "The argument to process in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.tan", 
        "syntax": "float tan ( float $arg )", 
        "type": "Mathematics"
    }, 
    "tanh": {
        "descr": "Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).", 
        "name": "tanh", 
        "params": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.tanh", 
        "syntax": "float tanh ( float $arg )", 
        "type": "Mathematics"
    }, 
    "tempnam": {
        "descr": "Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.", 
        "name": "tempnam", 
        "params": [
            {
                "descr": "The directory where the temporary filename will be created.", 
                "name": "dir"
            }, 
            {
                "descr": "The prefix of the generated temporary filename. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.tempnam", 
        "syntax": "string tempnam ( string $dir , string $prefix )", 
        "type": "File System"
    }, 
    "textdomain": {
        "descr": "This function sets the domain to search within when calls are made to gettext(), usually the named after an application.", 
        "name": "textdomain", 
        "params": [
            {
                "descr": "The new message domain, or NULL to get the current setting without changing it", 
                "name": "text_domain"
            }
        ], 
        "path": "php/function.textdomain", 
        "syntax": "string textdomain ( string $text_domain )", 
        "type": "Encoding"
    }, 
    "tidy": {
        "descr": "", 
        "name": "tidy", 
        "params": [], 
        "path": "php/class.tidy", 
        "syntax": "tidyNode body ( void )", 
        "type": "HTML"
    }, 
    "tidy::$errorBuffer": {
        "descr": "Returns warnings and errors which occurred parsing the specified document.", 
        "name": "tidy::$errorBuffer", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "tidy"
            }
        ], 
        "path": "php/tidy.props.errorbuffer", 
        "syntax": "string tidy_get_error_buffer ( tidy $tidy )", 
        "type": "HTML"
    }, 
    "tidy::__construct": {
        "descr": "Constructs a new tidy object.", 
        "name": "tidy::__construct", 
        "params": [
            {
                "descr": "If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.construct", 
        "syntax": "tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )", 
        "type": "HTML"
    }, 
    "tidy::body": {
        "descr": "Returns a tidyNode object starting from the <body> tag of the tidy parse tree.", 
        "name": "tidy::body", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.body", 
        "syntax": "tidyNode tidy::body ( void )", 
        "type": "HTML"
    }, 
    "tidy::cleanRepair": {
        "descr": "This function cleans and repairs the given tidy object.", 
        "name": "tidy::cleanRepair", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.cleanrepair", 
        "syntax": "bool tidy::cleanRepair ( void )", 
        "type": "HTML"
    }, 
    "tidy::diagnose": {
        "descr": "Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.", 
        "name": "tidy::diagnose", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.diagnose", 
        "syntax": "bool tidy::diagnose ( void )", 
        "type": "HTML"
    }, 
    "tidy::getConfig": {
        "descr": "Gets the list of the configuration options in use by the given tidy object.", 
        "name": "tidy::getConfig", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.getconfig", 
        "syntax": "array tidy::getConfig ( void )", 
        "type": "HTML"
    }, 
    "tidy::getHtmlVer": {
        "descr": "Returns the detected HTML version for the specified tidy object.", 
        "name": "tidy::getHtmlVer", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.gethtmlver", 
        "syntax": "int tidy::getHtmlVer ( void )", 
        "type": "HTML"
    }, 
    "tidy::getOpt": {
        "descr": "Returns the value of the specified option for the specified tidy object.", 
        "name": "tidy::getOpt", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }, 
            {
                "descr": "You will find a list with each configuration option and their types at: \u00bb http://tidy.sourceforge.net/docs/quickref.html.", 
                "name": "option"
            }
        ], 
        "path": "php/tidy.getopt", 
        "syntax": "mixed tidy::getOpt ( string $option )", 
        "type": "HTML"
    }, 
    "tidy::getOptDoc": {
        "descr": "tidy_get_opt_doc() returns the documentation for the given option name.", 
        "name": "tidy::getOptDoc", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }, 
            {
                "descr": "The option name", 
                "name": "optname"
            }
        ], 
        "path": "php/tidy.getoptdoc", 
        "syntax": "string tidy::getOptDoc ( string $optname )", 
        "type": "HTML"
    }, 
    "tidy::getRelease": {
        "descr": "Gets the release date of the Tidy library.", 
        "name": "tidy::getRelease", 
        "params": [], 
        "path": "php/tidy.getrelease", 
        "syntax": "string tidy::getRelease ( void )", 
        "type": "HTML"
    }, 
    "tidy::getStatus": {
        "descr": "Returns the status for the specified tidy object.", 
        "name": "tidy::getStatus", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.getstatus", 
        "syntax": "int tidy::getStatus ( void )", 
        "type": "HTML"
    }, 
    "tidy::head": {
        "descr": "Returns a tidyNode object starting from the <head> tag of the tidy parse tree.", 
        "name": "tidy::head", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.head", 
        "syntax": "tidyNode tidy::head ( void )", 
        "type": "HTML"
    }, 
    "tidy::html": {
        "descr": "Returns a tidyNode object starting from the <head> tag of the tidy parse tree.", 
        "name": "tidy::html", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.html", 
        "syntax": "tidyNode tidy::head ( void )", 
        "type": "HTML"
    }, 
    "tidy::isXhtml": {
        "descr": "Tells if the document is a XHTML document.", 
        "name": "tidy::isXhtml", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.isxhtml", 
        "syntax": "bool tidy::isXhtml ( void )", 
        "type": "HTML"
    }, 
    "tidy::isXml": {
        "descr": "Tells if the document is a generic (non HTML/XHTML) XML document.", 
        "name": "tidy::isXml", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.isxml", 
        "syntax": "bool tidy::isXml ( void )", 
        "type": "HTML"
    }, 
    "tidy::parseFile": {
        "descr": "Parses the given file.", 
        "name": "tidy::parseFile", 
        "params": [
            {
                "descr": "If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.parsefile", 
        "syntax": "bool tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )", 
        "type": "HTML"
    }, 
    "tidy::parseString": {
        "descr": "Parses a document stored in a string.", 
        "name": "tidy::parseString", 
        "params": [
            {
                "descr": "The data to be parsed.", 
                "name": "input"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/tidy.parsestring", 
        "syntax": "bool tidy::parseString ( string $input [, mixed $config [, string $encoding ]] )", 
        "type": "HTML"
    }, 
    "tidy::repairFile": {
        "descr": "Repairs the given file and returns it as a string.", 
        "name": "tidy::repairFile", 
        "params": [
            {
                "descr": "The file to be repaired.", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.repairfile", 
        "syntax": "string tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )", 
        "type": "HTML"
    }, 
    "tidy::repairString": {
        "descr": "Repairs the given string.", 
        "name": "tidy::repairString", 
        "params": [
            {
                "descr": "The data to be repaired.", 
                "name": "data"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/tidy.repairstring", 
        "syntax": "string tidy::repairString ( string $data [, mixed $config [, string $encoding ]] )", 
        "type": "HTML"
    }, 
    "tidy::root": {
        "descr": "Returns a tidyNode object representing the root of the tidy parse tree.", 
        "name": "tidy::root", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.root", 
        "syntax": "tidyNode tidy::root ( void )", 
        "type": "HTML"
    }, 
    "tidyNode": {
        "descr": "", 
        "name": "tidyNode", 
        "params": [], 
        "path": "php/class.tidynode", 
        "syntax": "tidyNode getParent ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::getParent": {
        "descr": "Returns the parent node of the current node.", 
        "name": "tidyNode::getParent", 
        "params": [], 
        "path": "php/tidynode.getparent", 
        "syntax": "tidyNode tidyNode::getParent ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::hasChildren": {
        "descr": "Tells if the node has children.", 
        "name": "tidyNode::hasChildren", 
        "params": [], 
        "path": "php/tidynode.haschildren", 
        "syntax": "bool tidyNode::hasChildren ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::hasSiblings": {
        "descr": "Tells if the node has siblings.", 
        "name": "tidyNode::hasSiblings", 
        "params": [], 
        "path": "php/tidynode.hassiblings", 
        "syntax": "bool tidyNode::hasSiblings ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isAsp": {
        "descr": "Tells whether the current node is ASP.", 
        "name": "tidyNode::isAsp", 
        "params": [], 
        "path": "php/tidynode.isasp", 
        "syntax": "bool tidyNode::isAsp ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isComment": {
        "descr": "Tells if the node is a comment.", 
        "name": "tidyNode::isComment", 
        "params": [], 
        "path": "php/tidynode.iscomment", 
        "syntax": "bool tidyNode::isComment ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isHtml": {
        "descr": "Tells if the node is part of HTML document.", 
        "name": "tidyNode::isHtml", 
        "params": [], 
        "path": "php/tidynode.ishtml", 
        "syntax": "bool tidyNode::isHtml ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isJste": {
        "descr": "Tells if the node is JSTE.", 
        "name": "tidyNode::isJste", 
        "params": [], 
        "path": "php/tidynode.isjste", 
        "syntax": "bool tidyNode::isJste ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isPhp": {
        "descr": "Tells if the node is PHP.", 
        "name": "tidyNode::isPhp", 
        "params": [], 
        "path": "php/tidynode.isphp", 
        "syntax": "bool tidyNode::isPhp ( void )", 
        "type": "HTML"
    }, 
    "tidyNode::isText": {
        "descr": "Tells if the node represents a text (without any markup).", 
        "name": "tidyNode::isText", 
        "params": [], 
        "path": "php/tidynode.istext", 
        "syntax": "bool tidyNode::isText ( void )", 
        "type": "HTML"
    }, 
    "tidy_access_count": {
        "descr": "tidy_access_count() returns the number of accessibility warnings found for the specified document.", 
        "name": "tidy_access_count", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-access-count", 
        "syntax": "int tidy_access_count ( tidy $object )", 
        "type": "HTML"
    }, 
    "tidy_config_count": {
        "descr": "Returns the number of errors encountered in the configuration of the specified tidy object.", 
        "name": "tidy_config_count", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-config-count", 
        "syntax": "int tidy_config_count ( tidy $object )", 
        "type": "HTML"
    }, 
    "tidy_error_count": {
        "descr": "Returns the number of Tidy errors encountered for the specified document.", 
        "name": "tidy_error_count", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-error-count", 
        "syntax": "int tidy_error_count ( tidy $object )", 
        "type": "HTML"
    }, 
    "tidy_get_output": {
        "descr": "Gets a string with the repaired html.", 
        "name": "tidy_get_output", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-get-output", 
        "syntax": "string tidy_get_output ( tidy $object )", 
        "type": "HTML"
    }, 
    "tidy_load_config": {
        "descr": "Loads a Tidy configuration file, with the specified encoding.", 
        "name": "tidy_load_config", 
        "params": [], 
        "path": "php/function.tidy-load-config", 
        "syntax": "void tidy_load_config ( string $filename , string $encoding )", 
        "type": "HTML"
    }, 
    "tidy_reset_config": {
        "descr": "This function restores the Tidy configuration to the default values.", 
        "name": "tidy_reset_config", 
        "params": [], 
        "path": "php/function.tidy-reset-config", 
        "syntax": "bool tidy_reset_config ( void )", 
        "type": "HTML"
    }, 
    "tidy_save_config": {
        "descr": "Saves current settings to the specified file. Only non-default values are written.", 
        "name": "tidy_save_config", 
        "params": [
            {
                "descr": "Path to the config file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.tidy-save-config", 
        "syntax": "bool tidy_save_config ( string $filename )", 
        "type": "HTML"
    }, 
    "tidy_set_encoding": {
        "descr": "Sets the encoding for input/output documents.", 
        "name": "tidy_set_encoding", 
        "params": [
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.tidy-set-encoding", 
        "syntax": "bool tidy_set_encoding ( string $encoding )", 
        "type": "HTML"
    }, 
    "tidy_setopt": {
        "descr": "tidy_setopt() updates the specified option with a new value.", 
        "name": "tidy_setopt", 
        "params": [
            {
                "descr": "The tidy option name. A list of available configuration options may be found at: \u00bb http://tidy.sourceforge.net/docs/quickref.html.", 
                "name": "option"
            }, 
            {
                "descr": "The tidy option name.", 
                "name": "value"
            }
        ], 
        "path": "php/function.tidy-setopt", 
        "syntax": "bool tidy_setopt ( string $option , mixed $value )", 
        "type": "HTML"
    }, 
    "tidy_warning_count": {
        "descr": "Returns the number of Tidy warnings encountered for the specified document.", 
        "name": "tidy_warning_count", 
        "params": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-warning-count", 
        "syntax": "int tidy_warning_count ( tidy $object )", 
        "type": "HTML"
    }, 
    "time": {
        "descr": "Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).", 
        "name": "time", 
        "params": [], 
        "path": "php/function.time", 
        "syntax": "int time ( void )", 
        "type": "Date and Time"
    }, 
    "time_nanosleep": {
        "descr": "Delays program execution for the given number of seconds and nanoseconds.", 
        "name": "time_nanosleep", 
        "params": [
            {
                "descr": "Must be a non-negative integer.", 
                "name": "seconds"
            }, 
            {
                "descr": "Must be a non-negative integer less than 1 billion.", 
                "name": "nanoseconds"
            }
        ], 
        "path": "php/function.time-nanosleep", 
        "syntax": "mixed time_nanosleep ( int $seconds , int $nanoseconds )", 
        "type": "Language"
    }, 
    "time_sleep_until": {
        "descr": "Makes the script sleep until the specified timestamp.", 
        "name": "time_sleep_until", 
        "params": [
            {
                "descr": "The timestamp when the script should wake.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.time-sleep-until", 
        "syntax": "bool time_sleep_until ( float $timestamp )", 
        "type": "Language"
    }, 
    "timezone_name_from_abbr": {
        "descr": "", 
        "name": "timezone_name_from_abbr", 
        "params": [
            {
                "descr": "Time zone abbreviation.", 
                "name": "abbr"
            }, 
            {
                "descr": "Offset from GMT in seconds. Defaults to -1 which means that first found time zone corresponding to abbr is returned. ", 
                "name": "gmtOffset"
            }, 
            {
                "descr": "Daylight saving time indicator. ", 
                "name": "isdst"
            }
        ], 
        "path": "php/function.timezone-name-from-abbr", 
        "syntax": "string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )", 
        "type": "Date and Time"
    }, 
    "timezone_version_get": {
        "descr": "Returns the current version of the timezonedb.", 
        "name": "timezone_version_get", 
        "params": [], 
        "path": "php/function.timezone-version-get", 
        "syntax": "string timezone_version_get ( void )", 
        "type": "Date and Time"
    }, 
    "tmpfile": {
        "descr": "Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .", 
        "name": "tmpfile", 
        "params": [], 
        "path": "php/function.tmpfile", 
        "syntax": "resource tmpfile ( void )", 
        "type": "File System"
    }, 
    "touch": {
        "descr": "Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.", 
        "name": "touch", 
        "params": [
            {
                "descr": "The name of the file being touched.", 
                "name": "filename"
            }, 
            {
                "descr": "The touch time. If time is not supplied, the current system time is used.", 
                "name": "time"
            }, 
            {
                "descr": "If present, the access time of the given filename is set to the value of atime. ", 
                "name": "atime"
            }
        ], 
        "path": "php/function.touch", 
        "syntax": "bool touch ( string $filename [, int $time = time() [, int $atime ]] )", 
        "type": "File System"
    }, 
    "trait_exists": {
        "descr": "", 
        "name": "trait_exists", 
        "params": [
            {
                "descr": "Name of the trait to check", 
                "name": "traitname"
            }, 
            {
                "descr": "Whether to autoload if not already loaded.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.trait-exists", 
        "syntax": "bool trait_exists ( string $traitname [, bool $autoload ] )", 
        "type": "Classes and Functions"
    }, 
    "trigger_error": {
        "descr": "Used to trigger a user error condition, it can be used in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler()).", 
        "name": "trigger_error", 
        "params": [
            {
                "descr": "The designated error message for this error. ", 
                "name": "error_msg"
            }, 
            {
                "descr": "The designated error type for this error. ", 
                "name": "error_type"
            }
        ], 
        "path": "php/function.trigger-error", 
        "syntax": "bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )", 
        "type": "Errors"
    }, 
    "trim": {
        "descr": "This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters:", 
        "name": "trim", 
        "params": [
            {
                "descr": "The string that will be trimmed.", 
                "name": "str"
            }, 
            {
                "descr": "Optionally, the stripped characters can also be specified using the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.trim", 
        "syntax": "string trim ( string $str [, string $character_mask = \" \\t\\n\\r\\0\\x0B\" ] )", 
        "type": "String"
    }, 
    "uasort": {
        "descr": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.", 
        "name": "uasort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "See usort() and uksort() for examples of user-defined comparison functions.", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.uasort", 
        "syntax": "bool uasort ( array &$array , callable $value_compare_func )", 
        "type": "Array"
    }, 
    "ucfirst": {
        "descr": "Returns a string with the first character of str capitalized, if that character is alphabetic.", 
        "name": "ucfirst", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.ucfirst", 
        "syntax": "string ucfirst ( string $str )", 
        "type": "String"
    }, 
    "ucwords": {
        "descr": "Returns a string with the first character of each word in str capitalized, if that character is alphabetic.", 
        "name": "ucwords", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.ucwords", 
        "syntax": "string ucwords ( string $str )", 
        "type": "String"
    }, 
    "uksort": {
        "descr": "uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.", 
        "name": "uksort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.uksort", 
        "syntax": "bool uksort ( array &$array , callable $key_compare_func )", 
        "type": "Array"
    }, 
    "umask": {
        "descr": "umask() sets PHP's umask to mask & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.", 
        "name": "umask", 
        "params": [
            {
                "descr": "The new umask.", 
                "name": "mask"
            }
        ], 
        "path": "php/function.umask", 
        "syntax": "int umask ([ int $mask ] )", 
        "type": "File System"
    }, 
    "uniqid": {
        "descr": "Gets a prefixed unique identifier based on the current time in microseconds.", 
        "name": "uniqid", 
        "params": [
            {
                "descr": "Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond. ", 
                "name": "prefix"
            }, 
            {
                "descr": "If set to TRUE, uniqid() will add additional entropy (using the combined linear congruential generator) at the end of the return value, which increases the likelihood that the result will be unique.", 
                "name": "more_entropy"
            }
        ], 
        "path": "php/function.uniqid", 
        "syntax": "string uniqid ([ string $prefix = \"\" [, bool $more_entropy = false ]] )", 
        "type": "Language"
    }, 
    "unixtojd": {
        "descr": "Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.", 
        "name": "unixtojd", 
        "params": [
            {
                "descr": "A unix timestamp to convert.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.unixtojd", 
        "syntax": "int unixtojd ([ int $timestamp = time() ] )", 
        "type": "Date and Time"
    }, 
    "unlink": {
        "descr": "Deletes filename. Similar to the Unix C unlink() function. A E_WARNING level error will be generated on failure.", 
        "name": "unlink", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.unlink", 
        "syntax": "bool unlink ( string $filename [, resource $context ] )", 
        "type": "File System"
    }, 
    "unpack": {
        "descr": "Unpacks from a binary string into an array according to the given format.", 
        "name": "unpack", 
        "params": [
            {
                "descr": "See pack() for an explanation of the format codes.", 
                "name": "format"
            }, 
            {
                "descr": "The packed data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.unpack", 
        "syntax": "array unpack ( string $format , string $data )", 
        "type": "Language"
    }, 
    "unregister_tick_function": {
        "descr": "", 
        "name": "unregister_tick_function", 
        "params": [
            {
                "descr": "The function name, as a string.", 
                "name": "function_name"
            }
        ], 
        "path": "php/function.unregister-tick-function", 
        "syntax": "void unregister_tick_function ( string $function_name )", 
        "type": "Classes and Functions"
    }, 
    "unserialize": {
        "descr": "", 
        "name": "unserialize", 
        "params": [
            {
                "descr": "The serialized string.   If the variable being unserialized is an object, after successfully reconstructing the object PHP will automatically attempt to call the __wakeup() member function (if it exists).  Note: unserialize_callback_func directive It's possible to set a callback-function which will be called, if an undefined class should be instantiated during unserializing. (to prevent getting an incomplete object \"__PHP_Incomplete_Class\".) Use your php.ini, ini_set() or .htaccess to define 'unserialize_callback_func'. Everytime an undefined class should be instantiated, it'll be called. To disable this feature just empty this setting.", 
                "name": "str"
            }
        ], 
        "path": "php/function.unserialize", 
        "syntax": "mixed unserialize ( string $str )", 
        "type": "Variables"
    }, 
    "unset": {
        "descr": "unset() destroys the specified variables.", 
        "name": "unset", 
        "params": [
            {
                "descr": "The variable to be unset.", 
                "name": "var"
            }, 
            {
                "descr": "Another variable ...", 
                "name": "..."
            }
        ], 
        "path": "php/function.unset", 
        "syntax": "void unset ( mixed $var [, mixed $... ] )", 
        "type": "Variables"
    }, 
    "untaint": {
        "descr": "Untaint strings", 
        "name": "untaint", 
        "params": [], 
        "path": "php/function.untaint", 
        "syntax": "bool untaint ( string &$string [, string $... ] )", 
        "type": "String"
    }, 
    "urldecode": {
        "descr": "Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character.", 
        "name": "urldecode", 
        "params": [
            {
                "descr": "The string to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.urldecode", 
        "syntax": "string urldecode ( string $str )", 
        "type": "Networking"
    }, 
    "urlencode": {
        "descr": "This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.", 
        "name": "urlencode", 
        "params": [
            {
                "descr": "The string to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.urlencode", 
        "syntax": "string urlencode ( string $str )", 
        "type": "Networking"
    }, 
    "use_soap_error_handler": {
        "descr": "This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the client as a SOAP fault message. If FALSE, the standard PHP error handler is used. The default is to use the standard PHP error handler.", 
        "name": "use_soap_error_handler", 
        "params": [
            {
                "descr": "Set to TRUE to send error details to clients.", 
                "name": "handler"
            }
        ], 
        "path": "php/function.use-soap-error-handler", 
        "syntax": "bool use_soap_error_handler ([ bool $handler = true ] )", 
        "type": "SOAP"
    }, 
    "usleep": {
        "descr": "Delays program execution for the given number of micro seconds.", 
        "name": "usleep", 
        "params": [
            {
                "descr": "Halt time in micro seconds. A micro second is one millionth of a second.", 
                "name": "micro_seconds"
            }
        ], 
        "path": "php/function.usleep", 
        "syntax": "void usleep ( int $micro_seconds )", 
        "type": "Language"
    }, 
    "usort": {
        "descr": "This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.", 
        "name": "usort", 
        "params": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.usort", 
        "syntax": "bool usort ( array &$array , callable $value_compare_func )", 
        "type": "Array"
    }, 
    "utf8_decode": {
        "descr": "This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.", 
        "name": "utf8_decode", 
        "params": [
            {
                "descr": "An UTF-8 encoded string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.utf8-decode", 
        "syntax": "string utf8_decode ( string $data )", 
        "type": "XML"
    }, 
    "utf8_encode": {
        "descr": "This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes UTF-8 characters in up to four bytes, like this:", 
        "name": "utf8_encode", 
        "params": [
            {
                "descr": "An ISO-8859-1 string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.utf8-encode", 
        "syntax": "string utf8_encode ( string $data )", 
        "type": "XML"
    }, 
    "var_dump": {
        "descr": "", 
        "name": "var_dump", 
        "params": [
            {
                "descr": "The variable you want to dump.", 
                "name": "expression"
            }
        ], 
        "path": "php/function.var-dump", 
        "syntax": "void var_dump ( mixed $expression [, mixed $... ] )", 
        "type": "Variables"
    }, 
    "var_export": {
        "descr": "", 
        "name": "var_export", 
        "params": [
            {
                "descr": "The variable you want to export.", 
                "name": "expression"
            }, 
            {
                "descr": "If used and set to TRUE, var_export() will return the variable representation instead of outputting it.", 
                "name": "return"
            }
        ], 
        "path": "php/function.var-export", 
        "syntax": "mixed var_export ( mixed $expression [, bool $return = false ] )", 
        "type": "Variables"
    }, 
    "version_compare": {
        "descr": "version_compare() compares two \"PHP-standardized\" version number strings. This is useful if you would like to write programs working only on some versions of PHP.", 
        "name": "version_compare", 
        "params": [
            {
                "descr": "First version number.", 
                "name": "version1"
            }, 
            {
                "descr": "Second version number.", 
                "name": "version2"
            }, 
            {
                "descr": "If you specify the third optional operator argument, you can test for a particular relationship. ", 
                "name": "operator"
            }
        ], 
        "path": "php/function.version-compare", 
        "syntax": "mixed version_compare ( string $version1 , string $version2 [, string $operator ] )", 
        "type": "Language"
    }, 
    "vfprintf": {
        "descr": "Write a string produced according to format to the stream resource specified by handle.", 
        "name": "vfprintf", 
        "params": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "handle   format"
            }
        ], 
        "path": "php/function.vfprintf", 
        "syntax": "int vfprintf ( resource $handle , string $format , array $args )", 
        "type": "String"
    }, 
    "virtual": {
        "descr": "virtual() is an Apache-specific function which is similar to <!--#include virtual...--> in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-Type header.", 
        "name": "virtual", 
        "params": [
            {
                "descr": "The file that the virtual command will be performed on.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.virtual", 
        "syntax": "bool virtual ( string $filename )", 
        "type": "Apache"
    }, 
    "vprintf": {
        "descr": "Display array values as a formatted string according to format (which is described in the documentation for sprintf()).", 
        "name": "vprintf", 
        "params": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.vprintf", 
        "syntax": "int vprintf ( string $format , array $args )", 
        "type": "String"
    }, 
    "vsprintf": {
        "descr": "Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.", 
        "name": "vsprintf", 
        "params": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.vsprintf", 
        "syntax": "string vsprintf ( string $format , array $args )", 
        "type": "String"
    }, 
    "wordwrap": {
        "descr": "Wraps a string to a given number of characters using a string break character.", 
        "name": "wordwrap", 
        "params": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "The number of characters at which the string will be wrapped.", 
                "name": "width"
            }, 
            {
                "descr": "The line is broken using the optional break parameter.", 
                "name": "break"
            }, 
            {
                "descr": "If the cut is set to TRUE, the string is always wrapped at or before the specified width. ", 
                "name": "cut"
            }
        ], 
        "path": "php/function.wordwrap", 
        "syntax": "string wordwrap ( string $str [, int $width = 75 [, string $break = \"\\n\" [, bool $cut = false ]]] )", 
        "type": "String"
    }, 
    "xml_error_string": {
        "descr": "Gets the XML parser error string associated with the given code.", 
        "name": "xml_error_string", 
        "params": [
            {
                "descr": "An error code from xml_get_error_code().", 
                "name": "code"
            }
        ], 
        "path": "php/function.xml-error-string", 
        "syntax": "string xml_error_string ( int $code )", 
        "type": "XML"
    }, 
    "xml_get_current_byte_index": {
        "descr": "Gets the current byte index of the given XML parser.", 
        "name": "xml_get_current_byte_index", 
        "params": [
            {
                "descr": "A reference to the XML parser to get byte index from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-byte-index", 
        "syntax": "int xml_get_current_byte_index ( resource $parser )", 
        "type": "XML"
    }, 
    "xml_get_current_column_number": {
        "descr": "Gets the current column number of the given XML parser.", 
        "name": "xml_get_current_column_number", 
        "params": [
            {
                "descr": "A reference to the XML parser to get column number from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-column-number", 
        "syntax": "int xml_get_current_column_number ( resource $parser )", 
        "type": "XML"
    }, 
    "xml_get_current_line_number": {
        "descr": "Gets the current line number for the given XML parser.", 
        "name": "xml_get_current_line_number", 
        "params": [
            {
                "descr": "A reference to the XML parser to get line number from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-line-number", 
        "syntax": "int xml_get_current_line_number ( resource $parser )", 
        "type": "XML"
    }, 
    "xml_get_error_code": {
        "descr": "Gets the XML parser error code.", 
        "name": "xml_get_error_code", 
        "params": [
            {
                "descr": "A reference to the XML parser to get error code from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-error-code", 
        "syntax": "int xml_get_error_code ( resource $parser )", 
        "type": "XML"
    }, 
    "xml_parse": {
        "descr": "xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.", 
        "name": "xml_parse", 
        "params": [
            {
                "descr": "A reference to the XML parser to use.", 
                "name": "parser"
            }, 
            {
                "descr": "Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several times with new data, as long as the is_final parameter is set and TRUE when the last data is parsed.", 
                "name": "data"
            }, 
            {
                "descr": "If set and TRUE, data is the last piece of data sent in this parse.", 
                "name": "is_final"
            }
        ], 
        "path": "php/function.xml-parse", 
        "syntax": "int xml_parse ( resource $parser , string $data [, bool $is_final = false ] )", 
        "type": "XML"
    }, 
    "xml_parse_into_struct": {
        "descr": "This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.", 
        "name": "xml_parse_into_struct", 
        "params": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "A string containing the XML data.", 
                "name": "data"
            }, 
            {
                "descr": "An array containing the values of the XML data", 
                "name": "values"
            }, 
            {
                "descr": "An array containing pointers to the location of the appropriate values in the $values.", 
                "name": "index"
            }
        ], 
        "path": "php/function.xml-parse-into-struct", 
        "syntax": "int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )", 
        "type": "XML"
    }, 
    "xml_parser_create": {
        "descr": "xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.", 
        "name": "xml_parser_create", 
        "params": [
            {
                "descr": "The optional encoding specifies the character encoding for the input/output in PHP 4. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.xml-parser-create", 
        "syntax": "resource xml_parser_create ([ string $encoding ] )", 
        "type": "XML"
    }, 
    "xml_parser_create_ns": {
        "descr": "xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.", 
        "name": "xml_parser_create_ns", 
        "params": [
            {
                "descr": "The optional encoding specifies the character encoding for the input/output in PHP 4. ", 
                "name": "encoding"
            }, 
            {
                "descr": "With a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator.", 
                "name": "separator"
            }
        ], 
        "path": "php/function.xml-parser-create-ns", 
        "syntax": "resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )", 
        "type": "XML"
    }, 
    "xml_parser_free": {
        "descr": "Frees the given XML parser.", 
        "name": "xml_parser_free", 
        "params": [
            {
                "descr": "A reference to the XML parser to free.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-parser-free", 
        "syntax": "bool xml_parser_free ( resource $parser )", 
        "type": "XML"
    }, 
    "xml_parser_get_option": {
        "descr": "Gets an option value from an XML parser.", 
        "name": "xml_parser_get_option", 
        "params": [
            {
                "descr": "A reference to the XML parser to get an option from.", 
                "name": "parser"
            }, 
            {
                "descr": "Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.xml-parser-get-option", 
        "syntax": "mixed xml_parser_get_option ( resource $parser , int $option )", 
        "type": "XML"
    }, 
    "xml_parser_set_option": {
        "descr": "Sets an option in an XML parser.", 
        "name": "xml_parser_set_option", 
        "params": [
            {
                "descr": "A reference to the XML parser to set an option in.", 
                "name": "parser"
            }, 
            {
                "descr": "Which option to set. See below. ", 
                "name": "option"
            }, 
            {
                "descr": "The option's new value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.xml-parser-set-option", 
        "syntax": "bool xml_parser_set_option ( resource $parser , int $option , mixed $value )", 
        "type": "XML"
    }, 
    "xml_set_character_data_handler": {
        "descr": "Sets the character data handler function for the XML parser parser.", 
        "name": "xml_set_character_data_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up character data handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, data, contains the character data as a string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-character-data-handler", 
        "syntax": "bool xml_set_character_data_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_default_handler": {
        "descr": "Sets the default handler function for the XML parser parser.", 
        "name": "xml_set_default_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up default handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, data, contains the character data.This may be the XML declaration, document type declaration, entities or other data for which no other handler exists.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-default-handler", 
        "syntax": "bool xml_set_default_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_element_handler": {
        "descr": "Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.", 
        "name": "xml_set_element_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up start and end element handler functions.", 
                "name": "parser"
            }, 
            {
                "descr": "The function named by start_element_handler must accept three parameters:  start_element_handler ( resource $parser , string $name , array $attribs )  parser   The first parameter, parser, is a reference to the XML parser calling the handler.", 
                "name": "start_element_handler"
            }, 
            {
                "descr": "The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.", 
                "name": "name"
            }, 
            {
                "descr": "The third parameter, attribs, contains an associative array with the element's attributes (if any).The keys of this array are the attribute names, the values are the attribute values.Attribute names are case-folded on the same criteria as element names.Attribute values are not case-folded.   The original order of the attributes can be retrieved by walking through attribs the normal way, using each().The first key in the array was the first attribute, and so on.", 
                "name": "attribs"
            }, 
            {
                "descr": "The function named by end_element_handler must accept two parameters:  end_element_handler ( resource $parser , string $name )  parser   The first parameter, parser, is a reference to the XML parser calling the handler.", 
                "name": "end_element_handler"
            }, 
            {
                "descr": "The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xml-set-element-handler", 
        "syntax": "bool xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler )", 
        "type": "XML"
    }, 
    "xml_set_end_namespace_decl_handler": {
        "descr": "Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.", 
        "name": "xml_set_end_namespace_decl_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The prefix is a string used to reference the namespace within an XML object.", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.xml-set-end-namespace-decl-handler", 
        "syntax": "bool xml_set_end_namespace_decl_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_external_entity_ref_handler": {
        "descr": "Sets the external entity reference handler function for the XML parser parser.", 
        "name": "xml_set_external_entity_ref_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up external entity reference handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, open_entity_names, is a space-separated list of the names of the entities that are open for the parse of this entity (including the name of the referenced entity).", 
                "name": "open_entity_names"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (system_id) of the external entity.Currently this parameter will always be set to an empty string.", 
                "name": "base"
            }, 
            {
                "descr": "The fourth parameter, system_id, is the system identifier as specified in the entity declaration.", 
                "name": "system_id"
            }, 
            {
                "descr": "The fifth parameter, public_id, is the public identifier as specified in the entity declaration, or an empty string if none was specified; the whitespace in the public identifier will have been normalized as required by the XML spec.", 
                "name": "public_id"
            }
        ], 
        "path": "php/function.xml-set-external-entity-ref-handler", 
        "syntax": "bool xml_set_external_entity_ref_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_notation_decl_handler": {
        "descr": "Sets the notation declaration handler function for the XML parser parser.", 
        "name": "xml_set_notation_decl_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up notation declaration handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "This is the notation's name, as per the notation format described above.", 
                "name": "notation_name"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (system_id) of the notation declaration. ", 
                "name": "base"
            }, 
            {
                "descr": "System identifier of the external notation declaration.", 
                "name": "system_id"
            }, 
            {
                "descr": "Public identifier of the external notation declaration.", 
                "name": "public_id"
            }
        ], 
        "path": "php/function.xml-set-notation-decl-handler", 
        "syntax": "bool xml_set_notation_decl_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_object": {
        "descr": "This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.", 
        "name": "xml_set_object", 
        "params": [
            {
                "descr": "A reference to the XML parser to use inside the object.", 
                "name": "parser"
            }, 
            {
                "descr": "The object where to use the XML parser.", 
                "name": "object"
            }
        ], 
        "path": "php/function.xml-set-object", 
        "syntax": "bool xml_set_object ( resource $parser , object &$object )", 
        "type": "XML"
    }, 
    "xml_set_processing_instruction_handler": {
        "descr": "Sets the processing instruction (PI) handler function for the XML parser parser.", 
        "name": "xml_set_processing_instruction_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up processing instruction (PI) handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, target, contains the PI target.", 
                "name": "target"
            }, 
            {
                "descr": "The third parameter, data, contains the PI data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-processing-instruction-handler", 
        "syntax": "bool xml_set_processing_instruction_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_start_namespace_decl_handler": {
        "descr": "Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.", 
        "name": "xml_set_start_namespace_decl_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The prefix is a string used to reference the namespace within an XML object.", 
                "name": "prefix"
            }, 
            {
                "descr": "Uniform Resource Identifier (URI) of namespace.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xml-set-start-namespace-decl-handler", 
        "syntax": "bool xml_set_start_namespace_decl_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xml_set_unparsed_entity_decl_handler": {
        "descr": "Sets the unparsed entity declaration handler function for the XML parser parser.", 
        "name": "xml_set_unparsed_entity_decl_handler", 
        "params": [
            {
                "descr": "A reference to the XML parser to set up unparsed entity declaration handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The name of the entity that is about to be defined.", 
                "name": "entity_name"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (systemId) of the external entity.Currently this parameter will always be set to an empty string.", 
                "name": "base"
            }, 
            {
                "descr": "System identifier for the external entity.", 
                "name": "system_id"
            }, 
            {
                "descr": "Public identifier for the external entity.", 
                "name": "public_id"
            }, 
            {
                "descr": "Name of the notation of this entity (see xml_set_notation_decl_handler()).", 
                "name": "notation_name"
            }
        ], 
        "path": "php/function.xml-set-unparsed-entity-decl-handler", 
        "syntax": "bool xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler )", 
        "type": "XML"
    }, 
    "xmlrpc_decode": {
        "descr": "", 
        "name": "xmlrpc_decode", 
        "params": [
            {
                "descr": "XML response returned by XMLRPC method.", 
                "name": "xml"
            }, 
            {
                "descr": "Input encoding supported by iconv.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.xmlrpc-decode", 
        "syntax": "mixed xmlrpc_decode ( string $xml [, string $encoding = \"iso-8859-1\" ] )", 
        "type": "XML"
    }, 
    "xmlrpc_decode_request": {
        "descr": "", 
        "name": "xmlrpc_decode_request", 
        "params": [], 
        "path": "php/function.xmlrpc-decode-request", 
        "syntax": "mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )", 
        "type": "XML"
    }, 
    "xmlrpc_encode": {
        "descr": "", 
        "name": "xmlrpc_encode", 
        "params": [], 
        "path": "php/function.xmlrpc-encode", 
        "syntax": "string xmlrpc_encode ( mixed $value )", 
        "type": "XML"
    }, 
    "xmlrpc_encode_request": {
        "descr": "", 
        "name": "xmlrpc_encode_request", 
        "params": [
            {
                "descr": "Name of the method to call.", 
                "name": "method"
            }, 
            {
                "descr": "Method parameters compatible with method signature.", 
                "name": "params"
            }, 
            {
                "descr": "Array specifying output options may contain (default values are emphasised): output_type: php, xml verbosity: no_white_space, newlines_only, pretty escaping: cdata, non-ascii, non-print, markup (may be a string with one value or an array with multiple values) version: simple, xmlrpc, soap 1.1, auto encoding: iso-8859-1, other character set supported by iconv", 
                "name": "output_options"
            }
        ], 
        "path": "php/function.xmlrpc-encode-request", 
        "syntax": "string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )", 
        "type": "XML"
    }, 
    "xmlrpc_get_type": {
        "descr": "", 
        "name": "xmlrpc_get_type", 
        "params": [
            {
                "descr": "PHP value", 
                "name": "value"
            }
        ], 
        "path": "php/function.xmlrpc-get-type", 
        "syntax": "string xmlrpc_get_type ( mixed $value )", 
        "type": "XML"
    }, 
    "xmlrpc_is_fault": {
        "descr": "", 
        "name": "xmlrpc_is_fault", 
        "params": [
            {
                "descr": "Array returned by xmlrpc_decode().", 
                "name": "arg"
            }
        ], 
        "path": "php/function.xmlrpc-is-fault", 
        "syntax": "bool xmlrpc_is_fault ( array $arg )", 
        "type": "XML"
    }, 
    "xmlrpc_parse_method_descriptions": {
        "descr": "", 
        "name": "xmlrpc_parse_method_descriptions", 
        "params": [], 
        "path": "php/function.xmlrpc-parse-method-descriptions", 
        "syntax": "array xmlrpc_parse_method_descriptions ( string $xml )", 
        "type": "XML"
    }, 
    "xmlrpc_server_add_introspection_data": {
        "descr": "", 
        "name": "xmlrpc_server_add_introspection_data", 
        "params": [], 
        "path": "php/function.xmlrpc-server-add-introspection-data", 
        "syntax": "int xmlrpc_server_add_introspection_data ( resource $server , array $desc )", 
        "type": "XML"
    }, 
    "xmlrpc_server_call_method": {
        "descr": "", 
        "name": "xmlrpc_server_call_method", 
        "params": [], 
        "path": "php/function.xmlrpc-server-call-method", 
        "syntax": "string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )", 
        "type": "XML"
    }, 
    "xmlrpc_server_create": {
        "descr": "", 
        "name": "xmlrpc_server_create", 
        "params": [], 
        "path": "php/function.xmlrpc-server-create", 
        "syntax": "resource xmlrpc_server_create ( void )", 
        "type": "XML"
    }, 
    "xmlrpc_server_destroy": {
        "descr": "", 
        "name": "xmlrpc_server_destroy", 
        "params": [], 
        "path": "php/function.xmlrpc-server-destroy", 
        "syntax": "int xmlrpc_server_destroy ( resource $server )", 
        "type": "XML"
    }, 
    "xmlrpc_server_register_introspection_callback": {
        "descr": "", 
        "name": "xmlrpc_server_register_introspection_callback", 
        "params": [], 
        "path": "php/function.xmlrpc-server-register-introspection-callback", 
        "syntax": "bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )", 
        "type": "XML"
    }, 
    "xmlrpc_server_register_method": {
        "descr": "", 
        "name": "xmlrpc_server_register_method", 
        "params": [], 
        "path": "php/function.xmlrpc-server-register-method", 
        "syntax": "bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )", 
        "type": "XML"
    }, 
    "xmlrpc_set_type": {
        "descr": "Sets xmlrpc type, base64 or datetime, for a PHP string value.", 
        "name": "xmlrpc_set_type", 
        "params": [
            {
                "descr": "Value to set the type", 
                "name": "value"
            }, 
            {
                "descr": "'base64' or 'datetime'", 
                "name": "type"
            }
        ], 
        "path": "php/function.xmlrpc-set-type", 
        "syntax": "bool xmlrpc_set_type ( string &$value , string $type )", 
        "type": "XML"
    }, 
    "yaml_emit": {
        "descr": "Generate a YAML representation of the provided data.", 
        "name": "yaml_emit", 
        "params": [
            {
                "descr": "The data being encoded. Can be any type except a resource.", 
                "name": "data"
            }, 
            {
                "descr": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING.", 
                "name": "encoding"
            }, 
            {
                "descr": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.", 
                "name": "linebreak"
            }, 
            {
                "descr": "Content handlers for emitting YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-emit", 
        "syntax": "string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )", 
        "type": "YAML"
    }, 
    "yaml_emit_file": {
        "descr": "Generate a YAML representation of the provided data in the filename.", 
        "name": "yaml_emit_file", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "The data being encoded. Can be any type except a resource.", 
                "name": "data"
            }, 
            {
                "descr": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING.", 
                "name": "encoding"
            }, 
            {
                "descr": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.", 
                "name": "linebreak"
            }, 
            {
                "descr": "Content handlers for emitting YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-emit-file", 
        "syntax": "bool yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )", 
        "type": "YAML"
    }, 
    "yaml_parse": {
        "descr": "Convert all or part of a YAML document stream to a PHP variable.", 
        "name": "yaml_parse", 
        "params": [
            {
                "descr": "The string to parse as a YAML document stream.", 
                "name": "input"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse", 
        "syntax": "mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "type": "YAML"
    }, 
    "yaml_parse_file": {
        "descr": "Convert all or part of a YAML document stream read from a file to a PHP variable.", 
        "name": "yaml_parse_file", 
        "params": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse-file", 
        "syntax": "mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "type": "YAML"
    }, 
    "yaml_parse_url": {
        "descr": "Convert all or part of a YAML document stream read from a URL to a PHP variable.", 
        "name": "yaml_parse_url", 
        "params": [
            {
                "descr": "url should be of the form \"scheme://...\". ", 
                "name": "url"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse-url", 
        "syntax": "mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "type": "YAML"
    }, 
    "zend_logo_guid": {
        "descr": "This function returns the ID which can be used to display the Zend logo using the built-in image.", 
        "name": "zend_logo_guid", 
        "params": [], 
        "path": "php/function.zend-logo-guid", 
        "syntax": "string zend_logo_guid ( void )", 
        "type": "Language"
    }, 
    "zend_thread_id": {
        "descr": "This function returns a unique identifier for the current thread.", 
        "name": "zend_thread_id", 
        "params": [], 
        "path": "php/function.zend-thread-id", 
        "syntax": "int zend_thread_id ( void )", 
        "type": "Language"
    }, 
    "zend_version": {
        "descr": "Returns a string containing the version of the currently running Zend Engine.", 
        "name": "zend_version", 
        "params": [], 
        "path": "php/function.zend-version", 
        "syntax": "string zend_version ( void )", 
        "type": "Language"
    }, 
    "zip_close": {
        "descr": "Closes the given ZIP file archive.", 
        "name": "zip_close", 
        "params": [
            {
                "descr": "A ZIP file previously opened with zip_open().", 
                "name": "zip"
            }
        ], 
        "path": "php/function.zip-close", 
        "syntax": "void zip_close ( resource $zip )", 
        "type": "Compression"
    }, 
    "zip_entry_close": {
        "descr": "Closes the specified directory entry.", 
        "name": "zip_entry_close", 
        "params": [
            {
                "descr": "A directory entry previously opened zip_entry_open().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-close", 
        "syntax": "bool zip_entry_close ( resource $zip_entry )", 
        "type": "Compression"
    }, 
    "zip_entry_compressedsize": {
        "descr": "Returns the compressed size of the specified directory entry.", 
        "name": "zip_entry_compressedsize", 
        "params": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-compressedsize", 
        "syntax": "int zip_entry_compressedsize ( resource $zip_entry )", 
        "type": "Compression"
    }, 
    "zip_entry_compressionmethod": {
        "descr": "Returns the compression method of the directory entry specified by zip_entry.", 
        "name": "zip_entry_compressionmethod", 
        "params": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-compressionmethod", 
        "syntax": "string zip_entry_compressionmethod ( resource $zip_entry )", 
        "type": "Compression"
    }, 
    "zip_entry_filesize": {
        "descr": "Returns the actual size of the specified directory entry.", 
        "name": "zip_entry_filesize", 
        "params": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-filesize", 
        "syntax": "int zip_entry_filesize ( resource $zip_entry )", 
        "type": "Compression"
    }, 
    "zip_entry_name": {
        "descr": "Returns the name of the specified directory entry.", 
        "name": "zip_entry_name", 
        "params": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-name", 
        "syntax": "string zip_entry_name ( resource $zip_entry )", 
        "type": "Compression"
    }, 
    "zip_entry_open": {
        "descr": "Opens a directory entry in a zip file for reading.", 
        "name": "zip_entry_open", 
        "params": [
            {
                "descr": "A valid resource handle returned by zip_open().", 
                "name": "zip"
            }, 
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }, 
            {
                "descr": "Any of the modes specified in the documentation of fopen(). ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.zip-entry-open", 
        "syntax": "bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )", 
        "type": "Compression"
    }, 
    "zip_entry_read": {
        "descr": "Reads from an open directory entry.", 
        "name": "zip_entry_read", 
        "params": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }, 
            {
                "descr": "The number of bytes to return.  Note:  This should be the uncompressed length you wish to read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.zip-entry-read", 
        "syntax": "string zip_entry_read ( resource $zip_entry [, int $length = 1024 ] )", 
        "type": "Compression"
    }, 
    "zip_open": {
        "descr": "Opens a new zip archive for reading.", 
        "name": "zip_open", 
        "params": [
            {
                "descr": "The file name of the ZIP archive to open.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.zip-open", 
        "syntax": "resource zip_open ( string $filename )", 
        "type": "Compression"
    }, 
    "zip_read": {
        "descr": "Reads the next entry in a zip file archive.", 
        "name": "zip_read", 
        "params": [
            {
                "descr": "A ZIP file previously opened with zip_open().", 
                "name": "zip"
            }
        ], 
        "path": "php/function.zip-read", 
        "syntax": "resource zip_read ( resource $zip )", 
        "type": "Compression"
    }, 
    "zlib_decode": {
        "descr": "Uncompress any raw/gzip/zlib encoded data.", 
        "name": "zlib_decode", 
        "params": [], 
        "path": "php/function.zlib-decode", 
        "syntax": "string zlib_decode ( string $data [, string $max_decoded_len ] )", 
        "type": "Compression"
    }, 
    "zlib_encode": {
        "descr": "Compress data with the specified encoding.", 
        "name": "zlib_encode", 
        "params": [], 
        "path": "php/function.zlib-encode", 
        "syntax": "string zlib_encode ( string $data , string $encoding [, string $level = -1 ] )", 
        "type": "Compression"
    }, 
    "zlib_get_coding_type": {
        "descr": "Returns the coding type used for output compression.", 
        "name": "zlib_get_coding_type", 
        "params": [], 
        "path": "php/function.zlib-get-coding-type", 
        "syntax": "string zlib_get_coding_type ( void )", 
        "type": "Compression"
    }
}