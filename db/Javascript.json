{
    "$.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.", 
        "name": "jQuery.Callbacks", 
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.", 
                "name": "flags"
            }
        ], 
        "path": "jquery/jquery.callbacks", 
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "$.Deferred": {
        "descr": "The jQuery.Deferred() constructor creates a new Deferred object. The new operator is optional.", 
        "name": "jQuery.Deferred", 
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.", 
                "name": "beforeStart"
            }
        ], 
        "path": "jquery/jquery.deferred", 
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "$.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:", 
        "name": "jQuery.ajax", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ", 
                "name": "async"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ", 
                "name": "beforeSend"
            }, 
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ", 
                "name": "cache"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ", 
                "name": "contents"
            }, 
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: String  When sending data to the server, use this content type. ", 
                "name": "contentType"
            }, 
            {
                "descr": "Type: PlainObject  This object will be made the context of all Ajax-related callbacks. ", 
                "name": "context"
            }, 
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ", 
                "name": "converters"
            }, 
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)", 
                "name": "crossDomain"
            }, 
            {
                "descr": "Type: PlainObject or String  Data to be sent to the server. ", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( String data, String type ) => Object  A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. ", 
                "name": "dataFilter"
            }, 
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ", 
                "name": "error"
            }, 
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ", 
                "name": "global"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ", 
                "name": "headers"
            }, 
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ", 
                "name": "ifModified"
            }, 
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ", 
                "name": "isLocal"
            }, 
            {
                "descr": "Type: String  Override the callback function name in a jsonp request. ", 
                "name": "jsonp"
            }, 
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ", 
                "name": "jsonpCallback"
            }, 
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ", 
                "name": "mimeType"
            }, 
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "password"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.", 
                "name": "processData"
            }, 
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ", 
                "name": "scriptCharset"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ", 
                "name": "statusCode"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.", 
                "name": "traditional"
            }, 
            {
                "descr": "(default: 'GET') Type: String  The type of request to make (\"POST\" or \"GET\"), default is \"GET\". ", 
                "name": "type"
            }, 
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "username"
            }, 
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ", 
                "name": "xhr"
            }, 
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ", 
                "name": "xhrFields"
            }
        ], 
        "path": "jquery/jquery.ajax", 
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:", 
        "name": "jQuery.ajaxPrefilter", 
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes", 
                "name": "dataTypes"
            }, 
            {
                "descr": "Type: Function() A handler to set default values for future Ajax requests.", 
                "name": "handler(options, originalOptions, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.ajaxprefilter", 
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler(options, originalOptions, jqXHR) ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "$.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().", 
        "name": "jQuery.ajaxSetup", 
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ", 
                "name": "options"
            }
        ], 
        "path": "jquery/jquery.ajaxsetup", 
        "syntax": "jQuery.ajaxSetup( options ) Returns:", 
        "type": "Ajax"
    }, 
    "$.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.", 
        "name": "jQuery.ajaxTransport", 
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function() A handler to return the new transport object to use with the data type provided in the first argument.", 
                "name": "handler(options, originalOptions, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.ajaxtransport", 
        "syntax": "jQuery.ajaxTransport( dataType, handler(options, originalOptions, jqXHR) ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "$.boxModel": {
        "descr": "", 
        "name": "jQuery.boxModel", 
        "params": [], 
        "path": "jquery/jquery.boxmodel", 
        "syntax": "jQuery.boxModelReturns: Booleanversion deprecated: 1.3   Description: Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.", 
        "type": "Utilities"
    }, 
    "$.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "name": "jQuery.browser", 
        "params": [], 
        "path": "jquery/jquery.browser", 
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "type": "Utilities"
    }, 
    "$.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.", 
        "name": "jQuery.contains", 
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.", 
                "name": "container"
            }, 
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/jquery.contains", 
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.", 
        "name": "jQuery.cssHooks", 
        "params": [], 
        "path": "jquery/jquery.csshooks", 
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()", 
        "type": "Miscellaneous"
    }, 
    "$.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.", 
        "name": "jQuery.data", 
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Object  The new data value.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.data", 
        "syntax": "jQuery.data( element, key, value ) Returns: Object", 
        "type": "Data"
    }, 
    "$.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.", 
        "name": "jQuery.dequeue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/jquery.dequeue", 
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined", 
        "type": "Data"
    }, 
    "$.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.", 
        "name": "jQuery.each", 
        "params": [
            {
                "descr": "Type: Object  The object or array to iterate over.", 
                "name": "collection"
            }, 
            {
                "descr": "Type: Function() The function that will be executed on every object.", 
                "name": "callback(indexInArray, valueOfElement)"
            }
        ], 
        "path": "jquery/jquery.each", 
        "syntax": "jQuery.each( collection, callback(indexInArray, valueOfElement) ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.", 
        "name": "jQuery.error", 
        "params": [
            {
                "descr": "Type: String  The message to send out.", 
                "name": "message"
            }
        ], 
        "path": "jquery/jquery.error", 
        "syntax": "jQuery.error( message ) Returns:", 
        "type": "Miscellaneous"
    }, 
    "$.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.", 
        "name": "jQuery.extend", 
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }, 
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ", 
                "name": "deep"
            }, 
            {
                "descr": "Type: Object  The object to extend. ", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }
        ], 
        "path": "jquery/jquery.extend", 
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.fn.extend": {
        "descr": "", 
        "name": "jQuery.fn.extend", 
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.fn.extend", 
        "syntax": "jQuery.fn.extend( object ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.fx.interval": {
        "descr": "This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.", 
        "name": "jQuery.fx.interval", 
        "params": [], 
        "path": "jquery/jquery.fx.interval", 
        "syntax": "jQuery.fx.intervalReturns: Number   Description: The rate (in milliseconds) at which animations fire.", 
        "type": "Effects"
    }, 
    "$.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:", 
        "name": "jQuery.fx.off", 
        "params": [], 
        "path": "jquery/jquery.fx.off", 
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons: jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations (see the article Turn Off Animation for more information). Animations can be turned back on by setting the property to false", 
        "type": "Effects"
    }, 
    "$.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.get", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success(data, textStatus, jqXHR)"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }
        ], 
        "path": "jquery/jquery.get", 
        "syntax": "jQuery.get( url [, data ] [, success(data, textStatus, jqXHR) ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getJSON", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success( data, textStatus, jqXHR )"
            }
        ], 
        "path": "jquery/jquery.getjson", 
        "syntax": "jQuery.getJSON( url [, data ] [, success( data, textStatus, jqXHR ) ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getScript", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success(script, textStatus, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.getscript", 
        "syntax": "jQuery.getScript( url [, success(script, textStatus, jqXHR) ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).", 
        "name": "jQuery.globalEval", 
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.", 
                "name": "code"
            }
        ], 
        "path": "jquery/jquery.globaleval", 
        "syntax": "jQuery.globalEval( code ) Returns:", 
        "type": "Utilities"
    }, 
    "$.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.", 
        "name": "jQuery.grep", 
        "params": [
            {
                "descr": "Type: Array  The array to search through.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "function(elementOfArray, indexInArray)"
            }, 
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ", 
                "name": "invert"
            }
        ], 
        "path": "jquery/jquery.grep", 
        "syntax": "jQuery.grep( array, function(elementOfArray, indexInArray) [, invert ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If no data is associated with an element (there is no data object at all or the data object is empty), the method returns false; otherwise it returns true.", 
        "name": "jQuery.hasData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.hasdata", 
        "syntax": "jQuery.hasData( element ) Returns: Boolean", 
        "type": "Data"
    }, 
    "$.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.", 
        "name": "jQuery.holdReady", 
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released", 
                "name": "hold"
            }
        ], 
        "path": "jquery/jquery.holdready", 
        "syntax": "jQuery.holdReady( hold ) Returns: undefined", 
        "type": "Miscellaneous"
    }, 
    "$.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.", 
        "name": "jQuery.inArray", 
        "params": [
            {
                "descr": "Type: Anything  The value to search for.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Array  An array through which to search.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "jquery/jquery.inarray", 
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number", 
        "type": "Utilities"
    }, 
    "$.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).", 
        "name": "jQuery.isArray", 
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isarray", 
        "syntax": "jQuery.isArray( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()", 
        "name": "jQuery.isEmptyObject", 
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isemptyobject", 
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isFunction": {
        "descr": "Note: As of jQuery 1.3, functions provided by the browser like alert() and DOM element methods like getAttribute() are not guaranteed to be detected as functions in browsers such as Internet Explorer.", 
        "name": "jQuery.isFunction", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a function.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isfunction", 
        "syntax": "jQuery.isFunction( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.", 
        "name": "jQuery.isNumeric", 
        "params": [
            {
                "descr": "Type: PlainObject  The value to be tested.", 
                "name": "value"
            }
        ], 
        "path": "jquery/jquery.isnumeric", 
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.", 
        "name": "jQuery.isPlainObject", 
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isplainobject", 
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).", 
        "name": "jQuery.isWindow", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.iswindow", 
        "syntax": "jQuery.isWindow( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isXMLDoc": {
        "descr": "", 
        "name": "jQuery.isXMLDoc", 
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.", 
                "name": "node"
            }
        ], 
        "path": "jquery/jquery.isxmldoc", 
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).", 
        "name": "jQuery.makeArray", 
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.makearray", 
        "syntax": "jQuery.makeArray( obj ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.map": {
        "descr": "If you wish to process a jQuery object \u2014 for example, $('div').map( callback ); \u2014 use .map() instead.", 
        "name": "jQuery.map", 
        "params": [
            {
                "descr": "Type: Array  The Array to translate.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "callback( elementOfArray, indexInArray )"
            }, 
            {
                "descr": "Type: Array or Object  The Array or Object to translate.", 
                "name": "arrayOrObject"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "callback( value, indexOrKey )"
            }
        ], 
        "path": "jquery/jquery.map", 
        "syntax": "jQuery.map( array, callback( elementOfArray, indexInArray ) ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the first parameter to add the items from the second.", 
        "name": "jQuery.merge", 
        "params": [
            {
                "descr": "Type: Array  The first array to merge, the elements of second added.", 
                "name": "first"
            }, 
            {
                "descr": "Type: Array  The second array to merge into the first, unaltered.", 
                "name": "second"
            }
        ], 
        "path": "jquery/jquery.merge", 
        "syntax": "jQuery.merge( first, second ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.", 
        "name": "jQuery.noConflict", 
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).", 
                "name": "removeAll"
            }
        ], 
        "path": "jquery/jquery.noconflict", 
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object", 
        "type": "Miscellaneous"
    }, 
    "$.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.", 
        "name": "jQuery.noop", 
        "params": [], 
        "path": "jquery/jquery.noop", 
        "syntax": "jQuery.noop() Returns: undefined", 
        "type": "Utilities"
    }, 
    "$.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().", 
        "name": "jQuery.now", 
        "params": [], 
        "path": "jquery/jquery.now", 
        "syntax": "jQuery.now() Returns: Number", 
        "type": "Utilities"
    }, 
    "$.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).", 
        "name": "jQuery.param", 
        "params": [
            {
                "descr": "Type: Array or PlainObject  An array or object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Array or PlainObject  An array or object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.", 
                "name": "traditional"
            }
        ], 
        "path": "jquery/jquery.param", 
        "syntax": "jQuery.param( obj ) Returns: String", 
        "type": "Ajax"
    }, 
    "$.parseHTML": {
        "descr": "jQuery.parseHTML uses a native DOM element creation function to convert the string to a set of DOM elements, which can then be inserted into the document.", 
        "name": "jQuery.parseHTML", 
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed", 
                "name": "data"
            }, 
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created", 
                "name": "context"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string", 
                "name": "keepScripts"
            }
        ], 
        "path": "jquery/jquery.parsehtml", 
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.parseJSON": {
        "descr": "Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all malformed JSON strings:", 
        "name": "jQuery.parseJSON", 
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.", 
                "name": "json"
            }
        ], 
        "path": "jquery/jquery.parsejson", 
        "syntax": "jQuery.parseJSON( json ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.", 
        "name": "jQuery.parseXML", 
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed", 
                "name": "data"
            }
        ], 
        "path": "jquery/jquery.parsexml", 
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument", 
        "type": "Utilities"
    }, 
    "$.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.post", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds. ", 
                "name": "success(data, textStatus, jqXHR)"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }
        ], 
        "path": "jquery/jquery.post", 
        "syntax": "jQuery.post( url [, data ] [, success(data, textStatus, jqXHR) ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.", 
        "name": "jQuery.proxy", 
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.", 
                "name": "additionalArguments"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.", 
                "name": "additionalArguments"
            }
        ], 
        "path": "jquery/jquery.proxy", 
        "syntax": "jQuery.proxy( function, context ) Returns: Function", 
        "type": "Utilities"
    }, 
    "$.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.", 
        "name": "jQuery.queue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function() The new function to add to the queue.", 
                "name": "callback()"
            }
        ], 
        "path": "jquery/jquery.queue", 
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "$.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.", 
        "name": "jQuery.removeData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to remove.", 
                "name": "name"
            }
        ], 
        "path": "jquery/jquery.removedata", 
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "$.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.", 
        "name": "jQuery.sub", 
        "params": [], 
        "path": "jquery/jquery.sub", 
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Miscellaneous"
    }, 
    "$.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.", 
        "name": "jQuery.trim", 
        "params": [
            {
                "descr": "Type: String  The string to trim.", 
                "name": "str"
            }
        ], 
        "path": "jquery/jquery.trim", 
        "syntax": "jQuery.trim( str ) Returns: String", 
        "type": "Utilities"
    }, 
    "$.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:", 
        "name": "jQuery.type", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to get the internal JavaScript [[Class]] of.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.type", 
        "syntax": "jQuery.type( obj ) Returns: String", 
        "type": "Utilities"
    }, 
    "$.unique": {
        "descr": "The $.unique() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.", 
        "name": "jQuery.unique", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.unique", 
        "syntax": "jQuery.unique( array ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.when": {
        "descr": "If a single Deferred is passed to jQuery.when, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as deferred.then. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by jQuery.ajax() is a Promise and can be used this way:", 
        "name": "jQuery.when", 
        "params": [
            {
                "descr": "Type: Deferred  One or more Deferred objects, or plain JavaScript objects.", 
                "name": "deferreds"
            }
        ], 
        "path": "jquery/jquery.when", 
        "syntax": "jQuery.when( deferreds ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    ":animated selector": {
        "descr": "Note: If you use a custom jQuery build without the effects module, the :animated selector will throw an error.", 
        "name": ":animated selector", 
        "params": [], 
        "path": "jquery/animated-selector", 
        "syntax": "animated selector  Description: Select all elements that are in the progress of an animation at the time the selector is run.  version added: 1.2jQuery( \":animated\" ) Note: If you use a custom jQuery build without the effects module, the :animated", 
        "type": "Selectors"
    }, 
    ":button selector": {
        "descr": "An equivalent selector to $( \":button\" ) using valid CSS is $( \"button, input[type='button']\" ).", 
        "name": ":button selector", 
        "params": [], 
        "path": "jquery/button-selector", 
        "syntax": "button selector  Description: Selects all button elements and elements of type button.  version added: 1.0jQuery( \":button\" ) An equivalent selector to $( \":button\" )", 
        "type": "Selectors"
    }, 
    ":checkbox selector": {
        "descr": "$( \":checkbox\" ) is equivalent to $( \"[type=checkbox]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':checkbox') is equivalent to $( \"*:checkbox\" ), so $( \"input:checkbox\" ) should be used instead.", 
        "name": ":checkbox selector", 
        "params": [], 
        "path": "jquery/checkbox-selector", 
        "syntax": "checkbox selector  Description: Selects all elements of type checkbox.  version added: 1.0jQuery( \":checkbox\" ) $( \":checkbox\" )", 
        "type": "Selectors"
    }, 
    ":checked selector": {
        "descr": "The :checked selector works for checkboxes, radio buttons, and select elements. For select elements only, use the :selected selector.", 
        "name": ":checked selector", 
        "params": [], 
        "path": "jquery/checked-selector", 
        "syntax": "checked selector  Description: Matches all elements that are checked or selected.  version added: 1.0jQuery( \":checked\" ) The :checked", 
        "type": "Selectors"
    }, 
    ":contains() selector": {
        "descr": "The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of :contains() can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.", 
        "name": ":contains() selector", 
        "params": [], 
        "path": "jquery/contains-selector", 
        "syntax": "contains selector  Description: Select all elements that contain the specified text.   version added: 1.1.4jQuery( \":contains(text)\" ) text: A string of text to look for. It's case sensitive.", 
        "type": "Selectors"
    }, 
    ":disabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled') is equivalent to $('*:disabled'), so $('input:disabled') or similar should be used instead.", 
        "name": ":disabled selector", 
        "params": [], 
        "path": "jquery/disabled-selector", 
        "syntax": "disabled selector  Description: Selects all elements that are disabled.  version added: 1.0jQuery( \":disabled\" ) As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled')", 
        "type": "Selectors"
    }, 
    ":empty selector": {
        "descr": "This is the inverse of :parent.", 
        "name": ":empty selector", 
        "params": [], 
        "path": "jquery/empty-selector", 
        "syntax": "empty selector  Description: Select all elements that have no children (including text nodes).", 
        "type": "Selectors"
    }, 
    ":enabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" ) is equivalent to $( \"*:enabled\" ), so $( \"input:enabled\" ) or similar should be used instead.", 
        "name": ":enabled selector", 
        "params": [], 
        "path": "jquery/enabled-selector", 
        "syntax": "enabled selector  Description: Selects all elements that are enabled.  version added: 1.0jQuery( \":enabled\" ) As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" )", 
        "type": "Selectors"
    }, 
    ":eq() selector": {
        "descr": "The index-related selectors (:eq(), :lt(), :gt(), :even, :odd) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.", 
        "name": ":eq() selector", 
        "params": [], 
        "path": "jquery/eq-selector", 
        "syntax": "eq selector  Description: Select the element at index n within the matched set.   version added: 1.0jQuery( \":eq(index)\" ) index: Zero-based index of the element to match.", 
        "type": "Selectors"
    }, 
    ":even selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :even selects the first element, third element, and so on within the matched set.", 
        "name": ":even selector", 
        "params": [], 
        "path": "jquery/even-selector", 
        "syntax": "even selector  Description: Selects even elements, zero-indexed. See also odd.  version added: 1.0jQuery( \":even\" ) In particular, note that the 0-based indexing means that, counter-intuitively, :even", 
        "type": "Selectors"
    }, 
    ":file selector": {
        "descr": ":file is equivalent to [type=\"file\"]. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":file\" ) is equivalent to $(\"*:file\" ), so $( \"input:file\" ) should be used instead.", 
        "name": ":file selector", 
        "params": [], 
        "path": "jquery/file-selector", 
        "syntax": "file selector  Description: Selects all elements of type file.  version added: 1.0jQuery( \":file\" ) :file", 
        "type": "Selectors"
    }, 
    ":first selector": {
        "descr": "The :first pseudo-class is equivalent to :eq( 0 ). It could also be written as :lt( 1 ). While this matches only a single element, :first-child can match more than one: One for each parent.", 
        "name": ":first selector", 
        "params": [], 
        "path": "jquery/first-selector", 
        "syntax": "first selector  Description: Selects the first matched element.  version added: 1.0jQuery( \":first\" ) The :first", 
        "type": "Selectors"
    }, 
    ":first-child selector": {
        "descr": "While :first matches only a single element, the :first-child selector can match more than one: one for each parent. This is equivalent to :nth-child(1).", 
        "name": ":first-child selector", 
        "params": [], 
        "path": "jquery/first-child-selector", 
        "syntax": "first-child selector  Description: Selects all elements that are the first child of their parent.  version added: 1.1.4jQuery( \":first-child\" ) While :first matches only a single element, the :first-child", 
        "type": "Selectors"
    }, 
    ":first-of-type selector": {
        "descr": "The :first-of-type selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.", 
        "name": ":first-of-type selector", 
        "params": [], 
        "path": "jquery/first-of-type-selector", 
        "syntax": "first-of-type selector  Description: Selects all elements that are the first among siblings of the same element name.  version added: 1.9jQuery( \":first-of-type\" ) The :first-of-type", 
        "type": "Selectors"
    }, 
    ":focus selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":focus\" ) is equivalent to $( \"*:focus\" ). If you are looking for the currently focused element, $( document.activeElement ) will retrieve it without having to search the whole DOM tree.", 
        "name": ":focus selector", 
        "params": [], 
        "path": "jquery/focus-selector", 
        "syntax": "focus selector  Description: Selects element if it is currently focused.  version added: 1.6jQuery( \":focus\" ) As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus", 
        "type": "Selectors"
    }, 
    ":gt() selector": {
        "descr": "index-related selectors", 
        "name": ":gt() selector", 
        "params": [], 
        "path": "jquery/gt-selector", 
        "syntax": "gt selector  Description: Select all elements at an index greater than index within the matched set.   version added: 1.0jQuery( \":gt(index)\" ) index: Zero-based index.", 
        "type": "Selectors"
    }, 
    ":has() selector": {
        "descr": "The expression $( \"div:has(p)\" ) matches a <div> if a <p> exists anywhere among its descendants, not just as a direct child.", 
        "name": ":has() selector", 
        "params": [], 
        "path": "jquery/has-selector", 
        "syntax": "has selector  Description: Selects elements which contain at least one element that matches the specified selector.   version added: 1.1.4jQuery( \":has(selector)\" ) selector: Any selector.", 
        "type": "Selectors"
    }, 
    ":header selector": {
        "descr": "", 
        "name": ":header selector", 
        "params": [], 
        "path": "jquery/header-selector", 
        "syntax": "header selector  Description: Selects all elements that are headers, like h1, h2, h3 and so on.  version added: 1.2jQuery( \":header\" )Additional Notes:  Because :header", 
        "type": "Selectors"
    }, 
    ":hidden selector": {
        "descr": "Elements can be considered hidden for several reasons:", 
        "name": ":hidden selector", 
        "params": [], 
        "path": "jquery/hidden-selector", 
        "syntax": "hidden selector  Description: Selects all elements that are hidden.  version added: 1.0jQuery( \":hidden\" ) Elements can be considered hidden for several reasons:", 
        "type": "Selectors"
    }, 
    ":image selector": {
        "descr": ":image is equivalent to [type=\"image\"]", 
        "name": ":image selector", 
        "params": [], 
        "path": "jquery/image-selector", 
        "syntax": "image selector  Description: Selects all elements of type image.  version added: 1.0jQuery( \":image\" ) :image", 
        "type": "Selectors"
    }, 
    ":input selector": {
        "descr": "The :input selector basically selects all form controls.", 
        "name": ":input selector", 
        "params": [], 
        "path": "jquery/input-selector", 
        "syntax": "input selector  Description: Selects all input, textarea, select and button elements.  version added: 1.0jQuery( \":input\" ) The :input", 
        "type": "Selectors"
    }, 
    ":lang() selector": {
        "descr": "The :lang() selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by \"-\". For example, the selector $(\"div:lang(en)\")will match <div lang=\"en\"> and <div lang=\"en-us\"> (and any of their descendant <div>s), but not <div lang=\"fr\">", 
        "name": ":lang() selector", 
        "params": [], 
        "path": "jquery/lang-selector", 
        "syntax": "lang selector  Description: Selects all elements of the specified language.   version added: 1.9jQuery( \":lang(language)\" ) language: A language code.", 
        "type": "Selectors"
    }, 
    ":last selector": {
        "descr": "Note that :last selects a single element by filtering the current jQuery collection and matching the last element within it.", 
        "name": ":last selector", 
        "params": [], 
        "path": "jquery/last-selector", 
        "syntax": "last selector  Description: Selects the last matched element.  version added: 1.0jQuery( \":last\" ) Note that :last", 
        "type": "Selectors"
    }, 
    ":last-child selector": {
        "descr": "While :last matches only a single element, :last-child can match more than one: one for each parent.", 
        "name": ":last-child selector", 
        "params": [], 
        "path": "jquery/last-child-selector", 
        "syntax": "last-child selector  Description: Selects all elements that are the last child of their parent.  version added: 1.1.4jQuery( \":last-child\" ) While :last matches only a single element, :last-child", 
        "type": "Selectors"
    }, 
    ":last-of-type selector": {
        "descr": "The :last-of-type selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.", 
        "name": ":last-of-type selector", 
        "params": [], 
        "path": "jquery/last-of-type-selector", 
        "syntax": "last-of-type selector  Description: Selects all elements that are the last among siblings of the same element name.  version added: 1.9jQuery( \":last-of-type\" ) The :last-of-type", 
        "type": "Selectors"
    }, 
    ":lt() selector": {
        "descr": "index-related selectors", 
        "name": ":lt() selector", 
        "params": [], 
        "path": "jquery/lt-selector", 
        "syntax": "lt selector  Description: Select all elements at an index less than index within the matched set.   version added: 1.0jQuery( \":lt(index)\" ) index: Zero-based index.", 
        "type": "Selectors"
    }, 
    ":not() selector": {
        "descr": "All selectors are accepted inside :not(), for example: :not(div a) and :not(div,a).", 
        "name": ":not() selector", 
        "params": [], 
        "path": "jquery/not-selector", 
        "syntax": "not selector  Description: Selects all elements that do not match the given selector.   version added: 1.0jQuery( \":not(selector)\" ) selector: A selector with which to filter by.", 
        "type": "Selectors"
    }, 
    ":nth-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing two <li>s, $( \"li:nth-child(1)\" ) selects the first <li> while $( \"li:eq(1)\" ) selects the second.", 
        "name": ":nth-child() selector", 
        "params": [], 
        "path": "jquery/nth-child-selector", 
        "syntax": "nth-child selector  Description: Selects all elements that are the nth-child of their parent.   version added: 1.1.4jQuery( \":nth-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1", 
        "type": "Selectors"
    }, 
    ":nth-last-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $( \"li:nth-last-child(1)\" ) selects the third, last, <li>.", 
        "name": ":nth-last-child() selector", 
        "params": [], 
        "path": "jquery/nth-last-child-selector", 
        "syntax": "nth-last-child selector  Description: Selects all elements that are the nth-child of their parent, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1", 
        "type": "Selectors"
    }, 
    ":nth-last-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $('li:nth-last-of-type(1)') selects the third, last, <li>.", 
        "name": ":nth-last-of-type() selector", 
        "params": [], 
        "path": "jquery/nth-last-of-type-selector", 
        "syntax": "nth-last-of-type selector  Description: Selects all elements that are the nth-child of their parent, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1", 
        "type": "Selectors"
    }, 
    ":nth-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting.", 
        "name": ":nth-of-type() selector", 
        "params": [], 
        "path": "jquery/nth-of-type-selector", 
        "syntax": "nth-of-type selector  Description: Selects all elements that are the nth child of their parent in relation to siblings with the same element name.   version added: 1.9jQuery( \":nth-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1", 
        "type": "Selectors"
    }, 
    ":odd selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :odd selects the second element, fourth element, and so on within the matched set.", 
        "name": ":odd selector", 
        "params": [], 
        "path": "jquery/odd-selector", 
        "syntax": "odd selector  Description: Selects odd elements, zero-indexed. See also even.  version added: 1.0jQuery( \":odd\" ) In particular, note that the 0-based indexing means that, counter-intuitively, :odd", 
        "type": "Selectors"
    }, 
    ":only-child selector": {
        "descr": "If the parent has other child elements, nothing is matched.", 
        "name": ":only-child selector", 
        "params": [], 
        "path": "jquery/only-child-selector", 
        "syntax": "only-child selector  Description: Selects all elements that are the only child of their parent.  version added: 1.1.4jQuery( \":only-child\" ) If the parent has other child elements, nothing is matched.", 
        "type": "Selectors"
    }, 
    ":only-of-type selector": {
        "descr": "If the parent has other child elements with the same element name, nothing is matched.", 
        "name": ":only-of-type selector", 
        "params": [], 
        "path": "jquery/only-of-type-selector", 
        "syntax": "only-of-type selector  Description: Selects all elements that have no siblings with the same element name.  version added: 1.9jQuery( \":only-of-type\" ) If the parent has other child elements with the same element name, nothing is matched.", 
        "type": "Selectors"
    }, 
    ":parent selector": {
        "descr": "This is the inverse of :empty.", 
        "name": ":parent selector", 
        "params": [], 
        "path": "jquery/parent-selector", 
        "syntax": "parent selector  Description: Select all elements that have at least one child node (either an element or text).", 
        "type": "Selectors"
    }, 
    ":password selector": {
        "descr": "$( \":password\" ) is equivalent to $( \"[type=password]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":password\" ) is equivalent to $( \"*:password\" ), so $( \"input:password\" ) should be used instead.", 
        "name": ":password selector", 
        "params": [], 
        "path": "jquery/password-selector", 
        "syntax": "password selector  Description: Selects all elements of type password.  version added: 1.0jQuery( \":password\" ) $( \":password\" )", 
        "type": "Selectors"
    }, 
    ":radio selector": {
        "descr": "$( \":radio\" ) is equivalent to $( \"[type=radio]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":radio\" ) is equivalent to $( \"*:radio\" ), so $( \"input:radio\" ) should be used instead.", 
        "name": ":radio selector", 
        "params": [], 
        "path": "jquery/radio-selector", 
        "syntax": "radio selector  Description: Selects all elements of type radio.  version added: 1.0jQuery( \":radio\" ) $( \":radio\" )", 
        "type": "Selectors"
    }, 
    ":reset selector": {
        "descr": ":reset is equivalent to [type=\"reset\"]", 
        "name": ":reset selector", 
        "params": [], 
        "path": "jquery/reset-selector", 
        "syntax": "reset selector  Description: Selects all elements of type reset.  version added: 1.0jQuery( \":reset\" ) :reset", 
        "type": "Selectors"
    }, 
    ":root selector": {
        "descr": "In HTML, the root of the document, and thus the element that $(\":root\") selects, is always the <html> element.", 
        "name": ":root selector", 
        "params": [], 
        "path": "jquery/root-selector", 
        "syntax": "root selector  Description: Selects the element that is the root of the document.  version added: 1.9jQuery( \":root\" ) In HTML, the root of the document, and thus the element that $(\":root\")", 
        "type": "Selectors"
    }, 
    ":selected selector": {
        "descr": "The :selected selector works for <option> elements. It does not work for checkboxes or radio inputs; use :checked for them.", 
        "name": ":selected selector", 
        "params": [], 
        "path": "jquery/selected-selector", 
        "syntax": "selected selector  Description: Selects all elements that are selected.  version added: 1.0jQuery( \":selected\" ) The :selected", 
        "type": "Selectors"
    }, 
    ":submit selector": {
        "descr": "The :submit selector typically applies to button or input elements. Note that some browsers treat <button> element as type=\"submit\" implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a type property.", 
        "name": ":submit selector", 
        "params": [], 
        "path": "jquery/submit-selector", 
        "syntax": "submit selector  Description: Selects all elements of type submit.  version added: 1.0jQuery( \":submit\" ) The :submit", 
        "type": "Selectors"
    }, 
    ":target selector": {
        "descr": "If the document's URI contains a fragment identifier, or hash, then the :target selector will match the element with an ID that matches the identifier. For example, given a document with a URI of http://example.com/#foo, $( \"p:target\" ) will select the <p id=\"foo\"> element.", 
        "name": ":target selector", 
        "params": [], 
        "path": "jquery/target-selector", 
        "syntax": "target selector  Description: Selects the target element indicated by the fragment identifier of the document's URI.  version added: 1.9jQuery( \":target\" ) If the document's URI contains a fragment identifier, or hash, then the :target", 
        "type": "Selectors"
    }, 
    ":text selector": {
        "descr": "$( \":text\" ) allows us to select all <input type=\"text\"> elements. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":text\" ) is equivalent to $( \"*:text\" ), so $( \"input:text\" ) should be used instead.", 
        "name": ":text selector", 
        "params": [], 
        "path": "jquery/text-selector", 
        "syntax": "text selector  Description: Selects all elements of type text.  version added: 1.0jQuery( \":text\" ) $( \":text\" )", 
        "type": "Selectors"
    }, 
    ":visible selector": {
        "descr": "Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.", 
        "name": ":visible selector", 
        "params": [], 
        "path": "jquery/visible-selector", 
        "syntax": "visible selector  Description: Selects all elements that are visible.  version added: 1.0jQuery( \":visible\" ) Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.", 
        "type": "Selectors"
    }, 
    "AbstractWorker.onerror": {
        "descr": "The AbstractWorker.onerror property represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.", 
        "name": "AbstractWorker.onerror", 
        "params": [], 
        "path": "dom/abstractworker.onerror", 
        "syntax": "worker.onerror = eventHandler Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard No change from Web Workers. Web Workers Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) (Yes) 10.0 (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) (Yes) 10.0 (Yes) (Yes)  See also", 
        "type": "Web Workers"
    }, 
    "Ajax events": {
        "descr": "Ajax requests produce a number of different events that you can subscribe to. Here's a full list of the events and in what order they are triggered.", 
        "name": "Ajax events", 
        "params": [], 
        "path": "jquery/ajax_events", 
        "syntax": "document, calling any handlers which may be listening. You can listen for these events like so:  $(document).bind(\"ajaxSend\", function(){   $(\"#loading\").show();\n or  }).bind(\"ajaxComplete\", function(){   $(\"#loading\").hide();\n or  });", 
        "type": "Ajax"
    }, 
    "All selector (\u201c*\u201d": {
        "descr": "Caution: The all, or universal, selector is extremely slow, except when used by itself.", 
        "name": "All selector (\u201c*\u201d", 
        "params": [], 
        "path": "jquery/all-selector", 
        "syntax": "all selector  Description: Selects all elements.  version added: 1.0jQuery( \"*\" ) Caution: The all, or universal, selector is extremely slow, except when used by itself.", 
        "type": "Selectors"
    }, 
    "AnalyserNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnalyserNode", 
        "params": [
            {
                "descr": "Is an unsigned long value representing the size of the Fast Fourier Transform to be used to determine the frequency domain. ", 
                "name": "AnalyserNode.fftSize"
            }, 
            {
                "descr": "Is an unsigned long value containing half the FFT size.", 
                "name": "AnalyserNode.frequencyBinCount Read only"
            }, 
            {
                "descr": "Is a double value representing the minimum power value in the scaling range for the FFT analysis data for conversion to unsigned bytw values. ", 
                "name": "AnalyserNode.minDecibels"
            }, 
            {
                "descr": "Is a double value representing the maximumum power value in the scaling range for the FFT analysis data for conversion to unsigned bytw values. ", 
                "name": "AnalyserNode.maxDecibels"
            }, 
            {
                "descr": "Is a double value representing the averaging constant with the last analysis frame. ", 
                "name": "AnalyserNode.smoothingTimeConstant"
            }, 
            {
                "descr": "Copies the current frequency data into the array, the passed floating-point array. ", 
                "name": "Analyser.getFloatFrequencyData()"
            }, 
            {
                "descr": "Copies the current frequency data into the array, the passed unsigned byte array. ", 
                "name": "Analyser.getByteFrequencyData()"
            }, 
            {
                "descr": "Copies the current waveform, or time-domain, data into the array, the passed unsigned byte array. ", 
                "name": "Analyser.getByteTimeDomainData()"
            }
        ], 
        "path": "dom/analysernode", 
        "syntax": "AnalyserNodeinterface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "AnimationEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent", 
        "params": [
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition.", 
                "name": "AnimationEvent.animationName Read only"
            }, 
            {
                "descr": "Is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "AnimationEvent.elapsedTime Read only"
            }, 
            {
                "descr": "Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. ", 
                "name": "AnimationEvent.pseudoElement Read only"
            }, 
            {
                "descr": "Creates an AnimationEvent event with the given parameters.", 
                "name": "AnimationEvent()"
            }, 
            {
                "descr": "Initializes a AnimationEvent created using the deprecated Document.createEvent(\"AnimationEvent\") method.", 
                "name": "AnimationEvent.initAnimationEvent()"
            }
        ], 
        "path": "dom/animationevent", 
        "syntax": "AnimationEvent interface represents events providing information related to animations. Properties Also inherits properties from its parent Event.  AnimationEvent.animationName Read only   Is a DOMString containing the value of the animation-name CSS property associated with the transition.  AnimationEvent.elapsedTime", 
        "type": "Events"
    }, 
    "AnimationEvent.animationName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.animationName", 
        "params": [], 
        "path": "dom/animationevent.animationname", 
        "syntax": "AnimationEvent.animationName read-only property is a DOMString containing the value of the animation-name CSS property associated with the transition. Syntax name = AnimationEvent.animationName Specifications Specification Status Comment CSS Animations Working Draft Initial definition. Browser compatibility  See also Using CSS animations Animation-related CSS properties and at-rules: animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, @keyframes", 
        "type": "Events"
    }, 
    "AnimationEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the AnimationEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition. ", 
                "name": "animationName Optional"
            }, 
            {
                "descr": "Is float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "elapsedTime Optional"
            }, 
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ", 
                "name": "pseudoElement Optional"
            }
        ], 
        "path": "dom/animationevent.animationevent", 
        "syntax": "AnimationEvent()", 
        "type": "Events"
    }, 
    "AnimationEvent.elapsedTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.elapsedTime", 
        "params": [], 
        "path": "dom/animationevent.elapsedtime", 
        "syntax": "AnimationEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an \"animationstart\" event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay)", 
        "type": "Events"
    }, 
    "AnimationEvent.initAnimationEvent": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "AnimationEvent.initAnimationEvent", 
        "params": [
            {
                "descr": "Is a DOMString identifying the specific type of animation event that occurred. ", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a Boolean flag indicating if the event can bubble (true) or not (false).", 
                "name": "canBubbleArg"
            }, 
            {
                "descr": "Is a Boolean flag indicating if the event associated action can be avoided (true) or not (false).", 
                "name": "cancelableArg"
            }, 
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition.", 
                "name": "animationNameArg"
            }, 
            {
                "descr": "Is float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "elapsedTimeArg"
            }
        ], 
        "path": "dom/animationevent.initanimationevent", 
        "syntax": "animationEvent.initAnimationEvent(typeArg, canBubbleArg, cancelableArg, animationNameArg, elapsedTimeArg);", 
        "type": "Events"
    }, 
    "AnimationEvent.pseudoElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.pseudoElement", 
        "params": [], 
        "path": "dom/animationevent.pseudoelement", 
        "syntax": "AnimationEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''. Syntax name = AnimationEvent.pseudoElement Specifications Specification Status Comment CSS Animations Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "Array": {
        "descr": "The JavaScript Array global object is a constructor for arrays, which are high-level, list-like objects.", 
        "name": "Array", 
        "params": [
            {
                "descr": "A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the Array constructor and that argument is a number. ", 
                "name": "element0, element1, ..., elementN"
            }, 
            {
                "descr": "If the only argument passed to the Array constructor is an integer between 0 and 232-1 (inclusive), this returns a new JavaScript array with length set to that number and containing that many items, each item being undefined. If the argument is any other number, a RangeError exception is thrown.", 
                "name": "arrayLength"
            }, 
            {
                "descr": "The Array constructor's length property whose value is 1.", 
                "name": "Array.length"
            }, 
            {
                "descr": "Allows the addition of properties to all array objects.", 
                "name": "Array.prototype"
            }, 
            {
                "descr": "Returns true if a variable is an array, if not false.", 
                "name": "Array.isArray()"
            }, 
            {
                "descr": "Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.", 
                "name": "Array.of()"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "Array.prototype.constructor"
            }, 
            {
                "descr": "Reflects the number of elements in an array.", 
                "name": "Array.prototype.length"
            }, 
            {
                "descr": "Removes the last element from an array and returns that element.", 
                "name": "Array.prototype.pop()"
            }, 
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.", 
                "name": "Array.prototype.push()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.", 
                "name": "Array.prototype.reverse()"
            }, 
            {
                "descr": "Removes the first element from an array and returns that element.", 
                "name": "Array.prototype.shift()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array.", 
                "name": "Array.prototype.sort()"
            }, 
            {
                "descr": "Adds and/or removes elements from an array.", 
                "name": "Array.prototype.splice()"
            }, 
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.", 
                "name": "Array.prototype.unshift()"
            }, 
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).", 
                "name": "Array.prototype.concat()"
            }, 
            {
                "descr": "Joins all elements of an array into a string.", 
                "name": "Array.prototype.join()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array.", 
                "name": "Array.prototype.slice()"
            }, 
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ", 
                "name": "Array.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Calls a function for each element in the array.", 
                "name": "Array.prototype.forEach()"
            }, 
            {
                "descr": "Returns a new Iterator that contains the key/value pairs for each index in the array.", 
                "name": "Array.prototype.entries()"
            }, 
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.every()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.some()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.", 
                "name": "Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if the this array satisfies the provided testing function or undefined if not found.", 
                "name": "Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if the this array satisfies the provided testing function or -1 if not found.", 
                "name": "Array.prototype.findIndex()"
            }, 
            {
                "descr": "Returns a new Iterator that contains the keys for each index in the array.", 
                "name": "Array.prototype.keys()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
                "name": "Array.prototype.map()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.", 
                "name": "Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
                "name": "Array.prototype.reduceRight()"
            }
        ], 
        "path": "javascript/global_objects/array", 
        "syntax": "[element0, element1, ..., elementN]new Array(element0, element1, ..., elementN)new Array(arrayLength)", 
        "type": "Array"
    }, 
    "Array.concat": {
        "descr": "The concat() method returns a new array comprised of this array joined with other array(s) and/or value(s).", 
        "name": "Array.concat", 
        "params": [
            {
                "descr": "Arrays and/or values to concatenate to the resulting array.", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/global_objects/array/concat", 
        "syntax": "arr.concat(value1, value2, ..., valueN)", 
        "type": "Array"
    }, 
    "Array.every": {
        "descr": "Tests whether all elements in the array pass the test implemented by the provided function.", 
        "name": "Array.every", 
        "params": [
            {
                "descr": "Function to test for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/every", 
        "syntax": "array.every(callback[, thisObject])", 
        "type": "Array"
    }, 
    "Array.filter": {
        "descr": "Creates a new array with all elements that pass the test implemented by the provided function.", 
        "name": "Array.filter", 
        "params": [
            {
                "descr": "Function to test each element of the array.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/filter", 
        "syntax": "array.filter(callback[, thisObject])", 
        "type": "Array"
    }, 
    "Array.forEach": {
        "descr": "Executes a provided function once per array element.", 
        "name": "Array.forEach", 
        "params": [
            {
                "descr": "Function to execute for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/foreach", 
        "syntax": "array.forEach(callback[, thisArg])", 
        "type": "Array"
    }, 
    "Array.indexOf": {
        "descr": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.", 
        "name": "Array.indexOf", 
        "params": [
            {
                "descr": "Element to locate in the array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "Default: 0 (Entire array is searched) The index to start the search at. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/array/indexof", 
        "syntax": "arr.indexOf(searchElement[, fromIndex])", 
        "type": "Array"
    }, 
    "Array.isArray": {
        "descr": "The Array.isArray() method returns true if an object is an array, false if it is not.", 
        "name": "Array.isArray", 
        "params": [
            {
                "descr": "The object to be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/array/isarray", 
        "syntax": "Array.isArray(obj)", 
        "type": "Array"
    }, 
    "Array.join": {
        "descr": "The join() method joins all elements of an array into a string.", 
        "name": "Array.join", 
        "params": [
            {
                "descr": "Specifies a string to separate each element of the array. ", 
                "name": "separator"
            }
        ], 
        "path": "javascript/global_objects/array/join", 
        "syntax": "str = arr.join(separator)", 
        "type": "Array"
    }, 
    "Array.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.", 
        "name": "Array.lastIndexOf", 
        "params": [
            {
                "descr": "Element to locate in the array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "The index at which to start searching backwards. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/array/lastindexof", 
        "syntax": "array.lastIndexOf(searchElement[, fromIndex])", 
        "type": "Array"
    }, 
    "Array.length": {
        "descr": "An unsigned, 32-bit integer that specifies the number of elements in an array.", 
        "name": "Array.length", 
        "params": [], 
        "path": "javascript/global_objects/array/length", 
        "syntax": "array.length Description The value of the length property is an integer with a positive sign and a value less than 2 to the 32nd power (232).", 
        "type": "Array"
    }, 
    "Array.map": {
        "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
        "name": "Array.map", 
        "params": [
            {
                "descr": "Function that produces an element of the new Array from an element of the current one.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/map", 
        "syntax": "array.map(callback[, thisArg])", 
        "type": "Array"
    }, 
    "Array.of": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Array.of", 
        "params": [
            {
                "descr": "Elements of which to create the array.", 
                "name": "element0, element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/of", 
        "syntax": "Array.of()", 
        "type": "Array"
    }, 
    "Array.pop": {
        "descr": "The pop() method removes the last element from an array and returns that element.", 
        "name": "Array.pop", 
        "params": [], 
        "path": "javascript/global_objects/array/pop", 
        "syntax": "arr.pop()", 
        "type": "Array"
    }, 
    "Array.prototype": {
        "descr": "The Array.prototype property represents the prototype for the Array constructor.", 
        "name": "Array.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "Array.prototype.constructor"
            }, 
            {
                "descr": "Reflects the number of elements in an array.", 
                "name": "Array.prototype.length"
            }, 
            {
                "descr": "Removes the last element from an array and returns that element.", 
                "name": "Array.prototype.pop()"
            }, 
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.", 
                "name": "Array.prototype.push()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.", 
                "name": "Array.prototype.reverse()"
            }, 
            {
                "descr": "Removes the first element from an array and returns that element.", 
                "name": "Array.prototype.shift()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array.", 
                "name": "Array.prototype.sort()"
            }, 
            {
                "descr": "Adds and/or removes elements from an array.", 
                "name": "Array.prototype.splice()"
            }, 
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.", 
                "name": "Array.prototype.unshift()"
            }, 
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).", 
                "name": "Array.prototype.concat()"
            }, 
            {
                "descr": "Joins all elements of an array into a string.", 
                "name": "Array.prototype.join()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array.", 
                "name": "Array.prototype.slice()"
            }, 
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ", 
                "name": "Array.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Calls a function for each element in the array.", 
                "name": "Array.prototype.forEach()"
            }, 
            {
                "descr": "Returns a new Iterator that contains the key/value pairs for each index in the array.", 
                "name": "Array.prototype.entries()"
            }, 
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.every()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.some()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.", 
                "name": "Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if the this array satisfies the provided testing function or undefined if not found.", 
                "name": "Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if the this array satisfies the provided testing function or -1 if not found.", 
                "name": "Array.prototype.findIndex()"
            }, 
            {
                "descr": "Returns a new Iterator that contains the keys for each index in the array.", 
                "name": "Array.prototype.keys()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
                "name": "Array.prototype.map()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.", 
                "name": "Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
                "name": "Array.prototype.reduceRight()"
            }
        ], 
        "path": "javascript/global_objects/array/prototype", 
        "syntax": "Array.prototype.toSource()", 
        "type": "Array"
    }, 
    "Array.push": {
        "descr": "The push() method mutates an array by appending the given elements and returning the new length of the array.", 
        "name": "Array.push", 
        "params": [
            {
                "descr": "The elements to add to the end of the array.", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/push", 
        "syntax": "arr.push(element1, ..., elementN)", 
        "type": "Array"
    }, 
    "Array.reduce": {
        "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.", 
        "name": "Array.reduce", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  previousValue  The value previously returned in the last invocation of the callback, or initialValue, if supplied. ", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduce", 
        "syntax": "array.reduce(callback,[initialValue])", 
        "type": "Array"
    }, 
    "Array.reduceRight": {
        "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
        "name": "Array.reduceRight", 
        "params": [
            {
                "descr": "Function to execute on each value in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduceright", 
        "syntax": "array.reduceRight(callback[, initialValue])", 
        "type": "Array"
    }, 
    "Array.reverse": {
        "descr": "The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.", 
        "name": "Array.reverse", 
        "params": [], 
        "path": "javascript/global_objects/array/reverse", 
        "syntax": "arr.reverse()", 
        "type": "Array"
    }, 
    "Array.shift": {
        "descr": "The shift() method removes the first element from an array and returns that element. This method changes the length of the array.", 
        "name": "Array.shift", 
        "params": [], 
        "path": "javascript/global_objects/array/shift", 
        "syntax": "arr.shift()", 
        "type": "Array"
    }, 
    "Array.slice": {
        "descr": "The slice() method returns a shallow copy of a portion of an array.", 
        "name": "Array.slice", 
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.", 
                "name": "begin"
            }, 
            {
                "descr": "Zero-based index at which to end extraction. ", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/array/slice", 
        "syntax": "arr.slice(begin[, end])", 
        "type": "Array"
    }, 
    "Array.some": {
        "descr": "Tests whether some element in the array passes the test implemented by the provided function.", 
        "name": "Array.some", 
        "params": [
            {
                "descr": "Function to test for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/some", 
        "syntax": "array.some(callback[, thisObject])", 
        "type": "Array"
    }, 
    "Array.sort": {
        "descr": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is lexicographic (not numeric).", 
        "name": "Array.sort", 
        "params": [
            {
                "descr": "Specifies a function that defines the sort order. ", 
                "name": "compareFunction"
            }
        ], 
        "path": "javascript/global_objects/array/sort", 
        "syntax": "arr.sort([compareFunction])", 
        "type": "Array"
    }, 
    "Array.splice": {
        "descr": "The splice() method changes the content of an array, adding new elements while removing old elements.", 
        "name": "Array.splice", 
        "params": [
            {
                "descr": "Index at which to start changing the array. ", 
                "name": "index"
            }, 
            {
                "descr": "An integer indicating the number of old array elements to remove. ", 
                "name": "howMany"
            }, 
            {
                "descr": "The elements to add to the array. ", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/splice", 
        "syntax": "array.splice(index , howMany[, element1[, ...[, elementN]]])", 
        "type": "Array"
    }, 
    "Array.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \",\").", 
        "name": "Array.toLocaleString", 
        "params": [], 
        "path": "javascript/global_objects/array/tolocalestring", 
        "syntax": "arr.toLocaleString();", 
        "type": "Array"
    }, 
    "Array.toString": {
        "descr": "The toString() method returns a string representing the specified array and its elements.", 
        "name": "Array.toString", 
        "params": [], 
        "path": "javascript/global_objects/array/tostring", 
        "syntax": "arr.toString()", 
        "type": "Array"
    }, 
    "Array.unshift": {
        "descr": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.", 
        "name": "Array.unshift", 
        "params": [
            {
                "descr": "The elements to add to the front of the array.", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/unshift", 
        "syntax": "arr.unshift(element1, ..., elementN)", 
        "type": "Array"
    }, 
    "Attribute contains prefix selector [name|=\"value\"]": {
        "descr": "This selector was introduced into the CSS specification to handle language attributes.", 
        "name": "Attribute contains prefix selector [name|=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-prefix-selector", 
        "syntax": "attributeContainsPrefix selector  Description: Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).", 
        "type": "Selectors"
    }, 
    "Attribute contains selector [name*=\"value\"]": {
        "descr": "This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases.", 
        "name": "Attribute contains selector [name*=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-selector", 
        "syntax": "attributeContains selector  Description: Selects elements that have the specified attribute with a value containing the a given substring.   version added: 1.0jQuery( \"[attribute*='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute contains word selector [name~=\"value\"]": {
        "descr": "This selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.", 
        "name": "Attribute contains word selector [name~=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-word-selector", 
        "syntax": "attributeContainsWord selector  Description: Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.   version added: 1.0jQuery( \"[attribute~='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute ends with selector [name$=\"value\"]": {
        "descr": "", 
        "name": "Attribute ends with selector [name$=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-ends-with-selector", 
        "syntax": "attributeEndsWith selector  Description: Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.   version added: 1.0jQuery( \"[attribute$='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute equals selector [name=\"value\"]": {
        "descr": "", 
        "name": "Attribute equals selector [name=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-equals-selector", 
        "syntax": "attributeEquals selector  Description: Selects elements that have the specified attribute with a value exactly equal to a certain value.   version added: 1.0jQuery( \"[attribute='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute not equal selector [name!=\"value\"]": {
        "descr": "This selector is equivalent to :not([attr='value']).", 
        "name": "Attribute not equal selector [name!=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-not-equal-selector", 
        "syntax": "attributeNotEqual selector  Description: Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.   version added: 1.0jQuery( \"[attribute!='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute starts with selector [name^=\"value\"]": {
        "descr": "This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.", 
        "name": "Attribute starts with selector [name^=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-starts-with-selector", 
        "syntax": "attributeStartsWith selector  Description: Selects elements that have the specified attribute with a value beginning exactly with a given string.   version added: 1.0jQuery( \"[attribute^='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "AudioBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioBuffer", 
        "params": [
            {
                "descr": "Returns a float representing the sample rate, samples per second, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.sampleRate Read only"
            }, 
            {
                "descr": "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.length Read only"
            }, 
            {
                "descr": "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.duration Read only"
            }, 
            {
                "descr": "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.", 
                "name": "AudioBuffer.numberOfChannels Read only"
            }, 
            {
                "descr": "Returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel). ", 
                "name": "AudioBuffer.getChannelData()"
            }
        ], 
        "path": "dom/audiobuffer", 
        "syntax": "AudioBuffer interface represents an audio asset residing in memory. The buffer contains data in the following format: non-interleaved IEEE 32-bit linear PCM with a nominal range between -1 and +1. It may contain several channels. Objects of these types are designed to hold small audio snippets, typically less than 45s. For longer sounds, objects implementing the MediaAudioElementSourceNode are more suitable. Properties  AudioBuffer.sampleRate Read only   Returns a float representing the sample rate, samples per second, of the PCM data stored in the buffer.  AudioBuffer.length Read only   Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.  AudioBuffer.duration Read only   Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.  AudioBuffer.numberOfChannels Read only   Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer. Methods  AudioBuffer.getChannelData()", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioBufferSourceNode", 
        "params": [
            {
                "descr": "Is an AudioNode, or the value NULL, that defines the audio asset to be played.", 
                "name": "AudioBufferSourceNode.buffer"
            }, 
            {
                "descr": "Is an a-rate AudioParam that defines the speed factor at which the audio asset will be played. ", 
                "name": "AudioBufferSourceNode.playbackRate"
            }, 
            {
                "descr": "Is a Boolean attribute indicating if the play of the asset must restart when the end of the AudioBuffer is reached. ", 
                "name": "AudioBufferSourceNode.loop"
            }, 
            {
                "descr": "Is a double value indicating, in seconds, where in the AudioBuffer the restart of the play must happen. ", 
                "name": "AudioBufferSourceNode.loopStart"
            }, 
            {
                "descr": "Is a double value indicating, in seconds, where in the AudioBuffer the replay of the play must stop (and eventually loop again). ", 
                "name": "AudioBufferSourceNode.loopEnd"
            }, 
            {
                "descr": "Is an EventHandler containing the callback associated with the ended event.", 
                "name": "AudioBufferSourceNode.onended"
            }, 
            {
                "descr": "Schedules the start of the playback of the audio asset. ", 
                "name": "AudioBufferSourceNode.start()"
            }, 
            {
                "descr": "Schedules the end of the playback of an audio asset. ", 
                "name": "AudioBufferSourceNode.stop()"
            }
        ], 
        "path": "dom/audiobuffersourcenode", 
        "syntax": "AudioBufferSourceNodeinterface represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "AudioContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioContext", 
        "params": [
            {
                "descr": "Returns an AudioDestinationNode representing the final destination of all audio in the context. ", 
                "name": "AudioContext.destination Read only"
            }, 
            {
                "descr": "Returns a float representing the sample rate, in samples per second, used by all node in this context. ", 
                "name": "AudioContext.sampleRate Read only"
            }, 
            {
                "descr": "Returns a double representing an ever-increasing hardware time using for scheduling. ", 
                "name": "AudioContext.currentTime Read only"
            }, 
            {
                "descr": "Returns the AudioListener used for 3D spatialization.", 
                "name": "AudioContext.listener Read only"
            }, 
            {
                "descr": "Creates an AudioBuffer.", 
                "name": "AudioContext.createBuffer()"
            }, 
            {
                "descr": "Creates an AudioBufferSourceNode.", 
                "name": "AudioContext.createBufferSource()"
            }, 
            {
                "descr": "Creates a MediaElementAudioSourceNode associated with an HTMLMediaElement associated with elements like <video> or <audio>.", 
                "name": "AudioContext.createMediaElementSource()"
            }, 
            {
                "descr": "Creates a MediaStreamAudioSourceNode associated with a WebRTC MediaStream representing an audio stream, that may come from the local computer microphone or other sources.", 
                "name": "AudioContext.createMediaStreamSource()"
            }, 
            {
                "descr": "Creates a MediaStreamAudioDestinationNode associated with a WebRTC MediaStream representing an audio stream, that may be stored in a local file or sent to another computer.", 
                "name": "AudioContext.createMediaStreamDestination()"
            }, 
            {
                "descr": "Creates a ScriptProcessorNode.", 
                "name": "AudioContext.createScriptProcessor()"
            }, 
            {
                "descr": "Creates an AnalyserNode.", 
                "name": "AudioContext.createAnalyser()"
            }, 
            {
                "descr": "Creates a GainNode.", 
                "name": "AudioContext.createGain()"
            }, 
            {
                "descr": "Creates a DelayNode.", 
                "name": "AudioContext.createDelay()"
            }, 
            {
                "descr": "Creates a BiquadFilterNode.", 
                "name": "AudioContext.createBiquadFilter()"
            }, 
            {
                "descr": "Creates a WaveShaperNode.", 
                "name": "AudioContext.createWaveShaper()"
            }, 
            {
                "descr": "Creates a PannerNode.", 
                "name": "AudioContext.createPanner()"
            }, 
            {
                "descr": "Creates a ConvolverNode.", 
                "name": "AudioContext.createConvolver()"
            }, 
            {
                "descr": "Creates a ChannelSplitterNode.", 
                "name": "AudioContext.createChannelSplitter()"
            }, 
            {
                "descr": "Creates a ChannelMergerNode.", 
                "name": "AudioContext.createChannelMerger()"
            }, 
            {
                "descr": "Creates a DynamicsCompressorNode.", 
                "name": "AudioContext.createDynamicsCompressor()"
            }, 
            {
                "descr": "Creates a JavaScriptNode.", 
                "name": "AudioContext.createJavaScriptNode()"
            }, 
            {
                "descr": "Creates an OscillatorNode.", 
                "name": "AudioContext.createOscillator()"
            }, 
            {
                "descr": "Creates a WaveTableNode.", 
                "name": "AudioContext.createWaveTable()"
            }
        ], 
        "path": "dom/audiocontext", 
        "syntax": "AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode", 
        "type": "Web Audio"
    }, 
    "AudioContext.createJavaScriptNode": {
        "descr": "The AudioContext.createJavaScriptNode() method creates a JavaScriptNode which is used for directly manipulating audio data with JavaScript. The method was rename AudioContext.createScriptProcessor. See also ScriptProcessorNode", 
        "name": "AudioContext.createJavaScriptNode", 
        "params": [
            {
                "descr": "The buffer size must be in units of sample frames, i.e., one of: 256, 512, 1024, 2048, 4096, 8192, or 16384. ", 
                "name": "bufferSize"
            }, 
            {
                "descr": "The number of input channels in the audio stream.", 
                "name": "numInputChannels"
            }, 
            {
                "descr": "The number of output channels in the audio stream.", 
                "name": "numOutputChannels"
            }
        ], 
        "path": "dom/audiocontext.createjavascriptnode", 
        "syntax": "AudioContext.createJavaScriptNode(bufferSize, numInputChannels, numOutputChannels)", 
        "type": "Web Audio"
    }, 
    "AudioDestinationNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioDestinationNode", 
        "params": [
            {
                "descr": "Is an unsigned long defining the maximum amount of channels that the physical device can handle. ", 
                "name": "AudioDestinationNode.maxChannelCount"
            }
        ], 
        "path": "dom/audiodestinationnode", 
        "syntax": "AudioDestinationNodeinterface represents the terminal destination of an audio in a given context, it usually represents the speakers. AudioBufferSourceNode has no output (as it is the output, no more AudioNode can be linked to it) and one input. The amount of channels in the input must be between 0", 
        "type": "Web Audio"
    }, 
    "AudioListener": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioListener", 
        "params": [
            {
                "descr": "Is a double value representing the amount of pitch shift to use when rendering a doppler effect. ", 
                "name": "AudioListener.dopplerFactor"
            }, 
            {
                "descr": "Is a double value representing the speed of sound, in meters per second. ", 
                "name": "AudioListener.speedOfSound"
            }, 
            {
                "descr": "Defines the position of the listener. ", 
                "name": "AudioListener.setPosition()"
            }, 
            {
                "descr": "Defines the orientation of the listener. ", 
                "name": "AudioListener.setOrientation()"
            }, 
            {
                "descr": "Defines the velocity vector of the listner. ", 
                "name": "AudioListener.setVelocity()"
            }
        ], 
        "path": "dom/audiolistener", 
        "syntax": "AudioListenerinterface represents the position and orientation of the unique person listening to the audio scene. All PannerNode", 
        "type": "Web Audio"
    }, 
    "AudioNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioNode", 
        "params": [
            {
                "descr": "Links to the associated AudioContext, that is the object representing the processing graph the node is participating in.", 
                "name": "AudioNode.context Read only"
            }, 
            {
                "descr": "Returns the amount of inputs feeding the node. ", 
                "name": "AudioNode.numberOfInputs Read only"
            }, 
            {
                "descr": "Returns the amount of outputs coming out of the node. ", 
                "name": "AudioNode.numberOfOutputs Read only"
            }, 
            {
                "descr": "Represents an integer used in determining how many channels outputs must contains. ", 
                "name": "AudioNode.channelCount"
            }, 
            {
                "descr": "Represents an enumerated value describing the way channels must be matched between the inputs and the outputs. ", 
                "name": "AudioNode.channelCountMode"
            }, 
            {
                "descr": "Represents an enumerated value describing the meaning of the channels. ", 
                "name": "AudioNode.channelInterpretation"
            }, 
            {
                "descr": "Allows to connect one output of this node to one input of another node.", 
                "name": "AudioNode.connect(AudioNode)"
            }, 
            {
                "descr": "Allows to connect one output of this node to one input of an audio parameter.", 
                "name": "AudioNode.connect(AudioParam)"
            }, 
            {
                "descr": "Allows to disconnect this node from another one.", 
                "name": "AudioNode.disconnect()"
            }
        ], 
        "path": "dom/audionode", 
        "syntax": "AudioNodeinterface represents an audio-processing module, like an audio source (e.g. an HTML <audio> or <video> element), an audio destination, or an intermediate processing module (e.g. a filter like BiquadFilterNode", 
        "type": "Web Audio"
    }, 
    "AudioParam": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioParam", 
        "params": [
            {
                "descr": "Represents the parameter current floating-point value. ", 
                "name": "AudioParam.value"
            }, 
            {
                "descr": "Represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam.", 
                "name": "AudioParam.defaultValue Read only"
            }, 
            {
                "descr": "Schedules a change of the value of the AudioParam at a precise time, startTime, as defined by AudioContext.currentTime. ", 
                "name": "AudioParam.setValueAtTime()"
            }, 
            {
                "descr": "Schedules a change of the value of the AudioParam. ", 
                "name": "AudioParam.linearRampToValueAtTime()"
            }, 
            {
                "descr": "Schedules a change of the value of the AudioParam. ", 
                "name": "AudioParam.exponentialRampToValueAtTime()"
            }, 
            {
                "descr": "Schedules the start of a change of the value of the AudioParam. ", 
                "name": "AudioParam.setTargetAtTime()"
            }, 
            {
                "descr": "Schedules the values of the AudioParam to follow a set of values, defined by the values Float32Array, scaled to fit in the given interval, starting at startTime and having a specific duration.", 
                "name": "AudioParam.setValueCurveAtTime()"
            }, 
            {
                "descr": "Cancels all scheduled future changes of the AudioParam.", 
                "name": "AudioParam.cancelScheduledValues()"
            }
        ], 
        "path": "dom/audioparam", 
        "syntax": "AudioParaminterface represents an audio-related parameter, like one of an AudioNode", 
        "type": "Web Audio"
    }, 
    "AudioProcessingEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AudioProcessingEvent", 
        "params": [], 
        "path": "dom/audioprocessingevent", 
        "syntax": "AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed. Properties Including the inherited properties from its parent, Event. Property Type Description target Read only  EventTarget The event target (the topmost target in the DOM tree). type", 
        "type": "Web Audio"
    }, 
    "BatteryManager.charging": {
        "descr": "A Boolean value indicating whether or not the device's battery is currently being charged.", 
        "name": "BatteryManager.charging", 
        "params": [], 
        "path": "dom/batterymanager.charging", 
        "syntax": "var charging = navigator.battery.charging On return, charging indicates whether or not the battery is currently being charged; if the battery is charging (or if there is no battery), this value is true", 
        "type": "Battery Status"
    }, 
    "BatteryManager.chargingTime": {
        "descr": "Indicates the amount of time, in seconds, that remain until the battery is fully charged.", 
        "name": "BatteryManager.chargingTime", 
        "params": [], 
        "path": "dom/batterymanager.chargingtime", 
        "syntax": "var time = navigator.battery.chargingTime On return, time is the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging (or if the system isn't able to determine the remaining charging time), this value is Infinity", 
        "type": "Battery Status"
    }, 
    "BatteryManager.dischargingTime": {
        "descr": "Indicates the amount of time, in seconds, that remain until the battery is fully discharged.", 
        "name": "BatteryManager.dischargingTime", 
        "params": [], 
        "path": "dom/batterymanager.dischargingtime", 
        "syntax": "var time = navigator.battery.dischargingTime On return, time is the remaining time in seconds until the battery is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time (or if there is no battery).", 
        "type": "Battery Status"
    }, 
    "BatteryManager.level": {
        "descr": "Indicates the current battery chage level as a value between 0.0 and 1.0.", 
        "name": "BatteryManager.level", 
        "params": [], 
        "path": "dom/batterymanager.level", 
        "syntax": "var time = navigator.battery.dischargingTime On return, time is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onchargingchange": {
        "descr": "Specifies an event listener to receive chargingchange events. These events occur when the battery charging state is updated.", 
        "name": "BatteryManager.onchargingchange", 
        "params": [], 
        "path": "dom/batterymanager.onchargingchange", 
        "syntax": "navigator.battery.onchargingchange = funcRef Where funcRef is a function to be called when the chargingchange event occurs. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onchargingtimechange": {
        "descr": "Specifies an event listener to receive chargingtimechange events. These events occur when the battery chargingTime is updated.", 
        "name": "BatteryManager.onchargingtimechange", 
        "params": [], 
        "path": "dom/batterymanager.onchargingtimechange", 
        "syntax": "navigator.battery.onchargingtimechange = funcRef Where funcRef is a function to be called when the chargingtimechange event occurs. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Battery Status"
    }, 
    "BatteryManager.ondischargingtimechange": {
        "descr": "Specifies an event listener to receive dischargingtimechange events. These events occur when the battery dischargingTime is updated.", 
        "name": "BatteryManager.ondischargingtimechange", 
        "params": [], 
        "path": "dom/batterymanager.ondischargingtimechange", 
        "syntax": "navigator.battery.ondischargingtimechange = funcRef Where funcRef is a function to be called when the dischargingtimechange event occurs. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onlevelchange": {
        "descr": "Specifies an event listener to receive levelchange events. These events occur when the battery level is updated.", 
        "name": "BatteryManager.onlevelchange", 
        "params": [], 
        "path": "dom/batterymanager.onlevelchange", 
        "syntax": "navigator.battery.onchargingtimechange = funcRef Where funcRef is a function to be called when the levelchange event occurs. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Battery Status"
    }, 
    "BiquadFilterNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BiquadFilterNode", 
        "params": [
            {
                "descr": "Is a k-rate AudioParam of a double representing a frequency in the different filtering algorithm. ", 
                "name": "BiquadFilterNode.frequency"
            }, 
            {
                "descr": "Is a k-rate AudioParam of a double representing a Q factor, or quality factor. ", 
                "name": "BiquadFilterNode.Q"
            }, 
            {
                "descr": "Is a k-rate AudioParam of a double representing the gain used in the filter algorithm. ", 
                "name": "BiquadFilterNode.gain"
            }, 
            {
                "descr": "Is a string value defining the kind of filter the node is implemented: The meaning of the different parameters depending of the type of the filter type Description frequency Q gain lowpass Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated. The cutoff frequency Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak Not used highpass Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through. The cutoff frequency Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak Not used bandpass Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through. The center of the range of frequencies. Controls the width of the frequency band. The greater Q is, the larger is the frequency band. Not used lowshelf Standard second-order lowshelf filer. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged. The upper limit of the frequencies getting a boost, or an attenuation Not used The boost, in dB, to be applied; if negative, it will be an attenuation. highshelf Standard second-order highshelf filer. Frequencies higher than the frequency get a boost, or an attenuation; frequencies lower than it are unchanged. The lower limit of the frequencies getting a boost, or an attenuation Not used The boost, in dB, to be applied; if negative, it will be an attenuation. peaking Frequencies inside the range get a boost, or an attenuation; frequencies outside it are unchanges. The middle of the frequency range getting a boost, or an attenauation Controls the width of the frequency band. The greater Q is, the larger is the frequency band. The boost, in dB, to be applied; if negative, it will be an attenuation. notch Standard notch filter, also called band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated. The center of the range of frequencies. Controls the width of the frequency band. The greater Q is, the larger is the frequency band. Not used allpass Standard second-order allpass filter. Let all frequencies through, but change the phase-relationship between the various frequencies. The frequency with the maximal group delay, that is the frequency where the center of the phase transition occurs. Controls how sharp is the transition at the medium frequency. The larger this parameter is, the sharper the transition it, and the larger the transition. Not used", 
                "name": "BiquadFilterNode.type"
            }, 
            {
                "descr": "From the current filter parameter settings, calculates the frequency response for frequencies specified in the frequencyHz array of frequencies. ", 
                "name": "BiquadFilterNode.getFrequencyResponse()"
            }
        ], 
        "path": "dom/biquadfilternode", 
        "syntax": "BiquadFilterNodeinterface represents a simple low-order filter. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "Blob": {
        "descr": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.", 
        "name": "Blob", 
        "params": [
            {
                "descr": "An Array of data objects to put into the new Blob object. ", 
                "name": "parts"
            }, 
            {
                "descr": "A BlobPropertyBag object that provides the properties for the new Blob object.", 
                "name": "properties"
            }, 
            {
                "descr": "A string representing the MIME type of the Blob object.", 
                "name": "type"
            }, 
            {
                "descr": "Corresponds to the endings parameter of the BlobBuilder.append(). ", 
                "name": "endings"
            }, 
            {
                "descr": "The size, in bytes, of the data contained in the Blob object.", 
                "name": "Blob.size Read only"
            }, 
            {
                "descr": "A string indicating the MIME type of the data contained in the Blob. ", 
                "name": "Blob.type Read only"
            }, 
            {
                "descr": "Returns a new Blob object containing the data in the specified range of bytes of the source Blob.", 
                "name": "Blob.slice()"
            }
        ], 
        "path": "dom/blob", 
        "syntax": "parts  An Array of data objects to put into the new Blob object. This can be any number of ArrayBuffer, ArrayBufferView", 
        "type": "File"
    }, 
    "Blob.size": {
        "descr": "Returns the size of the file in bytes.", 
        "name": "Blob.size", 
        "params": [], 
        "path": "dom/blob.size", 
        "syntax": "var filesize = instanceOfFile.size Value A number. Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">var fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)var files = fileInput.files;for (var i = 0; i < files.length; i++) {  alert(files[i].name + \" has a size of \" + files[i].size + \" Bytes\");\n or });", 
        "type": "File"
    }, 
    "Blob.slice": {
        "descr": "The slice is used to create a new Blob object containing the data in the specified range of bytes of the source Blob.", 
        "name": "Blob.slice", 
        "params": [
            {
                "descr": "An index into the Blob indicating the first byte to copy into the new Blob. ", 
                "name": "start Optional"
            }, 
            {
                "descr": "An index into the Blob indicating the last byte to copy into the new Blob. ", 
                "name": "end Optional"
            }, 
            {
                "descr": "The content type to assign to the new Blob; this will be the value of its type property. ", 
                "name": "contentType Optional"
            }
        ], 
        "path": "dom/blob.slice", 
        "syntax": "var blob = instanceOfBlob.slice([start [, end [, contentType]]]}; Parameters  start Optional  An index into the Blob indicating the first byte to copy into the new Blob. If you specify a negative value, it's treated as an offset from the end of the string toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is 0. If you specify a value for start that is larger than the size of the source Blob, the returned Blob has size 0 and contains no data.  end Optional  An index into the Blob indicating the last byte to copy into the new Blob. If you specify a negative value, it's treated as an offset from the end of the string toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is size.  contentType Optional  The content type to assign to the new Blob; this will be the value of its type property. The default value is an empty string. Returns A new Blob object containing the specified data from the source Blob. Specifications Specification Status Comment File API Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 10 webkit\u2021 21 5 moz\u2021 13 10 12 5.1 (534.29) webkit   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support ? 13.0 (13.0) ? ? ?  Notes on the slice() implementations The slice()", 
        "type": "File"
    }, 
    "Blob.type": {
        "descr": "The type property provides the MIME type of the file or null if the type couldn't determined.", 
        "name": "Blob.type", 
        "params": [], 
        "path": "dom/blob.type", 
        "syntax": "var mimetype = instanceOfFile.type Value A string or null Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">var fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)var files = fileInput.files;// our application only allows *.png, *.jpeg and *.gif imagesvar allowedFileTypes = [\"image/png\", \"image/jpeg\", \"image/gif\"];for (var i = 0; i < files.length; i++) {  // if selected file type is contained in allowFileTypes  if (allowedFileTypes.indexOf(files[i].type) > -1) {    // do something  }});", 
        "type": "File"
    }, 
    "BlobEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent", 
        "params": [
            {
                "descr": "Is a Blob representing the data associated with the event. ", 
                "name": "BlobEvent.data Read only"
            }, 
            {
                "descr": "Creates a BlobEvent event with the given parameters.", 
                "name": "BlobEvent()"
            }
        ], 
        "path": "dom/blobevent", 
        "syntax": "BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily, associated with media content. Properties Inherits properties from its parent Event.  BlobEvent.data Read only   Is a Blob representing the data associated with the event. The event is fired on the EventTarget because of something happening on that specific Blob. Constructor  BlobEvent()", 
        "type": "Events"
    }, 
    "BlobEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent.constructor", 
        "params": [
            {
                "descr": "Is an Blob associated with the event.", 
                "name": "data"
            }
        ], 
        "path": "dom/blobevent.blobevent", 
        "syntax": "BlobEvent()", 
        "type": "Events"
    }, 
    "BlobEvent.data": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent.data", 
        "params": [], 
        "path": "dom/blobevent.data", 
        "syntax": "BlobEvent.data read-only property represents a Blob associated with the event. Syntax associatedBlob = BlobEvent.data Specifications Specification Status Comment MediaStream Recording Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 22.0 (22.0) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 22.0 (22.0) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "Boolean": {
        "descr": "The Boolean object is an object wrapper for a boolean value.", 
        "name": "Boolean", 
        "params": [
            {
                "descr": "The initial value of the Boolean object.", 
                "name": "value"
            }, 
            {
                "descr": "Length property whose value is 1.", 
                "name": "Boolean.length"
            }, 
            {
                "descr": "Represents the prototype for the Boolean constructor.", 
                "name": "Boolean.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Boolean.prototype.constructor"
            }, 
            {
                "descr": "Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. ", 
                "name": "Boolean.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string of either \"true\" or \"false\" depending upon the value of the object. ", 
                "name": "Boolean.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of the Boolean object. ", 
                "name": "Boolean.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/boolean", 
        "syntax": "new Boolean(value)", 
        "type": "Boolean"
    }, 
    "Boolean.toString": {
        "descr": "The toSource() method returns a string representing the specified Boolean object.", 
        "name": "Boolean.toString", 
        "params": [], 
        "path": "javascript/global_objects/boolean/tostring", 
        "syntax": "bool.toString()", 
        "type": "Boolean"
    }, 
    "Boolean.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Boolean object.", 
        "name": "Boolean.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/boolean/valueof", 
        "syntax": "bool.valueOf()", 
        "type": "Boolean"
    }, 
    "CDATASection": {
        "descr": "A CDATA Section can be used within XML to include extended portions of unescaped text, such that the symbols < and & do not need escaping as they normally do within XML when used as text.", 
        "name": "CDATASection", 
        "params": [], 
        "path": "dom/cdatasection", 
        "syntax": "<foo>Here is a CDATA section: <![CDATA[  < > & ]]> with all kinds of unescaped text. </foo> The only sequence which is not allowed within a CDATA section is the closing sequence of a CDATA section itself: <![CDATA[  ]]> will cause an error   ]]> Note that CDATA sections should not be used (without hiding) within HTML.", 
        "type": "Miscellaneous"
    }, 
    "CSS.supports": {
        "descr": "The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not.", 
        "name": "CSS.supports", 
        "params": [
            {
                "descr": "A DOMString containing the name of the CSS property to check.", 
                "name": "propertyName"
            }, 
            {
                "descr": "A DOMString containing the value of the CSS property to check.", 
                "name": "value"
            }, 
            {
                "descr": "A DOMString containing the condition to check.", 
                "name": "supportCondition"
            }
        ], 
        "path": "dom/css.supports", 
        "syntax": "boolValue = CSS.supports(propertyName, value);", 
        "type": "CSS"
    }, 
    "CSSConditionRule": {
        "descr": "An object implementing the CSSConditionRule DOM interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.", 
        "name": "CSSConditionRule", 
        "params": [
            {
                "descr": "Represents the text of the condition of the rule.", 
                "name": "conditionText"
            }
        ], 
        "path": "dom/cssconditionrule", 
        "syntax": "interface CSSConditionRule : CSSGroupingRule {    attribute DOMString conditionText;} Properties The CSSConditionRule derives from CSSRule, CSSGroupingRule and inherits all properties of these classes. It has one specific property:  conditionText  Represents the text of the condition of the rule. Methods The CSSConditionRule derives from CSSRule, CSSGroupingRule and inherits all methods of these classes. It has no specific property of its own. Specifications Specification Status Comment CSS Conditional Rules Module Level 3 Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 20.0 (20.0) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support Not supported 20.0 (20.0) Not supported Not supported Not supported  See also", 
        "type": "CSS"
    }, 
    "CSSGroupingRule": {
        "descr": "An object implementing the CSSGroupingRule DOM interface represents any CSS at-rule that contains other rules nested in it.", 
        "name": "CSSGroupingRule", 
        "params": [], 
        "path": "dom/cssgroupingrule", 
        "syntax": "interface CSSGroupingRule : CSSRule {    readonly attribute CSSRuleList cssRules;    unsigned long insertRule (DOMString rule, unsigned long index);\n or     void deleteRule (unsigned long index);\n or });", 
        "type": "CSS"
    }, 
    "CSSKeyframeRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSSKeyframeRule", 
        "params": [
            {
                "descr": "Represents the key of the keyframe, like '10%', '75%'. ", 
                "name": "keyText"
            }
        ], 
        "path": "dom/csskeyframerule", 
        "syntax": "CSSKeyframeRule interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).", 
        "type": "CSS"
    }, 
    "CSSKeyframesRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSSKeyframesRule", 
        "params": [
            {
                "descr": "Represents the name of the animation, used by the animation-name property.", 
                "name": "name"
            }, 
            {
                "descr": "Returns a keyframe rule corresponding to the given key. ", 
                "name": "findRule"
            }
        ], 
        "path": "dom/csskeyframesrule", 
        "syntax": "CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).", 
        "type": "CSS"
    }, 
    "CSSMediaRule": {
        "descr": "CSSMediaRule is an object representing a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).", 
        "name": "CSSMediaRule", 
        "params": [
            {
                "descr": "Specifies a MediaList representing the intended destination medium for style information.", 
                "name": "media Read only"
            }
        ], 
        "path": "dom/cssmediarule", 
        "syntax": "interface CSSMediaRule : CSSConditionRule {    readonly attribute MediaList media;} Properties As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the properties of these interfaces. It has the following specific property:  media Read only   Specifies a MediaList representing the intended destination medium for style information. Methods As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the methods of that interface. It has no specific methods. Specification Specification Status Comment CSS Conditional Rules Module Level 3 Candidate Recommendation Make it derived from the CSSConditionRule. CSS Object Model (CSSOM) Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification Document Object Model (DOM) Level 2 Style Specification Recommendation   Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSNamespaceRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSSNamespaceRule", 
        "params": [
            {
                "descr": "Returns a DOMString with the name of the prefix associated to this namespace. ", 
                "name": "prefix"
            }
        ], 
        "path": "dom/cssnamespacerule", 
        "syntax": "CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).", 
        "type": "CSS"
    }, 
    "CSSPageRule": {
        "descr": "CSSPageRule is an object representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).", 
        "name": "CSSPageRule", 
        "params": [
            {
                "descr": "Represents the text of the page selector associated with the at-rule.", 
                "name": "selectorText"
            }, 
            {
                "descr": "Returns the declaration block associated with the at-rule.", 
                "name": "style Read only"
            }
        ], 
        "path": "dom/csspagerule", 
        "syntax": "interface CSSPageRule : CSSRule {\u00a0\u00a0\u00a0 attribute DOMString selectorText;\u00a0\u00a0\u00a0 readonly attribute CSSStyleDeclaration style;}; Properties As a CSSRule, CSSPageRule also implements the properties of these interfaces. It has the following specific property:  selectorText  Represents the text of the page selector associated with the at-rule.  style Read only   Returns the declaration block associated with the at-rule. Methods As a CSSRule, CSSPageRule also implements the methods of that interface. It has no specific methods. Specification Specification Status Comment CSS Object Model (CSSOM) Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification Document Object Model (DOM) Level 2 Style Specification Recommendation   Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSRule": {
        "descr": "An object implementing the CSSRule DOM interface represents a single CSS at-rule. References to a CSSRule-implementing object may be obtained by looking at a CSS style sheet's cssRules list.", 
        "name": "CSSRule", 
        "params": [], 
        "path": "dom/cssrule", 
        "syntax": "interface CSSRule {    const unsigned short STYLE_RULE = 1;    const unsigned short CHARSET_RULE = 2;    const unsigned short IMPORT_RULE = 3;    const unsigned short MEDIA_RULE = 4;    const unsigned short FONT_FACE_RULE = 5;    const unsigned short PAGE_RULE = 6;    const unsigned short KEYFRAMES_RULE = 7;    const unsigned short KEYFRAME_RULE = 8;    const unsigned short NAMESPACE_RULE = 10;    const unsigned short COUNTER_STYLE_RULE = 11;    const unsigned short SUPPORTS_RULE = 12;    const unsigned short DOCUMENT_RULE = 13;    const unsigned short FONT_FEATURE_VALUES_RULE = 14;    const unsigned short VIEWPORT_RULE = 15;    const unsigned short REGION_STYLE_RULE = 16;    readonly attribute unsigned short type;    attribute DOMString cssText;    readonly attribute CSSRule? parentRule;    readonly attribute CSSStyleSheet? parentStyleSheet;}; Properties common to all CSSRule instances  CSSRule.cssText  Represents the textual representation of the rule, e.g. \"h1,h2 { font-size: 16pt }\"  CSSRule.parentRule Read only   Returns the containing rule, otherwise null. E.g. if this rule is a style rule inside an @media block, the parent rule would be that CSSMediaRule", 
        "type": "CSS"
    }, 
    "CSSRule.cssText": {
        "descr": "cssText returns the actual text of the style rule. To be able to set a stylesheet rule dynamically, see Using dynamic styling information.", 
        "name": "CSSRule.cssText", 
        "params": [], 
        "path": "dom/cssrule.csstext", 
        "syntax": "string = cssRule.cssText  Example <style>body { background-color: darkblue; }</style><script>  var stylesheet = document.styleSheets[0];  alert(stylesheet.cssRules[0].cssText);\n or  // body { background-color: darkblue; }</script>);", 
        "type": "CSS"
    }, 
    "CSSRule.parentStyleSheet": {
        "descr": "parentStyleSheet returns the stylesheet object in which the current rule is defined.", 
        "name": "CSSRule.parentStyleSheet", 
        "params": [], 
        "path": "dom/cssrule.parentstylesheet", 
        "syntax": "stylesheet = cssRule.parentStyleSheet  Parameters stylesheet is a stylesheet object. Example if ( bgRule.parentStyleSheet\u00a0!= mySheet ) {   // alien style rule!}", 
        "type": "CSS"
    }, 
    "CSSRuleList": {
        "descr": "A CSSRuleList is an array-like object containing an ordered collection of CSSRule objects.", 
        "name": "CSSRuleList", 
        "params": [], 
        "path": "dom/cssrulelist", 
        "syntax": "CSSRule can be accessed as rules.item(index),", 
        "type": "CSS"
    }, 
    "CSSStyleDeclaration": {
        "descr": "A CSSStyleDeclaration is an interface to the declaration block returned by the style property of a cssRule in a stylesheet, when the rule is a CSSStyleRule.", 
        "name": "CSSStyleDeclaration", 
        "params": [], 
        "path": "dom/cssstyledeclaration", 
        "syntax": "cssRule. Methods getPropertyPriority(propertyName) Returns the optional priority, \"important\". Example: priString= styleObj.getPropertyPriority('color')", 
        "type": "CSS"
    }, 
    "CSSStyleRule": {
        "descr": "CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).", 
        "name": "CSSStyleRule", 
        "params": [], 
        "path": "dom/cssstylerule", 
        "syntax": "interface CSSStyleRule : CSSRule {\u00a0\u00a0\u00a0 attribute DOMString selectorText;\u00a0\u00a0\u00a0 readonly attribute CSSStyleDeclaration style;}; Properties  selectorText  Gets/sets the textual representation of the selector for this rule, e.g. \"h1,h2\".  style Read only   Returns the CSSStyleDeclaration object for the rule. Read only. Specification Specification Status Comment CSS Object Model (CSSOM) Working Draft No changes Document Object Model (DOM) Level 2 Style Specification Recommendation   Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSStyleRule.selectorText": {
        "descr": "selectorText() gets the textual representation of the selector for the rule set. This is implemented in a readonly manner; to set stylesheet rules dynamically, see Using dynamic styling information.", 
        "name": "CSSStyleRule.selectorText", 
        "params": [], 
        "path": "dom/cssstylerule/selectortext", 
        "syntax": "string = cssRule.selectorText  Example // for cssrule: body { background-color: darkblue; }var stylesheet = document.styleSheets[0];alert(stylesheet.cssRules[0].selectorText);\n or  // body);", 
        "type": "CSS"
    }, 
    "CSSStyleRule.style": {
        "descr": "Returns the CSSStyleDeclaration interface for the declaration block of the CSSRule.", 
        "name": "CSSStyleRule.style", 
        "params": [], 
        "path": "dom/cssstylerule/style", 
        "syntax": "styleObj = cssRule.style Example function stilo() {  alert(document.styleSheets[0].cssRules[0].style.cssText);\n or }// displays \"background-color: gray;\");", 
        "type": "CSS"
    }, 
    "CSSStyleSheet.deleteRule": {
        "descr": "The deleteRule method removes a style rule from the current style sheet object.", 
        "name": "CSSStyleSheet.deleteRule", 
        "params": [], 
        "path": "dom/cssstylesheet/deleterule", 
        "syntax": "stylesheet.deleteRule(index)", 
        "type": "CSS"
    }, 
    "CSSSupportsRule": {
        "descr": "The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).", 
        "name": "CSSSupportsRule", 
        "params": [], 
        "path": "dom/csssupportsrule", 
        "syntax": "interface CSSSupportsRule : CSSConditionRule {} Properties As a CSSConditionRule and therefore a CSSRule and a CSSGroupingRule, CSSSupportsRule also implements the properties of these interfaces. It has no specific properties. Methods As a CSSConditionRule and therefore a CSSRuleand a CSSGroupingRule, CSSSupportsRule also implements the methods of that interface. It has no specific methods. Specification Specification Status Comment CSS Conditional Rules Module Level 3 Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 17.0 (17) [1][2] Not supported 12.10 Not supported   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support Not supported 17.0 (17) [1][2] Not supported Not supported Not supported  [1] As prefixing this at-rule has no sense, the CSSSupportsRule", 
        "type": "CSS"
    }, 
    "CaretPosition": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CaretPosition", 
        "params": [
            {
                "descr": "Returns a Node containing the found node at the caret's position.", 
                "name": "CaretPosition.offsetNode Read only"
            }, 
            {
                "descr": "Returns a long representing the character offset in the caret position node.", 
                "name": "CaretPosition.offset Read only"
            }
        ], 
        "path": "dom/caretposition", 
        "syntax": "CaretPosition interface represents the caret postion, an indicator for the text insertion point. You can get a CaretPosition using the document.caretPositionFromPoint method. Properties This interface doesn't inherit any property.  CaretPosition.offsetNode Read only   Returns a Node", 
        "type": "CSS"
    }, 
    "ChannelMergerNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ChannelMergerNode", 
        "params": [], 
        "path": "dom/channelmergernode", 
        "syntax": "ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono input in a single outputs. Each input will be used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel. If ChannelMergerNode has one single output, but as many input as channels to merge; the amount of inputs is defined as a parameter of its constructor and the call to AudioContext.createChannelMerger()", 
        "type": "Web Audio"
    }, 
    "ChannelSplitterNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ChannelSplitterNode", 
        "params": [], 
        "path": "dom/channelsplitternode", 
        "syntax": "ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels in a set of mono outputs. This is useful for accessing each channels seperately, e.g. for performing channel mixing where gain must be separately controlled on each channel. If ChannelSplitterNode always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to AudioContext.createChannelSplitter()", 
        "type": "Web Audio"
    }, 
    "Child selector (\u201cparent > child\u201d": {
        "descr": "As a CSS selector, the child combinator is supported by all modern web browsers including Safari, Firefox, Opera, Chrome, and Internet Explorer 7 and above, but notably not by Internet Explorer versions 6 and below. However, in jQuery, this selector (along with all others) works across all supported browsers, including IE6.", 
        "name": "Child selector (\u201cparent > child\u201d", 
        "params": [], 
        "path": "jquery/child-selector", 
        "syntax": "child selector  Description: Selects all direct child elements specified by \"child\" of elements specified by \"parent\".   version added: 1.0jQuery( \"parent > child\" ) parent: Any valid selector.", 
        "type": "Selectors"
    }, 
    "ChildNode.nextElementSibling": {
        "descr": "The ChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.", 
        "name": "ChildNode.nextElementSibling", 
        "params": [], 
        "path": "dom/childnode.nextelementsibling", 
        "syntax": "var nextNode = elementNodeReference.nextElementSibling;  Example <div id=\"div-01\">Here is div-01</div><div id=\"div-02\">Here is div-02</div><script type=\"text/javascript\">  var el = document.getElementById('div-01').nextElementSibling;  document.write('<p>Siblings of div-01</p><ol>');\n or   while (el) {    document.write('<li>' + el.nodeName + '</li>');\n or     el = el.nextElementSibling;  }  document.write('</ol>');\n or </script>);", 
        "type": "Node"
    }, 
    "ChildNode.previousElementSibling": {
        "descr": "The ChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.", 
        "name": "ChildNode.previousElementSibling", 
        "params": [], 
        "path": "dom/childnode.previouselementsibling", 
        "syntax": "prevNode = elementNodeReference.previousElementSibling;  Example <div id=\"div-01\">Here is div-01</div><div id=\"div-02\">Here is div-02</div><li>This is a list item</li><li>This is another list item</li><div id=\"div-03\">Here is div-03</div><script>  var el = document.getElementById('div-03').previousElementSibling;  document.write('<p>Siblings of div-03</p><ol>');\n or   while (el) {    document.write('<li>' + el.nodeName + '</li>');\n or     el = el.previousElementSibling;  }  document.write('</ol>');\n or </script>);", 
        "type": "Node"
    }, 
    "ChildNode.remove": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ChildNode.remove", 
        "params": [], 
        "path": "dom/childnode.remove", 
        "syntax": "ChildNode.remove method removes the object from the tree it belongs to. Syntax prevNode = elementNodeReference.remove();", 
        "type": "Node"
    }, 
    "Class selector (\u201c.class\u201d": {
        "descr": "For class selectors, jQuery uses JavaScript's native getElementsByClassName() function if the browser supports it.", 
        "name": "Class selector (\u201c.class\u201d", 
        "params": [], 
        "path": "jquery/class-selector", 
        "syntax": "class selector  Description: Selects all elements with the given class.    version added: 1.0jQuery( \".class\" ) class: A class to search for. An element can have multiple classes; only one of them must match.", 
        "type": "Selectors"
    }, 
    "ClipboardEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ClipboardEvent", 
        "params": [
            {
                "descr": "Is a DataTransfer object containing the data affected by the user-initialed cut, copy, or paste operation, along with its MIME type.", 
                "name": "ClipboardEvent.clipboardData Read only"
            }, 
            {
                "descr": "Creates a ClipboardEvent event with the given parameters.", 
                "name": "ClipboardEvent()"
            }
        ], 
        "path": "dom/clipboardevent", 
        "syntax": "ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events. Properties Also inherits properties from its parent Event.  ClipboardEvent.clipboardData Read only   Is a DataTransfer object containing the data affected by the user-initialed cut, copy, or paste operation, along with its MIME type. Constructor  ClipboardEvent()", 
        "type": "Events"
    }, 
    "ClipboardEvent.clipboardData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ClipboardEvent.clipboardData", 
        "params": [], 
        "path": "dom/clipboardevent.clipboarddata", 
        "syntax": "Clipboard.clipboardData read-only property is a DataTransfer object the data affected by the user-initialed cut, copy, or paste operation, along with its MIME type. Syntax data = ClipboardEvent.clipboardData Specifications Specification Status Comment Clipboard API Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support (Yes) 22.0 (22) 5.0 (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support (Yes) 22.0 (22) 5.0 (Yes) (Yes)  See also", 
        "type": "Events"
    }, 
    "ClipboardEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ClipboardEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ClipboardEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a DOMString containing the MIME-type of the data contained in the data argument.", 
                "name": "dataType"
            }, 
            {
                "descr": "Is a DOMString containing the data concerned by the clipboard event.", 
                "name": "data"
            }
        ], 
        "path": "dom/clipboardevent.clipboardevent", 
        "syntax": "ClipboardEvent()", 
        "type": "Events"
    }, 
    "Comma Operator": {
        "descr": "The comma operator evaluates both of its operands (from left to right) and returns the value of the second operand.", 
        "name": "Comma Operator", 
        "params": [
            {
                "descr": "Any expressions.", 
                "name": "expr1, expr2"
            }
        ], 
        "path": "javascript/operators/comma_operator", 
        "syntax": "expr1, expr2  Parameters  expr1, expr2  Any expressions. Description You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop. Example If a is a 2-dimensional array with 10 elements on a side, the following code uses the comma operator to increment two variables at once. Note that the comma in the var statement is not the comma operator, because it doesn't exist within an expression. Rather, it is a special character in var statements to combine multiple of them into one. Practically, that comma behaves almost the same as the comma operator, though. The code prints the values of the diagonal elements in the array: for (var i = 0, j = 9; i <= 9; i++, j--)  document.writeln(\"a[\" + i + \"][\" + j + \"] = \" + a[i][j]);", 
        "type": "Operators"
    }, 
    "Comment.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Comment.constructor", 
        "params": [], 
        "path": "dom/comment.comment", 
        "syntax": "Comment()", 
        "type": "Miscellaneous"
    }, 
    "Conditional Operator": {
        "descr": "The conditional operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.", 
        "name": "Conditional Operator", 
        "params": [
            {
                "descr": "An expression that evaluates to true or false.", 
                "name": "condition"
            }, 
            {
                "descr": "Expressions with values of any type.", 
                "name": "expr1, expr2"
            }
        ], 
        "path": "javascript/operators/conditional_operator", 
        "syntax": "condition ? expr1 : expr2  Parameters  condition  An expression that evaluates to true or false.  expr1, expr2  Expressions with values of any type. Description If condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2. For example, to display a different message based on the value of the isMember variable, you could use this statement: document.write (\"The fee is \" + (isMember ? \"$2.00\" : \"$10.00\"))", 
        "type": "Operators"
    }, 
    "Connection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Connection", 
        "params": [
            {
                "descr": "Is a double representing the estimated download bandwidth (in MB/s) of the current connection. ", 
                "name": "Connection.bandwidth Read only"
            }, 
            {
                "descr": "Is a Boolean flag indicating if the connection is metered (e.g., pay-per-use).", 
                "name": "Connection.metered Read only"
            }, 
            {
                "descr": "Is an EventHandler for the change event. ", 
                "name": "Connection.onchange"
            }
        ], 
        "path": "dom/connection", 
        "syntax": "Connection interface represents the connectivity of the device on which the browser runs. An object of this type can be obtained via the constructor method NetworkInformation.connection, available on the Navigator object. Properties The Connection interface inherits properties from its parent, the EventTarget interface.  Connection.bandwidth", 
        "type": "Network Information"
    }, 
    "Connection.bandwidth": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Connection.bandwidth", 
        "params": [], 
        "path": "dom/connection.bandwidth", 
        "syntax": "Connection.bandwidth read-only property is a double representing the estimated download bandwidth (in megabytes per second) of the current connection.", 
        "type": "Network Information"
    }, 
    "Connection.metered": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Connection.metered", 
        "params": [], 
        "path": "dom/connection.metered", 
        "syntax": "Connection.metered read-only property is a Boolean flag indicating if the connection is metered (e.g. pay-per-use).", 
        "type": "Network Information"
    }, 
    "Connection.onchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Connection.onchange", 
        "params": [], 
        "path": "dom/connection.onchange", 
        "syntax": "Connection.onchange property represent an event listener for change events. These events occur when the connection information change. Syntax connection.onchange = funcRef; Where funcRef is a function to be called when the change event occurs. Specifications Specification Status Comment Network Information API Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 12.0 moz (see notes) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 12.0 moz (see notes) Not supported Not supported Not supported  Gecko notes The Network API can be disabled using the dom.network.enabled", 
        "type": "Network Information"
    }, 
    "ConvolverNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ConvolverNode", 
        "params": [
            {
                "descr": "...", 
                "name": "ConvolverNode.buffer"
            }, 
            {
                "descr": "...", 
                "name": "ConvolverNode.normalize"
            }
        ], 
        "path": "dom/convolvernode", 
        "syntax": "ConvolverNodeinterface represents... . It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "Coordinates.accuracy": {
        "descr": "The Coordinates.accuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the Coordinates.latitude and Coordinates.longitude properties expressed in meters.", 
        "name": "Coordinates.accuracy", 
        "params": [], 
        "path": "dom/coordinates.accuracy", 
        "syntax": "acc = coordinates.accuracy Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.altitude": {
        "descr": "The Coordinates.altitude read-only property is a double representing the altitude of the position in meters, relative to sea level. This value is null if the implementation cannot provide this data.", 
        "name": "Coordinates.altitude", 
        "params": [], 
        "path": "dom/coordinates.altitude", 
        "syntax": "alt = coordinates.altitude Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.altitudeAccuracy": {
        "descr": "The Coordinates.altitudeAccuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the altitude expressed in meters. This value is null if the implementation doesn't support measuring altitude.", 
        "name": "Coordinates.altitudeAccuracy", 
        "params": [], 
        "path": "dom/coordinates.altitudeaccuracy", 
        "syntax": "altAcc = coordinates.altitudeAccuracy Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.heading": {
        "descr": "The Coordinates.heading read-only property is a double representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading due north the device is. 0 degrees represents true true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If Coordinates.speed is 0, heading is NaN. If the device is not able to provide heading information, this value is null.", 
        "name": "Coordinates.heading", 
        "params": [], 
        "path": "dom/coordinates.heading", 
        "syntax": "heading = coordinates.heading Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.latitude": {
        "descr": "The Coordinates.latitude read-only property is a double representing the latitude of the position in decimal degrees.", 
        "name": "Coordinates.latitude", 
        "params": [], 
        "path": "dom/coordinates.latitude", 
        "syntax": "lat = coordinates.latitude Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.longitude": {
        "descr": "The Coordinates.longitude read-only property is a double representing the longitude of the position in decimal degrees.", 
        "name": "Coordinates.longitude", 
        "params": [], 
        "path": "dom/coordinates.longitude", 
        "syntax": "lon = coordinates.longitude Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.speed": {
        "descr": "The Coordinates.speed read-only property is a double representing the velocity of the device in meters per second. This value is null if the implementation is not able to measure it.", 
        "name": "Coordinates.speed", 
        "params": [], 
        "path": "dom/coordinates.speed", 
        "syntax": "speed = coordinates.speed Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "CustomEvent": {
        "descr": "The DOM CustomEvent are events initialized by an application for any purpose.", 
        "name": "CustomEvent", 
        "params": [
            {
                "descr": "The name of the event.", 
                "name": "type"
            }, 
            {
                "descr": "A boolean indicating whether the event bubbles up through the DOM or not.", 
                "name": "canBubble"
            }, 
            {
                "descr": "A boolean indicating whether the event is cancelable.", 
                "name": "cancelable"
            }, 
            {
                "descr": "The data passed when initializing the event.", 
                "name": "detail"
            }, 
            {
                "descr": "The name of the event.", 
                "name": "type"
            }, 
            {
                "descr": "An object which provides properties for the event. ", 
                "name": "eventInitDict"
            }, 
            {
                "descr": "A boolean indicating whether the event bubbles up through the DOM or not. ", 
                "name": "bubbles"
            }, 
            {
                "descr": "A boolean indicating whether the event is cancelable. ", 
                "name": "cancelable"
            }, 
            {
                "descr": "The data passed when initializing the event.", 
                "name": "detail"
            }
        ], 
        "path": "dom/customevent", 
        "syntax": "bubbles  A boolean indicating whether the event bubbles up through the DOM or not. (default: false)  cancelable", 
        "type": "Events"
    }, 
    "DOMConfiguration": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "DOMConfiguration", 
        "params": [], 
        "path": "dom/domconfiguration", 
        "syntax": "parameterNames (read-only DOMStringList)", 
        "type": "DOM"
    }, 
    "DOMError": {
        "descr": "This interface describes an error object that contains an error name.", 
        "name": "DOMError", 
        "params": [
            {
                "descr": "Readonly DOMString. Returns one of the error type names (see below).", 
                "name": "name"
            }
        ], 
        "path": "dom/domerror", 
        "syntax": "InvalidModificationError The object can not be modified in this way. NamespaceError The operation is not allowed by Namespaces in XML InvalidAccessError The object does not support the operation or argument. TypeMismatchError The type of the object does not match the expected type. SecurityError The operation is insecure. NetworkError A network error occurred. AbortError The operation was aborted. URLMismatchError The given URL does not match another URL. QuotaExceededError The quota has been exceeded. TimeoutError The operation timed out. InvalidNodeTypeError The node is incorrect or has an incorrect ancestor for this operation. DataCloneError The object can not be cloned. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support ? 12.0 ? ? Nightly build(537.1)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 12.0 ? ? ?  Specification", 
        "type": "DOM"
    }, 
    "DOMImplementation.createDocument": {
        "descr": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.", 
        "name": "DOMImplementation.createDocument", 
        "params": [
            {
                "descr": "Is a DOMString containing the namespace URI of the document to be created, or null if the document doesn't belong to one.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "Is a DOMString containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.", 
                "name": "qualifiedNameStr"
            }, 
            {
                "descr": "Is the DocumentType of the document to be created. ", 
                "name": "documentType Optional"
            }
        ], 
        "path": "dom/domimplementation.createdocument", 
        "syntax": "doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);", 
        "type": "DOM"
    }, 
    "DOMImplementation.createDocumentType": {
        "descr": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().", 
        "name": "DOMImplementation.createDocumentType", 
        "params": [
            {
                "descr": "Is a DOMString containing the qualified name, like svg:svg.", 
                "name": "qualifiedNameStr"
            }, 
            {
                "descr": "Is a DOMString containing the PUBLIC identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "Is a DOMString containing the SYSTEM identifiers.", 
                "name": "systemId"
            }
        ], 
        "path": "dom/domimplementation.createdocumenttype", 
        "syntax": "doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId)", 
        "type": "DOM"
    }, 
    "DOMImplementation.createHTMLDocument": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMImplementation.createHTMLDocument", 
        "params": [
            {
                "descr": "Is a DOMString containing the title to give the new HTML document.", 
                "name": "title Optional"
            }
        ], 
        "path": "dom/domimplementation.createhtmldocument", 
        "syntax": "DOMImplementation.createHTMLDocument()", 
        "type": "DOM"
    }, 
    "DOMImplementation.hasFeature": {
        "descr": "The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.", 
        "name": "DOMImplementation.hasFeature", 
        "params": [
            {
                "descr": "Is a DOMString representing the feature name.", 
                "name": "feature"
            }, 
            {
                "descr": "Is a DOMString representing the version of the specification defining the feature.", 
                "name": "version"
            }
        ], 
        "path": "dom/domimplementation.hasfeature", 
        "syntax": "flag = document.implementation.hasFeature(feature, version);", 
        "type": "DOM"
    }, 
    "Date": {
        "descr": "Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.", 
        "name": "Date", 
        "params": [
            {
                "descr": "Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).", 
                "name": "value"
            }, 
            {
                "descr": "String value representing a date. ", 
                "name": "dateString"
            }, 
            {
                "descr": "Integer value representing the year. ", 
                "name": "year"
            }, 
            {
                "descr": "Integer value representing the month, beginning with 0 for January to 11 for December.", 
                "name": "month"
            }, 
            {
                "descr": "Integer value representing the day of the month.", 
                "name": "day"
            }, 
            {
                "descr": "Integer value representing the hour of the day.", 
                "name": "hour"
            }, 
            {
                "descr": "Integer value representing the minute segment of a time.", 
                "name": "minute"
            }, 
            {
                "descr": "Integer value representing the second segment of a time.", 
                "name": "second"
            }, 
            {
                "descr": "Integer value representing the millisecond segment of a time.", 
                "name": "millisecond"
            }, 
            {
                "descr": "Allows the addition of properties to a JavaScript Date object.", 
                "name": "Date.prototype"
            }, 
            {
                "descr": "The value of Date.length is 7.", 
                "name": "Date.length"
            }, 
            {
                "descr": "Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
                "name": "Date.now()"
            }, 
            {
                "descr": "Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, local time.", 
                "name": "Date.parse()"
            }, 
            {
                "descr": "Accepts the same parameters as the longest form of the constructor (i.e. ", 
                "name": "Date.UTC()"
            }, 
            {
                "descr": "Returns the day of the month (1-31) for the specified date according to local time.", 
                "name": "Date.prototype.getDate()"
            }, 
            {
                "descr": "Returns the day of the week (0-6) for the specified date according to local time.", 
                "name": "Date.prototype.getDay()"
            }, 
            {
                "descr": "Returns the year (4 digits for 4-digit years) of the specified date according to local time.", 
                "name": "Date.prototype.getFullYear()"
            }, 
            {
                "descr": "Returns the hour (0-23) in the specified date according to local time.", 
                "name": "Date.prototype.getHours()"
            }, 
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to local time.", 
                "name": "Date.prototype.getMilliseconds()"
            }, 
            {
                "descr": "Returns the minutes (0-59) in the specified date according to local time.", 
                "name": "Date.prototype.getMinutes()"
            }, 
            {
                "descr": "Returns the month (0-11) in the specified date according to local time.", 
                "name": "Date.prototype.getMonth()"
            }, 
            {
                "descr": "Returns the seconds (0-59) in the specified date according to local time.", 
                "name": "Date.prototype.getSeconds()"
            }, 
            {
                "descr": "Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).", 
                "name": "Date.prototype.getTime()"
            }, 
            {
                "descr": "Returns the time-zone offset in minutes for the current locale.", 
                "name": "Date.prototype.getTimezoneOffset()"
            }, 
            {
                "descr": "Returns the day (date) of the month (1-31) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCDate()"
            }, 
            {
                "descr": "Returns the day of the week (0-6) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCDay()"
            }, 
            {
                "descr": "Returns the year (4 digits for 4-digit years) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCFullYear()"
            }, 
            {
                "descr": "Returns the hours (0-23) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCHours()"
            }, 
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMilliseconds()"
            }, 
            {
                "descr": "Returns the minutes (0-59) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMinutes()"
            }, 
            {
                "descr": "Returns the month (0-11) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMonth()"
            }, 
            {
                "descr": "Returns the seconds (0-59) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCSeconds()"
            }, 
            {
                "descr": "Returns the year (usually 2-3 digits) in the specified date according to local time. ", 
                "name": "Date.prototype.getYear()"
            }, 
            {
                "descr": "Sets the day of the month for a specified date according to local time.", 
                "name": "Date.prototype.setDate()"
            }, 
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.", 
                "name": "Date.prototype.setFullYear()"
            }, 
            {
                "descr": "Sets the hours for a specified date according to local time.", 
                "name": "Date.prototype.setHours()"
            }, 
            {
                "descr": "Sets the milliseconds for a specified date according to local time.", 
                "name": "Date.prototype.setMilliseconds()"
            }, 
            {
                "descr": "Sets the minutes for a specified date according to local time.", 
                "name": "Date.prototype.setMinutes()"
            }, 
            {
                "descr": "Sets the month for a specified date according to local time.", 
                "name": "Date.prototype.setMonth()"
            }, 
            {
                "descr": "Sets the seconds for a specified date according to local time.", 
                "name": "Date.prototype.setSeconds()"
            }, 
            {
                "descr": "Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.", 
                "name": "Date.prototype.setTime()"
            }, 
            {
                "descr": "Sets the day of the month for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCDate()"
            }, 
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCFullYear()"
            }, 
            {
                "descr": "Sets the hour for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCHours()"
            }, 
            {
                "descr": "Sets the milliseconds for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMilliseconds()"
            }, 
            {
                "descr": "Sets the minutes for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMinutes()"
            }, 
            {
                "descr": "Sets the month for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMonth()"
            }, 
            {
                "descr": "Sets the seconds for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCSeconds()"
            }, 
            {
                "descr": "Sets the year (usually 2-3 digits) for a specified date according to local time. ", 
                "name": "Date.prototype.setYear()"
            }, 
            {
                "descr": "Returns the \"date\" portion of the Date as a human-readable string.", 
                "name": "Date.prototype.toDateString()"
            }, 
            {
                "descr": "Converts a date to a string following the ISO 8601 Extended Format.", 
                "name": "Date.prototype.toISOString()"
            }, 
            {
                "descr": "Returns a string representing the Date using toISOString(). ", 
                "name": "Date.prototype.toJSON()"
            }, 
            {
                "descr": "Returns a string representing the Date based on the GMT (UT) time zone. ", 
                "name": "Date.prototype.toGMTString()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of the date portion of this date based on system settings.", 
                "name": "Date.prototype.toLocaleDateString()"
            }, 
            {
                "descr": "Converts a date to a string, using a format string.", 
                "name": "Date.prototype.toLocaleFormat()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of this date. ", 
                "name": "Date.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of the time portion of this date based on system settings.", 
                "name": "Date.prototype.toLocaleTimeString()"
            }, 
            {
                "descr": "Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. ", 
                "name": "Date.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified Date object. ", 
                "name": "Date.prototype.toString()"
            }, 
            {
                "descr": "Returns the \"time\" portion of the Date as a human-readable string.", 
                "name": "Date.prototype.toTimeString()"
            }, 
            {
                "descr": "Converts a date to a string using the UTC timezone.", 
                "name": "Date.prototype.toUTCString()"
            }, 
            {
                "descr": "Returns the primitive value of a Date object. ", 
                "name": "Date.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/date", 
        "syntax": "new Date();\n or new Date(value);\n or new Date(dateString);\n or new Date(year, month [, day, hour, minute, second, millisecond]);", 
        "type": "Date"
    }, 
    "Date.UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.", 
        "name": "Date.UTC", 
        "params": [
            {
                "descr": "A year after 1900.", 
                "name": "year"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the month.", 
                "name": "month"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month.", 
                "name": "date"
            }, 
            {
                "descr": "An integer between 0 and 23 representing the hours.", 
                "name": "hrs"
            }, 
            {
                "descr": "An integer between 0 and 59 representing the minutes.", 
                "name": "min"
            }, 
            {
                "descr": "An integer between 0 and 59 representing the seconds.", 
                "name": "sec"
            }, 
            {
                "descr": "An integer between 0 and 999 representing the milliseconds.", 
                "name": "ms"
            }
        ], 
        "path": "javascript/global_objects/date/utc", 
        "syntax": "Date.UTC(year,month[,date[,hrs[,min[,sec[,ms]]]]])", 
        "type": "Date"
    }, 
    "Date.getDate": {
        "descr": "The getDate() method returns the day of the month for the specified date according to local time.", 
        "name": "Date.getDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getdate", 
        "syntax": "dateObj.getDate()", 
        "type": "Date"
    }, 
    "Date.getDay": {
        "descr": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday.", 
        "name": "Date.getDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getday", 
        "syntax": "dateObj.getDay()", 
        "type": "Date"
    }, 
    "Date.getFullYear": {
        "descr": "The getFullYear() method returns the year of the specified date according to local time.", 
        "name": "Date.getFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getfullyear", 
        "syntax": "dateObj.getFullYear()", 
        "type": "Date"
    }, 
    "Date.getHours": {
        "descr": "The getHours() method returns the hour for the specified date, according to local time.", 
        "name": "Date.getHours", 
        "params": [], 
        "path": "javascript/global_objects/date/gethours", 
        "syntax": "dateObj.getHours()", 
        "type": "Date"
    }, 
    "Date.getMilliseconds": {
        "descr": "The getMilliseconds() method returns the milliseconds in the specified date according to local time.", 
        "name": "Date.getMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getmilliseconds", 
        "syntax": "dateObj.getMilliseconds()", 
        "type": "Date"
    }, 
    "Date.getMinutes": {
        "descr": "The getMinutes() method returns the minutes in the specified date according to local time.", 
        "name": "Date.getMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getminutes", 
        "syntax": "dateObj.getMinutes()", 
        "type": "Date"
    }, 
    "Date.getMonth": {
        "descr": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).", 
        "name": "Date.getMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getmonth", 
        "syntax": "dateObj.getMonth()", 
        "type": "Date"
    }, 
    "Date.getSeconds": {
        "descr": "The getSeconds() method returns the seconds in the specified date according to local time.", 
        "name": "Date.getSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getseconds", 
        "syntax": "dateObj.getSeconds()", 
        "type": "Date"
    }, 
    "Date.getTime": {
        "descr": "The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.", 
        "name": "Date.getTime", 
        "params": [], 
        "path": "javascript/global_objects/date/gettime", 
        "syntax": "dateObj.getTime()", 
        "type": "Date"
    }, 
    "Date.getTimezoneOffset": {
        "descr": "The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.", 
        "name": "Date.getTimezoneOffset", 
        "params": [], 
        "path": "javascript/global_objects/date/gettimezoneoffset", 
        "syntax": "dateObj.getTimezoneOffset()", 
        "type": "Date"
    }, 
    "Date.getUTCDate": {
        "descr": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.", 
        "name": "Date.getUTCDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcdate", 
        "syntax": "dateObj.getUTCDate()", 
        "type": "Date"
    }, 
    "Date.getUTCDay": {
        "descr": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.", 
        "name": "Date.getUTCDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcday", 
        "syntax": "dateObj.getUTCDay()", 
        "type": "Date"
    }, 
    "Date.getUTCFullYear": {
        "descr": "The getUTCFullYear() method returns the year in the specified date according to universal time.", 
        "name": "Date.getUTCFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcfullyear", 
        "syntax": "dateObj.getUTCFullYear()", 
        "type": "Date"
    }, 
    "Date.getUTCHours": {
        "descr": "The getUTCHours() method returns the hours in the specified date according to universal time.", 
        "name": "Date.getUTCHours", 
        "params": [], 
        "path": "javascript/global_objects/date/getutchours", 
        "syntax": "dateObj.getUTCHours()", 
        "type": "Date"
    }, 
    "Date.getUTCMilliseconds": {
        "descr": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.", 
        "name": "Date.getUTCMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmilliseconds", 
        "syntax": "dateObj.getUTCMilliseconds()", 
        "type": "Date"
    }, 
    "Date.getUTCMinutes": {
        "descr": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.", 
        "name": "Date.getUTCMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcminutes", 
        "syntax": "dateObj.getUTCMinutes()", 
        "type": "Date"
    }, 
    "Date.getUTCMonth": {
        "descr": "The getUTCMonth() returns the month of the specified date according to universal time.", 
        "name": "Date.getUTCMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmonth", 
        "syntax": "dateObj.getUTCMonth()", 
        "type": "Date"
    }, 
    "Date.getUTCSeconds": {
        "descr": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.", 
        "name": "Date.getUTCSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcseconds", 
        "syntax": "dateObj.getUTCSeconds()", 
        "type": "Date"
    }, 
    "Date.now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
        "name": "Date.now", 
        "params": [], 
        "path": "javascript/global_objects/date/now", 
        "syntax": "var timeInMs = Date.now();", 
        "type": "Date"
    }, 
    "Date.parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.", 
        "name": "Date.parse", 
        "params": [
            {
                "descr": "A string representing an RFC2822 or ISO 8601 date.", 
                "name": "dateString"
            }
        ], 
        "path": "javascript/global_objects/date/parse", 
        "syntax": "Date.parse(dateString)", 
        "type": "Date"
    }, 
    "Date.setDate": {
        "descr": "The setDate() method sets the day of the month for a specified date according to local time.", 
        "name": "Date.setDate", 
        "params": [
            {
                "descr": "An integer representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setdate", 
        "syntax": "dateObj.setDate(dayValue)", 
        "type": "Date"
    }, 
    "Date.setFullYear": {
        "descr": "The setFullYear() method sets the full year for a specified date according to local time.", 
        "name": "Date.setFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setfullyear", 
        "syntax": "dateObj.setFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "Date.setHours": {
        "descr": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.", 
        "name": "Date.setHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/sethours", 
        "syntax": "dateObj.setHours(hoursValue[, minutesValue[, secondsValue, msValue]])", 
        "type": "Date"
    }, 
    "Date.setMilliseconds": {
        "descr": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.", 
        "name": "Date.setMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmilliseconds", 
        "syntax": "dateObj.setMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "Date.setMinutes": {
        "descr": "The setMinutes() method sets the minutes for a specified date according to local time.", 
        "name": "Date.setMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setminutes", 
        "syntax": "dateObj.setMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "Date.setMonth": {
        "descr": "The setMonth() method sets the month for a specified date according to local time.", 
        "name": "Date.setMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11 (representing the months January through December).", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmonth", 
        "syntax": "dateObj.setMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "Date.setSeconds": {
        "descr": "The setSeconds() method sets the seconds for a specified date according to local time.", 
        "name": "Date.setSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setseconds", 
        "syntax": "dateObj.setSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "Date.setTime": {
        "descr": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.", 
        "name": "Date.setTime", 
        "params": [
            {
                "descr": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.", 
                "name": "timeValue"
            }
        ], 
        "path": "javascript/global_objects/date/settime", 
        "syntax": "dateObj.setTime(timeValue)", 
        "type": "Date"
    }, 
    "Date.setUTCDate": {
        "descr": "The setUTCDate() method sets the day of the month for a specified date according to universal time.", 
        "name": "Date.setUTCDate", 
        "params": [
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcdate", 
        "syntax": "dateObj.setUTCDate(dayValue)", 
        "type": "Date"
    }, 
    "Date.setUTCFullYear": {
        "descr": "The setUTCFullYear() method sets the full year for a specified date according to universal time.", 
        "name": "Date.setUTCFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcfullyear", 
        "syntax": "dateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "Date.setUTCHours": {
        "descr": "The setUTCHours() method sets the hour for a specified date according to universal time.", 
        "name": "Date.setUTCHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutchours", 
        "syntax": "dateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])", 
        "type": "Date"
    }, 
    "Date.setUTCMilliseconds": {
        "descr": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.", 
        "name": "Date.setUTCMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmilliseconds", 
        "syntax": "dateObj.setUTCMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "Date.setUTCMinutes": {
        "descr": "The setUTCMinutes() method sets the minutes for a specified date according to universal time.", 
        "name": "Date.setUTCMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcminutes", 
        "syntax": "dateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "Date.setUTCMonth": {
        "descr": "The setUTCMonth() method sets the month for a specified date according to universal time.", 
        "name": "Date.setUTCMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmonth", 
        "syntax": "dateObj.setUTCMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "Date.setUTCSeconds": {
        "descr": "The setUTCSeconds() method sets the seconds for a specified date according to universal time.", 
        "name": "Date.setUTCSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcseconds", 
        "syntax": "dateObj.setUTCSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "Date.toDateString": {
        "descr": "The toDateString() method returns the date portion of a Date object in human readable form in American English.", 
        "name": "Date.toDateString", 
        "params": [], 
        "path": "javascript/global_objects/date/todatestring", 
        "syntax": "dateObj.toDateString()", 
        "type": "Date"
    }, 
    "Date.toISOString": {
        "descr": "The toISOString() method returns a string in ISO format (ISO 8601 Extended Format), which can be described as follows: YYYY-MM-DDTHH:mm:ss.sssZ. The timezone is always UTC as denoted by the suffix \"Z\".", 
        "name": "Date.toISOString", 
        "params": [], 
        "path": "javascript/global_objects/date/toisostring", 
        "syntax": "dateObj.toISOString()", 
        "type": "Date"
    }, 
    "Date.toJSON": {
        "descr": "The toJSON() method returns a JSON representation of the Date object.", 
        "name": "Date.toJSON", 
        "params": [], 
        "path": "javascript/global_objects/date/tojson", 
        "syntax": "dateObj.toJSON()", 
        "type": "Date"
    }, 
    "Date.toLocaleDateString": {
        "descr": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "Date.toLocaleDateString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaledatestring", 
        "syntax": "dateObj.toLocaleDateString([locales [, options]])", 
        "type": "Date"
    }, 
    "Date.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "Date.toLocaleString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocalestring", 
        "syntax": "dateObj.toLocaleString([locales [, options]])", 
        "type": "Date"
    }, 
    "Date.toLocaleTimeString": {
        "descr": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "Date.toLocaleTimeString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaletimestring", 
        "syntax": "dateObj.toLocaleTimeString([locales [, options]])", 
        "type": "Date"
    }, 
    "Date.toString": {
        "descr": "The toString() method returns a string representing the specified Date object.", 
        "name": "Date.toString", 
        "params": [], 
        "path": "javascript/global_objects/date/tostring", 
        "syntax": "dateObj.toString()", 
        "type": "Date"
    }, 
    "Date.toTimeString": {
        "descr": "The toTimeString() method returns the time portion of a Date object in human readable form in American English.", 
        "name": "Date.toTimeString", 
        "params": [], 
        "path": "javascript/global_objects/date/totimestring", 
        "syntax": "dateObj.toTimeString()", 
        "type": "Date"
    }, 
    "Date.toUTCString": {
        "descr": "The toUTCString() method converts a date to a string, using the UTC time zone.", 
        "name": "Date.toUTCString", 
        "params": [], 
        "path": "javascript/global_objects/date/toutcstring", 
        "syntax": "dateObj.toUTCString()", 
        "type": "Date"
    }, 
    "Date.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Date object.", 
        "name": "Date.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/date/valueof", 
        "syntax": "dateObj.valueOf()", 
        "type": "Date"
    }, 
    "DedicatedWorkerGlobalScope": {
        "descr": "This section provides a brief reference for all of the methods, properties, and events available through the DedicatedWorkerGlobalScope object. The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.", 
        "name": "DedicatedWorkerGlobalScope", 
        "params": [
            {
                "descr": "Returns an object reference to the DedicatedWorkerGlobalScope object itself.", 
                "name": "DedicatedWorkerGlobalScope.self"
            }, 
            {
                "descr": "Decodes a string of data which has been encoded using base-64 encoding.", 
                "name": "atob"
            }
        ], 
        "path": "dom/dedicatedworkerglobalscope", 
        "syntax": "DedicatedWorkerGlobalScope object. The DedicatedWorkerGlobalScope object (the Worker", 
        "type": "Web Workers"
    }, 
    "DelayNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DelayNode", 
        "params": [
            {
                "descr": "Is an a-rate AudioParam representing the amount of delay to apply. ", 
                "name": "DelayNode.delayTime"
            }
        ], 
        "path": "dom/delaynode", 
        "syntax": "DelayNodeinterface represents a delay-line. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "Descendant selector (\u201cancestor descendant\u201d": {
        "descr": "A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.", 
        "name": "Descendant selector (\u201cancestor descendant\u201d", 
        "params": [], 
        "path": "jquery/descendant-selector", 
        "syntax": "descendant selector  Description: Selects all elements that are descendants of a given ancestor.   version added: 1.0jQuery( \"ancestor descendant\" ) ancestor: Any valid selector.", 
        "type": "Selectors"
    }, 
    "DeviceLightEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceLightEvent", 
        "params": [
            {
                "descr": "The level of the ambient light in lux.", 
                "name": "DeviceLightEvent.value"
            }
        ], 
        "path": "dom/devicelightevent", 
        "syntax": "DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability. Properties  DeviceLightEvent.value  The level of the ambient light in lux. Example window.addEventListener('devicelight', function(event) {\u00a0 console.log(event.value);\n or });", 
        "type": "Events"
    }, 
    "DeviceLightEvent.value": {
        "descr": "The value property provides the current level of the ambient light.", 
        "name": "DeviceLightEvent.value", 
        "params": [], 
        "path": "dom/devicelightevent.value", 
        "syntax": "var light = instanceOfDeviceLightEvent.value; Value A positive number representing a light intensity express in lux. Specifications Specification Status Comment Ambient Light Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 22.0 (22.0) (Mac OS X only) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  Gecko-specific notes The devicelight", 
        "type": "Events"
    }, 
    "DeviceMotionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceMotionEvent", 
        "params": [
            {
                "descr": "An object giving the acceleration of the device on the three axis X, Y and Z. ", 
                "name": "DeviceMotionEvent.acceleration Read only"
            }, 
            {
                "descr": "An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. ", 
                "name": "DeviceMotionEvent.accelerationIncludingGravity Read only"
            }, 
            {
                "descr": "An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. ", 
                "name": "DeviceMotionEvent.rotationRate Read only"
            }, 
            {
                "descr": "A number representing the interval of time, in milliseconds, at which data are obtain from the device.", 
                "name": "DeviceMotionEvent.interval Read only"
            }
        ], 
        "path": "dom/devicemotionevent", 
        "syntax": "DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.  Warning: Currently, Firefox and Chrome does not handle the coordinates the same way. Take care about this while using them.  Properties  DeviceMotionEvent.acceleration", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.acceleration": {
        "descr": "The acceleration property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2).", 
        "name": "DeviceMotionEvent.acceleration", 
        "params": [
            {
                "descr": "Represents the acceleration upon the x axis which is the west to east axis", 
                "name": "x"
            }, 
            {
                "descr": "Represents the acceleration upon the y axis which is the south to north axis", 
                "name": "y"
            }, 
            {
                "descr": "Represents the acceleration upon the z axis which is the down to up axis", 
                "name": "z"
            }
        ], 
        "path": "dom/devicemotionevent.acceleration", 
        "syntax": "var acceleration = instanceOfDeviceMotionEvent.acceleration; Value The acceleration property is an object providing information about acceleration on three axis. Each axis is represented with its own property:  x  Represents the acceleration upon the x axis which is the west to east axis  y  Represents the acceleration upon the y axis which is the south to north axis  z  Represents the acceleration upon the z axis which is the down to up axis Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.accelerationIncludingGravity": {
        "descr": "The accelerationIncludingGravity property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2). Unlike DeviceMotionEvent.acceleration which does not compensate for the influence of gravity, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity.", 
        "name": "DeviceMotionEvent.accelerationIncludingGravity", 
        "params": [
            {
                "descr": "Represents the acceleration upon the x axis which is the west to east axis", 
                "name": "x"
            }, 
            {
                "descr": "Represents the acceleration upon the y axis which is the south to north axis", 
                "name": "y"
            }, 
            {
                "descr": "Represents the acceleration upon the z axis which is the down to up axis", 
                "name": "z"
            }
        ], 
        "path": "dom/devicemotionevent.accelerationincludinggravity", 
        "syntax": "var acceleration = instanceOfDeviceMotionEvent.accelerationIncludingGravity; Value The accelerationIncludingGravity property is an object providing information about acceleration on three axis. Each axis is represented with its own property:  x  Represents the acceleration upon the x axis which is the west to east axis  y  Represents the acceleration upon the y axis which is the south to north axis  z  Represents the acceleration upon the z axis which is the down to up axis Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser Compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.interval": {
        "descr": "Returns the interval, in milliseconds, at which data is obtained from the underlaying hardware. You can use this to determine the granularity of motion events.", 
        "name": "DeviceMotionEvent.interval", 
        "params": [], 
        "path": "dom/devicemotionevent.interval", 
        "syntax": "var interval = instanceOfDeviceMotionEvent.interval; Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.rotationRate": {
        "descr": "Returns the rate at which the device is rotating around each of its axes in degrees per second.", 
        "name": "DeviceMotionEvent.rotationRate", 
        "params": [
            {
                "descr": "The rate at which the device is rotating about its Z axis; that is, being twisted about a line perpendicular to the screen.", 
                "name": "alpha"
            }, 
            {
                "descr": "The rate at which the device is rotating about its X axis; that is, front to back.", 
                "name": "beta"
            }, 
            {
                "descr": "The rate at which the device is rotating about its Y axis; that is, side to side.", 
                "name": "gamma"
            }
        ], 
        "path": "dom/devicemotionevent.rotationrate", 
        "syntax": "var rates = instanceOfDeviceMotionEvent.rotationRate; Value The rotationRates property is a read only object describing the rotation rates of the device around each of its axes:  alpha  The rate at which the device is rotating about its Z axis; that is, being twisted about a line perpendicular to the screen.  beta  The rate at which the device is rotating about its X axis; that is, front to back.  gamma  The rate at which the device is rotating about its Y axis; that is, side to side. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceOrientationEvent", 
        "params": [
            {
                "descr": "A boolean that indicates whether or not the device is providing orientation data absolutely.", 
                "name": "DeviceOrientationEvent.absolute Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360", 
                "name": "DeviceOrientationEvent.alpha Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180. ", 
                "name": "DeviceOrientationEvent.beta Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90. ", 
                "name": "DeviceOrientationEvent.gamma Read only"
            }
        ], 
        "path": "dom/deviceorientationevent", 
        "syntax": "DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.  Warning: Currently, Firefox and Chrome does not handle the coordinates the same way. Take care about this while using them.  Properties  DeviceOrientationEvent.absolute", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.absolute": {
        "descr": "Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.absolute", 
        "params": [], 
        "path": "dom/deviceorientationevent.absolute", 
        "syntax": "var absolute = instanceOfDeviceOrientationEvent.absolute; On return, absolute is true if the orientation data in instanceOfDeviceOrientationEvent is provided as the difference between the Earth's coordinate frame and the device's coordinate frame, or false if the orientation data is being provided in reference to some arbitrary, device-determined coordinate frame. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.alpha": {
        "descr": "Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.alpha", 
        "params": [], 
        "path": "dom/deviceorientationevent.alpha", 
        "syntax": "var alpha = instanceOfDeviceOrientationEvent.alpha; Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.beta": {
        "descr": "Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180, by which the device is tipped forward or backward. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.beta", 
        "params": [], 
        "path": "dom/deviceorientationevent.beta", 
        "syntax": "var beta = instanceOfDeviceOrientationEvent.beta; Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.gamma": {
        "descr": "Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is turned left or right. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.gamma", 
        "params": [], 
        "path": "dom/deviceorientationevent.gamma", 
        "syntax": "var gamma = orientationEvent.gamma; Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceProximityEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceProximityEvent", 
        "params": [
            {
                "descr": "The maximum sensing distance the sensor is able to report, in centimeters.", 
                "name": "DeviceProximityEvent.max Read only"
            }, 
            {
                "descr": "The minimum sensing distance the sensor is able to report, in centimeters. ", 
                "name": "DeviceProximityEvent.min Read only"
            }, 
            {
                "descr": "The current device proximity, in centimeters.", 
                "name": "DeviceProximityEvent.value Read only"
            }
        ], 
        "path": "dom/deviceproximityevent", 
        "syntax": "DeviceProximityEvent provides information about the distance of a nearby physical object using the proximity sensor of a device. Properties  DeviceProximityEvent.max Read only   The maximum sensing distance the sensor is able to report, in centimeters.  DeviceProximityEvent.min Read only   The minimum sensing distance the sensor is able to report, in centimeters. Ususally zero.  DeviceProximityEvent.value Read only   The current device proximity, in centimeters. Examples window.addEventListener('deviceproximity', function(event) {\u00a0 console.log(\"value: \" + event.value, \"max: \" + event.max, \"min: \" + event.min", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.max": {
        "descr": "The max property provides the maximum sensing distance the sensor is able to report, in centimeters.", 
        "name": "DeviceProximityEvent.max", 
        "params": [], 
        "path": "dom/deviceproximityevent.max", 
        "syntax": "var value = instanceOfDeviceProximityEvent.max; Value A positive number indicating the maximum distance, in centimeters (cm), that the device's proximity sensor is able to detect and report.", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.min": {
        "descr": "The min property provides the minimum distance the sensor can report, in centimeters.", 
        "name": "DeviceProximityEvent.min", 
        "params": [], 
        "path": "dom/deviceproximityevent.min", 
        "syntax": "var value = instanceOfDeviceProximityEvent.min; Value A positive number indicating the minimum distance, in centimeters (cm), the device's proximity sensor can report.", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.value": {
        "descr": "The value property of DeviceProximityEvent objects provides the current distance between the device and the detected object, in centimeters.", 
        "name": "DeviceProximityEvent.value", 
        "params": [], 
        "path": "dom/deviceproximityevent.value", 
        "syntax": "var distance = instanceOfDeviceProximityEvent.value; Value A positive number representing a distance in centimeters (cm) between the device's proximity sensor and the detected object.", 
        "type": "Events"
    }, 
    "DocumentFragment.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DocumentFragment.constructor", 
        "params": [], 
        "path": "dom/documentfragment.documentfragment", 
        "syntax": "DocumentFragment()", 
        "type": "DocumentFragment"
    }, 
    "DocumentFragment.querySelector": {
        "descr": "The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.", 
        "name": "DocumentFragment.querySelector", 
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.", 
                "name": "selectors"
            }
        ], 
        "path": "dom/documentfragment.queryselector", 
        "syntax": "element = documentframgment.querySelector(selectors);", 
        "type": "DocumentFragment"
    }, 
    "DocumentFragment.querySelectorAll": {
        "descr": "The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.", 
        "name": "DocumentFragment.querySelectorAll", 
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.", 
                "name": "selectors"
            }
        ], 
        "path": "dom/documentfragment.queryselectorall", 
        "syntax": "elementList = documentframgment.querySelectorAll(selectors);", 
        "type": "DocumentFragment"
    }, 
    "DocumentTouch.createTouch": {
        "descr": "Obsolete since Gecko 25 (Firefox 25 / Thunderbird 25 / SeaMonkey 2.22)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "DocumentTouch.createTouch", 
        "params": [
            {
                "descr": "The window in which the touch occurred.", 
                "name": "view"
            }, 
            {
                "descr": "The EventTarget for the touch.", 
                "name": "target"
            }, 
            {
                "descr": "The value for Touch.identifier.", 
                "name": "identifier"
            }, 
            {
                "descr": "The value for Touch.pageX.", 
                "name": "pageX"
            }, 
            {
                "descr": "The value for Touch.pageY.", 
                "name": "pageY"
            }, 
            {
                "descr": "The value for Touch.screenX.", 
                "name": "screenX"
            }, 
            {
                "descr": "The value for Touch.screenY.", 
                "name": "screenY"
            }, 
            {
                "descr": "The value for Touch.clientX.", 
                "name": "clientX"
            }, 
            {
                "descr": "The value for Touch.clientY.", 
                "name": "clientY"
            }, 
            {
                "descr": "The value for Touch.radiusX.", 
                "name": "radiusX"
            }, 
            {
                "descr": "The value for Touch.radiusY.", 
                "name": "radiusY"
            }, 
            {
                "descr": "The value for Touch.rotationAngle.", 
                "name": "rotationAngle"
            }, 
            {
                "descr": "The value for Touch.force.", 
                "name": "force"
            }, 
            {
                "descr": "A Touch object configured as described by the input parameters.", 
                "name": "touch"
            }
        ], 
        "path": "dom/documenttouch.createtouch", 
        "syntax": "var touch = DocumentTouch.createTouch(view, target, identifier, pageX, pageY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 screenX, screenY, clientX, clientY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 radiusX, radiusY, rotationAngle, force);", 
        "type": "Miscellaneous"
    }, 
    "DocumentTouch.createTouchList": {
        "descr": "Obsolete since Gecko 25 (Firefox 25 / Thunderbird 25 / SeaMonkey 2.22)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "DocumentTouch.createTouchList", 
        "params": [
            {
                "descr": "Either a single Touch object or an array of Touch objects.", 
                "name": "touches"
            }, 
            {
                "descr": "A TouchList object containing the Touch objects specified by the touches parameter.", 
                "name": "list"
            }
        ], 
        "path": "dom/documenttouch.createtouchlist", 
        "syntax": "var list = DocumentTouch.createTouchList(touches);", 
        "type": "Miscellaneous"
    }, 
    "DynamicsCompressorNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DynamicsCompressorNode", 
        "params": [
            {
                "descr": "Is a k-rate AudioParam representing the decibel value above which the compression start taking effect. ", 
                "name": "DynamicsCompressorNode.threshold"
            }, 
            {
                "descr": "Is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion. ", 
                "name": "DynamicsCompressorNode.knee"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output. ", 
                "name": "DynamicsCompressorNode.ratio"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of gain reduction currently applied by the compressor to the signal. ", 
                "name": "DynamicsCompressorNode.reduction"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, to reduce the gain by 10 dB. ", 
                "name": "DynamicsCompressorNode.attack"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, to increase the gain by 10 dB. ", 
                "name": "DynamicsCompressorNode.release"
            }
        ], 
        "path": "dom/dynamicscompressornode", 
        "syntax": "The DynamicsCompressorNodeinterface provides a dynamics compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode", 
        "type": "Web Audio"
    }, 
    "EPSILON": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.EPSILON", 
        "params": [], 
        "path": "javascript/global_objects/number/epsilon", 
        "syntax": "Number.EPSILON property represents the smallest interval between two distinguable values represented as a Number", 
        "type": "Number"
    }, 
    "Element selector (\u201celement\u201d": {
        "descr": "JavaScript's getElementsByTagName() function is called to return the appropriate elements when this expression is used.", 
        "name": "Element selector (\u201celement\u201d", 
        "params": [], 
        "path": "jquery/element-selector", 
        "syntax": "element selector  Description: Selects all elements with the given tag name.   version added: 1.0jQuery( \"element\" ) element: An element to search for. Refers to the tagName of DOM nodes.", 
        "type": "Selectors"
    }, 
    "Error": {
        "descr": "Creates an error object.", 
        "name": "Error", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The value for the fileName property on the created Error object. ", 
                "name": "fileName"
            }, 
            {
                "descr": "The value for the lineNumber property on the created Error object. ", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs regarding the global function eval()", 
                "name": "EvalError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range", 
                "name": "RangeError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when de-referencing an invalid reference", 
                "name": "ReferenceError"
            }, 
            {
                "descr": "Creates an instance representing a syntax error that occurs while parsing code in eval()", 
                "name": "SyntaxError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when a variable or parameter is not of a valid type", 
                "name": "TypeError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters", 
                "name": "URIError"
            }, 
            {
                "descr": "Allows the addition of properties to Error instances.", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/error", 
        "syntax": "new Error([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Error.toString": {
        "descr": "Returns a string representing the specified Error object.", 
        "name": "Error.toString", 
        "params": [], 
        "path": "javascript/global_objects/error/tostring", 
        "syntax": "var str = error.toString();", 
        "type": "Errors"
    }, 
    "EvalError": {
        "descr": "Represents an error regarding the eval function.", 
        "name": "EvalError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an EvalError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/evalerror", 
        "syntax": "new EvalError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "EventTarget": {
        "descr": "EventTarget is a DOM interface implemented by objects that can receive DOM events and have listeners for them.", 
        "name": "EventTarget", 
        "params": [
            {
                "descr": "Register an event handler of a specific event type on the EventTarget.", 
                "name": "EventTarget.addEventListener ()"
            }, 
            {
                "descr": "Removes an event listener from the EventTarget.", 
                "name": "EventTarget.removeEventListener ()"
            }, 
            {
                "descr": "Dispatch an event to this EventTarget.", 
                "name": "EventTarget.dispatchEvent ()"
            }, 
            {
                "descr": "(DOMString type, EventHandler handler)", 
                "name": "setEventHandler"
            }, 
            {
                "descr": "(DOMString type)", 
                "name": "getEventHandler"
            }
        ], 
        "path": "dom/eventtarget", 
        "syntax": "window are the most common event targets, but other objects can be event targets too, for example XMLHttpRequest, AudioNode", 
        "type": "Event"
    }, 
    "EventTarget.addEventListener": {
        "descr": "The EventTarget.addEventListener() method registers the specified listener on the EventTarget it's called on. The event target may be an Element in a document, the Document itself, a Window, or any other object that supports events (such as XMLHttpRequest).", 
        "name": "EventTarget.addEventListener", 
        "params": [
            {
                "descr": "A string representing the event type to listen for.", 
                "name": "type"
            }, 
            {
                "descr": "The object that receives a notification when an event of the specified type occurs. ", 
                "name": "listener"
            }, 
            {
                "descr": "If true, useCapture indicates that the user wishes to initiate capture. ", 
                "name": "useCapture Optional"
            }, 
            {
                "descr": "If true, the listener will receive synthetic events dispatched by web content (the default is false for chrome and true for regular web pages). ", 
                "name": "wantsUntrusted"
            }
        ], 
        "path": "dom/eventtarget.addeventlistener", 
        "syntax": "Window, or any other object that supports events (such as XMLHttpRequest).", 
        "type": "Event"
    }, 
    "EventTarget.dispatchEvent": {
        "descr": "Dispatches an Event at the specified EventTarget, invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) apply to events dispatched manually with dispatchEvent().", 
        "name": "EventTarget.dispatchEvent", 
        "params": [], 
        "path": "dom/eventtarget.dispatchevent", 
        "syntax": "canceled = !target.dispatchEvent(event)", 
        "type": "Event"
    }, 
    "EventTarget.removeEventListener": {
        "descr": "Removes the event listener previously registered with EventTarget.addEventListener.", 
        "name": "EventTarget.removeEventListener", 
        "params": [
            {
                "descr": "A string representing the event type being removed.", 
                "name": "type"
            }, 
            {
                "descr": "The listener parameter indicates the EventListener function to be removed.", 
                "name": "listener"
            }, 
            {
                "descr": "Specifies whether the EventListener being removed was registered as a capturing listener or not. ", 
                "name": "useCapture Optional"
            }
        ], 
        "path": "dom/eventtarget.removeeventlistener", 
        "syntax": "target.removeEventListener(type, listener[, useCapture])", 
        "type": "Event"
    }, 
    "File.lastModifiedDate": {
        "descr": "Returns the last modified date of the file. Files without a known last modified date use the current date instead.", 
        "name": "File.lastModifiedDate", 
        "params": [], 
        "path": "dom/file.lastmodifieddate", 
        "syntax": "var time = instanceOfFile.lastModifiedDate Value A Date object. Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">var fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)var files = fileInput.files;for (var i = 0; i < files.length; i++) {  alert(files[i].name + \" has a last modified date of \" + files[i].lastModifiedDate);\n or });", 
        "type": "File"
    }, 
    "File.name": {
        "descr": "Returns the name of the file. For security reasons, the path is excluded from this property.", 
        "name": "File.name", 
        "params": [], 
        "path": "dom/file.name", 
        "syntax": "var name = instanceOfFile.name Value A string. Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">var fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)var files = fileInput.files;for (var i = 0; i < files.length; i++) {  alert(\"Filename \" + files[i].name);\n or });", 
        "type": "File"
    }, 
    "FileReader": {
        "descr": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.", 
        "name": "FileReader", 
        "params": [
            {
                "descr": "A DOMError representing the error that occurred while reading the file.", 
                "name": "FileReader.error Read only"
            }, 
            {
                "descr": "A number indicating the state of the FileReader. ", 
                "name": "FileReader.readyState Read only"
            }, 
            {
                "descr": "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.", 
                "name": "FileReader.result Read only"
            }, 
            {
                "descr": "A handler for the abort event. This event is triggered each time the reading operation is aborted.", 
                "name": "FileReader.onabort"
            }, 
            {
                "descr": "A handler for the error event. This event is triggered each time the reading operation encounter an error.", 
                "name": "FileReader.onerror"
            }, 
            {
                "descr": "A handler for the load event. This event is triggered each time the reading operation is successfully completed.", 
                "name": "FileReader.onload"
            }, 
            {
                "descr": "A handler for the loadstart event. ", 
                "name": "FileReader.onloadstart"
            }, 
            {
                "descr": "A handler for the loadend event. ", 
                "name": "FileReader.onloadend"
            }, 
            {
                "descr": "A handler for the progress event. ", 
                "name": "FileReader.onprogress"
            }, 
            {
                "descr": "Aborts the read operation. Upon return, the readyState will be DONE.", 
                "name": "FileReader.abort()"
            }, 
            {
                "descr": "Starts reading the contents of the specified Blob, once finished, the result attribute contains an ArrayBuffer representing the file's data.", 
                "name": "FileReader.readAsArrayBuffer()"
            }, 
            {
                "descr": "Starts reading the contents of the specified Blob, once finished, the result attribute contains the raw binary data from the file as a string.", 
                "name": "FileReader.readAsBinaryString()"
            }, 
            {
                "descr": "Starts reading the contents of the specified Blob, once finished, the result attribute contains a data: URL representing the file's data.", 
                "name": "FileReader.readAsDataURL()"
            }, 
            {
                "descr": "Starts reading the contents of the specified Blob, once finished, the result attribute contains the contents of the file as a text string.", 
                "name": "FileReader.readAsText()"
            }
        ], 
        "path": "dom/filereader", 
        "syntax": "FileReader.error Read only   A DOMError representing the error that occurred while reading the file.  FileReader.readyState Read only   A number indicating the state of the FileReader. This will be one of the State constants.  FileReader.result Read only   The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation. Event handlers  FileReader.onabort  A handler for the abort event. This event is triggered each time the reading operation is aborted.  FileReader.onerror  A handler for the error event. This event is triggered each time the reading operation encounter an error.  FileReader.onload  A handler for the load event. This event is triggered each time the reading operation is successfully completed.  FileReader.onloadstart  A handler for the loadstart event. This event is triggered each time the reading is starting.  FileReader.onloadend  A handler for the loadend event. This event is triggered each time the reading operation is completed (either in success or failure).  FileReader.onprogress", 
        "type": "File"
    }, 
    "FileReader.abort": {
        "descr": "The abort method is used to aborts the read operation. Upon return, the readyState will be DONE.", 
        "name": "FileReader.abort", 
        "params": [
            {
                "descr": "Thrown when abort is called while no read operation is in progress (that is, the state isn't LOADING).", 
                "name": "DOM_FILE_ABORT_ERR"
            }
        ], 
        "path": "dom/filereader.abort", 
        "syntax": "instanceOfFileReader.abort();", 
        "type": "File"
    }, 
    "FileReader.error": {
        "descr": "Returns the error that occurred while reading the file.", 
        "name": "FileReader.error", 
        "params": [], 
        "path": "dom/filereader.error", 
        "syntax": "var error = instanceOfFileReader.error Value A DOMError Specifications Specification Status Comment File API Working Draft Initial definition.  Browser compatibility  Feature Firefox (Gecko) Chrome Internet Explorer* Opera* Safari Basic support 3.6 (1.9.2) 7 10 12.02 6.0.2   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  Implementation notes IE9 has a File API Lab. Opera has partial support in 11.1. Gecko-specific notes Prior to Gecko 2.0 beta 7 (Firefox 4.0 beta 7), all Blob", 
        "type": "File"
    }, 
    "FileReader.readAsArrayBuffer": {
        "descr": "The readAsArrayBuffer method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data.", 
        "name": "FileReader.readAsArrayBuffer", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }
        ], 
        "path": "dom/filereader.readasarraybuffer", 
        "syntax": "instanceOfFileReader.readAsArrayBuffer(blob);", 
        "type": "File"
    }, 
    "FileReader.readAsBinaryString": {
        "descr": "The readAsBinaryString method is used to starts reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the raw binary data from the file.", 
        "name": "FileReader.readAsBinaryString", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }
        ], 
        "path": "dom/filereader.readasbinarystring", 
        "syntax": "instanceOfFileReader.readAsBinaryString(blob);", 
        "type": "File"
    }, 
    "FileReader.readAsDataURL": {
        "descr": "The readAsDataURL method is used to starts reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains a data: URL representing the file's data as base64 encoded string.", 
        "name": "FileReader.readAsDataURL", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }
        ], 
        "path": "dom/filereader.readasdataurl", 
        "syntax": "instanceOfFileReader.readAsDataURL(blob);", 
        "type": "File"
    }, 
    "FileReader.readAsText": {
        "descr": "The readAsText method is used to starts reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the contents of the file as a text string.", 
        "name": "FileReader.readAsText", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }, 
            {
                "descr": "A string indicating the encoding to use for the returned data. ", 
                "name": "encoding Optional"
            }
        ], 
        "path": "dom/filereader.readastext", 
        "syntax": "instanceOfFileReader.readAsText(blob[, encoding]);", 
        "type": "File"
    }, 
    "FileReader.readyState": {
        "descr": "Provides the current state of the reading operation.", 
        "name": "FileReader.readyState", 
        "params": [], 
        "path": "dom/filereader.readystate", 
        "syntax": "var state = instanceOfFileReader.readyState Value A number which is one of the three possible state constants define for the FileReader", 
        "type": "File"
    }, 
    "FileReader.result": {
        "descr": "Returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.", 
        "name": "FileReader.result", 
        "params": [], 
        "path": "dom/filereader.result", 
        "syntax": "var file = instanceOfFileReader.result Value A string or an ArrayBuffer which depends on the method used to initiate the read operation. Specifications Specification Status Comment File API Working Draft Initial definition.  Browser compatibility  Feature Firefox (Gecko) Chrome Internet Explorer* Opera* Safari Basic support 3.6 (1.9.2) 7 10 12.02 6.0.2   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  Implementation notes IE9 has a File API Lab. Opera has partial support in 11.1. Gecko-specific notes Prior to Gecko 2.0 beta 7 (Firefox 4.0 beta 7), all Blob", 
        "type": "File"
    }, 
    "FileReaderSync": {
        "descr": "The FileReaderSync interface allows to read File or Blob objects in a synchronous way.", 
        "name": "FileReaderSync", 
        "params": [
            {
                "descr": "The DOM Blob or File to read into the ArrayBuffer.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected: the resource has been modified by a third party; two many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }, 
            {
                "descr": "The DOM Blob or File to read into the DOMString.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected: the resource has been modified by a third party; two many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }, 
            {
                "descr": "The DOM Blob or File to read into the DOMString.", 
                "name": "blob"
            }, 
            {
                "descr": "Optional. A string representing the encoding to be used, like iso-8859-1 or UTF-8.", 
                "name": "encoding"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected: the resource has been modified by a third party; two many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "The DOM Blob or File to read.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected: the resource has been modified by a third party; too many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }
        ], 
        "path": "dom/filereadersync", 
        "syntax": "Parameters  blob  The DOM Blob or File to read.   Return value An DOMString representing the file's data as a data URL.  Exceptions The following exceptions can be raised by this method:  NotFoundError  is raised when the resource represented by the DOM Blob or File cannot be found, e. g. because it has been erased.  SecurityError  is raised when one of the following problematic situation is detected: the resource has been modified by a third party; too many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).   NotReadableError", 
        "type": "File"
    }, 
    "Float32Array": {
        "descr": "The Float32Array type represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Float32Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Float32Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Float32Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "One more than the offset to the last element in the array to be referenced by the new Float32Array object. ", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/float32array", 
        "syntax": "TypedArray represents any of the typed array object types. Float32Array Float32Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Float64Array": {
        "descr": "The Float64Array type represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Float64Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Float64Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Float64Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to the first element beyond the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/float64array", 
        "syntax": "TypedArray represents any of the typed array object types. Float64Array Float64Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "FocusEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FocusEvent", 
        "params": [
            {
                "descr": "Is an EventTarget representing a secondary target for this event. ", 
                "name": "FocusEvent.relatedTarget Read only"
            }, 
            {
                "descr": "Creates a FocusEvent event with the given parameters.", 
                "name": "FocusEvent()"
            }
        ], 
        "path": "dom/focusevent", 
        "syntax": "FocusEvent interface represents focus-related events like focus, blur, focusin, or focusout. Properties Inherits properties from its parent UIEvent, and indirectly from Event.  FocusEvent.relatedTarget", 
        "type": "Events"
    }, 
    "FocusEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FocusEvent.constructor", 
        "params": [
            {
                "descr": "Is an EventTarget representing the secondary target of a FocusEvent. ", 
                "name": "relatedTarget Optional"
            }
        ], 
        "path": "dom/focusevent.focusevent", 
        "syntax": "FocusEvent()", 
        "type": "Events"
    }, 
    "FocusEvent.relatedTarget": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FocusEvent.relatedTarget", 
        "params": [], 
        "path": "dom/focusevent.relatedtarget", 
        "syntax": "FocusEvent.relatedTarget read-only property represents a secondary target for this event, which will depend of the event itself. As in some cases (like when tabbing in or out a page), this property may be set to null", 
        "type": "Events"
    }, 
    "FormData": {
        "descr": "XMLHttpRequest Level 2 adds support for the new FormData interface. FormData objects provide a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest send() method.", 
        "name": "FormData", 
        "params": [
            {
                "descr": "Optional HTML Form Element <form> to send for keys/values. ", 
                "name": "form"
            }, 
            {
                "descr": "The name of the field whose data is contained in value.", 
                "name": "name"
            }, 
            {
                "descr": "The field's value. Can be a Blob, File, or a string, if neither, the value is converted to a string.", 
                "name": "value"
            }, 
            {
                "descr": "Optional The filename reported to the server, when a Blob or File is passed as second paramter. ", 
                "name": "filename"
            }
        ], 
        "path": "dom/formdata", 
        "syntax": "new FormData (optional HTMLFormElement form)", 
        "type": "XMLHTTPRequest"
    }, 
    "Function": {
        "descr": "The Function constructor creates a new Function object. In JavaScript every function is actually a Function object.", 
        "name": "Function", 
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ", 
                "name": "arg1, arg2, ... argN"
            }, 
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.", 
                "name": "functionBody"
            }, 
            {
                "descr": "An array corresponding to the arguments passed to a function. ", 
                "name": "Function.arguments"
            }, 
            {
                "descr": "Used to specifiy the number of arguments expected by the function, but has been removed. ", 
                "name": "Function.arity"
            }, 
            {
                "descr": "Specifies the function that invoked the currently executing function.", 
                "name": "Function.caller"
            }, 
            {
                "descr": "Specifies the number of arguments expected by the function.", 
                "name": "Function.length"
            }, 
            {
                "descr": "The name of the function.", 
                "name": "Function.name"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "Function.prototype.constructor"
            }, 
            {
                "descr": "Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.", 
                "name": "Function.prototype.apply()"
            }, 
            {
                "descr": "Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.", 
                "name": "Function.prototype.bind()"
            }, 
            {
                "descr": "Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are.", 
                "name": "Function.prototype.call()"
            }, 
            {
                "descr": "Returns true if the function is a generator; otherwise returns false.", 
                "name": "Function.prototype.isGenerator()"
            }, 
            {
                "descr": "Returns a string representing the source code of the function. ", 
                "name": "Function.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the source code of the function. ", 
                "name": "Function.prototype.toString()"
            }
        ], 
        "path": "javascript/global_objects/function", 
        "syntax": "new Function ([arg1[, arg2[, ...argN]],] functionBody)", 
        "type": "Function"
    }, 
    "Function.apply": {
        "descr": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).", 
        "name": "Function.apply", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. ", 
                "name": "argsArray"
            }
        ], 
        "path": "javascript/global_objects/function/apply", 
        "syntax": "call()", 
        "type": "Function"
    }, 
    "Function.bind": {
        "descr": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.", 
        "name": "Function.bind", 
        "params": [
            {
                "descr": "The value to be passed as the this parameter to the target function when the bound function is called. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments to prepend to arguments provided to the bound function when invoking the target function.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/bind", 
        "syntax": "fun.bind(thisArg[, arg1[, arg2[, ...]]])", 
        "type": "Function"
    }, 
    "Function.call": {
        "descr": "The call() method calls a function with a given this value and arguments provided individually.", 
        "name": "Function.call", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments for the object.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/call", 
        "syntax": "apply()", 
        "type": "Function"
    }, 
    "Function.toString": {
        "descr": "The toString() method returns a string representing the source code of the function.", 
        "name": "Function.toString", 
        "params": [
            {
                "descr": "The amount of spaces to indent the string representation of the source code. ", 
                "name": "indentation  Obsolete since Gecko 17"
            }
        ], 
        "path": "javascript/global_objects/function/tostring", 
        "syntax": "function.toString(indentation)", 
        "type": "Function"
    }, 
    "GainNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "GainNode", 
        "params": [
            {
                "descr": "Is an a-rate AudioParam representing the amount of gain to apply. ", 
                "name": "GainNode.gain"
            }
        ], 
        "path": "dom/gainnode", 
        "syntax": "GainNodeinterface represents a change in volume. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "Generator": {
        "descr": "Lets you work with generators.", 
        "name": "Generator", 
        "params": [], 
        "path": "javascript/global_objects/generator", 
        "syntax": "function fibonacci(){\tvar fn1 = 1;\tvar fn2 = 1;\t\twhile (1){\t\t\tvar current = fn2;\t\t\tfn2 = fn1;\t\t\tfn1 = fn1 + current;\t\t\tyield current;\t\t}\t} var it = fibonacci();\n or var it2 = (i * 2 for (i in it));", 
        "type": "Global Objects"
    }, 
    "Geolocation.clearWatch": {
        "descr": "The Geolocation.clearWatch() method is used to unregister location/error monitoring handlers previously installed using Geolocation.watchPosition().", 
        "name": "Geolocation.clearWatch", 
        "params": [
            {
                "descr": "The ID number returned by the Geolocation.watchPosition() method when installing the handler you wish to remove.", 
                "name": "id"
            }
        ], 
        "path": "dom/geolocation.clearwatch", 
        "syntax": "navigator.geolocation.clearWatch(id);", 
        "type": "Geolocation"
    }, 
    "Geolocation.getCurrentPosition": {
        "descr": "The Geolocation.getCurrentPosition() method is used to get the current position of the device.", 
        "name": "Geolocation.getCurrentPosition", 
        "params": [
            {
                "descr": "A callback function that takes a Position object as its sole input parameter.", 
                "name": "success"
            }, 
            {
                "descr": "An optional callback function that takes a PositionError object as its sole input parameter.", 
                "name": "error Optional"
            }, 
            {
                "descr": "An optional PositionOptions object.", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/geolocation.getcurrentposition", 
        "syntax": "navigator.geolocation.getCurrentPosition(success, error, options)", 
        "type": "Geolocation"
    }, 
    "Geolocation.watchPosition": {
        "descr": "The Geolocation.watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function.", 
        "name": "Geolocation.watchPosition", 
        "params": [
            {
                "descr": "A callback function that takes a Position object as an input parameter.", 
                "name": "success"
            }, 
            {
                "descr": "An optional callback function that takes a PositionError object as an input parameter.", 
                "name": "error Optional"
            }, 
            {
                "descr": "An optional PositionOptions object.", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/geolocation.watchposition", 
        "syntax": "id = navigator.geolocation.watchPosition(success, error, options)", 
        "type": "Geolocation"
    }, 
    "GlobalEventHandlers": {
        "descr": "The GlobalEventHandlers interface describes the event handlers common to several interfaces like HTMLElement, Document, or Window. Each of these interfaces can implement more event handlers.", 
        "name": "GlobalEventHandlers", 
        "params": [
            {
                "descr": "Is an EventHandler representing the code to be called when the abort event is raised.", 
                "name": "GlobalEventHandlers.onabort"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the blur event is raised.", 
                "name": "GlobalEventHandlers.onblur"
            }, 
            {
                "descr": "Is an OnErrorEventHandler representing the code to be called when the error event is raised.", 
                "name": "GlobalEventHandlers.onerror"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the focus event is raised.", 
                "name": "GlobalEventHandlers.onfocus"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the cancel event is raised.", 
                "name": "GlobalEventHandlers.oncancel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the canplay event is raised.", 
                "name": "GlobalEventHandlers.oncanplay"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the canplaythrough event is raised.", 
                "name": "GlobalEventHandlers.oncanplaythrough"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the change event is raised.", 
                "name": "GlobalEventHandlers.onchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the click event is raised.", 
                "name": "GlobalEventHandlers.onclick"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the close event is raised.", 
                "name": "GlobalEventHandlers.onclose"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the contextmenu event is raised.", 
                "name": "GlobalEventHandlers.oncontextmenu"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the cuechange event is raised.", 
                "name": "GlobalEventHandlers.oncuechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dblclick event is raised.", 
                "name": "GlobalEventHandlers.ondblclick"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the drag event is raised.", 
                "name": "GlobalEventHandlers.ondrag"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragend event is raised.", 
                "name": "GlobalEventHandlers.ondragend"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragenter event is raised.", 
                "name": "GlobalEventHandlers.ondragenter"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragexit event is raised.", 
                "name": "GlobalEventHandlers.ondragexit"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragleave event is raised.", 
                "name": "GlobalEventHandlers.ondragleave"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragover event is raised.", 
                "name": "GlobalEventHandlers.ondragover"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragstart event is raised.", 
                "name": "GlobalEventHandlers.ondragstart"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the drop event is raised.", 
                "name": "GlobalEventHandlers.ondrop"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the durationchange event is raised.", 
                "name": "GlobalEventHandlers.ondurationchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the emptied event is raised.", 
                "name": "GlobalEventHandlers.onemptied"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the ended event is raised.", 
                "name": "GlobalEventHandlers.onended"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the input event is raised.", 
                "name": "GlobalEventHandlers.oninput"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the invalid event is raised.", 
                "name": "GlobalEventHandlers.oninvalid"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keydown event is raised.", 
                "name": "GlobalEventHandlers.onkeydown"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keypress event is raised.", 
                "name": "GlobalEventHandlers.onkeypress"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keyup event is raised.", 
                "name": "GlobalEventHandlers.onkeyup"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the load event is raised.", 
                "name": "GlobalEventHandlers.onload"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadeddata event is raised.", 
                "name": "GlobalEventHandlers.onloadeddata"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadedmetadata event is raised.", 
                "name": "GlobalEventHandlers.onloadedmetadata"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadstart event is raised.", 
                "name": "GlobalEventHandlers.onloadstart"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousedown event is raised.", 
                "name": "GlobalEventHandlers.onmousedown"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseenter event is raised.", 
                "name": "GlobalEventHandlers.onmouseenter"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseleave event is raised.", 
                "name": "GlobalEventHandlers.onmouseleave"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousemove event is raised.", 
                "name": "GlobalEventHandlers.onmousemove"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseout event is raised.", 
                "name": "GlobalEventHandlers.onmouseout"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseover event is raised.", 
                "name": "GlobalEventHandlers.onmouseover"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseup event is raised.", 
                "name": "GlobalEventHandlers.onmouseup"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousewheel event is raised.", 
                "name": "GlobalEventHandlers.onmousewheel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pause event is raised.", 
                "name": "GlobalEventHandlers.onpause"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the play event is raised.", 
                "name": "GlobalEventHandlers.onplay"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the playing event is raised.", 
                "name": "GlobalEventHandlers.onplaying"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the progress event is raised.", 
                "name": "GlobalEventHandlers.onprogress"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the ratechange event is raised.", 
                "name": "GlobalEventHandlers.onratechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the reset event is raised.", 
                "name": "GlobalEventHandlers.onreset"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the scroll event is raised.", 
                "name": "GlobalEventHandlers.onscroll"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the seeked event is raised.", 
                "name": "GlobalEventHandlers.onseeked"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the seeking event is raised.", 
                "name": "GlobalEventHandlers.onseeking"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the select event is raised.", 
                "name": "GlobalEventHandlers.onselect"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the show event is raised.", 
                "name": "GlobalEventHandlers.onshow"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the sort event is raised.", 
                "name": "GlobalEventHandlers.onsort"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the stalled event is raised.", 
                "name": "GlobalEventHandlers.onstalled"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the submit event is raised.", 
                "name": "GlobalEventHandlers.onsubmit"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the suspend event is raised.", 
                "name": "GlobalEventHandlers.onsuspend"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the timeupdate event is raised.", 
                "name": "GlobalEventHandlers.ontimeupdate"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the volumechange event is raised.", 
                "name": "GlobalEventHandlers.onvolumechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the waiting event is raised.", 
                "name": "GlobalEventHandlers.onwaiting"
            }
        ], 
        "path": "dom/globaleventhandlers", 
        "syntax": "Window. Each of these interfaces can implement more event handlers. GlobalEventHandlers is a raw interface and no object of this type can be created. Properties The events properties, of the form onXYZ, are defined on the GlobalEventHandlers, and implemented by HTMLElement, Document", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onabort": {
        "descr": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)", 
        "name": "GlobalEventHandlers.onabort", 
        "params": [], 
        "path": "dom/globaleventhandlers.onabort", 
        "syntax": "window.onabort =funcRef funcRef: Reference to a function Example window.onabort = function() {  alert(\"Load aborted.\");\n or });", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onblur": {
        "descr": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.", 
        "name": "GlobalEventHandlers.onblur", 
        "params": [], 
        "path": "dom/globaleventhandlers.onblur", 
        "syntax": "element.onblur = function; function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as element.onblur = function() { alert(\"onblur event detected!\");\n or  };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onclick": {
        "descr": "The onclick property returns the onClick event handler code on the current element.", 
        "name": "GlobalEventHandlers.onclick", 
        "params": [], 
        "path": "dom/globaleventhandlers.onclick", 
        "syntax": "element.onclick = functionRef; where functionRef is a function - often a name of a function declared elsewhere or a function expression. See \"JavaScript Guide:Functions\" for details. The event object passed to the specified event handler function is a MouseEvent", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.oncontextmenu": {
        "descr": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.", 
        "name": "GlobalEventHandlers.oncontextmenu", 
        "params": [], 
        "path": "dom/globaleventhandlers.oncontextmenu", 
        "syntax": "window.oncontextmenu = funcRef;//funcRef refers to the function to be called Example These examples will disable right click on the page: document.oncontextmenu = function () { // Use document as opposed to window for IE8 compatibility   return false;};", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondblclick": {
        "descr": "The ondblclick property returns the onDblClick event handler code on the current element.", 
        "name": "GlobalEventHandlers.ondblclick", 
        "params": [], 
        "path": "dom/globaleventhandlers.ondblclick", 
        "syntax": "element.ondblclick = function; function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as element.ondblclick = function() { alert(\"ondblclick event detected!\");\n or  };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onerror": {
        "descr": "An event handler for runtime script errors.", 
        "name": "GlobalEventHandlers.onerror", 
        "params": [], 
        "path": "dom/globaleventhandlers.onerror", 
        "syntax": "window.onerror = funcRef; Parameters funcRef is a reference to a function. When the function returns true, this prevents the firing of the default event handler. Function parameters: Error message (string) Url where error was raised (string) Line number where error was raised (number)  Examples //\u00a0Example 1:// Prevent error dialogs from displaying -which is the window's normal// behavior- by overriding the default event handler for error events that// go to the window.window.onerror = null;// Example 2:var gOldOnError = window.onerror;//\u00a0Override previous handler.window.onerror = function myErrorHandler(errorMsg, url, lineNumber) {  if (gOldOnError)    //\u00a0Call previous handler.    return gOldOnError(errorMsg, url, lineNumber);\n or   // Just let default handler run.  return false;});", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onkeypress": {
        "descr": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.", 
        "name": "GlobalEventHandlers.onkeypress", 
        "params": [], 
        "path": "dom/globaleventhandlers.onkeypress", 
        "syntax": "element.onkeypress = event handling code Notes The keypress event should be raised when the user presses a key on the keyboard. However, not all browsers fire keypress events for certain keys. Browser Incompatibilities Webkit-based browsers (Google Chrome and Safari, for example) do not fire keypress events on the arrow keys", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onkeyup": {
        "descr": "The onkeyup property returns the onKeyUp event handler code for the current element.", 
        "name": "GlobalEventHandlers.onkeyup", 
        "params": [], 
        "path": "dom/globaleventhandlers.onkeyup", 
        "syntax": "element.onkeyup = event handling code Example  <input type=\"text\" onKeyUp=\"keyWasPressed(event)\"> <script>function keyWasPressed(evt){ alert(evt.keyCode) }</script>", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onload": {
        "descr": "An event handler for the load event of a window.", 
        "name": "GlobalEventHandlers.onload", 
        "params": [], 
        "path": "dom/globaleventhandlers.onload", 
        "syntax": "window. Syntax window.onload = funcRef; funcRef is the handler function to be called when the window's load event fires. Examples window.onload = function() {  init();\n or   doSomethingElse();\n or };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmousemove": {
        "descr": "The onmousemove property returns the mousemove event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmousemove", 
        "params": [], 
        "path": "dom/globaleventhandlers.onmousemove", 
        "syntax": "element.onmousemove = event handling code Notes The mousemove event is raised when the user moves the mouse. Examples Example #1: tooltips The following example shows the use of the onmousemove event with a javaScript tooltip. <!doctype html><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Tooltip Example</title><script type=\"text/javascript\">var oTooltip = new (function() {  var nOverX, nOverY, nLeftPos, nTopPos, oNode, bOff = true;  this.follow = function (oMsEvnt1) {    if (bOff) { return; }    var nMoveX =  oMsEvnt1.clientX, nMoveY =  oMsEvnt1.clientY;    nLeftPos += nMoveX - nOverX; nTopPos += nMoveY - nOverY;    oNode.style.left = nLeftPos + \"px\";    oNode.style.top = nTopPos + \"px\";    nOverX = nMoveX; nOverY = nMoveY;  };  this.remove = function () {    if (bOff) { return; }    bOff = true; document.body.removeChild(oNode);\n or   };  this.append = function (oMsEvnt2, sTxtContent) {    oNode.innerHTML = sTxtContent;    if (bOff) { document.body.appendChild(oNode);\n or  bOff = false; }    var nScrollX = document.documentElement.scrollLeft || document.body.scrollLeft, nScrollY = document.documentElement.scrollTop || document.body.scrollTop, nWidth = oNode.offsetWidth, nHeight = oNode.offsetHeight;    nOverX = oMsEvnt2.clientX; nOverY = oMsEvnt2.clientY;    nLeftPos = document.body.offsetWidth - nOverX - nScrollX > nWidth ? nOverX + nScrollX + 10 : document.body.offsetWidth - nWidth + 16;    nTopPos = nOverY - nHeight > 6 ? nOverY + nScrollY - nHeight - 7 : nOverY + nScrollY + 20;    oNode.style.left = nLeftPos + \"px\";    oNode.style.top = nTopPos + \"px\";  };  this.init = function() {    oNode = document.createElement(\"div\");\n or     oNode.className = \"tooltip\";    oNode.style.position = \"absolute\";  };})();\n or </script><style type=\"text/css\">div.tooltip {  padding: 6px;  background: #ffffff;  border: 1px #76808C solid;  border-radius: 5px;  -moz-border-radius: 5px;  -webkit-border-radius: 5px;  z-index: 9999;}</style></head><body onload=\"oTooltip.init();\n or \"><p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 1');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">Move your mouse here&hellip;</a></p><p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 2');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">&hellip;or here!!</a></p></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmouseout": {
        "descr": "The onmouseout property returns the onMouseOut event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmouseout", 
        "params": [], 
        "path": "dom/globaleventhandlers.onmouseout", 
        "syntax": "element.onMouseOut = event handling code Example <!doctype html> \u00a0<html> \u00a0<head> \u00a0<title>onmouseover/onmouseout event example</title> \u00a0<script type=\"text/javascript\"> \u00a0\u00a0\u00a0\u00a0 function initElement() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var p = document.getElementById(\"foo\");\n or  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseover = showMouseOver;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseout = showMouseOut;\u00a0\u00a0\u00a0 }; \u00a0\u00a0\u00a0\u00a0 function showMouseOver() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse over detected';\u00a0\u00a0\u00a0 }\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 function showMouseOut()\u00a0\u00a0\u00a0 {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse out detected';\u00a0\u00a0\u00a0 }</script> \u00a0<style type=\"text/css\"> \u00a0\u00a0\u00a0\u00a0 #foo { \u00a0\u00a0\u00a0\u00a0 border: solid blue 2px; \u00a0\u00a0\u00a0\u00a0 } \u00a0</style> \u00a0</head> \u00a0<body onload=\"initElement()\";>  \u00a0 <span id=\"foo\">My Event Element</span>  \u00a0 <p>mouve your mouse over and out the above element.</p> \u00a0  \u00a0 <div id=\"notice\"></div></body> \u00a0</html>\u00a0);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmouseover": {
        "descr": "The onmouseover property returns the onMouseOver event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmouseover", 
        "params": [], 
        "path": "dom/globaleventhandlers.onmouseover", 
        "syntax": "element.onmouseover = event handling code Example <!doctype html> \u00a0<html> \u00a0<head> \u00a0<title>onmouseover/onmouseout event example</title> \u00a0<script type=\"text/javascript\"> \u00a0\u00a0\u00a0\u00a0 function initElement() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var p = document.getElementById(\"foo\");\n or  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseover = showMouseOver;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseout = showMouseOut;\u00a0\u00a0\u00a0 }; \u00a0\u00a0\u00a0\u00a0 function showMouseOver() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse over detected';\u00a0\u00a0\u00a0 }\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 function showMouseOut()\u00a0\u00a0\u00a0 {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse out detected';\u00a0\u00a0\u00a0 }</script> \u00a0<style type=\"text/css\"> \u00a0\u00a0\u00a0\u00a0 #foo { \u00a0\u00a0\u00a0\u00a0 border: solid blue 2px; \u00a0\u00a0\u00a0\u00a0 } \u00a0</style> \u00a0</head> \u00a0<body onload=\"initElement();\n or \"> \u00a0\u00a0\u00a0\u00a0 <span id=\"foo\">My Event Element</span>\u00a0\u00a0\u00a0 <p>move your mouse over and out the above element.</p> \u00a0\u00a0\u00a0\u00a0 <div id=\"notice\"></div></body> \u00a0</html>\u00a0);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onselect": {
        "descr": "An event handler for the select event on the window.", 
        "name": "GlobalEventHandlers.onselect", 
        "params": [], 
        "path": "dom/globaleventhandlers.onselect", 
        "syntax": "window.onselect = funcRef; funcRef is a function. Example <html><head><title>onselect test</title><style type=\"text/css\">.text1 { border: 2px solid red; }</style><script type=\"text/javascript\">window.onselect = selectText;function selectText(){ alert(\"select event detected!\");\n or }</script></head><body><textarea class=\"text1\" cols=\"30\" rows=\"3\">Highlight some of this textwith the mouse pointerto fire the onselect event.</textarea></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onsubmit": {
        "descr": "An event handler for the submit event on the window.", 
        "name": "GlobalEventHandlers.onsubmit", 
        "params": [], 
        "path": "dom/globaleventhandlers.onsubmit", 
        "syntax": "window.onsubmit = funcRef; Parameters funcRef is a reference to a function. Example <html><script>function reg() {  window.captureEvents(Event.SUBMIT);\n or   window.onsubmit = hit;} function hit() {  alert('hit');\n or }</script><body onload=\"reg();\n or \"><form>  <input type=\"submit\" value=\"submit\" /></form><div id=\"d\">\u00a0</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "HTMLAudioElement": {
        "descr": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.", 
        "name": "HTMLAudioElement", 
        "params": [
            {
                "descr": "The src property of the constructed HTMLAudioElement.", 
                "name": "URLString (expected type: DOMString; optional)"
            }
        ], 
        "path": "dom/htmlaudioelement", 
        "syntax": "mySound = new Audio([URLString]);", 
        "type": "Elements"
    }, 
    "HTMLBodyElement": {
        "descr": "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.", 
        "name": "HTMLBodyElement", 
        "params": [], 
        "path": "dom/htmlbodyelement", 
        "syntax": "Living Standard Technically, the event-related properties,onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onload, onmessage, onoffline, ononline, onpopstate, onresize, onstorage, and onunload, have been moving to the WindowEventHandlers interface, and HTMLBodyElement implements this interface. HTML5 Candidate Recommendation The following properties are now obsolete: aLink, bgColor, background, link, text, and vLink. The following properties have been added: onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onload, onmessage, onoffline, ononline, onpopstate, onresize, onstorage, and onunload. Document Object Model (DOM) Level 2 HTML Specification Recommendation No change from Document Object Model (DOM) Level 1 Specification. Document Object Model (DOM) Level 1 Specification Recommendation Initial definition. Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLButtonElement": {
        "descr": "The HTMLButtonElement interface provides properties and methods (beyond the <button> object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.", 
        "name": "HTMLButtonElement", 
        "params": [], 
        "path": "dom/htmlbuttonelement", 
        "syntax": "<form> element that owns this element. formEncType DOMString The type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element. formMethod DOMString The HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element. formNoValidate Boolean Indicates that the form is not to be validated when it is submitted. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element. formTarget DOMString A name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element. labels Read only  NodeList A list of <label> elements that are labels for this button. menu  HTMLMenuElement The menu element to be displayed if the button is clicked and is of type=\"menu\". name DOMString The name of the object when submitted with a form. HTML5 If specified, it must not be the empty string. tabIndex long Number that represents this element's position in the tabbing order. type DOMString Indicates the behavior of the button. This is an enumerated attribute with the following possible values: \"submit\": The button submits the form. This is the default value if the attribute is not specified, HTML5 or if it is dynamically changed to an empty or invalid value. \"reset\": The button resets the form. \"button\": The button does nothing. \"menu\": The button displays a menu.   validationMessage Read only  DOMString A localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate", 
        "type": "Elements"
    }, 
    "HTMLCollection": {
        "descr": "HTMLCollection is an interface representing a generic collection of elements (in document order) and offers methods and properties for traversing the list.", 
        "name": "HTMLCollection", 
        "params": [
            {
                "descr": "The number of items in the collection.", 
                "name": "HTMLCollection.length Read only"
            }, 
            {
                "descr": "Returns the specific node at the given zero-based index into the list. ", 
                "name": "HTMLCollection.item(index)"
            }, 
            {
                "descr": "Returns the specific node whose ID or, as a fallback, name matches the string specified by name. ", 
                "name": "HTMLCollection.namedItem(name)"
            }
        ], 
        "path": "dom/htmlcollection", 
        "syntax": "item()", 
        "type": "Miscellaneous"
    }, 
    "HTMLElement.blur": {
        "descr": "The blur method removes keyboard focus from the current element.", 
        "name": "HTMLElement.blur", 
        "params": [], 
        "path": "dom/htmlelement.blur", 
        "syntax": "element.blur()", 
        "type": "Elements"
    }, 
    "HTMLElement.click": {
        "descr": "The click method simulates a mouse click on an element.", 
        "name": "HTMLElement.click", 
        "params": [], 
        "path": "dom/htmlelement.click", 
        "syntax": "element.click()", 
        "type": "Elements"
    }, 
    "HTMLElement.contentEditable": {
        "descr": "contentEditable is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:", 
        "name": "HTMLElement.contentEditable", 
        "params": [], 
        "path": "dom/htmlelement.contenteditable", 
        "syntax": "editable = element.contentEditableelement.contentEditable = \"true\" Notes You can use the HTMLElement.isContentEditable property to test the computed Boolean value of this property. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 11 3.0 (1.9) 6 10.6 3.2   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support 3 1.0 (1.9) 6 Not supported 5  Specification", 
        "type": "Elements"
    }, 
    "HTMLElement.dataset": {
        "descr": "Allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMString, one entry for each custom data attribute.", 
        "name": "HTMLElement.dataset", 
        "params": [], 
        "path": "dom/htmlelement.dataset", 
        "syntax": "string = element.dataset.camelCasedName;element.dataset.camelCasedName = string; Examples <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe</div>var el = document.querySelector('#user');\n or // el.id == 'user'// el.dataset.id === '1234567890'// el.dataset.user === 'johndoe'// el.dataset.dateOfBirth === ''el.dataset.dateOfBirth = '1960-10-03'; // set the DOB.// 'someDataAttr' in el.dataset === falseel.dataset.someDataAttr = 'mydata';// 'someDataAttr' in el.dataset === true);", 
        "type": "Elements"
    }, 
    "HTMLElement.dir": {
        "descr": "The dir attribute gets or sets the text writing directionality of the content of the current element.", 
        "name": "HTMLElement.dir", 
        "params": [], 
        "path": "dom/htmlelement.dir", 
        "syntax": "var CurrentWritingDirection = elementNodeReference.dir;elementNodeReference.dir = NewWritingDirection; CurrentWritingDirection is a string variable representing the text writing direction of the current element. NewWritingDirection is a string variable representing the text writing direction value. Possible values for dir are ltr, for left-to-right, and rtl, for right-to-left, and auto for specifying that the direction of the element must be determined based on the contents of the element. Example var parg = document.getElementById(\"para1\");\n or  parg.dir = \"rtl\"; // change the text direction on a paragraph identified as \"para1\");", 
        "type": "Elements"
    }, 
    "HTMLElement.focus": {
        "descr": "Sets focus on the specified element, if it can be focused.", 
        "name": "HTMLElement.focus", 
        "params": [], 
        "path": "dom/htmlelement.focus", 
        "syntax": "element.focus()", 
        "type": "Elements"
    }, 
    "HTMLElement.lang": {
        "descr": "This property gets or sets the base language of an element's attribute values and text content.", 
        "name": "HTMLElement.lang", 
        "params": [], 
        "path": "dom/htmlelement.lang", 
        "syntax": "var languageUsed = elementNodeReference.lang; // Get the value of langelementNodeReference.lang = NewLanguage; // Set new value for lang languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written. Example // this snippet compares the base language and // redirects to another url based on languageif (document.documentElement.lang === \"en\") {  window.location.href = \"Some_document.html.en\";} else if (document.documentElement.lang === \"ru\") {  window.location.href = \"Some_document.html.ru\";}", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetHeight": {
        "descr": "This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().", 
        "name": "HTMLElement.offsetHeight", 
        "params": [], 
        "path": "dom/htmlelement.offsetheight", 
        "syntax": "var intElemOffsetHeight = document.getElementById(id_attribute_value).offsetHeight;", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetLeft": {
        "descr": "Returns the number of pixels that the upper left corner of the current element is offset to the left within the offsetParent node.", 
        "name": "HTMLElement.offsetLeft", 
        "params": [], 
        "path": "dom/htmlelement.offsetleft", 
        "syntax": "left = element.offsetLeft; left is an integer representing the offset to the left in pixels. Note For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent. However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetParent": {
        "descr": "offsetParent returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the nearest table cell or root element (html in standards compliant mode; body in quirks rendering mode) is the offsetParent. offsetParent returns null when the element has style.display set to \"none\". The offsetParent is useful because offsetTop and offsetLeft are relative to its padding edge.", 
        "name": "HTMLElement.offsetParent", 
        "params": [], 
        "path": "dom/htmlelement.offsetparent", 
        "syntax": "parentObj = element.offsetParent; parentObj is an object reference to the element in which the current element is offset. Compatibility This property will return null on Webkit if the element is hidden (the style.display of this element or any ancestor is \"none\") or if the style.position", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetTop": {
        "descr": "offsetTop returns the distance of the current element relative to the top of the offsetParent node.", 
        "name": "HTMLElement.offsetTop", 
        "params": [], 
        "path": "dom/htmlelement.offsettop", 
        "syntax": "topPos = element.offsetTop; Parameters topPos is the number of pixels from the top of the parent element. Example var d = document.getElementById(\"div1\");\n or var topPos = d.offsetTop; if (topPos > 10) {  // object is offset more  // than 10 pixels from its parent});", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetWidth": {
        "descr": "Returns the layout width of an element.", 
        "name": "HTMLElement.offsetWidth", 
        "params": [], 
        "path": "dom/htmlelement.offsetwidth", 
        "syntax": "var offsetWidth =element.offsetWidth; offsetWidth is a read-only property. Description Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.", 
        "type": "Elements"
    }, 
    "HTMLElement.style": {
        "descr": "Returns an object that represents the element's style attribute.", 
        "name": "HTMLElement.style", 
        "params": [], 
        "path": "dom/htmlelement.style", 
        "syntax": "window.getComputedStyle()", 
        "type": "Elements"
    }, 
    "HTMLElement.tabIndex": {
        "descr": "Gets/sets the tab order of the current element.", 
        "name": "HTMLElement.tabIndex", 
        "params": [], 
        "path": "dom/htmlelement.tabindex", 
        "syntax": "element.tabIndex = iIndex iIndex : number Example var b1 = document.getElementById(\"button1\");\n or  b1.tabIndex = 1;);", 
        "type": "Elements"
    }, 
    "HTMLElement.title": {
        "descr": "Establishes the text to be displayed in a 'tool tip' popup when the mouse is over the displayed node.", 
        "name": "HTMLElement.title", 
        "params": [], 
        "path": "dom/htmlelement.title", 
        "syntax": "var string = element.title;element.title = string; Example  button1.title = \"click to refresh\"; Behavior If a node does not have a title attribute, then the default action is to inherit it from its parent node, which in turn may inherit it from its parent node, etc. According to bug 264001, setting title", 
        "type": "Elements"
    }, 
    "HTMLFormElement": {
        "descr": "The HTMLFormElement interface provides methods to create and modify <form> elements; it inherits from properties and methods of the HTMLElement interface.", 
        "name": "HTMLFormElement", 
        "params": [], 
        "path": "dom/htmlformelement", 
        "syntax": "<form> elements; it inherits from properties and methods of the HTMLElement interface. Properties Inherits properties from its parent, HTMLElement. Name Type Description acceptCharset DOMString Reflects the accept-charset HTML attribute, containing a list of character encodings that the server accepts. action DOMString Reflects the action HTML attribute, containing the URI of a program that processes the information submitted by the form. autocomplete DOMString Reflects the autocomplete HTML attribute, containing a string that indicates whether the controls in this form can have their values automatically populated by the browser. elements", 
        "type": "Elements"
    }, 
    "HTMLFormElement.elements": {
        "descr": "elements returns an HTMLFormControlsCollection (HTML 4 HTMLCollection) of all the form controls contained in the FORM element, with the exception of input elements which have a type attribute of image.", 
        "name": "HTMLFormElement.elements", 
        "params": [], 
        "path": "dom/htmlformelement.elements", 
        "syntax": "nodeList = HTMLFormElement.elements Example var inputs = document.getElementById(\"form1\").elements;var inputByIndex = inputs[2];var inputByName = inputs[\"login\"];", 
        "type": "Elements"
    }, 
    "HTMLFormElement.length": {
        "descr": "length returns the number of controls in the FORM element.", 
        "name": "HTMLFormElement.length", 
        "params": [], 
        "path": "dom/htmlformelement.length", 
        "syntax": "integer = form.length Example if (document.getElementById(\"form1\").length > 1) {  // more than one form control here}", 
        "type": "Elements"
    }, 
    "HTMLFormElement.name": {
        "descr": "name returns the name of the current form element as a string.", 
        "name": "HTMLFormElement.name", 
        "params": [], 
        "path": "dom/htmlformelement.name", 
        "syntax": "string = form.nameform.name = string Example var form1name = document.getElementById(\"form1\").name;if (form1name\u00a0!= document.form.form1) {   // browser doesn't support this form of reference}", 
        "type": "Elements"
    }, 
    "HTMLFormElement.reset": {
        "descr": "reset restores a form element's default values.", 
        "name": "HTMLFormElement.reset", 
        "params": [], 
        "path": "dom/htmlformelement.reset", 
        "syntax": "HTMLFormElement.reset()", 
        "type": "Elements"
    }, 
    "HTMLFormElement.submit": {
        "descr": "hod", 
        "name": "HTMLFormElement.submit", 
        "params": [], 
        "path": "dom/htmlformelement.submit", 
        "syntax": "HTMLFormElement.submit()", 
        "type": "Elements"
    }, 
    "HTMLHRElement": {
        "descr": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.", 
        "name": "HTMLHRElement", 
        "params": [], 
        "path": "dom/htmlhrelement", 
        "syntax": "<hr> elements. Properties Inherits properties from its parent, HTMLElement. Name Type Description align  DOMString Enumerated attribute indicating alignment of the rule with respect to the surrounding context. color  DOMString The name of the color of the rule. noshade  Boolean Sets the rule to have no shading. size  DOMString The height of the rule. width  DOMString The width of the rule on the page. Methods No specific method; inherits methods from its parent, HTMLElement. Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard The color property has been added, as an obsolete property, to increase compatibility with the existing web. HTML5 Candidate Recommendation Following properties are now obsolete: align, noshade, size, and width. Document Object Model (DOM) Level 2 HTML Specification Recommendation No change from Document Object Model (DOM) Level 1 Specification. Document Object Model (DOM) Level 1 Specification Recommendation Initial definition. Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLHeadingElement": {
        "descr": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.", 
        "name": "HTMLHeadingElement", 
        "params": [], 
        "path": "dom/htmlheadingelement", 
        "syntax": "Living Standard No change from HTML5. HTML5 Candidate Recommendation The align property is now obsolete. Document Object Model (DOM) Level 2 HTML Specification Recommendation No change from Document Object Model (DOM) Level 1 Specification. Document Object Model (DOM) Level 1 Specification Recommendation Initial definition. Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLInputElement": {
        "descr": "The HTMLInputElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of input elements.", 
        "name": "HTMLInputElement", 
        "params": [], 
        "path": "dom/htmlinputelement", 
        "syntax": "<form> element in the same document. Even if the attribute is set on <input>, this property will be null, if it isn't the id of a <form> element. HTML 4 this must be null.  formAction DOMString Reflects the formaction HTML attribute, containing the URI of a program that processes information submitted by the element. If specified, this attribute overrides the action attribute of the <form> element that owns this element. formEncType DOMString Reflects the formenctype HTML attribute, containing the type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element. formMethod DOMString Reflects the formmethod HTML attribute, containing the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element. formNoValidate Boolean Reflects the formnovalidate HTML attribute, indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element. formTarget DOMString Reflects the formtarget HTML attribute, containing a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element. height DOMString Reflects the height HTML attribute, which defines the height of the image displayed for the button, if the value of type is image. indeterminate Boolean Indicates that a checkbox is neither on nor off. labels Read only  NodeList A list of <label> elements that are labels for this element. list HTMLElement Identifies a list of pre-defined options to suggest to the user. The value must be the id of a <datalist> element in the same document. The browser displays only options that are valid values for this input element. This attribute is ignored when the type attribute's value is hidden, checkbox, radio, file, or a button type. max DOMString Reflects the max HTML attribute, containing the maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value. maxLength", 
        "type": "Elements"
    }, 
    "HTMLInputElement.setSelectionRange": {
        "descr": "Sets the start and end positions of the current text selection in an <input> element. Optionally, in newer browser versions, you can specify the direction in which selection should be considered to have occurred; this lets you indicate, for example, that the selection as set by the user clicking and dragging from the end of the selected text toward the beginning.", 
        "name": "HTMLInputElement.setSelectionRange", 
        "params": [
            {
                "descr": "The index into the text at which the first selected character is located.", 
                "name": "selectionStart"
            }, 
            {
                "descr": "The index into the text at which the last selected character is located.", 
                "name": "selectionEnd"
            }, 
            {
                "descr": "A string indicating the direction in which the selection was performed. ", 
                "name": "selectionDirection Optional"
            }
        ], 
        "path": "dom/input.setselectionrange", 
        "syntax": "inputElement.setSelectionRange(selectionStart, selectionEnd, [optional] selectionDirection);", 
        "type": "Elements"
    }, 
    "HTMLIsIndexElement": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "HTMLIsIndexElement", 
        "params": [
            {
                "descr": "Is a HTMLFormElement representing the <form> element it belongs too. ", 
                "name": "HTMLBaseFontElement.form Read only"
            }, 
            {
                "descr": "Is a DOMString representing a text to be prompted for the field.", 
                "name": "HTMLBaseFontElement.prompt"
            }
        ], 
        "path": "dom/htmlisindexelement", 
        "syntax": "<form> element it belongs too. It can have the null value, if <isindex> isn't part of any form.  HTMLBaseFontElement.prompt  Is a DOMString representing a text to be prompted for the field. Methods No specific method; inherits methods from its parent, HTMLElement. Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard No change from HTML5. HTML5 Candidate Recommendation Removed. <isindex> must now implement HTMLUnknownElement. Document Object Model (DOM) Level 2 HTML Specification Recommendation No change from Document Object Model (DOM) Level 1 Specification Document Object Model (DOM) Level 1 Specification Recommendation Initial definition. Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLOptionElement": {
        "descr": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.", 
        "name": "HTMLOptionElement", 
        "params": [
            {
                "descr": "Is a constructor creating an HTMLOptionElement object. ", 
                "name": "HTMLOptionElement.Option()"
            }
        ], 
        "path": "dom/htmloptionelement", 
        "syntax": "HTMLSelectElement object; otherwise, it is null. indexRead only  long The position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0. label DOMString Reflects the value of the label HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content. selected Boolean Indicates whether the option is currently selected. text DOMString Contains the text content of the element. value DOMString Reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the Node.textContent property. Methods Inherits methods from its parent, HTMLElement.  HTMLOptionElement.Option()", 
        "type": "Elements"
    }, 
    "HTMLScriptElement": {
        "descr": "DOM Script objects expose the HTMLScriptElement (or HTML 4 HTMLScriptElement) interface, which provides special properties and methods (beyond the regular element object interface they also have available to them by inheritance) for manipulating the layout and presentation of <script> elements.", 
        "name": "HTMLScriptElement", 
        "params": [], 
        "path": "dom/htmlscriptelement", 
        "syntax": "document.write()", 
        "type": "Elements"
    }, 
    "HTMLSelectElement": {
        "descr": "DOM select elements share all of the properties and methods of other HTML elements described in the element section. They also have the specialized interface HTMLSelectElement (or HTML 4 HTMLSelectElement).", 
        "name": "HTMLSelectElement", 
        "params": [
            {
                "descr": "An item to add to the collection of options.", 
                "name": "element"
            }, 
            {
                "descr": "An item (or HTML5 index of an item) that the new item should be inserted before. ", 
                "name": "before Optional from Gecko 7.0"
            }, 
            {
                "descr": "The zero-based index into the collection of the option to get.", 
                "name": "index"
            }, 
            {
                "descr": "The name of the option to get.", 
                "name": "name"
            }, 
            {
                "descr": "The zero-based index of the option element to remove from the collection.", 
                "name": "index"
            }, 
            {
                "descr": "The string to use for the custom validity message.", 
                "name": "error"
            }
        ], 
        "path": "dom/htmlselectelement", 
        "syntax": "HTML 4 HTMLSelectElement).", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.media": {
        "descr": "media specifies the intended destination medium for style information.", 
        "name": "HTMLStyleElement.media", 
        "params": [], 
        "path": "dom/htmlstyleelement.media", 
        "syntax": "medium = style.mediastyle.media = medium Parameters medium is a string describing a single medium or a comma-separated list. Example <!DOCTYPE html><head><link id=\"linkScreenStyle\" rel=\"stylesheet\" href=\"document.css\" type=\"text/css\" media=\"screen\" /><style id=\"screenStyle\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\">p {color:blue;}</style><script>alert(document.getElementById('screenStyle').media);\n or  // 'screen'alert(document.getElementById('linkScreenStyle').media);\n or  // 'screen'</script></head><body></body></html>);", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.scoped": {
        "descr": "The HTMLStyleElement.scoped property is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true).", 
        "name": "HTMLStyleElement.scoped", 
        "params": [], 
        "path": "dom/htmlstyleelement.scoped", 
        "syntax": "value = style.scoped;style.scoped = true; Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard No change from HTML5. HTML5 Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported [1] 21.0 (21.0) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic suppport ? 21.0 (21.0) Not supported Not supported Not supported  [1] Chrome 19 and later supports it after activating the \u2018Enable <style scoped>", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.type": {
        "descr": "Returns the type of the current style.", 
        "name": "HTMLStyleElement.type", 
        "params": [], 
        "path": "dom/htmlstyleelement.type", 
        "syntax": "string = style.type; Example if (newStyle.type != \"text/css\"){   // not supported!   warnCSS();\n or });", 
        "type": "Elements"
    }, 
    "HTMLTableElement": {
        "descr": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.", 
        "name": "HTMLTableElement", 
        "params": [
            {
                "descr": "Is an HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.caption"
            }, 
            {
                "descr": "Is an HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.tHead"
            }, 
            {
                "descr": "Is an HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.tFoot"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child or one of its <thead>, <tbody> and <tfoot> children. ", 
                "name": "HTMLTableElement.rows Read only"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all the <tbody> of the element. ", 
                "name": "HTMLTableElement.tBodies Read only"
            }, 
            {
                "descr": "Is a Boolean value indicating if the user agent is allowed to provide sorting mechanism for the table, if it supports such a feature. ", 
                "name": "HTMLTableElement.sortable"
            }, 
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableElement.align"
            }, 
            {
                "descr": "Is a DOMString containing the background color of the cells. ", 
                "name": "HTMLTableElement.bgColor"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the border of the table. ", 
                "name": "HTMLTableElement.border"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. ", 
                "name": "HTMLTableElement.cellPadding"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical separation between cells. ", 
                "name": "HTMLTableElement.cellSpacing"
            }, 
            {
                "descr": "Is a DOMString containing the type of the external borders of the table. ", 
                "name": "HTMLTableElement.frame"
            }, 
            {
                "descr": "Is a DOMString containing the type of the internal borders of the table. ", 
                "name": "HTMLTableElement.rules"
            }, 
            {
                "descr": "Is a DOMString containing a description of the purpose or the structure of the table. ", 
                "name": "HTMLTableElement.summary"
            }, 
            {
                "descr": "Is a DOMString containing the length in pixels or in percentage of the desired width fo the entire table. ", 
                "name": "HTMLTableElement.width"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <thead> that is a child of the element. ", 
                "name": "HTMLTableElement.createTHead()"
            }, 
            {
                "descr": "Removes the first <thead> that is a child of the element.", 
                "name": "HTMLTableElement.deleteTHead()"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <tfoot> that is a child of the element. ", 
                "name": "HTMLTableElement.createTFoot()"
            }, 
            {
                "descr": "Removes the first <tfoot> that is a child of the element.", 
                "name": "HTMLTableElement.deleteTFoot()"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <caption> that is a child of the element. ", 
                "name": "HTMLTableElement.createCaption()"
            }, 
            {
                "descr": "Removes the first <caption> that is a child of the element.", 
                "name": "HTMLTableElement.deleteCaption()"
            }, 
            {
                "descr": "Returns an HTMLElement representing a new row of the table. ", 
                "name": "HTMLTableElement.insertRow()"
            }, 
            {
                "descr": "Removes the row corresponding to the index given in parameter. ", 
                "name": "HTMLTableElement.deleteRow()"
            }, 
            {
                "descr": "Removes the sortable attribute to all <th> elements of the table.", 
                "name": "HTMLTableElement.stopSorting()"
            }
        ], 
        "path": "dom/htmltableelement", 
        "syntax": "HTMLTableSectionElement representing the first <thead>", 
        "type": "Elements"
    }, 
    "HTMLTableElement.caption": {
        "descr": "The HTMLTableElement.caption property returns the table caption.", 
        "name": "HTMLTableElement.caption", 
        "params": [], 
        "path": "dom/htmltableelement.caption", 
        "syntax": "string = table.caption Example if (table.caption) {    // do something with the caption}", 
        "type": "Elements"
    }, 
    "HTMLTableElement.cellPadding": {
        "descr": "cellPadding gets/sets the padding around the individual cells of the table.", 
        "name": "HTMLTableElement.cellPadding", 
        "params": [], 
        "path": "dom/htmltableelement.cellpadding", 
        "syntax": "HTMLTableElement.cellPadding =padding;varpadding =HTMLTableElement.cellPadding; padding is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\"). Example", 
        "type": "Elements"
    }, 
    "HTMLTableElement.cellSpacing": {
        "descr": "cellSpacing gets/sets the spacing around the individual cells of the table.", 
        "name": "HTMLTableElement.cellSpacing", 
        "params": [], 
        "path": "dom/htmltableelement.cellspacing", 
        "syntax": "HTMLTableElement.cellSpacing =spacing;varspacing =HTMLTableElement.cellSpacing; spacing is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\"). Example", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createCaption": {
        "descr": "createCaption creates a new caption for the table.", 
        "name": "HTMLTableElement.createCaption", 
        "params": [], 
        "path": "dom/htmltableelement.createcaption", 
        "syntax": "HTMLTableElement = table.createCaption()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createTFoot": {
        "descr": "createTFoot creates a new TFOOT for the table.", 
        "name": "HTMLTableElement.createTFoot", 
        "params": [], 
        "path": "dom/htmltableelement.createtfoot", 
        "syntax": "HTMLTableElement = table.createTFoot()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createTHead": {
        "descr": "createTHead creates a new THEAD for the table.", 
        "name": "HTMLTableElement.createTHead", 
        "params": [], 
        "path": "dom/htmltableelement.createthead", 
        "syntax": "HTMLElementObject = table.createTHead()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteCaption": {
        "descr": "deleteCaption removes the caption from the table.", 
        "name": "HTMLTableElement.deleteCaption", 
        "params": [], 
        "path": "dom/htmltableelement.deletecaption", 
        "syntax": "HTMLTableElement.deleteCaption()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteRow": {
        "descr": "deleteRow removes a row from the table.", 
        "name": "HTMLTableElement.deleteRow", 
        "params": [
            {
                "descr": "index is an integer representing the row that should be deleted. ", 
                "name": "index"
            }
        ], 
        "path": "dom/htmltableelement.deleterow", 
        "syntax": "HTMLTableElement.deleteRow(index)", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteTFoot": {
        "descr": "deleteTFoot removes a TFOOT from the table.", 
        "name": "HTMLTableElement.deleteTFoot", 
        "params": [], 
        "path": "dom/htmltableelement.deletetfoot", 
        "syntax": "HTMLTableElement.deleteTFoot()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteTHead": {
        "descr": "deleteTHead removes a THEAD from the table.", 
        "name": "HTMLTableElement.deleteTHead", 
        "params": [], 
        "path": "dom/htmltableelement.deletethead", 
        "syntax": "HTMLTableElement.deleteTHead()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.frame": {
        "descr": "frame specifies which external table borders to render.", 
        "name": "HTMLTableElement.frame", 
        "params": [
            {
                "descr": "no sides. this is the default.", 
                "name": "void"
            }, 
            {
                "descr": "top side", 
                "name": "above"
            }, 
            {
                "descr": "bottom side", 
                "name": "below"
            }, 
            {
                "descr": "top and bottom only", 
                "name": "hsides"
            }, 
            {
                "descr": "right and left sides only", 
                "name": "vsides"
            }, 
            {
                "descr": "left-hand side only", 
                "name": "lhs"
            }, 
            {
                "descr": "right-hand side only", 
                "name": "rhs"
            }, 
            {
                "descr": "all four sides", 
                "name": "box"
            }, 
            {
                "descr": "all four sides", 
                "name": "border"
            }
        ], 
        "path": "dom/htmltableelement.frame", 
        "syntax": "HTMLTableElement.frame =side;varside =HTMLTableElement.frame; Parameters side is a string with one of the following values:  void   no sides. this is the default.  above   top side  below   bottom side  hsides   top and bottom only  vsides   right and left sides only  lhs   left-hand side only  rhs   right-hand side only  box   all four sides  border   all four sides Example // Set the frame of TableA to 'border'var t = document.getElementById('TableA');\n or t.frame  = \"border\";t.border = \"2px\";);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.insertRow": {
        "descr": "insertRow inserts a new row in the table.", 
        "name": "HTMLTableElement.insertRow", 
        "params": [], 
        "path": "dom/htmltableelement.insertrow", 
        "syntax": "var row = HTMLTableElement.insertRow(optional index = -1);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.rows": {
        "descr": "rows returns a collection of all the rows in the table.", 
        "name": "HTMLTableElement.rows", 
        "params": [], 
        "path": "dom/htmltableelement.rows", 
        "syntax": "HTMLCollectionObject = table.rows Example myrows = mytable.rows;firstRow = mytable.rows[0];lastRow = mytable.rows[mytable.rows.length-1]; Notes The collection returned by the rows property of a table object includes all the rows in THEAD, TFOOT and all TBODY elements of the table. The rows property of a table section element (THEAD, TFOOT or TBODY) contains only the rows in that section element.", 
        "type": "Elements"
    }, 
    "HTMLTableElement.rules": {
        "descr": "rules specifies which cell borders to render in the table.", 
        "name": "HTMLTableElement.rules", 
        "params": [
            {
                "descr": "no rules", 
                "name": "none"
            }, 
            {
                "descr": "lines between groups only", 
                "name": "groups"
            }, 
            {
                "descr": "lines between rows", 
                "name": "rows"
            }, 
            {
                "descr": "lines between cols", 
                "name": "cols"
            }, 
            {
                "descr": "lines between all cells", 
                "name": "all"
            }
        ], 
        "path": "dom/htmltableelement.rules", 
        "syntax": "HTMLTableElement.rules =rules;varrules =HTMLTableElement.rules; Parameters rules is a string with one of the following values:  none  no rules  groups  lines between groups only  rows  lines between rows  cols  lines between cols  all  lines between all cells Example // Turn on all the internal borders of a tablevar t = document.getElementById(\"TableID\");\n or t.rules = \"all\";);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tBodies": {
        "descr": "tBodies returns a collection of the table bodies.", 
        "name": "HTMLTableElement.tBodies", 
        "params": [], 
        "path": "dom/htmltableelement.tbodies", 
        "syntax": "HTMLCollectionObject = table.tBodies Example length(mytable.tBodies);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tFoot": {
        "descr": "tFoot returns the table's TFOOT element.", 
        "name": "HTMLTableElement.tFoot", 
        "params": [], 
        "path": "dom/htmltableelement.tfoot", 
        "syntax": "HTMLTableSectionElementObject = table.tFoot Example if (table.tFoot == my_foot) {     // ...}", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tHead": {
        "descr": "tHead returns the table's THEAD.", 
        "name": "HTMLTableElement.tHead", 
        "params": [], 
        "path": "dom/htmltableelement.thead", 
        "syntax": "th_el = table.tHead Parameters th_el is a HTMLTableSectionElement", 
        "type": "Elements"
    }, 
    "HTMLTableRowElement": {
        "descr": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.", 
        "name": "HTMLTableRowElement", 
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableRowElement.align"
            }, 
            {
                "descr": "Is a DOMString containing the background color of the cells. ", 
                "name": "HTMLTableRowElement.bgColor"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing the cells in the row. ", 
                "name": "HTMLTableRowElement.cells Read only"
            }, 
            {
                "descr": "Is a DOMString containing one single chararcter. ", 
                "name": "HTMLTableRowElement.ch"
            }, 
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.", 
                "name": "HTMLTableRowElement.chOff"
            }, 
            {
                "descr": "Returns a long value which gives the logical position of the row within the entire table. ", 
                "name": "HTMLTableRowElement.rowIndex Read only"
            }, 
            {
                "descr": "Returns a long value which gives the logical position of the row within the table section it belongs to. ", 
                "name": "HTMLTableRowElement.sectionRowIndex Read only"
            }, 
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ", 
                "name": "HTMLTableRowElement.vAlign"
            }, 
            {
                "descr": "Removes the cell at the given position in the row. ", 
                "name": "HTMLTableRowElement.deleteCell()"
            }, 
            {
                "descr": "Inserts a new cell just before the given position in the row. ", 
                "name": "HTMLTableRowElement.insertCell()"
            }
        ], 
        "path": "dom/htmltablerowelement", 
        "syntax": "HTMLTableRowElement.sectionRowIndex Read only   Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1.  HTMLTableRowElement.vAlign   Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\". Methods Inherits methods from its parent, HTMLElement.  HTMLTableRowElement.deleteCell()", 
        "type": "Elements"
    }, 
    "HTMLTableRowElement.insertCell": {
        "descr": "Inserts a new cell into a table row and returns a reference to the cell.", 
        "name": "HTMLTableRowElement.insertCell", 
        "params": [], 
        "path": "dom/htmltablerowelement.insertcell", 
        "syntax": "varcell =HTMLTableRowElement.insertCell(optionalindex = -1);", 
        "type": "Elements"
    }, 
    "HTMLTableSectionElement": {
        "descr": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.", 
        "name": "HTMLTableSectionElement", 
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableSectionElement.align"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing the rows in the section. ", 
                "name": "HTMLTableRowElement.rows Read only"
            }, 
            {
                "descr": "Is a DOMString containing one single chararcter. ", 
                "name": "HTMLTableSectionElement.ch"
            }, 
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.", 
                "name": "HTMLTableSectionElement.chOff"
            }, 
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ", 
                "name": "HTMLTableSectionElement.vAlign"
            }, 
            {
                "descr": "Removes the cell at the given position in the section. ", 
                "name": "HTMLTableSectionElement.deleteRow()"
            }, 
            {
                "descr": "Inserts a new row just before the given position in the section. ", 
                "name": "HTMLTableSectionElement.insertRow()"
            }
        ], 
        "path": "dom/htmltablesectionelement", 
        "syntax": "HTMLElement.  HTMLTableSectionElement.align   Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\".  HTMLTableRowElement.rows Read only   Returns a live HTMLCollection", 
        "type": "Elements"
    }, 
    "HTMLTextAreaElement": {
        "descr": "The HTMLTextAreaElement interface, which provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <textarea> elements.", 
        "name": "HTMLTextAreaElement", 
        "params": [], 
        "path": "dom/htmltextareaelement", 
        "syntax": "<form> element in the same document or the value null.  inputMode      labels Read only  Unimplemented (see bug 556743) NodeList", 
        "type": "Elements"
    }, 
    "HTMLTimeElement.dateTime": {
        "descr": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.", 
        "name": "HTMLTimeElement.dateTime", 
        "params": [], 
        "path": "dom/htmltimeelement.datetime", 
        "syntax": "-MM 2011-11, 2013-05 Valid date string YYYY-MM-DD 1887-12-01 Valid yearless date string MM-DD 11-12 Valid time string HH:MMHH:MM:SSHH:MM:SS.mmm 23:5912:15:4712:15:52.998 Valid local date and time string YYYY-MM-DD HH:MMYYYY-MM-DD HH:MM:SSYYYY-MM-DD HH:MM:SS.mmmYYYY-MM-DDTHH:MMYYYY-MM-DDTHH:MM:SSYYYY-MM-DDTHH:MM:SS.mmm 2013-12-25 11:12        1972-07-25 13:43:07        1941-03-15 07:06:23.6782013-12-25T11:12        1972-07-25T13:43:07        1941-03-15T07:06:23.678 Valid time-zone offset string Z+HHMM+HH:MM-HHMM-HH:MM Z        +0200        +04:30        -0300        -08:00 Valid global date and time string Any combination of a valid local date and time string followed by a valid time-zone offset string 2013-12-25 11:12+0200        1972-07-25 13:43:07+04:30        1941-03-15 07:06:23.678Z2013-12-25T11:12-08:00 Valid week string YYYY-WWW 2013-W46 Four or more ASCII digits YYYY 2013, 0001 Valid duration string PdDThHmMsSPdDThHmMs.XSPdDThHmMs.XXSPdDThHmMs.XXXSPThHmMsSPThHmMs.XSPThHmMs.XXSPThHmMs.XXXSww dd hh mm ss P12DT7H12M13SP12DT7H12M13.3SP12DT7H12M13.45SP12DT7H12M13.455SPT7H12M13SPT7H12M13.2SPT7H12M13.56SPT7H12M13.999S        7d 5h 24m 13s Syntax dateTimeString = timeElt.dateTime;timeElt.dateTime = dateTimeString Examples // Assumes there is <time id=\"t\"> elemen tin the HTMLvar t = document.getElementByID(\"t\");\n or t.dateTime = \"6w 5h 34m 5s\";);", 
        "type": "Elements"
    }, 
    "HTMLVideoElement.getVideoPlaybackQuality": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLVideoElement.getVideoPlaybackQuality", 
        "params": [], 
        "path": "dom/htmlvideoelement.getvideoplaybackquality", 
        "syntax": "HTMLVideoElement.getVideoPlaybackQuality()", 
        "type": "Elements"
    }, 
    "Has attribute selector [name]": {
        "descr": "", 
        "name": "Has attribute selector [name]", 
        "params": [], 
        "path": "jquery/has-attribute-selector", 
        "syntax": "attributeHas selector  Description: Selects elements that have the specified attribute, with any value.    version added: 1.0jQuery( \"[attribute]\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "ID selector (\u201c#id\u201d": {
        "descr": "For id selectors, jQuery uses the JavaScript function document.getElementById(), which is extremely efficient. When another selector is attached to the id selector, such as h2#pageTitle, jQuery performs an additional check before identifying the element as a match.", 
        "name": "ID selector (\u201c#id\u201d", 
        "params": [], 
        "path": "jquery/id-selector", 
        "syntax": "id selector  Description: Selects a single element with the given id attribute.    version added: 1.0jQuery( \"#id\" ) id: An ID to search for, specified via the id attribute of an element.", 
        "type": "Selectors"
    }, 
    "IDBCursor.advance": {
        "descr": "The IDBCursor.advance method sets the number times a cursor should move its position forward.", 
        "name": "IDBCursor.advance", 
        "params": [
            {
                "descr": "The number of advances forward the cursor should make.", 
                "name": "count"
            }
        ], 
        "path": "dom/idbcursor.advance", 
        "syntax": "void       advance ([EnforceRange] unsigned long count);", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.continue": {
        "descr": "The IDBCursor.continue method advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter. If no key is specified, advance to the immediate next position, based on the cursor's direction.", 
        "name": "IDBCursor.continue", 
        "params": [
            {
                "descr": "The key to position the cursor at.", 
                "name": "void Parameters  key"
            }
        ], 
        "path": "dom/idbcursor.continue", 
        "syntax": "void       continue (optional any key);", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.delete": {
        "descr": "The IDBCursor.delete method returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. Once the record is deleted, the cursor's value is set to null.", 
        "name": "IDBCursor.delete", 
        "params": [
            {
                "descr": "A request object on which subsequent events related to this operation are fired. ", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbcursor.delete", 
        "syntax": "IDBRequest delete ();", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.direction": {
        "descr": "The IDBCursor.direction property is a DOMString that, on getting, returns the direction of traversal of the cursor. See the Values section below for possible values.", 
        "name": "IDBCursor.direction", 
        "params": [], 
        "path": "dom/idbcursor.direction", 
        "syntax": "\u00a0readonly\u00a0\u00a0\u00a0 attribute IDBCursorDirection\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 direction; Example // Open our object store and then get a cursor list of all the different data items in the IDB to iterate through    var objectStore = db.transaction('toDoList').objectStore('toDoList');\n or     objectStore.openCursor().onsuccess = function(event) {      var cursor = event.target.result;                // Log the current direction in which the object store is being iterated over        console.log(cursor.direction);\n or         if(cursor.direction == \"next\") {          // Here you could add some code to react to the direction the cursor is travelling in        }            // continue on to the record in the next cursor position      cursor.continue();\n or     });", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.key": {
        "descr": "The IDBCursor.key property returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type.", 
        "name": "IDBCursor.key", 
        "params": [], 
        "path": "dom/idbcursor.key", 
        "syntax": "\u00a0readonly  attribute any  key; Example // Open our object store and then get a cursor list of all the different data items in the IDB to iterate through    var objectStore = db.transaction('toDoList').objectStore('toDoList');\n or     objectStore.openCursor().onsuccess = function(event) {      var cursor = event.target.result;            // Find a cursor that you want to update by querying the key of the cursor      if(cursor.key == \"Walk the dog\") {        cursor.value.hours = \"19\";        cursor.value.minutes = \"30\";        var request = cursor.update();\n or         request.onsuccess = function() {          // take further action once the record is successfully updated        }      }            cursor.continue();\n or     });", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.primaryKey": {
        "descr": "The IDBCursor.primaryKey property returns the cursor's current effective key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type.", 
        "name": "IDBCursor.primaryKey", 
        "params": [], 
        "path": "dom/idbcursor.primarykey", 
        "syntax": "\u00a0readonly  attribute any  primaryKey; Example // Open our object store and then get a cursor list of all the different data items in the IDB to iterate through    var objectStore = db.transaction('toDoList').objectStore('toDoList');\n or     objectStore.openCursor().onsuccess = function(event) {      var cursor = event.target.result;            // Find a cursor that you want to update by querying the primary key of the cursor      if(cursor.primaryKey == \"Walk the dog\") {        cursor.value.hours = \"19\";        cursor.value.minutes = \"30\";        var request = cursor.update();\n or         request.onsuccess = function() {          // take further action once the record is successfully updated        }      }            cursor.continue();\n or     });", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.source": {
        "descr": "The IDBCursor.source property, on getting, returns the IDBObjectStore or IDBIndex that the cursor is iterating over. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.", 
        "name": "IDBCursor.source", 
        "params": [], 
        "path": "dom/idbcursor.source", 
        "syntax": "readonly    attribute (IDBObjectStore or IDBIndex", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.update": {
        "descr": "The IDBCursor.update method returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. If the cursor points to a record that has just been deleted, a new record is created.", 
        "name": "IDBCursor.update", 
        "params": [
            {
                "descr": "The value to be stored at the current position.", 
                "name": "value"
            }
        ], 
        "path": "dom/idbcursor.update", 
        "syntax": "IDBRequest update (any value);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.close": {
        "descr": "The IDBDatabase.close method returns immediately and closes the connection in a separate thread.", 
        "name": "IDBDatabase.close", 
        "params": [], 
        "path": "dom/idbdatabase.close", 
        "syntax": "void  close ();", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.createObjectStore": {
        "descr": "The IDBDatabase.createObjectStore method creates and returns a new object store or index.", 
        "name": "IDBDatabase.createObjectStore", 
        "params": [
            {
                "descr": "The name of the new object store.", 
                "name": "name"
            }, 
            {
                "descr": "Optional. Options object whose attributes are optional parameters to the method. ", 
                "name": "optionalParameters"
            }, 
            {
                "descr": "The newly created object store.", 
                "name": "IDBObjectStore"
            }
        ], 
        "path": "dom/idbdatabase.createobjectstore", 
        "syntax": "IDBObjectStore createObjectStore (DOMString name, optional IDBObjectStoreParameters optionalParameters);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.deleteObjectStore": {
        "descr": "The IDBDatabase.deleteObjectStore method destroys the object store with the given name in the connected database, along with any indexes that reference it.", 
        "name": "IDBDatabase.deleteObjectStore", 
        "params": [
            {
                "descr": "The name of the data store to delete.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbdatabase.deleteobjectstore", 
        "syntax": "void  deleteObjectStore (DOMString name);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.name": {
        "descr": "The IDBDatabase.name property is a DOMString that contains the name of the connected database.", 
        "name": "IDBDatabase.name", 
        "params": [], 
        "path": "dom/idbdatabase.name", 
        "syntax": "\u00a0readonly  attribute DOMString  name; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notrequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';}; request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';      // store the result of opening the database in the db variable. This is used a lot below  db = request.result;  // This line will log the name of the database, which should be \"toDoList\"  console.log(db.name);\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.objectStoreNames": {
        "descr": "The IDBDatabase.objectStoreNames property is a DOMStringList containing a list of the names of the object stores currently in the connected database.", 
        "name": "IDBDatabase.objectStoreNames", 
        "params": [], 
        "path": "dom/idbdatabase.objectstorenames", 
        "syntax": "\u00a0readonly  attribute DOMStringList  objectStoreNames; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notrequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';}; request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';      // store the result of opening the database in the db variable. This is used a lot below  db = request.result;  // This line will log the version of the connected database, which should be  // an object that looks like { ['my-store-name'] }  console.log(db.objectStoreNames);\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onabort": {
        "descr": "The IDBDatabase.onabort event handler returns when attempted access to the database is aborted.", 
        "name": "IDBDatabase.onabort", 
        "params": [], 
        "path": "dom/idbdatabase.onabort", 
        "syntax": "attribute  EventHandler  onabort; Example request.onupgradeneeded = function(event) {  var db = event.target.result;      db.onerror = function(event) {    note.innerHTML += '<li>Error opening database.</li>';  };  db.onabort = function(event) {    note.innerHTML += '<li>Database opening aborted!</li>';  };  // Create an objectStore for this database      var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or       // define what data items the objectStore will contain      objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or       note.innerHTML += '<li>Object store created.</li>';};);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onerror": {
        "descr": "The IDBDatabase.onerror event handler returns when when access to the database fails.", 
        "name": "IDBDatabase.onerror", 
        "params": [], 
        "path": "dom/idbdatabase.onerror", 
        "syntax": "attribute  EventHandler  onerror; Example eventrequest.onupgradeneeded = function(event) {  var db = event.target.result;      db.onerror = function(event) {    note.innerHTML += '<li>Error opening database.</li>';  };  db.onabort = function(event) {    note.innerHTML += '<li>Database opening aborted!</li>';  };  // Create an objectStore for this database      var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or       // define what data items the objectStore will contain      objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or       note.innerHTML += '<li>Object store created.</li>';};);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onversionchange": {
        "descr": "The IDBDatabase.onversionchange event handler returns when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was requested elsewhere (most probably in another window/tab on the same computer). This is different from the versionchange transaction (but it is related).", 
        "name": "IDBDatabase.onversionchange", 
        "params": [], 
        "path": "dom/idbdatabase.onversionchange", 
        "syntax": "attribute  EventHandler  onversionchange; Example request.onupgradeneeded = function(event) {  var db = event.target.result;      db.onerror = function(event) {    note.innerHTML += '<li>Error opening database.</li>';  };  db.onabort = function(event) {    note.innerHTML += '<li>Database opening aborted!</li>';  };  // Create an objectStore for this database      var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or       // define what data items the objectStore will contain      objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or       note.innerHTML += '<li>Object store created.</li>';      db.onversionchange = function(event) {    note.innerHTML += '<li>The database version has been updated; you should refresh this                       browser window, or close it down and use the other open version of                       this application, wherever it exists.</li>';  };};);", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.transaction": {
        "descr": "The IDBDatabase.transaction method immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store. Runs in a separate thread.", 
        "name": "IDBDatabase.transaction", 
        "params": [
            {
                "descr": "The names of object stores and indexes that are in the scope of the new transaction, declared as an array of strings. ", 
                "name": "storeNames"
            }, 
            {
                "descr": "Optional. The types of access that can be performed in the transaction. ", 
                "name": "mode"
            }, 
            {
                "descr": "The transaction object.", 
                "name": "IDBTransaction"
            }
        ], 
        "path": "dom/idbdatabase.transaction", 
        "syntax": "IDBTransaction transaction ((DOMString or sequence<DOMString>) storeNames, optional IDBTransactionMode", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.version": {
        "descr": "The IDBDatabase.version property is a 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.", 
        "name": "IDBDatabase.version", 
        "params": [], 
        "path": "dom/idbdatabase.version", 
        "syntax": "\u00a0readonly  attribute unsigned long long version; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notrequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';}; request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';      // store the result of opening the database in the db variable. This is used a lot below  db = request.result;  // This line will log the version of the connected database, which should be \"4\"  console.log(db.version);\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBEnvironment": {
        "descr": "The IDBEvironment interface of the IndexedDB API provides asynchronous access to a client-side database. It is implemented by window and Worker objects.", 
        "name": "IDBEnvironment", 
        "params": [
            {
                "descr": "Provides a mechanism for applications to asynchronously access capabilities of indexed databases.", 
                "name": "IDBEnvironment.indexedDB Read only"
            }
        ], 
        "path": "dom/idbenvironment", 
        "syntax": "window and Worker", 
        "type": "IndexedDB"
    }, 
    "IDBEnvironment.indexedDB": {
        "descr": "The IDBEnvironment.indexedDB property provides a mechanism for applications to asynchronously access the capabilities of indexed databases.", 
        "name": "IDBEnvironment.indexedDB", 
        "params": [], 
        "path": "dom/idbenvironment.indexeddb", 
        "syntax": "readonly  attribute IDBFactory  indexedDB; Example var db;function openDB() { var request = indexedDB.open(\"toDoList\");\n or  request.onsuccess = function(e) {   db = request.result; }});", 
        "type": "IndexedDB"
    }, 
    "IDBFactory": {
        "descr": "The IDBFactory interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is window.indexedDB. You open \u2014 that is, create and access \u2014 and delete a database with the object and not directly with IDBFactory.", 
        "name": "IDBFactory", 
        "params": [
            {
                "descr": "The current method to request opening a connection to a database.", 
                "name": "IDBFactory.open"
            }, 
            {
                "descr": "An obsolete method to request opening a connection to a database, still implemented by some browsers.", 
                "name": "IDBFactory.open"
            }, 
            {
                "descr": "A method to request the deletion of a database.", 
                "name": "IDBFactory.deleteDatabase"
            }, 
            {
                "descr": "A method that compares two keys and returns a result indicating which one is greater in value.", 
                "name": "IDBFactory.cmp"
            }
        ], 
        "path": "dom/idbfactory", 
        "syntax": "Candidate Recommendation   Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 12webkit 24 10.0 (10.0) 10 17 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support 4.4 6.0 (6.0) 1.0.1 10 17 Not supported    Be careful in Chrome as it still implements the old specification along the new one. Similarly it still has the prefixed webkitIndexedDB", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.cmp": {
        "descr": "The IDBFactory.cmp method compares two values as keys to determine equality and ordering for IndexedDB operations, such as storing and iterating.", 
        "name": "IDBFactory.cmp", 
        "params": [
            {
                "descr": "The first key to compare.", 
                "name": "first"
            }, 
            {
                "descr": "The second key to compare.", 
                "name": "second"
            }, 
            {
                "descr": "Returned value Description -1 1st key is less than the 2nd key 0 1st key is equal to the 2nd key 1 1st key is greater than the 2nd key", 
                "name": "Integer:"
            }
        ], 
        "path": "dom/idbfactory.cmp", 
        "syntax": "short cmp (any first, any second);", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.deleteDatabase": {
        "descr": "The IDBFactory.deleteDatabase method requests the deletion of a database. The method returns an IDBOpenDBRequest object immediately, and performs the deletion operation asynchronously.", 
        "name": "IDBFactory.deleteDatabase", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }, 
            {
                "descr": "In Gecko, since version 26, you can include a storage parameter that specifies whether you want to delete a permanent (the default value) IndexedDB, or an indexedDB in temporary storage (aka shared pool.) See bug 785884 for more details; a syntax example follows. This is a non-standard feature that we are looking to standardise sometime in the future.var request = window.indexedDB.deleteDatabase(\"toDoList\", storage: \"temporary\");", 
                "name": "storage Non-standard"
            }, 
            {
                "descr": "The request object on which subsequent events related to this request are fired.", 
                "name": "IDBOpenDBRequest"
            }
        ], 
        "path": "dom/idbfactory.deletedatabase", 
        "syntax": "IDBOpenDBRequest deleteDatabase (DOMString name);", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.open": {
        "descr": "The IDBFactory.open method requests opening a connection to a database. The method returns an IDBOpenDBRequest object immediately, and performs the open operation asynchronously.", 
        "name": "IDBFactory.open", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }, 
            {
                "descr": "The version of the database.", 
                "name": "version"
            }, 
            {
                "descr": "In Gecko, since version 26, you can include an options object as a parameter of IDBFactory.open that contains the version number of the database, plus a storage value that specifies whether you want to use permanent (the default value) storage for the IndexedDB, or temporary storage (aka shared pool.) See bug 785884 for more details; a syntax example follows. This is a non-standard feature that we are looking to standardise sometime in the future.var request = window.indexedDB.open(\"toDoList\", {version: 4, storage: \"temporary\"});", 
                "name": "options (version and storage) Non-standard"
            }, 
            {
                "descr": "The request object on which subsequent events related to this request are fired.", 
                "name": "IDBOpenDBRequest"
            }
        ], 
        "path": "dom/idbfactory.open", 
        "syntax": "IDBOpenDBRequest open (DOMString name, [EnforceRange] optional unsigned long long version);", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.open-obsolete": {
        "descr": "The IDBFactory.open method Requests opening a connection to a database. The method returns an IDBRequest object immediately, and performs the open operation asynchronously.", 
        "name": "IDBFactory.open-obsolete", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbfactory.open-obsolete", 
        "syntax": "IDBRequest open (in DOMString name);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.count": {
        "descr": "The IDBIndex.count method returns an IDBRequest object, and in a separate thread, returns the number of records within a key range.", 
        "name": "IDBIndex.count", 
        "params": [
            {
                "descr": "The key or key range that identifies the record to be counted.", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.count", 
        "syntax": "IDBRequest count (optional any key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.get": {
        "descr": "The IDBIndex.get method returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is a key range.", 
        "name": "IDBIndex.get", 
        "params": [
            {
                "descr": "The key or key range that identifies the record to be retrieved.", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.get", 
        "syntax": "IDBRequest get (any key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getAll": {
        "descr": "The IDBIndex.getAll method Instantly retrieves all objects inside an IDBObjectStore, setting them as the result of the request object.", 
        "name": "IDBIndex.getAll", 
        "params": [
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.getall", 
        "syntax": "IDBRequestgetAll (in any key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getAllKeys": {
        "descr": "The IDBIndex.getAllKeys method instantly retrieves the keys of all objects inside an ObjectStore, setting them as the result of the request object.", 
        "name": "IDBIndex.getAllKeys", 
        "params": [
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.getallkeys", 
        "syntax": "IDBRequestgetAllKeys (in any key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getKey": {
        "descr": "The IDBIndex.getKey method returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is a key range.", 
        "name": "IDBIndex.getKey", 
        "params": [
            {
                "descr": "The key or key range that identifies a record to be retrieved.", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.getkey", 
        "syntax": "IDBRequest getKey (any key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.keyPath": {
        "descr": "The IDBIndex.keyPath property returns the key path of the current index. If null, this index is not auto-populated.", 
        "name": "IDBIndex.keyPath", 
        "params": [], 
        "path": "dom/idbindex.keypath", 
        "syntax": "readonly  attribute any  keyPath; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Get the current key pathobjectStore.keyPath;);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.multiEntry": {
        "descr": "The IDBIndex.multiEntry property returns a boolean value that affects how the index behaves when the result of evaluating the index's key path yields an array.", 
        "name": "IDBIndex.multiEntry", 
        "params": [], 
        "path": "dom/idbindex.multientry", 
        "syntax": "readonly  attribute boolean  multiEntry; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Get the current multi-entry statusobjectStore.multiEntry;);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.name": {
        "descr": "The IDBIndex.name property returns the name of the current index.", 
        "name": "IDBIndex.name", 
        "params": [], 
        "path": "dom/idbindex.name", 
        "syntax": "readonly    attribute DOMString      name; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Get the current index nameobjectStore.name;);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.objectStore": {
        "descr": "The IDBIndex.objectStore property returns the name of the object store referenced by the current index.", 
        "name": "IDBIndex.objectStore", 
        "params": [], 
        "path": "dom/idbindex.objectstore", 
        "syntax": "readonly    attribute IDBObjectStore objectStore; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or \u00a0\u00a0 \u00a0// store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Get the current objectStore nameobjectStore.objectStore;);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.openCursor": {
        "descr": "The IDBIndex.openCursor method Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range.", 
        "name": "IDBIndex.openCursor", 
        "params": [
            {
                "descr": "Optional. The key range to use as the cursor's range.", 
                "name": "range"
            }, 
            {
                "descr": "Optional. The cursor's direction. ", 
                "name": "direction"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.opencursor", 
        "syntax": "IDBRequest openCursor (optional any range, optional IDBCursorDirection direction = \"next\");", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.openKeyCursor": {
        "descr": "The IDBIndex.openKeyCursor method returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.", 
        "name": "IDBIndex.openKeyCursor", 
        "params": [
            {
                "descr": "Optional. The key range to use as the cursor's range.", 
                "name": "range"
            }, 
            {
                "descr": "Optional. The cursor's required direction. ", 
                "name": "direction"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbindex.openkeycursor", 
        "syntax": "IDBRequest openKeyCursor (optional any range, optional IDBCursorDirection direction = \"next\");", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.unique": {
        "descr": "The IDBIndex.unique property returns a boolean that states whether the index allows duplicate keys or not.", 
        "name": "IDBIndex.unique", 
        "params": [], 
        "path": "dom/idbindex.unique", 
        "syntax": "readonly  attribute boolean  unique; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Unique, or not?objectStore.unique;);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.bound": {
        "descr": "The IDBKeyRange.bound method creates a new key range with upper and lower bounds.", 
        "name": "IDBKeyRange.bound", 
        "params": [
            {
                "descr": "The lower bound of the key range.", 
                "name": "lower"
            }, 
            {
                "descr": "The upper bound of the key range.", 
                "name": "upper"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower bound value of the key range.", 
                "name": "lowerOpen"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the upper bound value of the key range.", 
                "name": "upperOpen"
            }, 
            {
                "descr": "The newly created key range.", 
                "name": "IDBKeyRange"
            }
        ], 
        "path": "dom/idbkeyrange.bound", 
        "syntax": "static IDBKeyRange bound (any lower, any upper, optional boolean lowerOpen = false, optional boolean upperOpen = false);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lower": {
        "descr": "The IDBKeyRange.lower property returns the lower bound of the key range.", 
        "name": "IDBKeyRange.lower", 
        "params": [], 
        "path": "dom/idbkeyrange.lower", 
        "syntax": "readonly    attribute any     lower; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Match anything between \"Ask friends to tea\" and \"Walk dog\", but not including \"Walk dog\"var boundKeyRange = IDBKeyRange.bound(\"Ask friends to tea\", \"Walk dog\", false, true);\n or // Return the lower bound of the key rangeconsole.log(boundKeyRange.lower);\n or // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()index.openCursor(boundKeyRange).onsuccess = function(event) {  var cursor = event.target.result;  if (cursor) {    // Do something with the matches.    cursor.continue();\n or   }};);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lowerBound": {
        "descr": "The IDBKeyRange.lowerBound method creates a new key range with only a lower bound.", 
        "name": "IDBKeyRange.lowerBound", 
        "params": [
            {
                "descr": "The value of the lower bound.", 
                "name": "bound"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower-bound value.", 
                "name": "open"
            }, 
            {
                "descr": "The newly created key range.", 
                "name": "IDBKeyRange"
            }
        ], 
        "path": "dom/idbkeyrange.lowerbound", 
        "syntax": "static IDBKeyRange lowerBound (any lower, optional boolean open = false);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lowerOpen": {
        "descr": "The IDBKeyRange.lowerOpen property returns a boolean indicating whether the lower-bound value is included in the key range.", 
        "name": "IDBKeyRange.lowerOpen", 
        "params": [], 
        "path": "dom/idbkeyrange.loweropen", 
        "syntax": "readonly    attribute boolean lowerOpen; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Match anything between \"Ask friends to tea\" and \"Walk dog\", but not including \"Walk dog\"var boundKeyRange = IDBKeyRange.bound(\"Ask friends to tea\", \"Walk dog\", false, true);\n or // Return the lower bound of the key rangeconsole.log(boundKeyRange.lower);\n or // Is the lower bound included in the key range? (should return false, meaning that it is included)console.log(boundKeyRange.lowerOpen);\n or // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()index.openCursor(boundKeyRange).onsuccess = function(event) {  var cursor = event.target.result;  if (cursor) {    // Do something with the matches.    cursor.continue();\n or   }};);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.only": {
        "descr": "The IDBKeyRange.only method creates a new key range containing a single value.", 
        "name": "IDBKeyRange.only", 
        "params": [
            {
                "descr": "The single value in the key range.", 
                "name": "value"
            }, 
            {
                "descr": "The newly created key range.", 
                "name": "IDBKeyRange"
            }
        ], 
        "path": "dom/idbkeyrange.only", 
        "syntax": "static IDBKeyRange only (any value);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upper": {
        "descr": "The IDBKeyRange.upper property returns the upper bound of the key range.", 
        "name": "IDBKeyRange.upper", 
        "params": [], 
        "path": "dom/idbkeyrange.upper", 
        "syntax": "readonly    attribute any     upper; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Match anything between \"Ask friends to tea\" and \"Walk dog\", but not including \"Walk dog\"var boundKeyRange = IDBKeyRange.bound(\"Ask friends to tea\", \"Walk dog\", false, true);\n or // Return the upper bound of the key rangeconsole.log(boundKeyRange.upper);\n or // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()index.openCursor(boundKeyRange).onsuccess = function(event) {  var cursor = event.target.result;  if (cursor) {    // Do something with the matches.    cursor.continue();\n or   }};);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upperBound": {
        "descr": "The IDBKeyRange.upperBound method creates a new upper-bound key range.", 
        "name": "IDBKeyRange.upperBound", 
        "params": [
            {
                "descr": "The value of the upper bound of the range.", 
                "name": "bound"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower-bound value.", 
                "name": "open"
            }, 
            {
                "descr": "The newly created key range.", 
                "name": "IDBKeyRange"
            }
        ], 
        "path": "dom/idbkeyrange.upperbound", 
        "syntax": "static IDBKeyRange upperBound (any upper, optional boolean open = false);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upperOpen": {
        "descr": "The IDBKeyRange.upperOpen property returns a boolean indicating whether the upper-bound value is included in the key range.", 
        "name": "IDBKeyRange.upperOpen", 
        "params": [], 
        "path": "dom/idbkeyrange.upperopen", 
        "syntax": "readonly    attribute boolean upperOpen; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Open a transaction on the current database and get a reference to the object store//that we want to pull information out ofvar transaction = db.transaction([\"toDoList\"]);\n or var objectStore = transaction.objectStore(\"toDoList\");\n or // Match anything between \"Ask friends to tea\" and \"Walk dog\", but not including \"Walk dog\"var boundKeyRange = IDBKeyRange.bound(\"Ask friends to tea\", \"Walk dog\", false, true);\n or // Return the upper bound of the key rangeconsole.log(boundKeyRange.upper);\n or // Is the upper bound included in the key range? (should return true, meaning that it is NOT included)console.log(boundKeyRange.upperOpen);\n or // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()index.openCursor(boundKeyRange).onsuccess = function(event) {  var cursor = event.target.result;  if (cursor) {    // Do something with the matches.    cursor.continue();\n or   }};);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.add": {
        "descr": "The IDBObjectStore.add method returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store.", 
        "name": "IDBObjectStore.add", 
        "params": [
            {
                "descr": "The value to be stored.", 
                "name": "value"
            }, 
            {
                "descr": "The key to use to identify the record. ", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbobjectstore.add", 
        "syntax": "IDBRequest add (any value, optional any key);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.autoIncrement": {
        "descr": "The IDBObjectStore.autoIncrement property returns the value of the auto increment flag for this object store.", 
        "name": "IDBObjectStore.autoIncrement", 
        "params": [], 
        "path": "dom/idbobjectstore.autoincrement", 
        "syntax": "readonly    attribute boolean        autoIncrement; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable.  db = request.result; };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line aboverequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database  var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain  objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};// open a db transaction, ready for reading datavar transaction = db.transaction([\"toDoList\"], \"readonly\");\n or // create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // Retrieving the auto increment status of this object store. For// this example it should returen false because we didn't specify that it should be// auto incrementing when we created it with createObjectStoreobjectStore.autoIncrement;);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.clear": {
        "descr": "The IDBObjectStore.clear method creates and immediately returns an IDBRequest object, and clears this object store in a separate thread.", 
        "name": "IDBObjectStore.clear", 
        "params": [
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbobjectstore.clear", 
        "syntax": "IDBRequest clear ();", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.createIndex": {
        "descr": "The IDBObjectStore.createIndex method creates and returns a new IDBIndex object in the connected database.", 
        "name": "IDBObjectStore.createIndex", 
        "params": [
            {
                "descr": "The name of the index to create.", 
                "name": "name"
            }, 
            {
                "descr": "The key path for the index to use.", 
                "name": "keyPath"
            }, 
            {
                "descr": "The IDBIndexParameters object \u2014 whose attributes are optional parameters to the method \u2014 can include the following properties: Attribute Description unique If true, the index will not allow duplicate values for a single key. multiEntry If true, the index will add an entry in the index for each array element when the keypath resolves to an Array. If false, it will add one single entry containing the Array.", 
                "name": "optionalParameters"
            }, 
            {
                "descr": "The newly created index.", 
                "name": "IDBIndex"
            }
        ], 
        "path": "dom/idbobjectstore.createindex", 
        "syntax": "IDBIndex   createIndex (DOMString name, (DOMString or sequence<DOMString>) keyPath, optional IDBIndexParameters", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.delete": {
        "descr": "The IDBObjectStore.delete method returns an IDBRequest object, and, in a separate thread, deletes the current object store.", 
        "name": "IDBObjectStore.delete", 
        "params": [
            {
                "descr": "The key of the object(s) to be deleted.", 
                "name": "Key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired. ", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbobjectstore.delete", 
        "syntax": "IDBRequest delete (any key);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.deleteIndex": {
        "descr": "The IDBObjectStore.deleteIndex method destroys the index with the specified name in the connected database.", 
        "name": "IDBObjectStore.deleteIndex", 
        "params": [
            {
                "descr": "The name of the existing index to remove.", 
                "name": "indexName"
            }, 
            {
                "descr": "Void", 
                "name": "Returns"
            }
        ], 
        "path": "dom/idbobjectstore.deleteindex", 
        "syntax": "void       deleteIndex (DOMString indexName);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.get": {
        "descr": "The IDBObjectStore.get method returns an IDBRequest object, and, in a separate thread, returns the object store selected by the specified key.", 
        "name": "IDBObjectStore.get", 
        "params": [
            {
                "descr": "The key or key range that identifies the record to be retrieved.", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbobjectstore.get", 
        "syntax": "IDBRequest get (any key);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.index": {
        "descr": "The IDBObjectStore.index method opens the named index in the current object store.", 
        "name": "IDBObjectStore.index", 
        "params": [
            {
                "descr": "The name of the index to open.", 
                "name": "name"
            }, 
            {
                "descr": "An object for accessing the index.", 
                "name": "IDBIndex"
            }
        ], 
        "path": "dom/idbobjectstore.index", 
        "syntax": "IDBIndex   index (DOMString name);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.indexNames": {
        "descr": "The IDBObjectStore.indexNames property returns a list of the names of indexes on objects in this object store.", 
        "name": "IDBObjectStore.indexNames", 
        "params": [], 
        "path": "dom/idbobjectstore.indexnames", 
        "syntax": "readonly    attribute DOMStringList  indexNames; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable.  db = request.result; };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line aboverequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database  var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain  objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};// open a db transaction, ready for reading datavar transaction = db.transaction([\"toDoList\"], \"readonly\");\n or // create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // Retrieving the indexes in this object store; this should return something like// { 0: \"day\", 1: \"hours\", 2: \"minutes\", 3: \"month\", 4: \"notifed\", 5: \"year\" }objectStore.indexNames;);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.keyPath": {
        "descr": "The IDBObjectStore.keyPath property returns the key path of this object store.", 
        "name": "IDBObjectStore.keyPath", 
        "params": [], 
        "path": "dom/idbobjectstore.keypath", 
        "syntax": "readonly    attribute any            keyPath; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable.  db = request.result; };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line aboverequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database  var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain  objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};// open a db transaction, ready for reading datavar transaction = db.transaction([\"toDoList\"], \"readonly\");\n or // create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // Retrieving the key path of this object store; this should return \"taskTitle\",// as that's the keyobjectStore.keyPath;);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.name": {
        "descr": "The IDBObjectStore.name property returns the name of this object store.", 
        "name": "IDBObjectStore.name", 
        "params": [], 
        "path": "dom/idbobjectstore.name", 
        "syntax": "readonly    attribute DOMString      name; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable.  db = request.result; };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line aboverequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database  var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain  objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};// open a db transaction, ready for reading datavar transaction = db.transaction([\"toDoList\"], \"readonly\");\n or // create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // Retrieving the name of this object store; this should return \"toDoList\",// as that's the nameobjectStore.name;);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.put": {
        "descr": "The IDBObjectStore.put method returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value and stores the cloned value in the object store.", 
        "name": "IDBObjectStore.put", 
        "params": [
            {
                "descr": "The value to be stored.", 
                "name": "value"
            }, 
            {
                "descr": "The key to use to identify the record. ", 
                "name": "key"
            }, 
            {
                "descr": "A request object on which subsequent events related to this operation are fired.", 
                "name": "IDBRequest"
            }
        ], 
        "path": "dom/idbobjectstore.put", 
        "syntax": "IDBRequest put (any value, optional any key);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.transaction": {
        "descr": "The IDBObjectStore.transaction property returns the transaction object to which this object store belongs.", 
        "name": "IDBObjectStore.transaction", 
        "params": [], 
        "path": "dom/idbobjectstore.transaction", 
        "syntax": "readonly    attribute IDBTransaction transaction; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable.  db = request.result; };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line aboverequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database  var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain  objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};// open a db transaction, ready for reading datavar transaction = db.transaction([\"toDoList\"], \"readonly\");\n or // create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // Retrieving the transaction object that this object store belongs toobjectStore.transaction;);", 
        "type": "IndexedDB"
    }, 
    "IDBOpenDBRequest.onblocked": {
        "descr": "The IDBOpenDBRequest.onblocked event handler is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (ie not closed) somewhere, even after the versionchange event was sent.", 
        "name": "IDBOpenDBRequest.onblocked", 
        "params": [], 
        "path": "dom/idbopendbrequest.onblocked", 
        "syntax": "attribute EventHandler onblocked; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notrequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';};request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable. This is used a lot below  db = request.result;   // Run the displayData() function to populate the task list with all the to-do list data already in the IDB  displayData();\n or };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database     var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or };request.onblocked = function(event) {  console.log(\"Your database version can't be upgraded because the app is open somewhere else.\");\n or });", 
        "type": "IndexedDB"
    }, 
    "IDBOpenDBRequest.onupgradeneeded": {
        "descr": "The IDBOpenDBRequest.onupgradeneeded event handler is the event handler for the upgradeneeded event, triggered when a database of a bigger version number than the existing stored database is loaded.", 
        "name": "IDBOpenDBRequest.onupgradeneeded", 
        "params": [], 
        "path": "dom/idbopendbrequest.onupgradeneeded", 
        "syntax": "attribute EventHandler onupgradeneeded; Example var db;// Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notrequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';};request.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';   // store the result of opening the database in the db variable. This is used a lot below  db = request.result;   // Run the displayData() function to populate the task list with all the to-do list data already in the IDB  displayData();\n or };// This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database     var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.error": {
        "descr": "The IDBRequest.error property returns the error in the event of an unsuccessful request.", 
        "name": "IDBRequest.error", 
        "params": [], 
        "path": "dom/idbrequest.error", 
        "syntax": "readonly  attribute DOMError  error; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};request.onerror = function() {  // If an error occurs with the request, log what it is  console.log(\"There has been an error with retrieving your data: \" + request.error);\n or });", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.onerror": {
        "descr": "The IDBRequest.onerror event handler allows you to run code when the request returns an error.", 
        "name": "IDBRequest.onerror", 
        "params": [], 
        "path": "dom/idbrequest.onerror", 
        "syntax": "attribute  EventHandler  onsuccess; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};request.onerror = function() {  // If an error occurs with the request, log what it is  console.log(\"There has been an error with retrieving your data: \" + request.error);\n or });", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.onsuccess": {
        "descr": "The IDBRequest.onsuccess event handler allows you to run some code when the result is successfully returned.", 
        "name": "IDBRequest.onsuccess", 
        "params": [], 
        "path": "dom/idbrequest.onsuccess", 
        "syntax": "attribute  EventHandler  onerror; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};);", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.readyState": {
        "descr": "The IDBRequest.readyState property returns the state of the request.", 
        "name": "IDBRequest.readyState", 
        "params": [], 
        "path": "dom/idbrequest.readystate", 
        "syntax": "readonly  attribute IDBRequestReadyState  readyState; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or   // Log the ready state of this request  console.log(\"The ready state of this request is \" + request.readyState);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};);", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.result": {
        "descr": "The IDBRequest.result property, returns the result of the request. If the the request failed and the result is not available, the InvalidStateError exception is thrown.", 
        "name": "IDBRequest.result", 
        "params": [], 
        "path": "dom/idbrequest.result", 
        "syntax": "readonly  attribute any  result; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};);", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.source": {
        "descr": "The IDBRequest.source property returns the source of the request, such as an Index or an object store. If no source exists (such as when calling indexedDB.open), it returns null.", 
        "name": "IDBRequest.source", 
        "params": [], 
        "path": "dom/idbrequest.source", 
        "syntax": "readonly    attribute (IDBObjectStore or IDBIndex or IDBCursor)? source;", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.transaction": {
        "descr": "The IDBRequest.transaction property returns the transaction for the request.", 
        "name": "IDBRequest.transaction", 
        "params": [], 
        "path": "dom/idbrequest.transaction", 
        "syntax": "readonly  attribute IDBTransaction  transaction; Example var title = \"Walk dog\";// Open up a transaction as usualvar objectStore = db.transaction(['toDoList'], \"readwrite\").objectStore('toDoList');\n or // Get the to-do list object that has this title as it's titlevar request = objectStore.get(title);\n or request.onsuccess = function() {  // Grab the data object returned as the result  var data = request.result;   // Update the notified value in the object to \"yes\"  data.notified = \"yes\";   // Create another request that inserts the item back into the database  var requestUpdate = objectStore.put(data);\n or   // Log the transaction that originated this request  console.log(\"The transaction that originated this request is \" + request.transaction);\n or    // When this new request succeeds, run the displayData() function again to update the display  requestUpdate.onsuccess = function() {    displayData();\n or   };};);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.abort": {
        "descr": "The IDBTransaction.abort method returns immediately, and rolls back all the changes to objects in the database associated with this transaction.", 
        "name": "IDBTransaction.abort", 
        "params": [], 
        "path": "dom/idbtransaction.abort", 
        "syntax": "void  abort ();", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.db": {
        "descr": "The IDBTransaction.db property returns the database connection with which this transaction is associated.", 
        "name": "IDBTransaction.db", 
        "params": [], 
        "path": "dom/idbtransaction.db", 
        "syntax": "readonly  attribute IDBDatabase  db; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database   var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain   objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};    // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';};// call an object store that's already been added to the databasevar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};// Return the database (IDBDatabase) connection with which this transaction is associatedtransaction.db;);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.error": {
        "descr": "The IDBTransaction.error property returns the error in the event of an unsuccessful transaction.", 
        "name": "IDBTransaction.error", 
        "params": [], 
        "path": "dom/idbtransaction.error", 
        "syntax": "readonly  attribute DOMError  error; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database   var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain   objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};    // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += \"<li>Transaction not opened due to error: \" + transaction.error + \".</li>\";};// call an object store that's already been added to the databasevar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};// Return the mode this transaction has been opened in (should be \"readwrite\" in this case)transaction.mode;);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.mode": {
        "descr": "The IDBTransaction.mode property returns the mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is readonly.", 
        "name": "IDBTransaction.mode", 
        "params": [], 
        "path": "dom/idbtransaction.mode", 
        "syntax": "readonly  attribute  IDBTransactionMode mode; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database   var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain   objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};    // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';};// call an object store that's already been added to the databasevar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};// Return the mode this transaction has been opened in (should be \"readwrite\" in this case)transaction.mode;);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.objectStore": {
        "descr": "The IDBTransaction.objectStore method returns an object store that has already been added to the scope of this transaction.", 
        "name": "IDBTransaction.objectStore", 
        "params": [
            {
                "descr": "The name of the requested object store.", 
                "name": "name"
            }, 
            {
                "descr": "An object for accessing the requested object store.", 
                "name": "IDBObjectStore"
            }
        ], 
        "path": "dom/idbtransaction.objectstore", 
        "syntax": "IDBObjectStore objectStore (DOMString name);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.onabort": {
        "descr": "The IDBTransaction.onabort event handler allows you to run code when the transaction is aborted.", 
        "name": "IDBTransaction.onabort", 
        "params": [], 
        "path": "dom/idbtransaction.onabort", 
        "syntax": "attribute  EventHandler  onabort; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or     // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';};// create an object store on the transactionvar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};// Attempt to abort the transaction we just didtransaction.abort();\n or transaction.onabort = function() {  // Report when the transaction was successfully aborted  console.log(\"Transaction aborted!\");\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.oncomplete": {
        "descr": "The IDBTransaction.oncomplete event handler allows you to run code when the transaction successfully completes.", 
        "name": "IDBTransaction.oncomplete", 
        "params": [], 
        "path": "dom/idbtransaction.oncomplete", 
        "syntax": "attribute  EventHandler  oncomplete; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database   var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain   objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};    // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += '<li>Transaction not opened due to error: \" + transaction.error + \".</li>';};// call an object store that's already been added to the databasevar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};);", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.onerror": {
        "descr": "The IDBTransaction.onerror event handler allows you to run code when the transaction returns an error.", 
        "name": "IDBTransaction.onerror", 
        "params": [], 
        "path": "dom/idbtransaction.onerror", 
        "syntax": "attribute  EventHandler  onerror; Example // Let us open our databasevar request = window.indexedDB.open(\"toDoList\", 4);\n or // This event handles the event whereby a new version of the database needs to be created// Either one has not been created before, or a new version number has been submitted via the// window.indexedDB.open line above//it is only implemented in recent browsersrequest.onupgradeneeded = function(event) {  var db = event.target.result;   db.onerror = function(event) {    note.innerHTML += '<li>Error loading database.</li>';  };  // Create an objectStore for this database   var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });\n or    // define what data items the objectStore will contain   objectStore.createIndex(\"hours\", \"hours\", { unique: false });\n or   objectStore.createIndex(\"minutes\", \"minutes\", { unique: false });\n or   objectStore.createIndex(\"day\", \"day\", { unique: false });\n or   objectStore.createIndex(\"month\", \"month\", { unique: false });\n or   objectStore.createIndex(\"year\", \"year\", { unique: false });\n or   objectStore.createIndex(\"notified\", \"notified\", { unique: false });\n or    note.innerHTML += '<li>Object store created.</li>';};    // store the result of opening the database in the db variable.db = request.result;// Create a new object ready for being inserted into the IDBvar newItem = [  { taskTitle: \"Walk dog\", hours: 19, minutes: 30, day: 24, month: \"December\", year: 2013, notified: \"no\" }];// open a read/write db transaction, ready for adding the datavar transaction = db.transaction([\"toDoList\"], \"readwrite\");\n or // report on the success of opening the transactiontransaction.oncomplete = function(event) {  note.innerHTML += '<li>Transaction opened for task addition.</li>';};transaction.onerror = function(event) {  note.innerHTML += '<li>Transaction not opened due to error: \" + transaction.error + \".</li>';};// call an object store that's already been added to the databasevar objectStore = transaction.objectStore(\"toDoList\");\n or // add our newItem object to the object storevar request = objectStore.add(newItem[0]);\n or   request.onsuccess = function(event) {  // report the success of our new item going into the database  note.innerHTML += '<li>New item added to database.</li>';};// Return the mode this transaction has been opened in (should be \"readwrite\" in this case)transaction.mode;);", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.newVersion": {
        "descr": "The IDBVersionChangeEvent.newVersion property returns the new version of the database.", 
        "name": "IDBVersionChangeEvent.newVersion", 
        "params": [], 
        "path": "dom/idbversionchangeevent.newversion", 
        "syntax": "readonly    attribute unsigned long long? newVersion; Example TBD Value A 64-bit integer.", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.oldVersion": {
        "descr": "The IDBVersionChangeEvent.oldVersion property returns the old version of the database.", 
        "name": "IDBVersionChangeEvent.oldVersion", 
        "params": [], 
        "path": "dom/idbversionchangeevent.oldversion", 
        "syntax": "readonly    attribute unsigned long long  oldVersion; Example TBD Value A 64-bit integer.", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.version": {
        "descr": "The IDBVersionChangeEvent.version property returns The new version of the database in a versionchange transaction.", 
        "name": "IDBVersionChangeEvent.version", 
        "params": [], 
        "path": "dom/idbversionchangeevent.version", 
        "syntax": "readonly    attribute unsigned long long? version; Example TBD Value A 64-bit integer.", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeRequest.setVersion": {
        "descr": "The IDBVersionChangeRequest.setVersion method updates the version of the database, returning immediately and running a versionchange transaction on the connected database in a separate thread.", 
        "name": "IDBVersionChangeRequest.setVersion", 
        "params": [
            {
                "descr": "The version to store in the database.", 
                "name": "version"
            }, 
            {
                "descr": "The request to change the version of a database.", 
                "name": "IDBVersionChangeRequest"
            }
        ], 
        "path": "dom/idbversionchangerequest.setversion", 
        "syntax": "IDBVersionChangeRequest setVersion ([TreatNullAs=EmptyString] in DOMString version);", 
        "type": "IndexedDB"
    }, 
    "Infinity": {
        "descr": "The global Infinity property is a numeric value representing infinity.", 
        "name": "Infinity", 
        "params": [], 
        "path": "javascript/global_objects/infinity", 
        "syntax": "Infinity  Description Infinity is a property of the global object, i.e. it is a variable in global scope. The initial value of Infinity is Number.POSITIVE_INFINITY. The value Infinity (positive infinity) is greater than any other number including itself. This value behaves mathematically like infinity; for example, anything multiplied by Infinity", 
        "type": "Global Objects"
    }, 
    "Int16Array": {
        "descr": "The Int16Array type represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Int16Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Int16Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Int16Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/int16array", 
        "syntax": "TypedArray represents any of the typed array object types. Int16Array Int16Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Int32Array": {
        "descr": "The Int32Array type represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Int32Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Int32Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Int32Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/int32array", 
        "syntax": "TypedArray represents any of the typed array object types. Int32Array Int32Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Int8Array": {
        "descr": "The Int8Array type represents an array of twos-complement 8-bit signed integers.", 
        "name": "Int8Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Int8Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Int8Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/int8array", 
        "syntax": "TypedArray represents any of the typed array object types. Int8Array Int8Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Intl": {
        "descr": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.", 
        "name": "Intl", 
        "params": [
            {
                "descr": "Constructor for collators, objects that enable language sensitive string comparison.", 
                "name": "Collator"
            }, 
            {
                "descr": "Constructor for objects that enable language sensitive date and time formatting.", 
                "name": "DateTimeFormat"
            }, 
            {
                "descr": "Constructor for objects that enable language sensitive number formatting.", 
                "name": "NumberFormat"
            }
        ], 
        "path": "javascript/global_objects/intl", 
        "syntax": "locales argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the options argument (see below).", 
        "type": "Intl"
    }, 
    "Intl.Collator": {
        "descr": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.", 
        "name": "Intl.Collator", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "kn"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "kf"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ", 
                "name": "usage"
            }, 
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ", 
                "name": "sensitivity"
            }, 
            {
                "descr": "Whether punctuation should be ignored. ", 
                "name": "ignore\u00adPunctua\u00adtion"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "numeric"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "caseFirst"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "supportedLocalesOf"
            }, 
            {
                "descr": "Getter; returns a function that compares two strings according to the sort order of this Collator object.", 
                "name": "compare"
            }, 
            {
                "descr": "A reference to Intl.Collator.", 
                "name": "constructor"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.", 
                "name": "resolvedOptions"
            }
        ], 
        "path": "javascript/global_objects/collator", 
        "syntax": "new Intl.Collator([locales [, options]])Intl.Collator.call(this [, locales [, options]])", 
        "type": "Intl"
    }, 
    "Intl.Collator.compare": {
        "descr": "Getter; returns a function that compares two strings according to the sort order of this Collator object.", 
        "name": "Intl.Collator.compare", 
        "params": [
            {
                "descr": "The strings to compare against each other.", 
                "name": "string1  string2"
            }
        ], 
        "path": "javascript/global_objects/collator/compare", 
        "syntax": "collator.compare(string1, string2)", 
        "type": "Intl"
    }, 
    "Intl.Collator.resolvedOptions": {
        "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of this Collator object.", 
        "name": "Intl.Collator.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.", 
                "name": "usage  sensitivity  ignorePunctuation"
            }, 
            {
                "descr": "The value requested using the Unicode extension key \"co\", if it is supported for locale, or \"default\".", 
                "name": "collation"
            }, 
            {
                "descr": "The values requested for these properties in the options argument or using the Unicode extension keys \"kn\" and \"kf\" or filled in as defaults. ", 
                "name": "numeric  caseFirst"
            }
        ], 
        "path": "javascript/global_objects/collator/resolvedoptions", 
        "syntax": "collator.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Intl.Collator.supportedLocalesOf": {
        "descr": "Returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.", 
        "name": "Intl.Collator.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "An object that may have the following property:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/collator/supportedlocalesof", 
        "syntax": "Intl.Collator.supportedLocalesOf(locales [, options])", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat": {
        "descr": "The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting.", 
        "name": "Intl.DateTimeFormat", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "supportedLocalesOf"
            }, 
            {
                "descr": "A reference to Intl.DateTimeFormat.", 
                "name": "constructor"
            }, 
            {
                "descr": "Getter; returns a function that formats a date according to the locale and formatting options of this DateTimeFormat object.", 
                "name": "format"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.", 
                "name": "resolvedOptions"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat", 
        "syntax": "new Intl.DateTimeFormat([locales [, options]])Intl.DateTimeFormat.call(this [, locales [, options]])", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat.format": {
        "descr": "Getter; returns a function that formats a date according to the locale and formatting options of this DateTimeFormat object.", 
        "name": "Intl.DateTimeFormat.format", 
        "params": [
            {
                "descr": "The date to format.", 
                "name": "date"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/format", 
        "syntax": "dateTimeFormat.format(date)", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat.resolvedOptions": {
        "descr": "Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.", 
        "name": "Intl.DateTimeFormat.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The values requested using the Unicode extension keys \"ca\" and \"nu\" or filled in as default values.", 
                "name": "calendar  numberingSystem"
            }, 
            {
                "descr": "The value provided for this property in the options argument; undefined (representing the runtime's default time zone) if none was provided. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "The value provided for this property in the options argument or filled in as a default.", 
                "name": "hour12"
            }, 
            {
                "descr": "The values resulting from format matching between the corresponding properties in the options argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.", 
                "name": "weekday  era  year  month  day  hour  minute  second  timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/resolvedoptions", 
        "syntax": "dateTimeFormat.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat.supportedLocalesOf": {
        "descr": "Returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.", 
        "name": "Intl.DateTimeFormat.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "An object that may have the following property:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/supportedlocalesof", 
        "syntax": "Intl.DateTimeFormat.supportedLocalesOf(locales [, options])", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat": {
        "descr": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.", 
        "name": "Intl.NumberFormat", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".", 
                "name": "style"
            }, 
            {
                "descr": "The currency to use in currency formatting. ", 
                "name": "currency"
            }, 
            {
                "descr": "How to display the currency in currency formatting. ", 
                "name": "currencyDisplay"
            }, 
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ", 
                "name": "useGrouping"
            }, 
            {
                "descr": "The minimum number of integer digits to use. ", 
                "name": "minimumIntegerDigits"
            }, 
            {
                "descr": "The minimum number of fraction digits to use. ", 
                "name": "minimumFractionDigits"
            }, 
            {
                "descr": "The maximum number of fraction digits to use. ", 
                "name": "maximumFractionDigits"
            }, 
            {
                "descr": "The minimum number of significant digits to use. ", 
                "name": "minimumSignificantDigits"
            }, 
            {
                "descr": "The maximum number of significant digits to use. ", 
                "name": "maximumSignificantDigits"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "supportedLocalesOf"
            }, 
            {
                "descr": "A reference to Intl.NumberFormat.", 
                "name": "constructor"
            }, 
            {
                "descr": "Getter; returns a function that formats a number according to the locale and formatting options of this NumberFormat object.", 
                "name": "format"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.", 
                "name": "resolvedOptions"
            }
        ], 
        "path": "javascript/global_objects/numberformat", 
        "syntax": "new Intl.NumberFormat([locales [, options]])Intl.NumberFormat", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat.format": {
        "descr": "Getter; returns a function that formats a number according to the locale and formatting options of this NumberFormat object.", 
        "name": "Intl.NumberFormat.format", 
        "params": [
            {
                "descr": "The number to format.", 
                "name": "number"
            }
        ], 
        "path": "javascript/global_objects/numberformat/format", 
        "syntax": "numberFormat.format(number)", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat.resolvedOptions": {
        "descr": "Returns a new object with properties reflecting the locale and number formatting options computed during initialization of this NumberFormat object.", 
        "name": "Intl.NumberFormat.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The value requested using the Unicode extension key \"nu\" or filled in as a default.", 
                "name": "numberingSystem"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.", 
                "name": "style  useGrouping"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "currency  currencyDisplay"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "minimumIntegerDigits  minimumFractionDigits  maximumFractionDigits"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "minimumSignificantDigits  maximumSignificantDigits"
            }
        ], 
        "path": "javascript/global_objects/numberformat/resolvedoptions", 
        "syntax": "numberFormat.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat.supportedLocalesOf": {
        "descr": "Returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.", 
        "name": "Intl.NumberFormat.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "An object that may have the following property:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/numberformat/supportedlocalesof", 
        "syntax": "Intl.NumberFormat.supportedLocalesOf(locales [, options])", 
        "type": "Intl"
    }, 
    "JSON": {
        "descr": "The JSON object contains methods for converting values to JavaScript Object Notation (JSON) and for converting JSON to values.", 
        "name": "JSON", 
        "params": [
            {
                "descr": "Parse a string as JSON, optionally transform the produced value and its properties, and return the value.", 
                "name": "Properties inherited from Object: constructor, __parent__, __proto__  Methods  parse"
            }, 
            {
                "descr": "Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.", 
                "name": "stringify"
            }
        ], 
        "path": "javascript/global_objects/json", 
        "syntax": "JSON = null    or true or false    or JSONNumber    or JSONString    or JSONObject    or JSONArrayJSONNumber = - PositiveNumber          or PositiveNumberPositiveNumber = DecimalNumber              or DecimalNumber . Digits              or DecimalNumber . Digits ExponentPart              or DecimalNumber ExponentPartDecimalNumber = 0             or OneToNine DigitsExponentPart = e Exponent            or E ExponentExponent = Digits        or + Digits        or - DigitsDigits = Digit      or Digits DigitDigit = 0 through 9OneToNine = 1 through 9JSONString = \"\"          or \" StringCharacters \"StringCharacters = StringCharacter                or StringCharacters StringCharacterStringCharacter = any character                  except \" or \\ or U+0000 through U+001F               or EscapeSequenceEscapeSequence = \\\" or \\/ or \\\\ or \\b or \\f or \\n or \\r or \\t              or \\u HexDigit HexDigit HexDigit HexDigitHexDigit = 0 through 9        or A through F        or a through fJSONObject = { }          or { Members }Members = JSONString : JSON       or Members , JSONString : JSONJSONArray = [ ]         or [ ArrayElements ]ArrayElements = JSON             or ArrayElements , JSON Insignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters.", 
        "type": "JSON"
    }, 
    "JSON.parse": {
        "descr": "Parse a string as JSON, optionally transforming the value produced by parsing.", 
        "name": "JSON.parse", 
        "params": [
            {
                "descr": "The string to parse as JSON. See the JSON object for a description of JSON syntax.", 
                "name": "text"
            }, 
            {
                "descr": "If a function, prescribes how the value originally produced by parsing is transformed, before being returned.", 
                "name": "reviver"
            }
        ], 
        "path": "javascript/global_objects/json/parse", 
        "syntax": "JSON.parse(text[, reviver])", 
        "type": "JSON"
    }, 
    "JSON.stringify": {
        "descr": "Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.", 
        "name": "JSON.stringify", 
        "params": [
            {
                "descr": "The value to convert to a JSON string.", 
                "name": "value"
            }, 
            {
                "descr": "If a function, transforms values and properties encountered while stringifying; if an array, specifies the set of properties included in objects in the final string. ", 
                "name": "replacer"
            }, 
            {
                "descr": "Causes the resulting string to be pretty-printed.", 
                "name": "space"
            }
        ], 
        "path": "javascript/global_objects/json/stringify", 
        "syntax": "JSON.stringify(value[, replacer [, space]])", 
        "type": "JSON"
    }, 
    "Location": {
        "descr": "The Location interface represents the location of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.", 
        "name": "Location", 
        "params": [
            {
                "descr": "Is a DOMString containing the whole URL.", 
                "name": "URLUtils.href"
            }, 
            {
                "descr": "Is a DOMString containing the protocol scheme of the URL, including the final ':'.", 
                "name": "URLUtils.protocol"
            }, 
            {
                "descr": "Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL.", 
                "name": "URLUtils.host"
            }, 
            {
                "descr": "Is a DOMString containing the domain of the URL.", 
                "name": "URLUtils.hostname"
            }, 
            {
                "descr": "Is a DOMString containing the port number of the URL.", 
                "name": "URLUtils.port"
            }, 
            {
                "descr": "Is a DOMString containing an initial '/' followed by the path of the URL.", 
                "name": "URLUtils.pathname"
            }, 
            {
                "descr": "Is a DOMString containing a '?' followed by the parameters of the URL.", 
                "name": "URLUtils.search"
            }, 
            {
                "descr": "Is a DOMString containing a '#' followed by the fragment identifier of the URL.", 
                "name": "URLUtils.hash"
            }, 
            {
                "descr": "Is a DOMString containing the username specified before the domain name.", 
                "name": "URLUtils.username"
            }, 
            {
                "descr": "Is a DOMString containing the password specified before the domain name.", 
                "name": "URLUtils.password"
            }, 
            {
                "descr": "Returns a DOMString containing the canonical form of the origin of the specific location.", 
                "name": "URLUtils.origin Read only"
            }, 
            {
                "descr": "Loads the resource at the URL provided in parameter.", 
                "name": "Location.assign()"
            }, 
            {
                "descr": "Reloads the resource from the current URL. ", 
                "name": "Location.reload()"
            }, 
            {
                "descr": "Replaces the current resource with the one at the provided URL. ", 
                "name": "Location.replace()"
            }, 
            {
                "descr": "Returns a DOMString containing the whole URL. ", 
                "name": "URLUtils.toString()"
            }
        ], 
        "path": "dom/location", 
        "syntax": "Window interface have such a linked Location, accessible via Document.location and Window.location respectively. Properties The Location interface doesn't inherit any property, but implements those from URLUtils.  URLUtils.href  Is a DOMString containing the whole URL.  URLUtils.protocol  Is a DOMString containing the protocol scheme of the URL, including the final ':'.  URLUtils.host  Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL.  URLUtils.hostname  Is a DOMString containing the domain of the URL.  URLUtils.port  Is a DOMString containing the port number of the URL.  URLUtils.pathname  Is a DOMString containing an initial '/' followed by the path of the URL.  URLUtils.search  Is a DOMString containing a '?' followed by the parameters of the URL.  URLUtils.hash  Is a DOMString containing a '#' followed by the fragment identifier of the URL.  URLUtils.username  Is a DOMString containing the username specified before the domain name.  URLUtils.password  Is a DOMString containing the password specified before the domain name.  URLUtils.origin", 
        "type": "Location"
    }, 
    "Location.assign": {
        "descr": "The Location.assign()method loading the object at the URL providing in parameter.", 
        "name": "Location.assign", 
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.", 
                "name": "url"
            }
        ], 
        "path": "dom/location.assign", 
        "syntax": "object.assign(url);", 
        "type": "Location"
    }, 
    "Location.reload": {
        "descr": "The Location.reload()method Reloads the resource from the current URL. Its optional unique parameter is a Boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache.", 
        "name": "Location.reload", 
        "params": [
            {
                "descr": "Is a Boolean flag, which, when it is true, causes the page to always be reloaded from the server. ", 
                "name": "forcedReload Optional"
            }
        ], 
        "path": "dom/location.reload", 
        "syntax": "object.reload(forcedReload);", 
        "type": "Location"
    }, 
    "Location.replace": {
        "descr": "The Location.replace()method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.", 
        "name": "Location.replace", 
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.", 
                "name": "url"
            }
        ], 
        "path": "dom/location.replace", 
        "syntax": "object.replace(url);", 
        "type": "Location"
    }, 
    "Map": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Map", 
        "params": [], 
        "path": "javascript/global_objects/map", 
        "syntax": "Map objects are simple key/value maps. Any value (both objects and primitive values) may be used as either a key or a value.", 
        "type": "Global Objects"
    }, 
    "Math.abs": {
        "descr": "The Math.abs() function returns the absolute value of a number.", 
        "name": "Math.abs", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/abs", 
        "syntax": "var abs = Math.abs(x);", 
        "type": "Math"
    }, 
    "Math.acos": {
        "descr": "The Math.acos() function returns the arccosine (in radians) of a number.", 
        "name": "Math.acos", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/acos", 
        "syntax": "Math.acos(x)", 
        "type": "Math"
    }, 
    "Math.acosh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.acosh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/acosh", 
        "syntax": "Math.acosh()", 
        "type": "Math"
    }, 
    "Math.asin": {
        "descr": "The Math.asin() function returns the arcsine (in radians) of a number.", 
        "name": "Math.asin", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/asin", 
        "syntax": "Math.asin(x)", 
        "type": "Math"
    }, 
    "Math.asinh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.asinh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/asinh", 
        "syntax": "Math.asinh()", 
        "type": "Math"
    }, 
    "Math.atan": {
        "descr": "The Math.atan() function returns the arctangent (in radians) of a number.", 
        "name": "Math.atan", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/atan", 
        "syntax": "Math.atan(x)", 
        "type": "Math"
    }, 
    "Math.atan2": {
        "descr": "The Math.atan2() function returns the arctangent of the quotient of its arguments.", 
        "name": "Math.atan2", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "y, x"
            }
        ], 
        "path": "javascript/global_objects/math/atan2", 
        "syntax": "Math.atan2(y, x)", 
        "type": "Math"
    }, 
    "Math.atanh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.atanh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/atanh", 
        "syntax": "Math.atanh()", 
        "type": "Math"
    }, 
    "Math.cbrt": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.cbrt", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cbrt", 
        "syntax": "Math.cbrt()", 
        "type": "Math"
    }, 
    "Math.ceil": {
        "descr": "The Math.ceil() function returns the smallest integer greater than or equal to a number.", 
        "name": "Math.ceil", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/ceil", 
        "syntax": "Math.ceil(x)", 
        "type": "Math"
    }, 
    "Math.cos": {
        "descr": "The Math.cos() function returns the cosine of a number.", 
        "name": "Math.cos", 
        "params": [
            {
                "descr": "A number given in unit of radians.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cos", 
        "syntax": "Math.cos(x)", 
        "type": "Math"
    }, 
    "Math.cosh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.cosh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cosh", 
        "syntax": "Math.cosh()", 
        "type": "Math"
    }, 
    "Math.exp": {
        "descr": "The Math.exp() function returns Ex, where x is the argument, and E is Euler's constant, the base of the natural logarithms.", 
        "name": "Math.exp", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/exp", 
        "syntax": "Math.exp(x)", 
        "type": "Math"
    }, 
    "Math.expm1": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.expm1", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/expm1", 
        "syntax": "Math.expm1()", 
        "type": "Math"
    }, 
    "Math.floor": {
        "descr": "The Math.floor() function returns the largest integer less than or equal to a number.", 
        "name": "Math.floor", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/floor", 
        "syntax": "Math.floor(x)", 
        "type": "Math"
    }, 
    "Math.fround": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.fround", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/fround", 
        "syntax": "Math.fround()", 
        "type": "Math"
    }, 
    "Math.hypot": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.hypot", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/hypot", 
        "syntax": "Math.hypot()", 
        "type": "Math"
    }, 
    "Math.imul": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.imul", 
        "params": [
            {
                "descr": "First number.", 
                "name": "a"
            }, 
            {
                "descr": "Second number.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/math/imul", 
        "syntax": "Math.imul()", 
        "type": "Math"
    }, 
    "Math.log": {
        "descr": "The Math.log() function returns the natural logarithm (base E) of a number.", 
        "name": "Math.log", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log", 
        "syntax": "Math.log(x)", 
        "type": "Math"
    }, 
    "Math.log10": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.log10", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log10", 
        "syntax": "Math.log10()", 
        "type": "Math"
    }, 
    "Math.log1p": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.log1p", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log1p", 
        "syntax": "Math.log1p()", 
        "type": "Math"
    }, 
    "Math.log2": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.log2", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log2", 
        "syntax": "Math.log2()", 
        "type": "Math"
    }, 
    "Math.max": {
        "descr": "The Math.max() function returns the largest of zero or more numbers.", 
        "name": "Math.max", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/max", 
        "syntax": "Math.max([value1[,value2, ...]])", 
        "type": "Math"
    }, 
    "Math.min": {
        "descr": "The Math.min() function returns the smallest of zero or more numbers.", 
        "name": "Math.min", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/min", 
        "syntax": "Math.min([value1[,value2, ...]])", 
        "type": "Math"
    }, 
    "Math.pow": {
        "descr": "The Math.pow() function returns the base to the exponent Power, that is, baseexponent.", 
        "name": "Math.pow", 
        "params": [
            {
                "descr": "The base number.", 
                "name": "base"
            }, 
            {
                "descr": "The exponent used to raise the base.", 
                "name": "exponent"
            }
        ], 
        "path": "javascript/global_objects/math/pow", 
        "syntax": "Math.pow(base, exponent)", 
        "type": "Math"
    }, 
    "Math.random": {
        "descr": "The Math.random() function returns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range.", 
        "name": "Math.random", 
        "params": [], 
        "path": "javascript/global_objects/math/random", 
        "syntax": "Math.random()", 
        "type": "Math"
    }, 
    "Math.round": {
        "descr": "The Math.round() function returns the value of a number rounded to the nearest integer.", 
        "name": "Math.round", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/round", 
        "syntax": "Math.round(x)", 
        "type": "Math"
    }, 
    "Math.sign": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.sign", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sign", 
        "syntax": "Math.sign()", 
        "type": "Math"
    }, 
    "Math.sin": {
        "descr": "The Math.sin() function returns the sine of a number.", 
        "name": "Math.sin", 
        "params": [
            {
                "descr": "A number (given in radians).", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sin", 
        "syntax": "Math.sin(x)", 
        "type": "Math"
    }, 
    "Math.sinh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.sinh", 
        "params": [
            {
                "descr": "A number (given in radians).", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sinh", 
        "syntax": "Math.sinh()", 
        "type": "Math"
    }, 
    "Math.sqrt": {
        "descr": "The Math.sqrt() function returns the square root (x\\sqrt{x}) of a number.", 
        "name": "Math.sqrt", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sqrt", 
        "syntax": "Math.sqrt(x)", 
        "type": "Math"
    }, 
    "Math.tan": {
        "descr": "The Math.tan() function returns the tangent of a number.", 
        "name": "Math.tan", 
        "params": [
            {
                "descr": "A number representing an angle in radians.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/tan", 
        "syntax": "Math.tan(x)", 
        "type": "Math"
    }, 
    "Math.tanh": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.tanh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/tanh", 
        "syntax": "Math.tanh()", 
        "type": "Math"
    }, 
    "Math.trunc": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Math.trunc", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/trunc", 
        "syntax": "Math.trunc()", 
        "type": "Math"
    }, 
    "MediaQueryList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaQueryList", 
        "params": [
            {
                "descr": "The MediaQueryListListener to invoke when the media query's evaluated result changes.", 
                "name": "listener"
            }, 
            {
                "descr": "The MediaQueryListListener to stop calling on changes to the media query's evaluated result.", 
                "name": "listener"
            }
        ], 
        "path": "dom/mediaquerylist", 
        "syntax": "MediaQueryList object maintains a list of media queries on a document", 
        "type": "Miscellaneous"
    }, 
    "MediaQueryListListener": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaQueryListListener", 
        "params": [
            {
                "descr": "The MediaQueryList for which the evaluated result changed.", 
                "name": "mql"
            }
        ], 
        "path": "dom/mediaquerylistlistener", 
        "syntax": "MediaQueryList object maintains a list of media queries on a document", 
        "type": "Miscellaneous"
    }, 
    "MediaSource": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource", 
        "params": [
            {
                "descr": "Is a SourceBufferList containing...", 
                "name": "MediaSource.sourceBuffers Read only"
            }, 
            {
                "descr": "Is a SourceBufferList containing...", 
                "name": "MediaSource.activeSourceBuffers Read only"
            }, 
            {
                "descr": "Is an enumerated values ...", 
                "name": "MediaSource.readyState Read only"
            }, 
            {
                "descr": "Is an unrestricted double ...", 
                "name": "MediaSource.duration"
            }, 
            {
                "descr": "Constructs and returns a MediaSource object with no associated source buffers.", 
                "name": "MediaSource() Read only"
            }, 
            {
                "descr": "Returns a Boolean value indicating if the given MIME type is supported by the specific implementation", 
                "name": "MediaSource.isTypeSupported()"
            }, 
            {
                "descr": "Creates, associates with this MediaSource object, and returns a SourceBuffer of the given MIME type.", 
                "name": "MediaSource.addSourceBuffer()"
            }, 
            {
                "descr": "Removes the given SourceBuffer from the list of buffers associated with this MediaSource object.", 
                "name": "MediaSource.removeSourceBuffer()"
            }, 
            {
                "descr": "Signals the end of the stream, eventually with an error.", 
                "name": "MediaSource.endOfStream()"
            }
        ], 
        "path": "dom/mediasource", 
        "syntax": "MediaSource interface represents the source of media data for an HTMLMediaElement", 
        "type": "Media"
    }, 
    "MediaStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaStream", 
        "params": [
            {
                "descr": "Is a Boolean value with a value of true if the ended event has been fired on the object, meaning that the stream has been completely read, or false if the end of hte stream has not been reached.", 
                "name": "MediaStream.ended Read only"
            }, 
            {
                "descr": "Is a DOMString containing 36 characters denoting a unique identifier (GUID) for the object.", 
                "name": "MediaStream.id Read only"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an addtrack event is fired on the object, that is when a new MediaStreamTrack object is added.", 
                "name": "MediaStream.onaddtrack"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an ended event is fired on the object, that is when the streaming is terminating.", 
                "name": "MediaStream.onended"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an removetrack event is fired on the object, that is when a MediaStreamTrack object is removed from it.", 
                "name": "MediaStream.onremovetrack"
            }, 
            {
                "descr": "Stores a copy of the MediaStreamTrack given as argument. ", 
                "name": "MediaStream.addTrack()"
            }, 
            {
                "descr": "Return a clone of the MediaStream objet. ", 
                "name": "MediaStream.clone()"
            }, 
            {
                "descr": "Returns a list of the MediaStreamTrack stored in the MediaStream object that have their kind attribute set to \"audio\". ", 
                "name": "MediaStream.getAudioTracks()"
            }, 
            {
                "descr": "Returns the track whose id corresponds to the one given in parameters, trackid. ", 
                "name": "MediaStream.getTrackById()"
            }, 
            {
                "descr": "Returns a list of the MediaStreamTrack stored in the MediaStream object that have their kind attribute set to \"video\". ", 
                "name": "MediaStream.getVideoTracks()"
            }, 
            {
                "descr": "Removes the MediaStreamTrack given as argument. ", 
                "name": "MediaStream.removeTrack()"
            }
        ], 
        "path": "dom/mediastream", 
        "syntax": "MediaStreaminterface represents a stream of media content. A stream consists of several tracks, like video or audio tracks. Attributes  MediaStream.ended Read only   Is a Boolean value with a value of true if the ended", 
        "type": "Media"
    }, 
    "MediaStreamTrack": {
        "descr": "Draft This page is not complete.", 
        "name": "MediaStreamTrack", 
        "params": [
            {
                "descr": "Is a Boolean value with a value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.", 
                "name": "MediaStreamTrack.enabled"
            }, 
            {
                "descr": "Is a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.", 
                "name": "MediaStreamTrack.id Read only"
            }, 
            {
                "descr": "Is a DOMString set to \"audio\" if the track is an audio track and to \"video\", if it is a video track. ", 
                "name": "MediaStreamTrack.kind Read only"
            }, 
            {
                "descr": "Is a DOMString containing a user agent-assigned label that identifies the track source, as in \"internal microphone\". ", 
                "name": "MediaStreamTrack.label Read only"
            }, 
            {
                "descr": "Is a boolean value with a value of true if the track is muted, false otherwise.", 
                "name": "MediaStreamTrack.muted Read only"
            }, 
            {
                "descr": "Is a boolean value with a value of true if the track is readonly (such a video file source or a camera that settings can't be modified),false otherwise.", 
                "name": "MediaStreamTrack.readonly Read only"
            }, 
            {
                "descr": "Is an enumerated value that gives the status of the track. ", 
                "name": "MediaStreamTrack.readyState Read only"
            }, 
            {
                "descr": "Is a boolean value with a value of true if the track is sourced by a RTCPeerConnection, false otherwise.", 
                "name": "MediaStreamTrack.remote Read only"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an started event is fired on the object, that is when a new MediaStreamTrack object is added.", 
                "name": "MediaStreamTrack.onstarted"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an mute event is fired on the object, that is when the streaming is terminating.", 
                "name": "MediaStreamTrack.onmute"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an unmute event is fired on the object, that is when a MediaStreamTrack object is removed from it.", 
                "name": "MediaStreamTrack.onunmute"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an overconstrained event is fired on the object, that is when a MediaStreamTrack object is removed from it.", 
                "name": "MediaStreamTrack.onoverconstrained"
            }, 
            {
                "descr": "Is a EventHandler containing the action to perform when an ended event is fired on the object, that is when a MediaStreamTrack object is removed from it.", 
                "name": "MediaStreamTrack.oneended"
            }, 
            {
                "descr": "Returns the track whose id corresponds to the one given in parameters, trackid. ", 
                "name": "MediaStreamTrack.appendConstraint()"
            }, 
            {
                "descr": "Stores a copy of the MediaStreamTrack given as argument. ", 
                "name": "MediaStreamTrack.applyConstraints()"
            }, 
            {
                "descr": "Removes the MediaStreamTrack given as argument. ", 
                "name": "MediaStreamTrack.constraints()"
            }, 
            {
                "descr": "Returns a list of the MediaStreamTrack stored in the MediaStream object that have their kind attribute set to \"audio\". ", 
                "name": "MediaStreamTrack.getConstraints()"
            }, 
            {
                "descr": "Returns a list of the MediaStreamTrack stored in the MediaStream object that have their kind attribute set to \"video\". ", 
                "name": "MediaStreamTrack.stop()"
            }
        ], 
        "path": "dom/mediastreamtrack", 
        "syntax": "MediaStreaminterface represents a stream of media content. A stream consists of several tracks, like video or audio tracks. Properties  MediaStreamTrack.enabled  Is a Boolean value with a value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.  MediaStreamTrack.id Read only   Is a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.  MediaStreamTrack.kind", 
        "type": "Media"
    }, 
    "Member Operators": {
        "descr": "Property accessors provide access to an object's properties.", 
        "name": "Member Operators", 
        "params": [], 
        "path": "javascript/operators/member_operators", 
        "syntax": "x = eval('document.forms.form_name.elements.' + strFormControl + '.value');", 
        "type": "Operators"
    }, 
    "MouseEvent.altKey": {
        "descr": "The altKey property indicates if the alt key was pressed (true) or not (false) when the event occured.", 
        "name": "MouseEvent.altKey", 
        "params": [], 
        "path": "dom/mouseevent.altkey", 
        "syntax": "var altKeyPressed = instanceOfMouseEvent.altKey Value A boolean Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.button": {
        "descr": "The button property indicates which button was pressed on the mouse to trigger the event.", 
        "name": "MouseEvent.button", 
        "params": [], 
        "path": "dom/mouseevent.button", 
        "syntax": "var buttonPressed = instanceOfMouseEvent.button Value A number representing a given button: 0 : Left button 1 : Middle button (if present) 2", 
        "type": "Events"
    }, 
    "MouseEvent.buttons": {
        "descr": "The buttons property indicates which buttons were pressed on the mouse to trigger the event.", 
        "name": "MouseEvent.buttons", 
        "params": [], 
        "path": "dom/mouseevent.buttons", 
        "syntax": "var buttonPressed = instanceOfMouseEvent.button Value A number representing one or more buttons. For more than one button pressed, the values are combined. 1\u00a0 : Left button 2\u00a0 : Right button 4\u00a0 : Wheel button 8\u00a0 : 4th button (typically the \"Browser Back\" button) 16", 
        "type": "Events"
    }, 
    "MouseEvent.clientX": {
        "descr": "The clientX property provides the X coordinate of the mouse pointer in local (DOM content) coordinates.", 
        "name": "MouseEvent.clientX", 
        "params": [], 
        "path": "dom/mouseevent.clientx", 
        "syntax": "var x = instanceOfMouseEvent.clientX Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.clientY": {
        "descr": "The clientY property provides the Y coordinate of the mouse pointer in local (DOM content) coordinates.", 
        "name": "MouseEvent.clientY", 
        "params": [], 
        "path": "dom/mouseevent.clienty", 
        "syntax": "var y = instanceOfMouseEvent.clientY Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.ctrlKey": {
        "descr": "The ctrlKey property indicates if the control key was pressed (true) or not (false) when the event occured.", 
        "name": "MouseEvent.ctrlKey", 
        "params": [], 
        "path": "dom/mouseevent.ctrlkey", 
        "syntax": "var ctrlKeyPressed = instanceOfMouseEvent.ctrlKey Value A boolean Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.metaKey": {
        "descr": "The metaKey property indicates if the meta key was pressed (true) or not (false) when the event occured.", 
        "name": "MouseEvent.metaKey", 
        "params": [], 
        "path": "dom/mouseevent.metakey", 
        "syntax": "var metaKeyPressed = instanceOfMouseEvent.metaKey Value A boolean Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.movementX": {
        "descr": "The movementX property provides the shift in the X coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementX = currentEvent.screenX - previousEvent.screenX.", 
        "name": "MouseEvent.movementX", 
        "params": [], 
        "path": "dom/mouseevent.movementx", 
        "syntax": "var xShift = instanceOfMouseEvent.movementX Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.movementY": {
        "descr": "The movementY property provides the shift in the Y coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementY = currentEvent.screenY - previousEvent.screenY.", 
        "name": "MouseEvent.movementY", 
        "params": [], 
        "path": "dom/mouseevent.movementy", 
        "syntax": "var yShift = instanceOfMouseEvent.movementY Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.relatedTarget": {
        "descr": "The relatedTarget property is the secondary target for the event, if there is one.", 
        "name": "MouseEvent.relatedTarget", 
        "params": [], 
        "path": "dom/mouseevent.relatedtarget", 
        "syntax": "var x = instanceOfMouseEvent.screenX Value An EventTarget object or null. Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.screenX": {
        "descr": "The screenX property provides the X coordinate of the mouse pointer in global (screen) coordinates.", 
        "name": "MouseEvent.screenX", 
        "params": [], 
        "path": "dom/mouseevent.screenx", 
        "syntax": "var x = instanceOfMouseEvent.screenX Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.screenY": {
        "descr": "The screenY property provides the Y coordinate of the mouse pointer in global (screen) coordinates.", 
        "name": "MouseEvent.screenY", 
        "params": [], 
        "path": "dom/mouseevent.screeny", 
        "syntax": "var y = instanceOfMouseEvent.screenY Value A number Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "MouseEvent.shiftKey": {
        "descr": "The shiftKey property indicates if the shift key was pressed (true) or not (false) when the event occurred.", 
        "name": "MouseEvent.shiftKey", 
        "params": [], 
        "path": "dom/mouseevent.shiftkey", 
        "syntax": "var shiftKeyPressed = instanceOfMouseEvent.shiftKey Value A boolean Specifications Specification Status Comment Document Object Model (DOM) Level 2 Events Specification Recommendation   Document Object Model (DOM) Level 3 Events Specification Working Draft   UI Events Working Draft Extend DOM3 Pointer Lock Working Draft Extend the MouseEvent", 
        "type": "Events"
    }, 
    "Multiple attribute selector [name=\"value\"][name2=\"value2\"]": {
        "descr": "", 
        "name": "Multiple attribute selector [name=\"value\"][name2=\"value2\"]", 
        "params": [], 
        "path": "jquery/multiple-attribute-selector", 
        "syntax": "attributeMultiple selector  Description: Matches elements that match all of the specified attribute filters.   version added: 1.0jQuery( \"[attributeFilter1][attributeFilter2][attributeFilterN]\" ) attributeFilter1: An attribute filter.", 
        "type": "Selectors"
    }, 
    "Multiple selector (\u201cselector1, selector2, selectorN\u201d": {
        "descr": "You can specify any number of selectors to combine into a single result. This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .add() method.", 
        "name": "Multiple selector (\u201cselector1, selector2, selectorN\u201d", 
        "params": [], 
        "path": "jquery/multiple-selector", 
        "syntax": "multiple selector  Description: Selects the combined results of all the specified selectors.   version added: 1.0jQuery( \"selector1, selector2, selectorN\" ) selector1: Any valid selector.", 
        "type": "Selectors"
    }, 
    "NaN": {
        "descr": "The global NaN property is a value representing Not-A-Number.", 
        "name": "NaN", 
        "params": [], 
        "path": "javascript/global_objects/nan", 
        "syntax": "NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number \u2014 the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)", 
        "type": "Global Objects"
    }, 
    "NetworkInformation.connection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NetworkInformation.connection", 
        "params": [], 
        "path": "dom/networkinformation.connection", 
        "syntax": "NetworkInformation.connection read-only property represents a Connection containing information about the system's connection, such as the current bandwidth of the user's device or whether the connection is metered. This could be used to select high definition content or low definition content based on the user's connection. Syntax connectionInfo = navigator.connection Specifications Specification Status Comment Network Information API Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 12.0 moz (see notes) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 12.0 moz (see notes) Not supported Not supported Not supported  Gecko notes The Network API can be disabled using the dom.network.enabled", 
        "type": "Network Information"
    }, 
    "Next adjacent selector (\u201cprev + next\u201d": {
        "descr": "One important point to consider with both the next adjacent sibling selector (prev + next) and the general sibling selector (prev ~ siblings) is that the elements on either side of the combinator must share the same parent.", 
        "name": "Next adjacent selector (\u201cprev + next\u201d", 
        "params": [], 
        "path": "jquery/next-adjacent-selector", 
        "syntax": "next adjacent selector  Description: Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".   version added: 1.0jQuery( \"prev + next\" ) prev: Any valid selector.", 
        "type": "Selectors"
    }, 
    "Next siblings selector (\u201cprev ~ siblings\u201d": {
        "descr": "The notable difference between (prev + next) and (prev ~ siblings) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.", 
        "name": "Next siblings selector (\u201cprev ~ siblings\u201d", 
        "params": [], 
        "path": "jquery/next-siblings-selector", 
        "syntax": "next siblings selector  Description: Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.   version added: 1.0jQuery( \"prev ~ siblings\" ) prev: Any valid selector.", 
        "type": "Selectors"
    }, 
    "Node": {
        "descr": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.", 
        "name": "Node", 
        "params": [
            {
                "descr": "...", 
                "name": "Node.attributes"
            }, 
            {
                "descr": "Returns a DOMString representing the base URL. ", 
                "name": "Node.baseURI Read only"
            }, 
            {
                "descr": "(Not available to web content.) The read-only nsIURI object representing the base URI for the element.", 
                "name": "Node.baseURIObject"
            }, 
            {
                "descr": "Returns a live NodeList containing all the children of this node. ", 
                "name": "Node.childNodes Read only"
            }, 
            {
                "descr": "Returns a Node representing the first direct child node of the node, or null if the node has no child.", 
                "name": "Node.firstChild Read only"
            }, 
            {
                "descr": "Returns a Node representing the last direct child node of the node, or null if the node has no child.", 
                "name": "Node.lastChild Read only"
            }, 
            {
                "descr": "Returns a DOMString representing the local part of the qualified name of an element. ", 
                "name": "Node.localName Read only"
            }, 
            {
                "descr": "The namespace URI of this node, or null if it is no namespace. ", 
                "name": "Node.namespaceURI Read only"
            }, 
            {
                "descr": "Returns a Node representing the next node in the tree, or null if there isn't such node.", 
                "name": "Node.nextSibling Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the name of the Node. ", 
                "name": "Node.nodeName Read only"
            }, 
            {
                "descr": "A nsIPrincipal representing the node principal.", 
                "name": "Node.nodePrincipal"
            }, 
            {
                "descr": "Returns an unsigned short representing the type of the node. ", 
                "name": "Node.nodeTypeRead only"
            }, 
            {
                "descr": "Is a DOMString representing the value of an object. ", 
                "name": "Node.nodeValue"
            }, 
            {
                "descr": "Returns the Document that this node belongs to. ", 
                "name": "Node.ownerDocument Read only"
            }, 
            {
                "descr": "Returns a Node that is the parent of this node. ", 
                "name": "Node.parentNode Read only"
            }, 
            {
                "descr": "Returns an Element that is the parent of this node. ", 
                "name": "Node.parentElement Read only"
            }, 
            {
                "descr": "Is a DOMString representing the namespace prefix of the node, or null if no prefix is specified. ", 
                "name": "Node.prefix"
            }, 
            {
                "descr": "Returns a Node representing the previous node in the tree, or null if there isn't such node.", 
                "name": "Node.previousSibling Read only"
            }, 
            {
                "descr": "Is a DOMString representing the textual content of an element and all its descendants.", 
                "name": "Node.textContent"
            }, 
            {
                "descr": "Insert a Node as the last child node of this element.", 
                "name": "Node.appendChild()"
            }, 
            {
                "descr": "Clone a Node, and optionally, all of its contents. ", 
                "name": "Node.cloneNode()"
            }, 
            {
                "descr": "...", 
                "name": "Node.compareDocumentPosition()   Node.contains()   Node.getFeature()"
            }, 
            {
                "descr": "Allows a user to get some DOMUserData from the node.", 
                "name": "Node.getUserData()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has any attributes, or not.", 
                "name": "Node.hasAttributes()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has any child nodes, or not.", 
                "name": "Node.hasChildNodes()"
            }, 
            {
                "descr": "Inserts the first Node given in a parameter immediately before the second, child of this element, Node.", 
                "name": "Node.insertBefore"
            }, 
            {
                "descr": "Returns a Boolean flag containing the result of a test whether the DOM implementation implements a specific feature and this feature is supported by the specific node.", 
                "name": "Node.isDefaultNamespace   Node.isEqualNode   Node.isSameNode    Node.isSupported"
            }, 
            {
                "descr": "Clean up all the text nodes under this element (merge adjacent, remove empty).", 
                "name": "Node.lookupPrefix   Node.lookupNamespaceURI   Node.normalize"
            }, 
            {
                "descr": "Removes a child node from the current element, which must be a child of the current node.", 
                "name": "Node.removeChild"
            }, 
            {
                "descr": "Replaces one child Node of the current one with the second one given in parameter.", 
                "name": "Node.replaceChild"
            }, 
            {
                "descr": "Allows a user to attach, or remove, DOMUserData to the node.", 
                "name": "Node.setUserData"
            }, 
            {
                "descr": "The parent node (Node Object).", 
                "name": "parentNode"
            }, 
            {
                "descr": "The callback function (Function).", 
                "name": "callbackFunction"
            }
        ], 
        "path": "dom/node", 
        "syntax": "CDATASection inherit), ProcessingInstruction", 
        "type": "Node"
    }, 
    "Node.appendChild": {
        "descr": "Adds a node to the end of the list of children of a specified parent node. If the node already exists it is removed from current parent node, then added to new parent node.", 
        "name": "Node.appendChild", 
        "params": [], 
        "path": "dom/node.appendchild", 
        "syntax": "var child = element.appendChild(child);", 
        "type": "Node"
    }, 
    "Node.attributes": {
        "descr": "Since Firefox 22, Node.attributes is no longer supported (not implemented by other browsers and removed from the spec). It is only supported on Element (Element.attributes).", 
        "name": "Node.attributes", 
        "params": [], 
        "path": "dom/node.attributes", 
        "syntax": "x=element.attributeName                    //if attributeName is a W3C defined attribute and an Attribute Node for the element (e.g., id),                                           //   x gets assigned the value of that Attribute Node                                           //if attributeName isn't a W3C defined attribute or an attribute node for the element,                                           //   x gets assigned the value of the attributeName property for element (JavaScript object)x=element.attributes.attributeName.value   // }if attributeName is an Attribute Node for the element, x gets assigned that node's value  element.attributes['attributeName'].value// }if attributeName isn't an Attribute Node, produce EXCEPTION  element.attributes[indexNumber].value    // }(same for indexing by indexNumber)x= element.getAttribute('attributeName')   // if attributeName is an Attribute Node for the element, x gets assigned its value                                           // if attributeName isn't an Attribute Node for the element, x gets assigned the null valueelement.attributeName= x                   //if attributeName is a W3C defined attribute and an attribute node for the element (e.g., id),                                           //   that Attribute Node gets assigned the value of x                                           //if attributeName isn't a W3C defined attribute or an attribute node for the element,                                            //   the element's (JavaScript object) attributeName property is assigned the value of xelement.attributes.attributeName.value   =x// }if attributeName is an Attribute Node for the element, it's assigned the value of xelement.attributes['attributeName'].value  // }if attributeName isn't an Attribute Node, produce EXCEPTIONelement.attributes[indexNumber].value      // }(same for indexing by indexNumber)element.setAttribute('attributeName', x)   // Creates an Attribute Node named attributeName for the element (if one doesn't exist),                                                  and assigns its value as xattributeMap= element.attributes           // Assigns to attributeMap a NameNodeMap collection of Attr nodes that are copies of the                                           // ones in the element's .attributes collection. Length is 0 if the element has no                                           // Attribute Nodes. The element.attributes syntax is read only.", 
        "type": "Node"
    }, 
    "Node.baseURI": {
        "descr": "Returns the absolute base URL of a node.", 
        "name": "Node.baseURI", 
        "params": [], 
        "path": "dom/node.baseuri", 
        "syntax": "var baseURI = node.baseURI; baseURI is a DOMString representing the base URL of the specified Node", 
        "type": "Node"
    }, 
    "Node.childNodes": {
        "descr": "childNodes  returns a collection of child nodes of the given element.", 
        "name": "Node.childNodes", 
        "params": [], 
        "path": "dom/node.childnodes", 
        "syntax": "var ndList = elementNodeReference.childNodes;  ndList is an ordered collection of node objects that are children of the current element. If the element has no children, then ndList contains no node. The ndList is a variable storing the node list of childNodes. Such list is of type NodeList. The childNodes attribute is read-only. Example // parg is an object reference to a <p> elementif ( parg.hasChildNodes() ) {  // So, first we check if the object is not empty, if the object has child nodes  var children = parg.childNodes;  for (var i = 0; i < children.length; i++) {    // do something with each child as children[i]    // NOTE: List is live, Adding or removing children will change the list  }}", 
        "type": "Node"
    }, 
    "Node.cloneNode": {
        "descr": "Returns a duplicate of the node on which this method was called.", 
        "name": "Node.cloneNode", 
        "params": [
            {
                "descr": "The node to be cloned.", 
                "name": "node"
            }, 
            {
                "descr": "The new node that will be a clone of node", 
                "name": "dupNode"
            }, 
            {
                "descr": "true if the children of the node should also be cloned, or false to clone only the specified node.", 
                "name": "deep Optional"
            }
        ], 
        "path": "dom/node.clonenode", 
        "syntax": "var dupNode = node.cloneNode(deep);", 
        "type": "Node"
    }, 
    "Node.compareDocumentPosition": {
        "descr": "API", 
        "name": "Node.compareDocumentPosition", 
        "params": [], 
        "path": "dom/node.comparedocumentposition", 
        "syntax": "node.compareDocumentPosition( otherNode )", 
        "type": "Node"
    }, 
    "Node.contains": {
        "descr": "Indicates whether a node is a descendant of a given node.", 
        "name": "Node.contains", 
        "params": [], 
        "path": "dom/node.contains", 
        "syntax": "node.contains( otherNode )", 
        "type": "Node"
    }, 
    "Node.firstChild": {
        "descr": "Returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.", 
        "name": "Node.firstChild", 
        "params": [], 
        "path": "dom/node.firstchild", 
        "syntax": "var childNode = node.firstChild; Description childNode is a reference to the first child of node if there is one, otherwise it's null. Example This example demonstrates the use of firstChild and how whitespace nodes might interfere with using this property. See the Notes section for more information about whitespace handling in Gecko DOM. <p id=\"para-01\">  <span>First span</span></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.firstChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "Node.hasAttributes": {
        "descr": "hasAttributes returns a boolean value of true or false, indicating if the current element has any attributes or not.", 
        "name": "Node.hasAttributes", 
        "params": [], 
        "path": "dom/node.hasattributes", 
        "syntax": "result = targetNode.hasAttributes();", 
        "type": "Node"
    }, 
    "Node.hasChildNodes": {
        "descr": "hasChildNodes returns a Boolean value indicating whether the current Node has child nodes or not.", 
        "name": "Node.hasChildNodes", 
        "params": [], 
        "path": "dom/node.haschildnodes", 
        "syntax": "node.hasChildNodes()", 
        "type": "Node"
    }, 
    "Node.insertBefore": {
        "descr": "Inserts the specified node before a reference element as a child of the current node.", 
        "name": "Node.insertBefore", 
        "params": [], 
        "path": "dom/node.insertbefore", 
        "syntax": "var insertedElement = parentElement.insertBefore(newElement, referenceElement);", 
        "type": "Node"
    }, 
    "Node.isDefaultNamespace": {
        "descr": "isDefaultNamespace accepts a namespace URI as an argument and returns true if the namespace is the default namespace on the given node or false if not.", 
        "name": "Node.isDefaultNamespace", 
        "params": [], 
        "path": "dom/node.isdefaultnamespace", 
        "syntax": "result = node.isDefaultNamespace(namespaceURI)", 
        "type": "Node"
    }, 
    "Node.isEqualNode": {
        "descr": "Tests whether two nodes are equal.", 
        "name": "Node.isEqualNode", 
        "params": [], 
        "path": "dom/node.isequalnode", 
        "syntax": "var isEqualNode = node.isEqualNode(arg);", 
        "type": "Node"
    }, 
    "Node.isSameNode": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Node.isSameNode", 
        "params": [], 
        "path": "dom/node.issamenode", 
        "syntax": "var isSameNode = node.isSameNode(other);", 
        "type": "Node"
    }, 
    "Node.lastChild": {
        "descr": "lastChild returns the last child of a node.", 
        "name": "Node.lastChild", 
        "params": [], 
        "path": "dom/node.lastchild", 
        "syntax": "var last_child = element.lastChild Description The last_child returned is a node. If its parent is an element, then the child is generally an Element node, a Text node, or a Comment node. Returns null if there are no child elements. Example var tr = document.getElementById(\"row1\");\n or var corner_td = tr.lastChild;);", 
        "type": "Node"
    }, 
    "Node.localName": {
        "descr": "Returns the local part of the qualified name of this node.", 
        "name": "Node.localName", 
        "params": [], 
        "path": "dom/node.localname", 
        "syntax": "name = element.localName name is the local name as a string (see Notes below for details) Example", 
        "type": "Node"
    }, 
    "Node.namespaceURI": {
        "descr": "The namespace URI of the node, or null if the node is not in a namespace (read-only). When the node is a document, it returns the XML namespace for the current document.", 
        "name": "Node.namespaceURI", 
        "params": [], 
        "path": "dom/node.namespaceuri", 
        "syntax": "namespace = node.namespaceURI namespace is a string that represents the namespace URI of the specified node. Example In this snippet, a node is being examined for its localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (node.localName == \"browser\" &&     node.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") {  // this is a XUL browser }", 
        "type": "Node"
    }, 
    "Node.nextSibling": {
        "descr": "Returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.", 
        "name": "Node.nextSibling", 
        "params": [], 
        "path": "dom/node.nextsibling", 
        "syntax": "nextNode = node.nextSibling Notes  Gecko-based browsers insert text nodes into a document to represent whitespace in the source markup. Therefore a node obtained, for example, using Node.firstChild()", 
        "type": "Node"
    }, 
    "Node.nodeName": {
        "descr": "Returns the name of the current node as a string.", 
        "name": "Node.nodeName", 
        "params": [], 
        "path": "dom/node.nodename", 
        "syntax": "var str = node.nodeName; str is a string variable storing the name of the current element. nodeName is a read-only attribute. Notes Here are the returned values for different types of nodes. Interface nodeName Attr same as Attr.name CDATASection \"#cdata-section\" Comment \"#comment\" Document \"#document\" DocumentFragment \"#document-fragment\" DocumentType same as DocumentType.name Element same as Element.tagName Entity entity name EntityReference name of entity reference Notation notation name ProcessingInstruction same as ProcessingInstruction.target text \"#text\" Example Given the following markup: <div id=\"d1\">hello world</div><input type=\"text\" id=\"t\"/> and the following script: var div1 = document.getElementById(\"d1\");\n or var text_field = document.getElementById(\"t\");\n or text_field.value = div1.nodeName;);", 
        "type": "Node"
    }, 
    "Node.nodeType": {
        "descr": "The read-only Node.nodeType property returns an unsigned short integer representing the type of the node.", 
        "name": "Node.nodeType", 
        "params": [], 
        "path": "dom/node.nodetype", 
        "syntax": "var type = node.nodeType; type is an unsigned short with one of the following values: Name Value ELEMENT_NODE 1 ATTRIBUTE_NODE  2 TEXT_NODE 3 CDATA_SECTION_NODE  4 ENTITY_REFERENCE_NODE  5 ENTITY_NODE  6 PROCESSING_INSTRUCTION_NODE 7 COMMENT_NODE 8 DOCUMENT_NODE 9 DOCUMENT_TYPE_NODE 10 DOCUMENT_FRAGMENT_NODE 11 NOTATION_NODE  12 Example This example checks if the first node inside the document element is a comment node, and if it is not, displays a message. var node = document.documentElement.firstChild;if (node.nodeType != Node.COMMENT_NODE)  console.log(\"You should comment your code well!\");", 
        "type": "Node"
    }, 
    "Node.normalize": {
        "descr": "Puts the specified node and all of its subtree into a \"normalized\" form. In a normalized subtree, no text nodes in the subtree are empty and there are no adjacent text nodes.", 
        "name": "Node.normalize", 
        "params": [], 
        "path": "dom/node.normalize", 
        "syntax": "element.normalize();", 
        "type": "Node"
    }, 
    "Node.ownerDocument": {
        "descr": "The ownerDocument property returns the top-level document object for this node.", 
        "name": "Node.ownerDocument", 
        "params": [], 
        "path": "dom/node.ownerdocument", 
        "syntax": "document = element.ownerDocument document is the document object parent of the current element. Example // given a node \"p\", get the top-level HTML child // of the document objectvar d = p.ownerDocument; var html = d.documentElement; Notes The document object returned by this property is the main object with which all the child nodes in the actual HTML document are created. If this property is used on a node that is itself a document, the result is null. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support ? ? ? ? ?   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  Gecko notes Starting in Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6), the ownerDocument", 
        "type": "Node"
    }, 
    "Node.parentElement": {
        "descr": "Returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.", 
        "name": "Node.parentElement", 
        "params": [], 
        "path": "dom/node.parentelement", 
        "syntax": "parentElement = node.parentElement parentElement is the parent element of the current node. This is always a DOM Element object, or null. Example if (node.parentElement) {    node.parentElement.style.color = \"red\";}", 
        "type": "Node"
    }, 
    "Node.parentNode": {
        "descr": "Returns the parent of the specified node in the DOM tree.", 
        "name": "Node.parentNode", 
        "params": [], 
        "path": "dom/node.parentnode", 
        "syntax": "parentNode = node.parentNode parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node. Example if (node.parentNode) {  // remove a node from the tree, unless   // it's not in the tree already  node.parentNode.removeChild(node);\n or });", 
        "type": "Node"
    }, 
    "Node.prefix": {
        "descr": "prefix returns the namespace prefix of the specified node, or null if no prefix is specified. This property is read only.", 
        "name": "Node.prefix", 
        "params": [], 
        "path": "dom/node.prefix", 
        "syntax": "string = element.prefix Examples The following alerts \"x\". <x:div onclick=\"alert(this.prefix)\"/>", 
        "type": "Node"
    }, 
    "Node.previousSibling": {
        "descr": "Returns the node immediately preceding the specified one in its parent's childNodes list, null if the specified node is the first in that list.", 
        "name": "Node.previousSibling", 
        "params": [], 
        "path": "dom/node.previoussibling", 
        "syntax": "previousNode = node.previousSibling; Example // <a><b1 id=\"b1\"/><b2 id=\"b2\"/></a>alert(document.getElementById(\"b1\").previousSibling);\n or  // nullalert(document.getElementById(\"b2\").previousSibling.id);\n or  // \"b1\");", 
        "type": "Node"
    }, 
    "Node.removeChild": {
        "descr": "Removes a child node from the DOM. Returns removed node.", 
        "name": "Node.removeChild", 
        "params": [], 
        "path": "dom/node.removechild", 
        "syntax": "var oldChild = element.removeChild(child);\n or element.removeChild(child);", 
        "type": "Node"
    }, 
    "Node.replaceChild": {
        "descr": "Replaces one child node of the specified element with another.", 
        "name": "Node.replaceChild", 
        "params": [], 
        "path": "dom/node.replacechild", 
        "syntax": "replacedNode = parentNode.replaceChild(newChild, oldChild);", 
        "type": "Node"
    }, 
    "Node.textContent": {
        "descr": "Gets or sets the text content of a node and its descendents.", 
        "name": "Node.textContent", 
        "params": [], 
        "path": "dom/node.textcontent", 
        "syntax": "var text = element.textContent;element.textContent = \"this is some sample text\"; Description textContent returns null if the element is a document, a document type, or a notation. To grab all of the text and CDATA data for the whole document, one could use document.documentElement.textContent. If the node is a CDATA section, a comment, a processing instruction, or a text node, textContent returns the text inside this node (the nodeValue). For other node types, textContent", 
        "type": "Node"
    }, 
    "NodeFilter.acceptNode": {
        "descr": "The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:", 
        "name": "NodeFilter.acceptNode", 
        "params": [
            {
                "descr": "Is a Node being the object to check against the filter.", 
                "name": "node"
            }
        ], 
        "path": "dom/nodefilter.acceptnode", 
        "syntax": "result = nodeFilter.acceptNode(node)", 
        "type": "Node"
    }, 
    "NodeIterator": {
        "descr": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.", 
        "name": "NodeIterator", 
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the NodeIterator was created.", 
                "name": "NodeIterator.root Read only"
            }, 
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. ", 
                "name": "NodeIterator.whatToShow Read only"
            }, 
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.", 
                "name": "NodeIterator.filter Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "NodeIterator.expandEntityReferences Read only"
            }, 
            {
                "descr": "Returns the Node to which the iterator is anchored.", 
                "name": "NodeIterator.referenceNode Read only"
            }, 
            {
                "descr": "Returns a Boolean flag that indicates whether the NodeFilter is anchored before, the flag being true, or after, the flag being false, the anchor node.", 
                "name": "NodeIterator.pointerBeforeReferenceNode Read only"
            }, 
            {
                "descr": "This operation is a no-op. It doesn't do anything. ", 
                "name": "NodeIterator.detach()"
            }, 
            {
                "descr": "Returns the previous Node in the document, or null if there are none.", 
                "name": "NodeIterator.previousNode()"
            }, 
            {
                "descr": "Returns the next Node in the document, or null if there are none.", 
                "name": "NodeIterator.nextNode()"
            }
        ], 
        "path": "dom/nodeiterator", 
        "syntax": "CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document", 
        "type": "Node"
    }, 
    "NodeIterator.detach": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "NodeIterator.detach", 
        "params": [], 
        "path": "dom/nodeiterator.detach", 
        "syntax": "nodeIterator.detach();", 
        "type": "Node"
    }, 
    "NodeIterator.filter": {
        "descr": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.", 
        "name": "NodeIterator.filter", 
        "params": [], 
        "path": "dom/nodeiterator.filter", 
        "syntax": "nodeFilter = nodeIterator.filter; Example var nodeIterator = document.createNodeIterator(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or nodeFilter = nodeIterator.filter;);", 
        "type": "Node"
    }, 
    "NodeIterator.nextNode": {
        "descr": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set. The first call to nextNode() returns the first node in the set.", 
        "name": "NodeIterator.nextNode", 
        "params": [], 
        "path": "dom/nodeiterator.nextnode", 
        "syntax": "node = nodeIterator.nextNode();", 
        "type": "Node"
    }, 
    "NodeIterator.pointerBeforeReferenceNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NodeIterator.pointerBeforeReferenceNode", 
        "params": [], 
        "path": "dom/nodeiterator.pointerbeforereferencenode", 
        "syntax": "NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false", 
        "type": "Node"
    }, 
    "NodeIterator.previousNode": {
        "descr": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.", 
        "name": "NodeIterator.previousNode", 
        "params": [], 
        "path": "dom/nodeiterator.previousnode", 
        "syntax": "node = nodeIterator.previousNode();", 
        "type": "Node"
    }, 
    "NodeIterator.referenceNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NodeIterator.referenceNode", 
        "params": [], 
        "path": "dom/nodeiterator.referencenode", 
        "syntax": "NodeIterator.referenceNode read-only returns the Node", 
        "type": "Node"
    }, 
    "NodeIterator.root": {
        "descr": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.", 
        "name": "NodeIterator.root", 
        "params": [], 
        "path": "dom/nodeiterator.root", 
        "syntax": "root = nodeIterator.root; Example var nodeIterator = document.createNodeIterator(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = nodeIterator.root; // document.body in this case);", 
        "type": "Node"
    }, 
    "NodeIterator.whatToShow": {
        "descr": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.", 
        "name": "NodeIterator.whatToShow", 
        "params": [], 
        "path": "dom/nodeiterator.whattoshow", 
        "syntax": "var nodeTypes = nodeIterator.whatToShow; The values that can be combined to form the bitmap are: Constant Numerical value Description NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes. NodeFilter.", 
        "type": "Node"
    }, 
    "NodeList.item": {
        "descr": "Returns a node from a NodeList by index.", 
        "name": "NodeList.item", 
        "params": [], 
        "path": "dom/nodelist.item", 
        "syntax": "nodeItem = nodeList.item(index)", 
        "type": "Node"
    }, 
    "Notification": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification", 
        "params": [
            {
                "descr": "The title that must be shown within the notification", 
                "name": "title"
            }, 
            {
                "descr": "An object that allows to configure the notification. ", 
                "name": "options Optional"
            }, 
            {
                "descr": "A string representing the current permission to display notifications. ", 
                "name": "Notification.permission Read only"
            }, 
            {
                "descr": "The direction used by the notification as defined within the constructor options.", 
                "name": "Notification.dir Read only"
            }, 
            {
                "descr": "The code lang used by the notification as defined within the constructor options.", 
                "name": "Notification.lang Read only"
            }, 
            {
                "descr": "The body string used by the notification as defined within the constructor options.", 
                "name": "Notification.body Read only"
            }, 
            {
                "descr": "The id of the notification (if any) as defined within the constructor options.", 
                "name": "Notification.tag Read only"
            }, 
            {
                "descr": "The URL of the image used as an icon as defined within the constructor options.", 
                "name": "Notification.icon Read only"
            }, 
            {
                "descr": "A handler for the click event. It is triggered each time the user clicks on the notification.", 
                "name": "Notification.onclick"
            }, 
            {
                "descr": "A handler for the show event. It is triggered when the notification is displayed.", 
                "name": "Notification.onshow"
            }, 
            {
                "descr": "A handler for the error event. It is triggered each time the notification encounters an error.", 
                "name": "Notification.onerror"
            }, 
            {
                "descr": "A handler for the close event. It is triggered when the user closes the notification.", 
                "name": "Notification.onclose"
            }, 
            {
                "descr": "This method is used to ask the user if he allows the page to display notifications.", 
                "name": "Notification.requestPermission()"
            }, 
            {
                "descr": "This method allows to programmatically close a notification.", 
                "name": "Notification.close()"
            }, 
            {
                "descr": "Register an event handler of a specific event type on the EventTarget.", 
                "name": "EventTarget.addEventListener ()"
            }, 
            {
                "descr": "Removes an event listener from the EventTarget.", 
                "name": "EventTarget.removeEventListener ()"
            }, 
            {
                "descr": "Dispatch an event to this EventTarget.", 
                "name": "EventTarget.dispatchEvent ()"
            }
        ], 
        "path": "dom/notification", 
        "syntax": "Notification object is used to configure and display desktop notifications to the user. Constructor var notification = new Notification(title, options)", 
        "type": "Notification"
    }, 
    "Notification.body": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.body", 
        "params": [], 
        "path": "dom/notification.body", 
        "syntax": "body property represents the text content of the body of the notification. The value for this property is set during the Notification instantiation by defining the body property in the options' object passed to the Notification constructor. Syntax var body = instanceOfNotification.body; Value A string. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.close", 
        "params": [], 
        "path": "dom/notification.close", 
        "syntax": "close method is used to close a Notification that has been displayed. Syntax instanceOfNotification.close();", 
        "type": "Notification"
    }, 
    "Notification.dir": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.dir", 
        "params": [], 
        "path": "dom/notification.dir", 
        "syntax": "dir property indicates the direction for the language to use within the notification. The value for this property is set during the Notification instantiation by defining the dir property in the options' object passed to the Notification constructor. Syntax var direction = instanceOfNotification.dir; Value A string representing the current direction. It can be: auto: The direction is defined automatically. ltr: The text is displayed from left to right. rtl: The text is displayed from right to left. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.icon": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.icon", 
        "params": [], 
        "path": "dom/notification.icon", 
        "syntax": "icon property indicates the URL of the icon to use with the notification. The value for this property is set during the Notification instantiation by defining the icon property in the options' object passed to the Notification constructor. Syntax var icon = instanceOfNotification.icon; Value A string representing a valid URL. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.lang": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.lang", 
        "params": [], 
        "path": "dom/notification.lang", 
        "syntax": "lang property indicates the language used within the notification. The value for this property is set during the Notification instantiation by defining the lang property in the options' object passed to the Notification constructor. Syntax var lang = instanceOfNotification.lang; Value A string representing the language to use. It is a valid BCP 47 language tag. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.onclick": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.onclick", 
        "params": [], 
        "path": "dom/notification.onclick", 
        "syntax": "click events. These events occur when the user clicks on a displayed Notification. Syntax instanceOfNotification.onclick = funcRef; Where funcRef is a function to be called when the click event occurs. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.onclose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.onclose", 
        "params": [], 
        "path": "dom/notification.onclose", 
        "syntax": "close events. These events occur when a Notification is closed. Syntax instanceOfNotification.onclose = funcRef; Where funcRef is a function to be called when the close event occurs. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.onerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.onerror", 
        "params": [], 
        "path": "dom/notification.onerror", 
        "syntax": "error events. These events occur when something goes wrong with a Notification (in many cases an error prevented the notification from being displayed).", 
        "type": "Notification"
    }, 
    "Notification.onshow": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.onshow", 
        "params": [], 
        "path": "dom/notification.onshow", 
        "syntax": "show events. These events occur when a Notification is displayed. Syntax instanceOfNotification.onshow = funcRef; Where funcRef is a function to be called when the show event occurs. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.permission": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.permission", 
        "params": [], 
        "path": "dom/notification.permission", 
        "syntax": "permission property indicates the current permission granted by the user about web notification for the current application. Syntax var permission = Notification.permission; Value A string representing the current permission. It can be: granted: the user has explicitly accepted the application to send notification denied: the user has explicitly denied the application to send notification default: the user decision is unknown, but the application will act as if denied were picked Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "Notification.requestPermission": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.requestPermission", 
        "params": [
            {
                "descr": "An optional callback function that is called when the user chose a permission. ", 
                "name": "callback Optional"
            }
        ], 
        "path": "dom/notification.requestpermission", 
        "syntax": "requestPermission static method is used to ask the user for his permission to display a Notification to him. Syntax Notification.requestPermission([callback]);", 
        "type": "Notification"
    }, 
    "Notification.tag": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Notification.tag", 
        "params": [], 
        "path": "dom/notification.tag", 
        "syntax": "tag property indicates the shared id of the notification. It allows to dynamically replace a notification by another notification. The value for this property is set during the Notification instantiation by defining the tag property in the options' object passed to the Notification constructor. Syntax var tag = instanceOfNotification.tag; Value A string. Specifications Specification Status Comment Web Notifications Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported ? 6 (see notes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? 4.0 moz (see notes) 22 Not supported ? ?  Gecko notes Prior to Firefox 22 (Firefox OS <1.2), the instantiation of a new notification must be done with the navigator.mozNotification", 
        "type": "Notification"
    }, 
    "NotifyAudioAvailableEvent": {
        "descr": "This interface defines the event for audio elements triggered when the Audiobuffer is full.", 
        "name": "NotifyAudioAvailableEvent", 
        "params": [], 
        "path": "dom/notifyaudioavailableevent", 
        "syntax": "frameBuffer Float32Array The frameBuffer attribute contains a typed array (Float32Array) with the raw audio data (32-bit float values) obtained from decoding the audio (e.g., the raw data being sent to the audio hardware vs. encoded audio). This is of the form [channel1, channel2, ..., channelN, channel1, channel2, ..., channelN, ...]. All audio frames are normalized to a length of channels * 1024 by default, but could be any length between 512 and 16384 if the user has set a different length using the mozFrameBufferLength attribute. Read only. time", 
        "type": "Events"
    }, 
    "Number": {
        "descr": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.", 
        "name": "Number", 
        "params": [
            {
                "descr": "The numeric value of the object being created.", 
                "name": "value"
            }, 
            {
                "descr": "The smallest interval between two representable numbers.", 
                "name": "Number.EPSILON"
            }, 
            {
                "descr": "The largest positive representable number.", 
                "name": "Number.MAX_VALUE"
            }, 
            {
                "descr": "The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).", 
                "name": "Number.MIN_VALUE"
            }, 
            {
                "descr": "Special \"not a number\" value.", 
                "name": "Number.NaN"
            }, 
            {
                "descr": "Special value representing negative infinity; returned on overflow.", 
                "name": "Number.NEGATIVE_INFINITY"
            }, 
            {
                "descr": "Special value representing infinity; returned on overflow.", 
                "name": "Number.POSITIVE_INFINITY"
            }, 
            {
                "descr": "Allows the addition of properties to a Number object.", 
                "name": "Number.prototype"
            }, 
            {
                "descr": "Determine whether the passed value is NaN.", 
                "name": "Number.isNaN()"
            }, 
            {
                "descr": "Determine whether the type of and the passed value itself is a finite number.", 
                "name": "Number.isFinite()"
            }, 
            {
                "descr": "Determine whether the type of the passed value is \"number\" and the passed value is an integer.", 
                "name": "Number.isInteger()"
            }, 
            {
                "descr": "Evaluate the passed value and convert it to an integer (or Infinity).", 
                "name": "Number.toInteger()"
            }, 
            {
                "descr": "The value is the same as parseFloat of the global object.", 
                "name": "Number.parseFloat()"
            }, 
            {
                "descr": "The value is the same as parseInt of the global object.", 
                "name": "Number.parseInt()"
            }, 
            {
                "descr": "Returns a string representing the number in exponential notation.", 
                "name": "Number.prototype.toExponential()"
            }, 
            {
                "descr": "Returns a string representing the number in fixed-point notation.", 
                "name": "Number.prototype.toFixed()"
            }, 
            {
                "descr": "Returns a string with a language sensitive representation of this number. ", 
                "name": "Number.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the number to a specified precision in fixed-point or exponential notation.", 
                "name": "Number.prototype.toPrecision()"
            }, 
            {
                "descr": "Returns an object literal representing the specified Number object; you can use this value to create a new object. ", 
                "name": "Number.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "Number.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "Number.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/number", 
        "syntax": "new Number(value);", 
        "type": "Number"
    }, 
    "Number.EPSILON": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.EPSILON", 
        "params": [], 
        "path": "javascript/global_objects/number/epsilon", 
        "syntax": "Number.EPSILON property represents the smallest interval between two distinguable values represented as a Number", 
        "type": "Number"
    }, 
    "Number.isFinite": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isFinite", 
        "params": [
            {
                "descr": "The value to be tested for finiteness.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isfinite", 
        "syntax": "Number.isFinite()", 
        "type": "Number"
    }, 
    "Number.isInteger": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isInteger", 
        "params": [
            {
                "descr": "The value to be tested for being an integer.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isinteger", 
        "syntax": "Number.isInteger()", 
        "type": "Number"
    }, 
    "Number.isNaN": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isNaN", 
        "params": [
            {
                "descr": "The value to be tested for NaN.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isnan", 
        "syntax": "Number.isNaN()", 
        "type": "Number"
    }, 
    "Number.parseFloat": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.parseFloat", 
        "params": [
            {
                "descr": "A string that represents the value you want to parse.", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/number/parsefloat", 
        "syntax": "Number.parseFloat()", 
        "type": "Number"
    }, 
    "Number.parseInt": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.parseInt", 
        "params": [
            {
                "descr": "The value to parse. If string is not a string, then it is converted to one. ", 
                "name": "string"
            }, 
            {
                "descr": "An integer that represents the radix of the above mentioned string. ", 
                "name": "radix"
            }
        ], 
        "path": "javascript/global_objects/number/parseint", 
        "syntax": "Number.parseInt()", 
        "type": "Number"
    }, 
    "Number.toExponential": {
        "descr": "The toExponential() method returns a string representing the Number object in exponential notation", 
        "name": "Number.toExponential", 
        "params": [
            {
                "descr": "An integer specifying the number of digits after the decimal point. ", 
                "name": "fractionDigits"
            }, 
            {
                "descr": "If fractionDigits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/toexponential", 
        "syntax": "numObj.toExponential(fractionDigits)", 
        "type": "Number"
    }, 
    "Number.toFixed": {
        "descr": "The toFixed() method formats a number using fixed-point notation.", 
        "name": "Number.toFixed", 
        "params": [
            {
                "descr": "The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. ", 
                "name": "digits"
            }, 
            {
                "descr": "If digits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/tofixed", 
        "syntax": "numObj.toFixed(digits)", 
        "type": "Number"
    }, 
    "Number.toInteger": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Number.toInteger", 
        "params": [
            {
                "descr": "The value to be converted to an integer.", 
                "name": "number"
            }
        ], 
        "path": "javascript/global_objects/number/tointeger", 
        "syntax": "Number.toInteger(number)", 
        "type": "Number"
    }, 
    "Number.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language sensitive representation of this number.", 
        "name": "Number.toLocaleString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".", 
                "name": "style"
            }, 
            {
                "descr": "The currency to use in currency formatting. ", 
                "name": "currency"
            }, 
            {
                "descr": "How to display the currency in currency formatting. ", 
                "name": "currencyDisplay"
            }, 
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ", 
                "name": "useGrouping"
            }, 
            {
                "descr": "The minimum number of integer digits to use. ", 
                "name": "minimumIntegerDigits"
            }, 
            {
                "descr": "The minimum number of fraction digits to use. ", 
                "name": "minimumFractionDigits"
            }, 
            {
                "descr": "The maximum number of fraction digits to use. ", 
                "name": "maximumFractionDigits"
            }, 
            {
                "descr": "The minimum number of significant digits to use. ", 
                "name": "minimumSignificantDigits"
            }, 
            {
                "descr": "The maximum number of significant digits to use. ", 
                "name": "maximumSignificantDigits"
            }
        ], 
        "path": "javascript/global_objects/number/tolocalestring", 
        "syntax": "numObj.toLocaleString([locales [, options]])", 
        "type": "Number"
    }, 
    "Number.toPrecision": {
        "descr": "The toPrecision() method returns a string representing the Number object to the specified precision.", 
        "name": "Number.toPrecision", 
        "params": [
            {
                "descr": "An integer specifying the number of significant digits.", 
                "name": "precision"
            }, 
            {
                "descr": "If precison is not between 1 and 100 (inclusive), a RangeError is thrown. ", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/number/toprecision", 
        "syntax": "numObj.toPrecision(precision)", 
        "type": "Number"
    }, 
    "Number.toString": {
        "descr": "The toString() method returns a string representing the specified Number object.", 
        "name": "Number.toString", 
        "params": [
            {
                "descr": "An integer between 2 and 36 specifying the base to use for representing numeric values.", 
                "name": "radix"
            }, 
            {
                "descr": "If toString() is given a radix not between 2 and 36, a RangeError is thrown.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/number/tostring", 
        "syntax": "numObj.toString(radix)", 
        "type": "Number"
    }, 
    "Number.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Number object.", 
        "name": "Number.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/number/valueof", 
        "syntax": "numObj.valueOf()", 
        "type": "Number"
    }, 
    "Object": {
        "descr": "The Object constructor creates an object wrapper.", 
        "name": "Object", 
        "params": [
            {
                "descr": "Any value.", 
                "name": "value"
            }, 
            {
                "descr": "Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.", 
                "name": "nameValuePair1, nameValuePair2, ... nameValuePairN"
            }, 
            {
                "descr": "Has a value of 1.", 
                "name": "Object.length"
            }, 
            {
                "descr": "Allows the addition of properties to all objects of type Object.", 
                "name": "Object.prototype"
            }, 
            {
                "descr": "Creates a new object with the specified prototype object and properties.", 
                "name": "Object.create()"
            }, 
            {
                "descr": "Adds the named property described by a given descriptor to an object.", 
                "name": "Object.defineProperty()"
            }, 
            {
                "descr": "Adds the named properties described by the given descriptors to an object.", 
                "name": "Object.defineProperties()"
            }, 
            {
                "descr": "Freezes an object: other code can't delete or change any properties.", 
                "name": "Object.freeze()"
            }, 
            {
                "descr": "Returns a property descriptor for a named property on an object.", 
                "name": "Object.getOwnPropertyDescriptor()"
            }, 
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.", 
                "name": "Object.getOwnPropertyNames()"
            }, 
            {
                "descr": "Returns the prototype of the specified object.", 
                "name": "Object.getPrototypeOf()"
            }, 
            {
                "descr": "Compares if two values are distinguishable (ie. ", 
                "name": "Object.is()"
            }, 
            {
                "descr": "Determines if extending of an object is allowed.", 
                "name": "Object.isExtensible()"
            }, 
            {
                "descr": "Determines if an object was frozen.", 
                "name": "Object.isFrozen()"
            }, 
            {
                "descr": "Determines if an object is sealed.", 
                "name": "Object.isSealed()"
            }, 
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable properties.", 
                "name": "Object.keys()"
            }, 
            {
                "descr": "Prevents any extensions of an object.", 
                "name": "Object.preventExtensions()"
            }, 
            {
                "descr": "Prevents other code from deleting properties of an object.", 
                "name": "Object.seal()"
            }, 
            {
                "descr": "Sets the prototype (i.e., the internal [[Prototype]] property)", 
                "name": "Object.setPrototypeOf()"
            }, 
            {
                "descr": "Associates a function with a property that, when accessed, executes that function and returns its return value.", 
                "name": "Object.prototype.__defineGetter__()"
            }, 
            {
                "descr": "Associates a function with a property that, when set, executes that function which modifies the property.", 
                "name": "Object.prototype.__defineSetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineGetter__ method.", 
                "name": "Object.prototype.__lookupGetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineSetter__ method.", 
                "name": "Object.prototype.__lookupSetter__()"
            }, 
            {
                "descr": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.", 
                "name": "Object.prototype.hasOwnProperty()"
            }, 
            {
                "descr": "Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.", 
                "name": "Object.prototype.isPrototypeOf()"
            }, 
            {
                "descr": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.", 
                "name": "Object.prototype.propertyIsEnumerable()"
            }, 
            {
                "descr": "Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.", 
                "name": "Object.prototype.toSource()"
            }, 
            {
                "descr": "Calls toString().", 
                "name": "Object.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representation of the object.", 
                "name": "Object.prototype.toString()"
            }, 
            {
                "descr": "Removes a watchpoint from a property of the object.", 
                "name": "Object.prototype.unwatch()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object.", 
                "name": "Object.prototype.valueOf()"
            }, 
            {
                "descr": "Adds a watchpoint to a property of the object.", 
                "name": "Object.prototype.watch()"
            }, 
            {
                "descr": "Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.", 
                "name": "Object.prototype.eval()"
            }, 
            {
                "descr": "Associates a function with a property that, when accessed, executes that function and returns its return value.", 
                "name": "Object.prototype.__defineGetter__()"
            }, 
            {
                "descr": "Associates a function with a property that, when set, executes that function which modifies the property.", 
                "name": "Object.prototype.__defineSetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineGetter__ method.", 
                "name": "Object.prototype.__lookupGetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineSetter__ method.", 
                "name": "Object.prototype.__lookupSetter__()"
            }, 
            {
                "descr": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.", 
                "name": "Object.prototype.hasOwnProperty()"
            }, 
            {
                "descr": "Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.", 
                "name": "Object.prototype.isPrototypeOf()"
            }, 
            {
                "descr": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.", 
                "name": "Object.prototype.propertyIsEnumerable()"
            }, 
            {
                "descr": "Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.", 
                "name": "Object.prototype.toSource()"
            }, 
            {
                "descr": "Calls toString().", 
                "name": "Object.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representation of the object.", 
                "name": "Object.prototype.toString()"
            }, 
            {
                "descr": "Removes a watchpoint from a property of the object.", 
                "name": "Object.prototype.unwatch()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object.", 
                "name": "Object.prototype.valueOf()"
            }, 
            {
                "descr": "Adds a watchpoint to a property of the object.", 
                "name": "Object.prototype.watch()"
            }, 
            {
                "descr": "Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.", 
                "name": "Object.prototype.eval()"
            }
        ], 
        "path": "javascript/global_objects/object", 
        "syntax": "new Object( [ value ] )", 
        "type": "Object"
    }, 
    "Object.count": {
        "descr": "Obsolete since Gecko 2 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Object.count", 
        "params": [], 
        "path": "javascript/global_objects/object/count", 
        "syntax": "obj.__count__ Example { 1: 1 }.__count__              // 1[].__count__                    // 0[1].__count__                   // 1[1, /* hole */, 2, 3].__count__ // 3 Specifications Not part of any specifications. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Not supported Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported Not supported Not supported Not supported Not supported  See also", 
        "type": "Object"
    }, 
    "Object.create": {
        "descr": "The Object.create() method creates a new object with the specified prototype object and properties.", 
        "name": "Object.create", 
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.", 
                "name": "proto"
            }, 
            {
                "descr": "If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties.", 
                "name": "propertiesObject"
            }
        ], 
        "path": "javascript/global_objects/object/create", 
        "syntax": "Object.create(proto [, propertiesObject ])", 
        "type": "Object"
    }, 
    "Object.defineGetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.defineGetter", 
        "params": [
            {
                "descr": "A string containing the name of the property to bind to the given function", 
                "name": "sprop"
            }, 
            {
                "descr": "A function to be bound to a lookup of the specified property", 
                "name": "fun"
            }
        ], 
        "path": "javascript/global_objects/object/definegetter", 
        "syntax": "obj.__defineGetter__(sprop, fun)", 
        "type": "Object"
    }, 
    "Object.defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.", 
        "name": "Object.defineProperties", 
        "params": [
            {
                "descr": "The object on which to define or modify properties.", 
                "name": "obj"
            }, 
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.", 
                "name": "props"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperties", 
        "syntax": "Object.defineProperties(obj, props)", 
        "type": "Object"
    }, 
    "Object.defineProperty": {
        "descr": "The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.", 
        "name": "Object.defineProperty", 
        "params": [
            {
                "descr": "The object on which to define the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property to be defined or modified.", 
                "name": "prop"
            }, 
            {
                "descr": "The descriptor for the property being defined or modified.", 
                "name": "descriptor"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.Defaults to false.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.Defaults to false.", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "True if and only if the value associated with the property may be changed with an assignment operator.Defaults to false.", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperty", 
        "syntax": "Object.defineProperty(obj, prop, descriptor)", 
        "type": "Object"
    }, 
    "Object.defineSetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.defineSetter", 
        "params": [
            {
                "descr": "A string containing the name of the property to be bound to the given function", 
                "name": "sprop"
            }, 
            {
                "descr": "A function to be called when there is an attempt to set the specified property. ", 
                "name": "fun"
            }, 
            {
                "descr": "an alias for the variable that holds the value attempted to be assigned to prop", 
                "name": "val"
            }
        ], 
        "path": "javascript/global_objects/object/definesetter", 
        "syntax": "obj.__defineSetter__(sprop, fun)", 
        "type": "Object"
    }, 
    "Object.eval": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Object.eval", 
        "params": [
            {
                "descr": "Any string representing a JavaScript expression, statement, or sequence of statements. ", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/object/eval", 
        "syntax": "obj.eval(string)", 
        "type": "Object"
    }, 
    "Object.freeze": {
        "descr": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.", 
        "name": "Object.freeze", 
        "params": [
            {
                "descr": "The object to freeze.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/freeze", 
        "syntax": "Object.freeze(obj)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.", 
        "name": "Object.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The object in which to look for the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property whose description is to be retrieved", 
                "name": "prop"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptor", 
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.", 
        "name": "Object.getOwnPropertyNames", 
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertynames", 
        "syntax": "Object.getOwnPropertyNames(obj)", 
        "type": "Object"
    }, 
    "Object.getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the internal [[Prototype]]) of the specified object.", 
        "name": "Object.getPrototypeOf", 
        "params": [
            {
                "descr": "The object whose prototype is to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getprototypeof", 
        "syntax": "Object.getPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "Object.hasOwnProperty": {
        "descr": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.", 
        "name": "Object.hasOwnProperty", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/hasownproperty", 
        "syntax": "obj.hasOwnProperty(prop)", 
        "type": "Object"
    }, 
    "Object.is": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Object.is", 
        "params": [
            {
                "descr": "The first value to compare.", 
                "name": "value1"
            }, 
            {
                "descr": "The second value to compare.", 
                "name": "value2"
            }
        ], 
        "path": "javascript/global_objects/object/is", 
        "syntax": "Object.is()", 
        "type": "Object"
    }, 
    "Object.isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).", 
        "name": "Object.isExtensible", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isextensible", 
        "syntax": "Object.isExtensible(obj)", 
        "type": "Object"
    }, 
    "Object.isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.", 
        "name": "Object.isFrozen", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isfrozen", 
        "syntax": "Object.isFrozen(obj)", 
        "type": "Object"
    }, 
    "Object.isPrototypeOf": {
        "descr": "The isPrototypeOf() method tests for an object in another object's prototype chain.", 
        "name": "Object.isPrototypeOf", 
        "params": [
            {
                "descr": "An object to be tested against each link in the prototype chain of the object argument.", 
                "name": "prototypeObj"
            }, 
            {
                "descr": "the object whose prototype chain will be searched", 
                "name": "object"
            }
        ], 
        "path": "javascript/global_objects/object/isprototypeof", 
        "syntax": "prototypeObj.isPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "Object.isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.", 
        "name": "Object.isSealed", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/issealed", 
        "syntax": "Object.isSealed(obj)", 
        "type": "Object"
    }, 
    "Object.keys": {
        "descr": "The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).", 
        "name": "Object.keys", 
        "params": [
            {
                "descr": "The object whose enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/keys", 
        "syntax": "Object.keys(obj)", 
        "type": "Object"
    }, 
    "Object.lookupGetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.lookupGetter", 
        "params": [
            {
                "descr": "A string containing the name of the property whose getter should be returned.", 
                "name": "sprop"
            }
        ], 
        "path": "javascript/global_objects/object/lookupgetter", 
        "syntax": "obj.__lookupGetter__(sprop)", 
        "type": "Object"
    }, 
    "Object.lookupSetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.lookupSetter", 
        "params": [
            {
                "descr": "A string containing the name of the property whose setter should be returned.", 
                "name": "sprop"
            }
        ], 
        "path": "javascript/global_objects/object/lookupsetter", 
        "syntax": "obj.__lookupSetter__(sprop)", 
        "type": "Object"
    }, 
    "Object.parent": {
        "descr": "Obsolete since Gecko 2 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Object.parent", 
        "params": [], 
        "path": "javascript/global_objects/object/parent", 
        "syntax": "obj.__parent__ Description For top-level objects, this is the e.g. window. Specifications Not part of any specifications. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Not supported Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported Not supported Not supported Not supported Not supported  See also", 
        "type": "Object"
    }, 
    "Object.preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).", 
        "name": "Object.preventExtensions", 
        "params": [
            {
                "descr": "The object which should be made non-extensible.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/preventextensions", 
        "syntax": "Object.preventExtensions(obj)", 
        "type": "Object"
    }, 
    "Object.propertyIsEnumerable": {
        "descr": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.", 
        "name": "Object.propertyIsEnumerable", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/propertyisenumerable", 
        "syntax": "obj.propertyIsEnumerable(prop)", 
        "type": "Object"
    }, 
    "Object.seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.", 
        "name": "Object.seal", 
        "params": [
            {
                "descr": "The object which should be sealed.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/seal", 
        "syntax": "Object.seal(obj)", 
        "type": "Object"
    }, 
    "Object.setPrototypeOf": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Object.setPrototypeOf", 
        "params": [
            {
                "descr": "The object which is to have its prototype set.", 
                "name": "obj"
            }, 
            {
                "descr": "The object's new prototype (an object or null).", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/object/setprototypeof", 
        "syntax": "Object.setPrototype()", 
        "type": "Object"
    }, 
    "Object.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.", 
        "name": "Object.toLocaleString", 
        "params": [], 
        "path": "javascript/global_objects/object/tolocalestring", 
        "syntax": "obj.toLocaleString();", 
        "type": "Object"
    }, 
    "Object.toString": {
        "descr": "The toString() method returns a string representing object.", 
        "name": "Object.toString", 
        "params": [], 
        "path": "javascript/global_objects/object/tostring", 
        "syntax": "obj.toString()", 
        "type": "Object"
    }, 
    "Object.unwatch": {
        "descr": "The unwatch() method removes a watchpoint set with the watch() method.", 
        "name": "Object.unwatch", 
        "params": [
            {
                "descr": "The name of a property of the object to stop watching.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/unwatch", 
        "syntax": "obj.unwatch(prop)", 
        "type": "Object"
    }, 
    "Object.valueOf": {
        "descr": "The valueOf() method returns the primitive value of the specified object.", 
        "name": "Object.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/object/valueof", 
        "syntax": "object.valueOf()", 
        "type": "Object"
    }, 
    "Object.watch": {
        "descr": "The watch() method watches for a property to be assigned a value and runs a function when that occurs.", 
        "name": "Object.watch", 
        "params": [
            {
                "descr": "The name of a property of the object on which you wish to monitor changes.", 
                "name": "prop"
            }, 
            {
                "descr": "A function to call when the specified property's value changes.", 
                "name": "handler"
            }
        ], 
        "path": "javascript/global_objects/object/watch", 
        "syntax": "obj.watch(prop, handler)", 
        "type": "Object"
    }, 
    "OfflineAudioCompletionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OfflineAudioCompletionEvent", 
        "params": [], 
        "path": "dom/offlineaudiocompletionevent", 
        "syntax": "OfflineAudioCompletionEvent represents events that occur when the processing of an OfflineAudioContext is terminated. The complete implements this interface. Properties Including the inherited properties from its parent, Event. Property Type Description target Read only  EventTarget The event target (the topmost target in the DOM tree). type", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OfflineAudioContext", 
        "params": [
            {
                "descr": "Is an EventHandler called when the processing is terminated, that is when the event complete of type OfflineAudioCompletionEvent is raised.", 
                "name": "OfflineAudioContext.oncomplete"
            }, 
            {
                "descr": "Starts rendering the audio, taking into account the current connections and the current scheduled changes. ", 
                "name": "OfflineAudioContext.startRendering()"
            }
        ], 
        "path": "dom/offlineaudiocontext", 
        "syntax": "OfflineAudioContext interface is an AudioContext that is an interface representing an audio-processing graph built from AudioNode", 
        "type": "Web Audio"
    }, 
    "OscillatorNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OscillatorNode", 
        "params": [
            {
                "descr": "Is an a-rate AudioParam representing the frequency of oscillation in hertz. ", 
                "name": "OscillatorNode.frequency"
            }, 
            {
                "descr": "Is an a-rate AudioParam represents detuning of oscillation in cents. ", 
                "name": "OscillatorNode.detune"
            }, 
            {
                "descr": "enum OscillatorType {  \"sine\",  \"square\",  \"sawtooth\",  \"triangle\",  \"custom\"} You can use the setWaveTable method when using \"custom\" to create the wave table.", 
                "name": "OscillatorNode.type"
            }
        ], 
        "path": "dom/oscillatornode", 
        "syntax": "OscillatorNodeinterface represents a sine wave. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "PannerNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "PannerNode", 
        "params": [
            {
                "descr": "Is an enumerated value determining which spatialization algorithm to use to position the audio in 3D space. ", 
                "name": "PannerNode.panningModel"
            }, 
            {
                "descr": "Is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listeners. ", 
                "name": "PannerNode.distanceModel"
            }, 
            {
                "descr": "Is a double value representing the reference distance for reducing volume as source move further from the listener. ", 
                "name": "PannerNode.refDistance"
            }, 
            {
                "descr": "Is a double value representing the maximum distance between the source and the listener, after which the volume is no more reduced. ", 
                "name": "PannerNode.maxDistance"
            }, 
            {
                "descr": "Is a double value describing how quickly the volume is reduced as the source moves away from listener. ", 
                "name": "PannerNode.rolloffFactor"
            }, 
            {
                "descr": "Is a double value describing the angle, in degrees, of the cone, inside of which there will be no volume reduction. ", 
                "name": "PannerNode.coneInnerAngle"
            }, 
            {
                "descr": "Is a double value describing the angle, in degrees, of the cone, outside of which the volume will be reduce by a constant value, defined by the coneOuterGain attribute. ", 
                "name": "PannerNode.coneOuterAngle"
            }, 
            {
                "descr": "Is a double value describing the amount of volume reduction outside of the cone defined by the coneOuterAngle attribute. ", 
                "name": "PannerNode.coneOuterGain"
            }, 
            {
                "descr": "Defines the position of the audio source regarding the position of the person listening to the scene, represented by an AudioListener object stored in the AudioContext.listener attribute. ", 
                "name": "PannerNode.setPosition()"
            }, 
            {
                "descr": "Defines the direction of the audio source. ", 
                "name": "PannerNode.setOrientation()"
            }, 
            {
                "descr": "Defines the velocity vector of the audio source. ", 
                "name": "PannerNode.setVelocity()"
            }
        ], 
        "path": "dom/pannernode", 
        "syntax": "PannerNodeinterface represents the behavior of a signal in space. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "ParallelArray": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "ParallelArray", 
        "params": [
            {
                "descr": "Reflects the number of elements in the ParallelArray.", 
                "name": "length"
            }, 
            {
                "descr": "Apply map callback to array elements.", 
                "name": "map"
            }, 
            {
                "descr": "Scatter array elements.", 
                "name": "reduce   scan  scatter"
            }, 
            {
                "descr": "Get ParallelArray element.", 
                "name": "filter  flatten  partition  get"
            }
        ], 
        "path": "javascript/global_objects/parallelarray", 
        "syntax": "new ParallelArray()new ParallelArray([element0, element1, ...])new ParallelArray(arrayLength, elementalFunction)", 
        "type": "Global Objects"
    }, 
    "ParentNode.childElementCount": {
        "descr": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.", 
        "name": "ParentNode.childElementCount", 
        "params": [], 
        "path": "dom/parentnode.childelementcount", 
        "syntax": "var elCount = elementNodeReference.childElementCount;  Specification Specification Status Comment DOM Living Standard Splitted the ElementTraversal interface in ChildNode and ParentNode. This method is now defined on the latter. The Document", 
        "type": "Node"
    }, 
    "ParentNode.children": {
        "descr": "The ParentNode.children read-only property returns a live HTMLCollection of child elements of the given object.", 
        "name": "ParentNode.children", 
        "params": [], 
        "path": "dom/parentnode.children", 
        "syntax": "var elList = elementNodeReference.children;  elList is an ordered collection of element objects that are children of the current element. If the element has no children, then elList contains no elements. The elList is a variable storing the node list of children. Such list is of type HTMLCollection", 
        "type": "Node"
    }, 
    "ParentNode.firstElementChild": {
        "descr": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.", 
        "name": "ParentNode.firstElementChild", 
        "params": [], 
        "path": "dom/parentnode.firstelementchild", 
        "syntax": "var childNode = elementNodeReference.firstElementChild;  Example <p id=\"para-01\">  <span>First span</span></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.firstElementChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "ParentNode.lastElementChild": {
        "descr": "The ParentNode.lastElementChild read-only method returns the object's last child Element or null if there are no child elements.", 
        "name": "ParentNode.lastElementChild", 
        "params": [], 
        "path": "dom/parentnode.lastelementchild", 
        "syntax": "var childNode = elementNodeReference.lastElementChild;  Example <p id=\"para-01\">  <span>First span</span>  <b>bold</b></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.lastElementChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "Performance.navigation": {
        "descr": "The Performance.navigation read-only property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, like the amount of redirections needed to fetch the resource.", 
        "name": "Performance.navigation", 
        "params": [], 
        "path": "dom/performance.navigation", 
        "syntax": "navObject = performance.navigation; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 7.0 (7.0) 9.0 Not supported Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 Not supported Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "Performance.timing": {
        "descr": "The Performance.timing read-only property returns a PerformanceTiming object containing latency-related performance information.", 
        "name": "Performance.timing", 
        "params": [], 
        "path": "dom/performance.timing", 
        "syntax": "timingInfo = performance.timing; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support 6.0 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceNavigation.redirectCount": {
        "descr": "The PerformanceNavigation.redirectCount read-only property returns an unsigned short representing the number of REDIRECTs done before reaching the page.", 
        "name": "PerformanceNavigation.redirectCount", 
        "params": [], 
        "path": "dom/performancenavigation.redirectcount", 
        "syntax": "amount = performanceNavigation.redirectCount; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 7.0 (7.0) 9.0 Not supported Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 Not supported Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceNavigation.type": {
        "descr": "The PerformanceNavigation.type read-only property returns an unsigned short containing a constant describing how the navigation to this page was done. Possible values are:", 
        "name": "PerformanceNavigation.type", 
        "params": [], 
        "path": "dom/performancenavigation.type", 
        "syntax": "type = performanceNavigation.type; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 7.0 (7.0) 9.0 Not supported Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 Not supported Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.connectEnd": {
        "descr": "The PerformanceTiming.connectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.", 
        "name": "PerformanceTiming.connectEnd", 
        "params": [], 
        "path": "dom/performancetiming.connectend", 
        "syntax": "time = performanceTiming.connectEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.connectStart": {
        "descr": "The PerformanceTiming.connectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.connectStart", 
        "params": [], 
        "path": "dom/performancetiming.connectstart", 
        "syntax": "time = performanceTiming.connectStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domComplete": {
        "descr": "The PerformanceTiming.domComplete read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domComplete", 
        "params": [], 
        "path": "dom/performancetiming.domcomplete", 
        "syntax": "time = performanceTiming.domComplete; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domContentLoadedEventEnd": {
        "descr": "The PerformanceTiming.domContentLoadedEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.", 
        "name": "PerformanceTiming.domContentLoadedEventEnd", 
        "params": [], 
        "path": "dom/performancetiming.domcontentloadedeventend", 
        "syntax": "time = performanceTiming.domContentLoadedEventEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domContentLoadedEventStart": {
        "descr": "The PerformanceTiming.domContentLoadedEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing has been executed.", 
        "name": "PerformanceTiming.domContentLoadedEventStart", 
        "params": [], 
        "path": "dom/performancetiming.domcontentloadedeventstart", 
        "syntax": "time = performanceTiming.domContentLoadedEventStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domInteractive": {
        "descr": "The PerformanceTiming.domInteractive read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domInteractive", 
        "params": [], 
        "path": "dom/performancetiming.dominteractive", 
        "syntax": "time = performanceTiming.domInteractive; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domLoading": {
        "descr": "The PerformanceTiming.domLoading read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domLoading", 
        "params": [], 
        "path": "dom/performancetiming.domloading", 
        "syntax": "time = performanceTiming.domLoading; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domainLookupEnd": {
        "descr": "The PerformanceTiming.domainLookupEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.domainLookupEnd", 
        "params": [], 
        "path": "dom/performancetiming.domainlookupend", 
        "syntax": "time = performanceTiming.domainLookupEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.domainLookupStart": {
        "descr": "The PerformanceTiming.domainLookupStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.domainLookupStart", 
        "params": [], 
        "path": "dom/performancetiming.domainlookupstart", 
        "syntax": "time = performanceTiming.domainLookupStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.fetchStart": {
        "descr": "The PerformanceTiming.fetchStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.", 
        "name": "PerformanceTiming.fetchStart", 
        "params": [], 
        "path": "dom/performancetiming.fetchstart", 
        "syntax": "time = performanceTiming.fetchStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.loadEventEnd": {
        "descr": "The PerformanceTiming.loadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0.", 
        "name": "PerformanceTiming.loadEventEnd", 
        "params": [], 
        "path": "dom/performancetiming.loadeventend", 
        "syntax": "time = performanceTiming.loadEventEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.loadEventStart": {
        "descr": "The PerformanceTiming.loadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event was sent for the current document. If this event has not yet been sent, it returns 0.", 
        "name": "PerformanceTiming.loadEventStart", 
        "params": [], 
        "path": "dom/performancetiming.loadeventstart", 
        "syntax": "time = performanceTiming.loadEventStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.navigationStart": {
        "descr": "The PerformanceTiming.navigationStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.navigationStart", 
        "params": [], 
        "path": "dom/performancetiming.navigationstart", 
        "syntax": "time = performanceTiming.navigationStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.redirectEnd": {
        "descr": "The PerformanceTiming.redirectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.redirectEnd", 
        "params": [], 
        "path": "dom/performancetiming.redirectend", 
        "syntax": "time = performanceTiming.redirectEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.redirectStart": {
        "descr": "The PerformanceTiming.redirectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the first HTTP redirect starts. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.redirectStart", 
        "params": [], 
        "path": "dom/performancetiming.redirectstart", 
        "syntax": "time = performanceTiming.redirectStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.requestStart": {
        "descr": "The PerformanceTiming.requestStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.", 
        "name": "PerformanceTiming.requestStart", 
        "params": [], 
        "path": "dom/performancetiming.requeststart", 
        "syntax": "time = performanceTiming.requestStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.responseEnd": {
        "descr": "The PerformanceTiming.responseEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache, of from a local resource.", 
        "name": "PerformanceTiming.responseEnd", 
        "params": [], 
        "path": "dom/performancetiming.responseend", 
        "syntax": "time = performanceTiming.responseEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.responseStart": {
        "descr": "The PerformanceTiming.responseStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser received the first byte of the response, from the server from a cache, of from a local resource.", 
        "name": "PerformanceTiming.responseStart", 
        "params": [], 
        "path": "dom/performancetiming.responsestart", 
        "syntax": "time = performanceTiming.responseStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.secureConnectionStart": {
        "descr": "The PerformanceTiming.secureConnectionStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the secure connection handshake starts. If no such connection is requested, it returns 0.", 
        "name": "PerformanceTiming.secureConnectionStart", 
        "params": [], 
        "path": "dom/performancetiming.secureconnectionstart", 
        "syntax": "time = performanceTiming.secureConnectionStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.unloadEventEnd": {
        "descr": "The PerformanceTiming.unloadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.unloadEventEnd", 
        "params": [], 
        "path": "dom/performancetiming.unloadeventend", 
        "syntax": "time = performanceTiming.unloadEventEnd; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "PerformanceTiming.unloadEventStart": {
        "descr": "The PerformanceTiming.unloadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event has been thrown. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.unloadEventStart", 
        "params": [], 
        "path": "dom/performancetiming.unloadeventstart", 
        "syntax": "time = performanceTiming.unloadEventStart; Specifications Specification Status Comment Navigation Timing Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported  See also", 
        "type": "Navigation Timing"
    }, 
    "Position.coords": {
        "descr": "The Position.coords read-only property, a Coordinates object, represents a geographic attitude: it contains the location, that is longitude and latitude on the Earth, the altitude, and the speed of the object concerned, regrouped inside the returned value. It also contains accuracy information about these values.", 
        "name": "Position.coords", 
        "params": [], 
        "path": "dom/position.coords", 
        "syntax": "coord = position.coords Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "Position.timestamp": {
        "descr": "The Position.timestamp read-only property, a DOMTimeStamp object, represents the date and the time of the creation of the Position object it belongs to. The precision is to the millisecond.", 
        "name": "Position.timestamp", 
        "params": [], 
        "path": "dom/position.timestamp", 
        "syntax": "coord = position.timestamp Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "PositionError.code": {
        "descr": "The PositionError.code read-only property is an unsigned short representing the error code. The following values are possible:", 
        "name": "PositionError.code", 
        "params": [], 
        "path": "dom/positionerror.code", 
        "syntax": "typeErr = poserr.code Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "PositionError.message": {
        "descr": "The PositionError.message read-only property returns a human-readable DOMString describing the details of the error.", 
        "name": "PositionError.message", 
        "params": [], 
        "path": "dom/positionerror.message", 
        "syntax": "msg = positionError.message Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.enableHighAccuracy": {
        "descr": "The PositionOptions.enableHighAccuracy property is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false (the default value), the device can take the liberty to save resources by responding more quickly and/or using less power.", 
        "name": "PositionOptions.enableHighAccuracy", 
        "params": [], 
        "path": "dom/positionoptions.enablehighaccuracy", 
        "syntax": "positionOptions.enableHighAccuracy = booleanValue Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.maximumAge": {
        "descr": "The PositionOptions.maximumAge property is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age.", 
        "name": "PositionOptions.maximumAge", 
        "params": [], 
        "path": "dom/positionoptions.maximumage", 
        "syntax": "positionOptions.maximumAge = timeLength Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.timeout": {
        "descr": "The PositionOptions.timeout property is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available.", 
        "name": "PositionOptions.timeout", 
        "params": [], 
        "path": "dom/positionoptions.timeout", 
        "syntax": "positionOptions.enableHighAccuracy = timeLength Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Geolocation"
    }, 
    "ProgressEvent.constructor": {
        "descr": "The ProgressEvent() constructor returns a newly created ProgressEvent, representing the current completion of a long process.", 
        "name": "ProgressEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ProgressEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a Boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. ", 
                "name": "lengthComputable Optional"
            }, 
            {
                "descr": "Is an unsigned long long representing the amount of work already performed by the underlying process. ", 
                "name": "loaded Optional"
            }, 
            {
                "descr": "Is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. ", 
                "name": "total Optional"
            }
        ], 
        "path": "dom/progressevent.progressevent", 
        "syntax": "progressEvent = new ProgressEvent(type, {lengthComputable: aBooleanValue, loaded: aNumber, total: aNumber});", 
        "type": "Events"
    }, 
    "ProgressEvent.lengthComputable": {
        "descr": "The ProgressEvent.lengthComputable read-only property is a Boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value.", 
        "name": "ProgressEvent.lengthComputable", 
        "params": [], 
        "path": "dom/progressevent.lengthcomputable", 
        "syntax": "flag = ProgressEvent.lengthComputable Specifications Specification Status Comment Progress Events Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "ProgressEvent.loaded": {
        "descr": "The ProgressEvent.loaded read-only property is an unsigned long long representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.", 
        "name": "ProgressEvent.loaded", 
        "params": [], 
        "path": "dom/progressevent.loaded", 
        "syntax": "value = ProgressEvent.loaded Specifications Specification Status Comment Progress Events Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "ProgressEvent.total": {
        "descr": "The ProgressEvent.total read-only property is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.", 
        "name": "ProgressEvent.total", 
        "params": [], 
        "path": "dom/progressevent.total", 
        "syntax": "value = ProgressEvent.total Specifications Specification Status Comment Progress Events Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "Promise": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Promise", 
        "params": [
            {
                "descr": "Appends fullfill and failure callbacks to the Promise and returns a new Promise resolving to the return value of the selected callback, fullfill or failure.", 
                "name": "Promise.then()"
            }, 
            {
                "descr": "Appends a failure callback to the Promise and returns a new Promise resolving to the return value of the callback.", 
                "name": "Promise.catch()"
            }, 
            {
                "descr": "Returns a Promise object that is fullfilled with the value given in parameter.", 
                "name": "Promise.fullfill() Unimplemented"
            }, 
            {
                "descr": "Returns a Promise object that is wrapped resolved with the value given in parameter. ", 
                "name": "Promise.result()"
            }, 
            {
                "descr": "Returns a Promise object that is rejected with the value given in parameter.", 
                "name": "Promise.reject()"
            }, 
            {
                "descr": "...", 
                "name": "Promise.any()"
            }, 
            {
                "descr": "...", 
                "name": "Promise.every()"
            }, 
            {
                "descr": "...", 
                "name": "Promise.some()"
            }
        ], 
        "path": "dom/promise", 
        "syntax": "Promise interface represents a future that acts as a proxy for a value not necessarily known at its creation time. It allows to associated contracts with the result of an action. This let asynchronous methods to return values like synchronous methods: instead of the final value, the asynchronous method returns a promise of having a value at some point in the future. A promise associated a behavior to a not-yet calculated value. Two kinds of behaviors, the success (when the promise is fullfilled) and the error cases (when the promise is rejected) are defined by callbacks. The value gets evaluated asynchronously and the right set of behaviors is executed when the value is known.", 
        "type": "Miscellaneous"
    }, 
    "PromiseResolver": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "PromiseResolver", 
        "params": [
            {
                "descr": "Sets the result value of the associated Promise to the parameter and its state to fulfill. ", 
                "name": "PromiseResolver.fulfill()"
            }, 
            {
                "descr": "...", 
                "name": "PromiseResolver.resolve()"
            }, 
            {
                "descr": "Sets the result value of the associated Promise to the parameter and its state to rejected. ", 
                "name": "PromiseResolver.reject()"
            }
        ], 
        "path": "dom/promiseresolver", 
        "syntax": "PromiseResolver interface represents an object controlling the state and the result value of a Promise. Properties No specific property. Methods Doesn't inherit any method.  PromiseResolver.fulfill()", 
        "type": "Miscellaneous"
    }, 
    "Range.cloneContents": {
        "descr": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.", 
        "name": "Range.cloneContents", 
        "params": [], 
        "path": "dom/range.clonecontents", 
        "syntax": "documentFragment = range.cloneContents();", 
        "type": "Range"
    }, 
    "Range.cloneRange": {
        "descr": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.", 
        "name": "Range.cloneRange", 
        "params": [], 
        "path": "dom/range.clonerange", 
        "syntax": "clone = range.cloneRange();", 
        "type": "Range"
    }, 
    "Range.collapse": {
        "descr": "The Range.collapse() method collapses the Range to one of its boundary points.", 
        "name": "Range.collapse", 
        "params": [
            {
                "descr": "A boolean value: true collapses the Range to its start, false to its end. ", 
                "name": "toStart Optional"
            }
        ], 
        "path": "dom/range.collapse", 
        "syntax": "range.collapse(toStart);", 
        "type": "Range"
    }, 
    "Range.collapsed": {
        "descr": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.", 
        "name": "Range.collapsed", 
        "params": [], 
        "path": "dom/range.collapsed", 
        "syntax": "isCollapsed = range.collapsed; Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or isCollapsed = range.collapsed;);", 
        "type": "Range"
    }, 
    "Range.commonAncestorContainer": {
        "descr": "The Range.commonAncestorContainerread-only property returns the deepest, or further down the document tree, Node that contains both the Range.startContainer and Range.endContainer nodes.", 
        "name": "Range.commonAncestorContainer", 
        "params": [], 
        "path": "dom/range.commonancestorcontainer", 
        "syntax": "rangeAncestor = range.commonAncestorContainer; Example var range = document.createRange();\n or range.setStart(startNode,startOffset);\n or range.setEnd(endNode,endOffset);\n or rangeAncestor = range.commonAncestorContainer;);", 
        "type": "Range"
    }, 
    "Range.compareBoundaryPoints": {
        "descr": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one.", 
        "name": "Range.compareBoundaryPoints", 
        "params": [
            {
                "descr": "A number, -1, 0, or 1, indicating whether the corresponding boundary-point of the Range is respectively before, equal to, or after the corresponding boundary-point of sourceRange.", 
                "name": "compare"
            }, 
            {
                "descr": "A constant describing the comparison method: Range.END_TO_END compares the end boundary-point of sourceRange to the end boundary-point of Range. ", 
                "name": "how"
            }, 
            {
                "descr": "A Range to compare boundary points with the range.", 
                "name": "sourceRange"
            }
        ], 
        "path": "dom/range.compareboundarypoints", 
        "syntax": "compare = range.compareBoundaryPoints(how, sourceRange);", 
        "type": "Range"
    }, 
    "Range.comparePoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.comparePoint", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset inside the referenceNode.", 
                "name": "offset"
            }
        ], 
        "path": "dom/range.comparepoint", 
        "syntax": "Range.comparePoint()", 
        "type": "Range"
    }, 
    "Range.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.constructor", 
        "params": [], 
        "path": "dom/range.range", 
        "syntax": "Range()", 
        "type": "Range"
    }, 
    "Range.createContextualFragment": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.createContextualFragment", 
        "params": [
            {
                "descr": "Text that contains text and tags to be converted to a document fragment.", 
                "name": "tagString"
            }
        ], 
        "path": "dom/range.createcontextualfragment", 
        "syntax": "Range.createContextualFragment()", 
        "type": "Range"
    }, 
    "Range.deleteContents": {
        "descr": "The Range.deleteContents() removes the contents of the Range from the Document.", 
        "name": "Range.deleteContents", 
        "params": [], 
        "path": "dom/range.deletecontents", 
        "syntax": "range.deleteContents()", 
        "type": "Range"
    }, 
    "Range.detach": {
        "descr": "The Range.detach() method releases a Range from use. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR.", 
        "name": "Range.detach", 
        "params": [], 
        "path": "dom/range.detach", 
        "syntax": "range.detach();", 
        "type": "Range"
    }, 
    "Range.endContainer": {
        "descr": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.", 
        "name": "Range.endContainer", 
        "params": [], 
        "path": "dom/range.endcontainer", 
        "syntax": "endRangeNode = range.endContainer; Example var range = document.createRange();\n or range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or endRangeNode = range.endContainer;);", 
        "type": "Range"
    }, 
    "Range.endOffset": {
        "descr": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.", 
        "name": "Range.endOffset", 
        "params": [], 
        "path": "dom/range.endoffset", 
        "syntax": "CDATASEction, then the offset is the number of characters from the start of the endContainer to the boundary point of the Range. For other Node", 
        "type": "Range"
    }, 
    "Range.extractContents": {
        "descr": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.", 
        "name": "Range.extractContents", 
        "params": [], 
        "path": "dom/range.extractcontents", 
        "syntax": "documentFragment = range.extractContents();", 
        "type": "Range"
    }, 
    "Range.getBoundingClientRect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.getBoundingClientRect", 
        "params": [], 
        "path": "dom/range.getboundingclientrect", 
        "syntax": "Range.getBoundingClientRect()", 
        "type": "Range"
    }, 
    "Range.getClientRects": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.getClientRects", 
        "params": [], 
        "path": "dom/range.getclientrects", 
        "syntax": "Range.getClientRects()", 
        "type": "Range"
    }, 
    "Range.insertNode": {
        "descr": "The Range.insertNode() method inserts a node at the start of the Range.", 
        "name": "Range.insertNode", 
        "params": [
            {
                "descr": "The Node to insert at the start of the range.", 
                "name": "newNode"
            }
        ], 
        "path": "dom/range.insertnode", 
        "syntax": "range.insertNode(newNode);", 
        "type": "Range"
    }, 
    "Range.intersectsNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.intersectsNode", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.intersectsnode", 
        "syntax": "Range.intersectsNode()", 
        "type": "Range"
    }, 
    "Range.isPointInRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.isPointInRange", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }, 
            {
                "descr": "The offset into Node of the point to compare with the Range.", 
                "name": "offset"
            }
        ], 
        "path": "dom/range.ispointinrange", 
        "syntax": "Range.isPointInRange()", 
        "type": "Range"
    }, 
    "Range.selectNode": {
        "descr": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.", 
        "name": "Range.selectNode", 
        "params": [
            {
                "descr": "The Node to select within a Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.selectnode", 
        "syntax": "range.selectNode(referenceNode);", 
        "type": "Range"
    }, 
    "Range.selectNodeContents": {
        "descr": "The Range.selectNodeContents() sets the Range to contain the contents of a Node.", 
        "name": "Range.selectNodeContents", 
        "params": [
            {
                "descr": "The Node whose contents will be selected within a Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.selectnodecontents", 
        "syntax": "range.selectNodeContents(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setEnd": {
        "descr": "The Range.setEnd() method sets the end position of a Range.", 
        "name": "Range.setEnd", 
        "params": [
            {
                "descr": "The Node where the Range should end.", 
                "name": "endNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset for the end of the Range from the start of endNode.", 
                "name": "endOffset"
            }
        ], 
        "path": "dom/range.setend", 
        "syntax": "range.setEnd(endNode, endOffset);", 
        "type": "Range"
    }, 
    "Range.setEndAfter": {
        "descr": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setEndAfter", 
        "params": [
            {
                "descr": "The Node to end the Range after.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.setendafter", 
        "syntax": "range.setEndAfter(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setEndBefore": {
        "descr": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setEndBefore", 
        "params": [
            {
                "descr": "The Node to end the Range before.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.setendbefore", 
        "syntax": "range.setEndBefore(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setStart": {
        "descr": "The Range.setStart() method sets the start position of a Range.", 
        "name": "Range.setStart", 
        "params": [
            {
                "descr": "The Node where the Range should start.", 
                "name": "startNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset for the start of the Range from the start of startNode.", 
                "name": "startOffset"
            }
        ], 
        "path": "dom/range.setstart", 
        "syntax": "range.setStart(startNode, startOffset);", 
        "type": "Range"
    }, 
    "Range.setStartAfter": {
        "descr": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setStartAfter", 
        "params": [
            {
                "descr": "The Node to start the Range after.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.setstartafter", 
        "syntax": "range.setStartAfter(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setStartBefore": {
        "descr": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setStartBefore", 
        "params": [
            {
                "descr": "The Node before which the Range should start.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range.setstartbefore", 
        "syntax": "range.setStartBefore(referenceNode);", 
        "type": "Range"
    }, 
    "Range.startContainer": {
        "descr": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.", 
        "name": "Range.startContainer", 
        "params": [], 
        "path": "dom/range.startcontainer", 
        "syntax": "startRangeNode = range.startContainer; Example range = document.createRange();\n or range.setStart(startNode,startOffset);\n or range.setEnd(endNode,endOffset);\n or startRangeNode = range.startContainer;);", 
        "type": "Range"
    }, 
    "Range.startOffset": {
        "descr": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.", 
        "name": "Range.startOffset", 
        "params": [], 
        "path": "dom/range.startoffset", 
        "syntax": "CDATASection, then the offset is the number of characters from the start of the startContainer to the boundary point of the Range. For other Node", 
        "type": "Range"
    }, 
    "Range.surroundContents": {
        "descr": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.", 
        "name": "Range.surroundContents", 
        "params": [
            {
                "descr": "A Node to split based on the range.", 
                "name": "newNode"
            }
        ], 
        "path": "dom/range.surroundcontents", 
        "syntax": "range.surroundContents(newNode);", 
        "type": "Range"
    }, 
    "Range.toString": {
        "descr": "The Range.toString() method is a stringifier returning the text of the Range.", 
        "name": "Range.toString", 
        "params": [], 
        "path": "dom/range.tostring", 
        "syntax": "text = range.toString();", 
        "type": "Range"
    }, 
    "RangeError": {
        "descr": "Represents an error when a number is not within the correct range allowed.", 
        "name": "RangeError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an RangeError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/rangeerror", 
        "syntax": "new RangeError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "ReferenceError": {
        "descr": "Represents an error when a non-existent variable is referenced.", 
        "name": "ReferenceError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an ReferenceError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/referenceerror", 
        "syntax": "new ReferenceError([message[, fileName[, linenumber]]])", 
        "type": "Errors"
    }, 
    "RegExp": {
        "descr": "The RegExp constructor creates a regular expression object for matching text with a pattern.", 
        "name": "RegExp", 
        "params": [
            {
                "descr": "The text of the regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If specified, flags can have any combination of the following values:  g  global match", 
                "name": "flags"
            }, 
            {
                "descr": "ignore case", 
                "name": "i"
            }, 
            {
                "descr": "multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)", 
                "name": "m"
            }, 
            {
                "descr": "sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes). ", 
                "name": "y"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "RegExp.prototype"
            }, 
            {
                "descr": "The value of RegExp.length is 2.", 
                "name": "RegExp.length"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "RegExp.prototype.constructor"
            }, 
            {
                "descr": "Whether to test the regular expression against all possible matches in a string, or only against the first.", 
                "name": "RegExp.prototype.global"
            }, 
            {
                "descr": "Whether to ignore case while attempting a match in a string.", 
                "name": "RegExp.prototype.ignoreCase"
            }, 
            {
                "descr": "The index at which to start the next match.", 
                "name": "RegExp.prototype.lastIndex"
            }, 
            {
                "descr": "Whether or not to search in strings across multiple lines.", 
                "name": "RegExp.prototype.multiline"
            }, 
            {
                "descr": "The text of the pattern.", 
                "name": "RegExp.prototype.source"
            }, 
            {
                "descr": "Whether or not the search is sticky.", 
                "name": "RegExp.prototype.sticky"
            }, 
            {
                "descr": "Executes a search for a match in its string parameter.", 
                "name": "RegExp.prototype.exec()"
            }, 
            {
                "descr": "Tests for a match in its string parameter.", 
                "name": "RegExp.prototype.test()"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "RegExp.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "RegExp.prototype.toString()"
            }
        ], 
        "path": "javascript/global_objects/regexp", 
        "syntax": "/pattern/flags;new RegExp(pattern [, flags])", 
        "type": "RegExp"
    }, 
    "RegExp.exec": {
        "descr": "The exec() method executes a search for a match in a specified string. Returns a result array, or null.", 
        "name": "RegExp.exec", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/exec", 
        "syntax": "regexObj.exec(str)", 
        "type": "RegExp"
    }, 
    "RegExp.lastIndex": {
        "descr": "The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.", 
        "name": "RegExp.lastIndex", 
        "params": [], 
        "path": "javascript/global_objects/regexp/lastindex", 
        "syntax": "lastIndex = regExpObj.lastIndex; Description This property is set only if the regular expression used the \"g\" flag to indicate a global search. The following rules apply: If lastIndex is greater than the length of the string, regexp.test and regexp.exec fail, and lastIndex is set to 0. If lastIndex is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at lastIndex. If lastIndex is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and lastIndex is reset to 0. Otherwise, lastIndex is set to the next position following the most recent match. Examples Consider the following sequence of statements: var re = /(hi)?/g;", 
        "type": "RegExp"
    }, 
    "RegExp.sticky": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "RegExp.sticky", 
        "params": [], 
        "path": "javascript/global_objects/regexp/sticky", 
        "syntax": "sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky", 
        "type": "RegExp"
    }, 
    "RegExp.test": {
        "descr": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.", 
        "name": "RegExp.test", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/test", 
        "syntax": "regexObj.test(str)", 
        "type": "RegExp"
    }, 
    "RegExp.toSource": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "RegExp.toSource", 
        "params": [], 
        "path": "javascript/global_objects/regexp/tosource", 
        "syntax": "regexObj.toSource()RegExp.toSource()", 
        "type": "RegExp"
    }, 
    "RegExp.toString": {
        "descr": "The toString() method returns a string representing the regular expression.", 
        "name": "RegExp.toString", 
        "params": [], 
        "path": "javascript/global_objects/regexp/tostring", 
        "syntax": "regexObj.toString()", 
        "type": "RegExp"
    }, 
    "SVGSVGElement": {
        "descr": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.", 
        "name": "SVGSVGElement", 
        "params": [], 
        "path": "dom/svgsvgelement", 
        "syntax": "SVGRect rect, in SVGElement referenceElement)", 
        "type": "SVG"
    }, 
    "ScriptProcessorNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ScriptProcessorNode", 
        "params": [
            {
                "descr": "Returns an integer representing both the input and output buffer size. ", 
                "name": "ScriptProcessNode.bufferSize Read only"
            }, 
            {
                "descr": "Represents the EventHandler to be called.", 
                "name": "ScriptProcessorNode.onaudioprocess"
            }
        ], 
        "path": "dom/scriptprocessornode", 
        "syntax": "ScriptProcessorNodeinterface allows the generation, processing, or analyzing of audio using JavaScript. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "Selection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection", 
        "params": [
            {
                "descr": "The anchor of a selection is the beginning point of the selection. ", 
                "name": "anchor"
            }, 
            {
                "descr": "The focus of a selection is the end point of the selection. ", 
                "name": "focus"
            }, 
            {
                "descr": "A range is a contiguous part of a document. ", 
                "name": "range"
            }, 
            {
                "descr": "Returns the node in which the selection begins.", 
                "name": "anchorNode"
            }, 
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the anchorNode. ", 
                "name": "anchorOffset"
            }, 
            {
                "descr": "Returns the node in which the selection ends.", 
                "name": "focusNode"
            }, 
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the focusNode. ", 
                "name": "focusOffset"
            }, 
            {
                "descr": "Returns a Boolean indicating whether the selection's start and end points are at the same position.", 
                "name": "isCollapsed"
            }, 
            {
                "descr": "Returns the number of ranges in the selection.", 
                "name": "rangeCount"
            }, 
            {
                "descr": "Returns a range object representing one of the ranges currently selected.", 
                "name": "getRangeAt"
            }, 
            {
                "descr": "Collapses the current selection to a single point.", 
                "name": "collapse"
            }, 
            {
                "descr": "Moves the focus of the selection to a specified point.", 
                "name": "extend"
            }, 
            {
                "descr": "Changes the current selection.", 
                "name": "modify"
            }, 
            {
                "descr": "Collapses the selection to the start of the first range in the selection.", 
                "name": "collapseToStart"
            }, 
            {
                "descr": "Collapses the selection to the end of the last range in the selection.", 
                "name": "collapseToEnd"
            }, 
            {
                "descr": "Adds all the children of the specified node to the selection.", 
                "name": "selectAllChildren"
            }, 
            {
                "descr": "A range object that will be added to the selection.", 
                "name": "addRange"
            }, 
            {
                "descr": "Removes a range from the selection.", 
                "name": "removeRange"
            }, 
            {
                "descr": "Removes all ranges from the selection.", 
                "name": "removeAllRanges"
            }, 
            {
                "descr": "Deletes the selection's content from the document.", 
                "name": "deleteFromDocument"
            }, 
            {
                "descr": "Modifies the cursor Bidi level after a change in keyboard direction.", 
                "name": "selectionLanguageChange"
            }, 
            {
                "descr": "Returns a string currently being represented by the selection object, i.e. ", 
                "name": "toString"
            }, 
            {
                "descr": "Indicates if a certain node is part of the selection.", 
                "name": "containsNode"
            }
        ], 
        "path": "dom/selection", 
        "syntax": "window.getSelection()", 
        "type": "Selection"
    }, 
    "Selection.addRange": {
        "descr": "Adds a Range to a Selection.", 
        "name": "Selection.addRange", 
        "params": [
            {
                "descr": "A Range object that will be added to the Selection.", 
                "name": "range"
            }
        ], 
        "path": "dom/selection.addrange", 
        "syntax": "sel.addRange(range)", 
        "type": "Selection"
    }, 
    "Selection.anchorNode": {
        "descr": "Returns the node in which the selection begins.", 
        "name": "Selection.anchorNode", 
        "params": [], 
        "path": "dom/selection.anchornode", 
        "syntax": "sel.anchorNode Notes A user may make a selection from left to right (in document order) or right to left (reverse of document order). The anchor is where the user began the selection. This can be visualized by holding the Shift key and pressing the arrow keys on your keyboard. The selection's anchor does not move, but the selection's focus, the other end of the selection, does move.", 
        "type": "Selection"
    }, 
    "Selection.collapse": {
        "descr": "Collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there.", 
        "name": "Selection.collapse", 
        "params": [
            {
                "descr": "The caret location will be within this node.", 
                "name": "parentNode"
            }, 
            {
                "descr": "0 - Collapses the selection from the anchor to the beginning of parentNode's text.", 
                "name": "offset"
            }
        ], 
        "path": "dom/selection.collapse", 
        "syntax": "sel.collapse(parentNode, offset);", 
        "type": "Selection"
    }, 
    "Selection.collapseToEnd": {
        "descr": "Collapses the selection to the end of the last range in the selection. If the content the selection is in is focused and editable, the caret will blink there.", 
        "name": "Selection.collapseToEnd", 
        "params": [], 
        "path": "dom/selection.collapsetoend", 
        "syntax": "sel.collapseToEnd()", 
        "type": "Selection"
    }, 
    "Selection.collapseToStart": {
        "descr": "Collapses the selection to the start of the first range in the selection. If the content of the selection is focused and editable, the caret will blink there.", 
        "name": "Selection.collapseToStart", 
        "params": [], 
        "path": "dom/selection.collapsetostart", 
        "syntax": "sel.collapseToStart()", 
        "type": "Selection"
    }, 
    "Selection.containsNode": {
        "descr": "Indicates if the node is part of the selection.", 
        "name": "Selection.containsNode", 
        "params": [
            {
                "descr": "The node that is being looked for whether it is part of the selection", 
                "name": "aNode"
            }, 
            {
                "descr": "When  true , containsNode returns true when a part of the node is part of the selection.", 
                "name": "aPartlyContained"
            }
        ], 
        "path": "dom/selection.containsnode", 
        "syntax": "sel.containsNode(aNode,aPartlyContained)", 
        "type": "Selection"
    }, 
    "Selection.deleteFromDocument": {
        "descr": "Deletes the actual text being represented by a selection object from the document's DOM.", 
        "name": "Selection.deleteFromDocument", 
        "params": [], 
        "path": "dom/selection.deletefromdocument", 
        "syntax": "sel.deleteFromDocument()", 
        "type": "Selection"
    }, 
    "Selection.extend": {
        "descr": "Moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus regardless of direction.", 
        "name": "Selection.extend", 
        "params": [
            {
                "descr": "The node within which the focus will be moved.", 
                "name": "parentNode"
            }, 
            {
                "descr": "The offset position within parentNode where the focus will be moved to.", 
                "name": "offset"
            }
        ], 
        "path": "dom/selection.extend", 
        "syntax": "sel.extend(parentNode, offset)", 
        "type": "Selection"
    }, 
    "Selection.focusNode": {
        "descr": "Returns the node in which the selection ends.", 
        "name": "Selection.focusNode", 
        "params": [], 
        "path": "dom/selection.focusnode", 
        "syntax": "sel.focusNode Notes A user may make a selection from left to right (in document order) or right to left (reverse of document order). The focus is where the user ended the selection. This can be visualized by holding the Shift key and pressing the arrow keys on your keyboard to modify the current selection. The selection's focus moves, but the selection's anchor, the other end of the selection, does not move.", 
        "type": "Selection"
    }, 
    "Selection.getRangeAt": {
        "descr": "Returns a range object representing one of the ranges currently selected.", 
        "name": "Selection.getRangeAt", 
        "params": [
            {
                "descr": "The range object that will be returned.", 
                "name": "range"
            }, 
            {
                "descr": "The zero-based index of the range to return. ", 
                "name": "index"
            }
        ], 
        "path": "dom/selection.getrangeat", 
        "syntax": "range = sel.getRangeAt(index)", 
        "type": "Selection"
    }, 
    "Selection.isCollapsed": {
        "descr": "Returns a boolean indicating whether the selection's start and end points are at the same position.", 
        "name": "Selection.isCollapsed", 
        "params": [], 
        "path": "dom/selection.iscollapsed", 
        "syntax": "sel.isCollapsed Notes Even a collapsed selection may have a rangeCount greater than 0. sel.getRangeAt(0)", 
        "type": "Selection"
    }, 
    "Selection.modify": {
        "descr": "Applies a change to the current selection or cursor position, using simple textual commands.", 
        "name": "Selection.modify", 
        "params": [
            {
                "descr": "The type of change to apply. Specify \"move\" to move the current cursor position or \"extend\" to extend the current selection.", 
                "name": "alter"
            }, 
            {
                "descr": "The direction in which to adjust the current selection. ", 
                "name": "direction"
            }, 
            {
                "descr": "The distance to adjust the current selection or cursor position. ", 
                "name": "granularity"
            }
        ], 
        "path": "dom/selection.modify", 
        "syntax": "sel.modify(alter, direction, granularity)", 
        "type": "Selection"
    }, 
    "Selection.removeAllRanges": {
        "descr": "Removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected.", 
        "name": "Selection.removeAllRanges", 
        "params": [], 
        "path": "dom/selection.removeallranges", 
        "syntax": "sel.removeAllRanges();", 
        "type": "Selection"
    }, 
    "Selection.removeRange": {
        "descr": "Removes a range from the selection.", 
        "name": "Selection.removeRange", 
        "params": [
            {
                "descr": "A range object that will be removed to the selection.", 
                "name": "range"
            }
        ], 
        "path": "dom/selection.removerange", 
        "syntax": "sel.removeRange(range)", 
        "type": "Selection"
    }, 
    "Selection.selectAllChildren": {
        "descr": "Adds all the children of the specified node to the selection. Previous selection is lost.", 
        "name": "Selection.selectAllChildren", 
        "params": [
            {
                "descr": "All children of  parentNode will be selected. ", 
                "name": "parentNode"
            }
        ], 
        "path": "dom/selection.selectallchildren", 
        "syntax": "sel.selectAllChildren(parentNode)", 
        "type": "Selection"
    }, 
    "Selection.selectionLanguageChange": {
        "descr": "Modifies the cursor Bidi level after a change in keyboard direction.", 
        "name": "Selection.selectionLanguageChange", 
        "params": [
            {
                "descr": "PR_TRUE if the new language is right-to-left or PR_FALSE if the new language is left-to-right.", 
                "name": "langRTL"
            }
        ], 
        "path": "dom/selection.selectionlanguagechange", 
        "syntax": "sel.selectionLanguageChange(langRTL)", 
        "type": "Selection"
    }, 
    "Selection.toString": {
        "descr": "Returns a string currently being represented by the selection object, i.e. the currently selected text.", 
        "name": "Selection.toString", 
        "params": [], 
        "path": "dom/selection.tostring", 
        "syntax": "string =sel.toString()", 
        "type": "Selection"
    }, 
    "Set": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Set", 
        "params": [], 
        "path": "javascript/global_objects/set", 
        "syntax": "Not supported 13.0 (13) Not supported Not supported Not supported iterable Not supported 17.0 (17) Not supported Not supported Not supported Set.clear() Not supported 19.0 (19) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 13.0 (13) Not supported Not supported Not supported iterable Not supported 17.0 (17) Not supported Not supported Not supported Set.clear() Not supported 19.0 (19) Not supported Not supported Not supported  See also", 
        "type": "Global Objects"
    }, 
    "Strict mode": {
        "descr": "Introduced in JavaScript 1.8.5", 
        "name": "Strict mode", 
        "params": [], 
        "path": "javascript/functions_and_function_scope/strict_mode", 
        "syntax": "{} braces; attempting to apply it to such contexts does nothing. eval code, Function code, event handler attributes, strings passed to setTimeout, and the like are entire scripts, and invoking strict mode in them works as expected. Strict mode for scripts To invoke strict mode for an entire script, put the exact statement \"use strict\"; (or 'use strict';) before any other statements.", 
        "type": "Function"
    }, 
    "String": {
        "descr": "The String global object is a constructor for strings, or a sequence of characters.", 
        "name": "String", 
        "params": [
            {
                "descr": "Anything to be converted to a string.", 
                "name": "thing"
            }, 
            {
                "descr": "Allows the addition of properties to a String object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Returns a string created by using the specified sequence of Unicode values.", 
                "name": "fromCharCode"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "charAt"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "charCodeAt"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "concat"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "contains"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "endsWith"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "indexOf"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "lastIndexOf"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "localeCompare"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "match"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "quote"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "replace"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "search"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "slice"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "split"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "startsWith"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "substr"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "substring"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "toLocaleLowerCase"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "toLocaleUpperCase"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "toLowerCase"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "toSource"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "toString"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "toUpperCase"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "trim Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "trimLeft Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "trimRight Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "valueOf"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "anchor"
            }, 
            {
                "descr": "<big>", 
                "name": "big"
            }, 
            {
                "descr": "<blink>", 
                "name": "blink"
            }, 
            {
                "descr": "<b>", 
                "name": "bold"
            }, 
            {
                "descr": "<tt>", 
                "name": "fixed"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "fontcolor"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "fontsize"
            }, 
            {
                "descr": "<i>", 
                "name": "italics"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "link"
            }, 
            {
                "descr": "<small>.", 
                "name": "small"
            }, 
            {
                "descr": "<strike>", 
                "name": "strike"
            }, 
            {
                "descr": "<sub>", 
                "name": "sub"
            }, 
            {
                "descr": "<sup>", 
                "name": "sup"
            }
        ], 
        "path": "javascript/global_objects/string", 
        "syntax": "'string text'\"string text\"\"\u4e2d\u6587 espa\u00f1ol English \u0939\u093f\u0928\u094d\u0926\u0940 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 portugu\u00eas \u09ac\u09be\u0982\u09b2\u09be \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u65e5\u672c\u8a9e \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \ud55c\uad6d\uc5b4\" Or, using the String global object directly: String(thing)new String(thing)", 
        "type": "String"
    }, 
    "String.charAt": {
        "descr": "Returns the specified character from a string.", 
        "name": "String.charAt", 
        "params": [
            {
                "descr": "An integer between 0 and 1-less-than the length of the string.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charat", 
        "syntax": "returns = string.charAt(index)", 
        "type": "String"
    }, 
    "String.charCodeAt": {
        "descr": "Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).", 
        "name": "String.charCodeAt", 
        "params": [
            {
                "descr": "An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charcodeat", 
        "syntax": "string.charCodeAt(index)", 
        "type": "String"
    }, 
    "String.concat": {
        "descr": "Combines the text of two or more strings and returns a new string.", 
        "name": "String.concat", 
        "params": [
            {
                "descr": "Strings to concatenate to this string.", 
                "name": "string2...stringN"
            }
        ], 
        "path": "javascript/global_objects/string/concat", 
        "syntax": "string.concat(string2, string3[, ..., stringN])", 
        "type": "String"
    }, 
    "String.contains": {
        "descr": "Introduced in JavaScript 1.8.6", 
        "name": "String.contains", 
        "params": [
            {
                "descr": "A string to be searched for within this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/contains", 
        "syntax": "var contained = str.contains(searchString [, position])", 
        "type": "String"
    }, 
    "String.endsWith": {
        "descr": "Determines whether a string ends with the characters of another string, returning true or false as appropriate.", 
        "name": "String.endsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the end of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/endswith", 
        "syntax": "var endsWith = str.endsWith(searchString [, position])", 
        "type": "String"
    }, 
    "String.fontcolor": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.fontcolor", 
        "params": [
            {
                "descr": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. ", 
                "name": "color"
            }
        ], 
        "path": "javascript/global_objects/string/fontcolor", 
        "syntax": "fontcolor(color)", 
        "type": "String"
    }, 
    "String.fromCharCode": {
        "descr": "Returns a string created by using the specified sequence of Unicode values.", 
        "name": "String.fromCharCode", 
        "params": [
            {
                "descr": "A sequence of numbers that are Unicode values.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcharcode", 
        "syntax": "String.fromCharCode(num1, ..., numN)", 
        "type": "String"
    }, 
    "String.indexOf": {
        "descr": "Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, returns -1 if the value is not found.", 
        "name": "String.indexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for.", 
                "name": "searchValue"
            }, 
            {
                "descr": "The location within the calling string to start the search from. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/string/indexof", 
        "syntax": "string.indexOf(searchValue[, fromIndex])", 
        "type": "String"
    }, 
    "String.lastIndexOf": {
        "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.", 
        "name": "String.lastIndexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for.", 
                "name": "searchValue"
            }, 
            {
                "descr": "The location within the calling string to end the search at, indexed from left to right. ", 
                "name": "toIndex"
            }
        ], 
        "path": "javascript/global_objects/string/lastindexof", 
        "syntax": "string.lastIndexOf(searchValue[, toIndex])", 
        "type": "String"
    }, 
    "String.localeCompare": {
        "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.", 
        "name": "String.localeCompare", 
        "params": [
            {
                "descr": "The string against which the referring string is comparing", 
                "name": "compareString"
            }, 
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "kn"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "kf"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ", 
                "name": "usage"
            }, 
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ", 
                "name": "sensitivity"
            }, 
            {
                "descr": "Whether punctuation should be ignored. ", 
                "name": "ignore\u00adPunctua\u00adtion"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "numeric"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "caseFirst"
            }
        ], 
        "path": "javascript/global_objects/string/localecompare", 
        "syntax": "string.localeCompare(compareString [, locales [, options]])", 
        "type": "String"
    }, 
    "String.match": {
        "descr": "Used to retrieve the matches when matching a string against a regular expression.", 
        "name": "String.match", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/match", 
        "syntax": "var array = string.match(regexp);", 
        "type": "String"
    }, 
    "String.prototype": {
        "descr": "Represents the String prototype object.", 
        "name": "String.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "charAt"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "charCodeAt"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "concat"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "contains"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "endsWith"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "indexOf"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "lastIndexOf"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "localeCompare"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "match"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "quote"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "replace"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "search"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "slice"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "split"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "startsWith"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "substr"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "substring"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "toLocaleLowerCase"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "toLocaleUpperCase"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "toLowerCase"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "toSource"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "toString"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "toUpperCase"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "trim Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "trimLeft Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "trimRight Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "valueOf"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "anchor"
            }, 
            {
                "descr": "<big>", 
                "name": "big"
            }, 
            {
                "descr": "<blink>", 
                "name": "blink"
            }, 
            {
                "descr": "<b>", 
                "name": "bold"
            }, 
            {
                "descr": "<tt>", 
                "name": "fixed"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "fontcolor"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "fontsize"
            }, 
            {
                "descr": "<i>", 
                "name": "italics"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "link"
            }, 
            {
                "descr": "<small>.", 
                "name": "small"
            }, 
            {
                "descr": "<strike>", 
                "name": "strike"
            }, 
            {
                "descr": "<sub>", 
                "name": "sub"
            }, 
            {
                "descr": "<sup>", 
                "name": "sup"
            }
        ], 
        "path": "javascript/global_objects/string/prototype", 
        "syntax": "split  Splits a String object into an array of strings by separating the string into substrings.  startsWith  Determines whether a string begins with the characters of another string.  substr  Returns the characters in a string beginning at the specified location through the specified number of characters.  substring  Returns the characters in a string between two indexes into the string.  toLocaleLowerCase  The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase.  toLocaleUpperCase  The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase.  toLowerCase  Returns the calling string value converted to lower case.  toSource   Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.  toString  Returns a string representing the specified object. Overrides the Object.prototype.toString method.  toUpperCase  Returns the calling string value converted to uppercase.  trim Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.  trimLeft Requires JavaScript 1.8.1   Trims whitespace from the left side of the string.  trimRight Requires JavaScript 1.8.1   Trims whitespace from the right side of the string.  valueOf  Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.  HTML wrapper methods   HTML wrapper methods   Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.  Should we change these to point to our own docs rather than W3C? In any case, they're staying as is for now because with the current structure of the HTML pages here at MDC, we cannot reference specific attributes as necessary anyway (e.g., the difference between the anchor method and the link method). Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.", 
        "type": "String"
    }, 
    "String.replace": {
        "descr": "Returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.", 
        "name": "String.replace", 
        "params": [
            {
                "descr": "A RegExp object. The match is replaced by the return value of parameter #2.", 
                "name": "regexp"
            }, 
            {
                "descr": "A String that is to be replaced by newSubStr.", 
                "name": "substr"
            }, 
            {
                "descr": "The String that replaces the substring received from parameter #1. ", 
                "name": "newSubStr"
            }, 
            {
                "descr": "A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). ", 
                "name": "function"
            }, 
            {
                "descr": "A string specifying a combination of regular expression flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "global match", 
                "name": "g"
            }, 
            {
                "descr": "ignore case", 
                "name": "i"
            }, 
            {
                "descr": "match over multiple lines", 
                "name": "m"
            }, 
            {
                "descr": "sticky", 
                "name": "y"
            }
        ], 
        "path": "javascript/global_objects/string/replace", 
        "syntax": "newstring = str.replace(regexp|substr, newSubStr|function[,  flags]);", 
        "type": "String"
    }, 
    "String.search": {
        "descr": "Executes the search for a match between a regular expression and this String object.", 
        "name": "String.search", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/search", 
        "syntax": "string.search(regexp)", 
        "type": "String"
    }, 
    "String.slice": {
        "descr": "Extracts a section of a string and returns a new string.", 
        "name": "String.slice", 
        "params": [
            {
                "descr": "The zero-based index at which to begin extraction. ", 
                "name": "beginSlice"
            }, 
            {
                "descr": "The zero-based index at which to end extraction. ", 
                "name": "endSlice"
            }
        ], 
        "path": "javascript/global_objects/string/slice", 
        "syntax": "String Implemented in JavaScript 1.2 ECMAScript Edition ECMAScript 3rd Edition Syntax string.slice(beginslice[, endSlice])", 
        "type": "String"
    }, 
    "String.split": {
        "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
        "name": "String.split", 
        "params": [
            {
                "descr": "Specifies the character(s) to use for separating the string. ", 
                "name": "separator"
            }, 
            {
                "descr": "Integer specifying a limit on the number of splits to be found. ", 
                "name": "limit"
            }
        ], 
        "path": "javascript/global_objects/string/split", 
        "syntax": "string.split([separator][, limit])", 
        "type": "String"
    }, 
    "String.startsWith": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "String.startsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the start of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/startswith", 
        "syntax": "true or false as appropriate. Method of String Implemented in JavaScript 1.8.5+ ECMAScript Edition None (Harmony Proposal) Syntax", 
        "type": "String"
    }, 
    "String.sub": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.sub", 
        "params": [], 
        "path": "javascript/global_objects/string/sub", 
        "syntax": "sub()", 
        "type": "String"
    }, 
    "String.substr": {
        "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
        "name": "String.substr", 
        "params": [
            {
                "descr": "Location at which to begin extracting characters.", 
                "name": "start"
            }, 
            {
                "descr": "The number of characters to extract.", 
                "name": "length"
            }
        ], 
        "path": "javascript/global_objects/string/substr", 
        "syntax": "string.substr(start[, length])", 
        "type": "String"
    }, 
    "String.substring": {
        "descr": "Returns a subset of a string between one index and another, or through the end of the string.", 
        "name": "String.substring", 
        "params": [
            {
                "descr": "An integer between 0 and the length of the string.", 
                "name": "indexA"
            }, 
            {
                "descr": "(optional) An integer between 0 and the length of the string.", 
                "name": "indexB"
            }
        ], 
        "path": "javascript/global_objects/string/substring", 
        "syntax": "string.substring(indexA[, indexB])", 
        "type": "String"
    }, 
    "String.sup": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.sup", 
        "params": [], 
        "path": "javascript/global_objects/string/sup", 
        "syntax": "sup()", 
        "type": "String"
    }, 
    "String.toLocaleLowerCase": {
        "descr": "Returns the calling string value converted to lower case, according to any locale-specific case mappings.", 
        "name": "String.toLocaleLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocalelowercase", 
        "syntax": "string.toLocaleLowerCase()", 
        "type": "String"
    }, 
    "String.toLocaleUpperCase": {
        "descr": "Returns the calling string value converted to upper case, according to any locale-specific case mappings.", 
        "name": "String.toLocaleUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocaleuppercase", 
        "syntax": "toLocaleUpperCase()", 
        "type": "String"
    }, 
    "String.toLowerCase": {
        "descr": "Returns the calling string value converted to lowercase.", 
        "name": "String.toLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolowercase", 
        "syntax": "string.toLowerCase()", 
        "type": "String"
    }, 
    "String.toString": {
        "descr": "Returns a string representing the specified object.", 
        "name": "String.toString", 
        "params": [], 
        "path": "javascript/global_objects/string/tostring", 
        "syntax": "string.toString()", 
        "type": "String"
    }, 
    "String.toUpperCase": {
        "descr": "Returns the calling string value converted to uppercase.", 
        "name": "String.toUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/touppercase", 
        "syntax": "string.toUpperCase()", 
        "type": "String"
    }, 
    "String.trim": {
        "descr": "Introduced in JavaScript 1.8.1", 
        "name": "String.trim", 
        "params": [], 
        "path": "javascript/global_objects/string/trim", 
        "syntax": "string.trim()", 
        "type": "String"
    }, 
    "String.valueOf": {
        "descr": "Returns the primitive value of a String object.", 
        "name": "String.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/string/valueof", 
        "syntax": "string.valueOf()", 
        "type": "String"
    }, 
    "StyleSheet.disabled": {
        "descr": "This property indicates whether the current stylesheet is applied or not.", 
        "name": "StyleSheet.disabled", 
        "params": [], 
        "path": "dom/stylesheet.disabled", 
        "syntax": "bool = stylesheet.disabled  Example // if the stylesheet is disabled... if (stylesheet.disabled) {   // apply style in-line }", 
        "type": "CSS"
    }, 
    "StyleSheet.href": {
        "descr": "Returns the location of the stylesheet.", 
        "name": "StyleSheet.href", 
        "params": [], 
        "path": "dom/stylesheet.href", 
        "syntax": "uri = stylesheet.href  Parameters uri is a string containing the stylesheet's URI. Example  // on a local machine:  <html>   <head>    <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" />    <script>     function sref() {      alert(document.styleSheets[0].href);\n or      }   </script>   </head>   <body>    <div class=\"thunder\">Thunder</div>   <button onclick=\"sref()\">ss</button>  </body>  </html>// returns \"file:////C:/Windows/Desktop/example.css);", 
        "type": "CSS"
    }, 
    "StyleSheet.ownerNode": {
        "descr": "ownerNode returns the node that associates this style sheet with the document.", 
        "name": "StyleSheet.ownerNode", 
        "params": [], 
        "path": "dom/stylesheet.ownernode", 
        "syntax": "objRef = stylesheet.ownerNode  Example <html> <head>  <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" />  <script>   function stilo() {    alert(document.styleSheets[0].ownerNode);\n or    }  </script>  </head> <body>);", 
        "type": "CSS"
    }, 
    "StyleSheet.parentStyleSheet": {
        "descr": "Returns the stylesheet that is including this one, if any.", 
        "name": "StyleSheet.parentStyleSheet", 
        "params": [], 
        "path": "dom/stylesheet.parentstylesheet", 
        "syntax": "objRef = stylesheet.parentStyleSheet  Example // find the top level stylesheetif (stylesheet.parentStyleSheet) {    sheet = stylesheet.parentStyleSheet;} else {    sheet = stylesheet;}", 
        "type": "CSS"
    }, 
    "SyntaxError": {
        "descr": "Represents an error when trying to interpret syntactically invalid code.", 
        "name": "SyntaxError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an SyntaxError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/syntaxerror", 
        "syntax": "new SyntaxError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Text.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Text.constructor", 
        "params": [], 
        "path": "dom/text.text", 
        "syntax": "Text()", 
        "type": "Miscellaneous"
    }, 
    "Text.isElementContentWhitespace": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Text.isElementContentWhitespace", 
        "params": [], 
        "path": "dom/text.iselementcontentwhitespace", 
        "syntax": "b = textnode.isElementContentWhitespace; Example In the example below, we create a node with mixed display and whitespace characters and the attribute is false. var tn = document.createTextNode(\"Hello world\");\n or tn.isElementContentWhitespace; /* evaluates to false */);", 
        "type": "Miscellaneous"
    }, 
    "Text.replaceWholeText": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Text.replaceWholeText", 
        "params": [], 
        "path": "dom/text.replacewholetext", 
        "syntax": "replacementNode = textnode.replaceWholeText(content)", 
        "type": "Miscellaneous"
    }, 
    "Text.splitText": {
        "descr": "The Text.splitText() method breaks the Textnode into two nodes at the specified offset, keeping both nodes in the tree as siblings.", 
        "name": "Text.splitText", 
        "params": [], 
        "path": "dom/text.splittext", 
        "syntax": "replacementNode = textnode.splitText(offset)", 
        "type": "Miscellaneous"
    }, 
    "Text.wholeText": {
        "descr": "The Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order. This allows to specify any text node and obtain all adjacent text as a single string.", 
        "name": "Text.wholeText", 
        "params": [], 
        "path": "dom/text.wholetext", 
        "syntax": "str = textnode.wholeText; Notes and example Suppose you have the following simple paragraph within your webpage (with some whitespace added to aid formatting throughout the code samples here), whose DOM node is stored in the variable para", 
        "type": "Miscellaneous"
    }, 
    "TextDecoder": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the decoder, that is a string describing the method the TextDecoder will use.", 
                "name": "TextDecoder.encoding Read only"
            }, 
            {
                "descr": "Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.", 
                "name": "TextDecoder()"
            }, 
            {
                "descr": "Returns a DOMString containing the text decoded with the method of the specific TextDecoder object.", 
                "name": "TextDecoder.decode()"
            }
        ], 
        "path": "dom/textdecoder", 
        "syntax": "TextDecoder interface represents a decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... A decoder takes a stream of bytes as input and emits a stream of code points. Properties The TextDecoder interface doesn't inherit any property.  TextDecoder.encoding Read only   Is a DOMString containing the name of the decoder, that is a string describing the method the TextDecoder will use. Constructor  TextDecoder()", 
        "type": "Encoding"
    }, 
    "TextDecoder.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder.constructor", 
        "params": [
            {
                "descr": "Is a DOMString, defaulting to \"utf-8\", containing the label of the encoder. ", 
                "name": "utfLabel Optional"
            }, 
            {
                "descr": "Is a TextDecoderOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textdecoder.textdecoder", 
        "syntax": "TextDecoder()", 
        "type": "Encoding"
    }, 
    "TextDecoder.decode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder.decode", 
        "params": [
            {
                "descr": "Is an ArrayBufferView containing the text to encode.", 
                "name": "buffer Optional"
            }, 
            {
                "descr": "Is a TextDecodeOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textdecoder.decode", 
        "syntax": "TextDecoder.decode method returns a DOMString containing the text, given in parameters, decoded with the specific method for that TextDecoder object. Syntax b1 = encoder.decode(buffer, options);\n or b2 = encoder.decode(buffer);\n or b3 = encoder.decode();", 
        "type": "Encoding"
    }, 
    "TextDecoder.encoding": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder.encoding", 
        "params": [], 
        "path": "dom/textdecoder.encoding", 
        "syntax": "TextDecoder.encoding read-only property returns a DOMString containing the name of the decoding algorithm used by the specific decoder. It can be one of the following values: The recommended encoding for the Web: 'utf-8'. The legacy single-byte encodings: 'ibm866', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4', 'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8'', 'iso-8859-8i', 'iso-8859-10', 'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', 'koi8-r', 'koi8-u', 'macintosh', 'windows-874', 'windows-1250', 'windows-1251', 'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255', 'windows-1256', 'windows-1257', 'windows-1258', or 'x-mac-cyrillic'. The legacy multi-byte Chinese (simplified) encodings: 'gbk'", 
        "type": "Encoding"
    }, 
    "TextEncoder": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the encoder, that is a string describing the method the TextEncoder will use.", 
                "name": "TextEncoder.encoding Read only"
            }, 
            {
                "descr": "Returns a newly constructed TextEncoder that will generate a byte stream with the encoding method specified in parameters.", 
                "name": "TextEncoder()"
            }, 
            {
                "descr": "Returns a Uint8Array containing the text encoded with the method for this specific TextEncoder object.", 
                "name": "TextEncoder.encode()"
            }
        ], 
        "path": "dom/textencoder", 
        "syntax": "TextEncoder interface represents an encoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... An encoder takes a stream of code points as input and emits a stream of bytes. Properties The TextEncoder interface doesn't inherit any property.  TextEncoder.encoding Read only   Is a DOMString containing the name of the encoder, that is a string describing the method the TextEncoder will use. Constructor  TextEncoder()", 
        "type": "Encoding"
    }, 
    "TextEncoder.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.constructor", 
        "params": [
            {
                "descr": "Is a DOMString containing the label of the encoder. ", 
                "name": "utfLabel"
            }
        ], 
        "path": "dom/textencoder.textencoder", 
        "syntax": "TextEncoder()", 
        "type": "Encoding"
    }, 
    "TextEncoder.encode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.encode", 
        "params": [
            {
                "descr": "Is a DOMString containing the text to encode.", 
                "name": "buffer"
            }, 
            {
                "descr": "Is a TextEncodeOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textencoder.encode", 
        "syntax": "TextEncoder.encode method returns a Uint8Array containing the text given in parameters encoded with the specific method for that TextEncoder object. Syntax b1 = encoder.encode(buffer, options);\n or b2 = encoder.encode(buffer);", 
        "type": "Encoding"
    }, 
    "TextEncoder.encoding": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.encoding", 
        "params": [], 
        "path": "dom/textencoder.encoding", 
        "syntax": "TextEncoder.encoding read-only property returns a DOMString containing the name of the encoding algorithm used by the specific encoder. It can only have the following value 'utf-8'. Syntax b = encoder.encoding; Specifications Specification Status Comment Encoding Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support Not supported 19.0 (19.0) [1] Not supported ? Not supported Available in Web Workers Not supported 20.0 (20.0) Not supported ? Not supported   Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile Basic support Not supported 19.0 (19.0) [1] 1.0.1 (19.0) Not supported ? Not supported Available in Web Workers Not supported 20.0 (20.0) 1.0.1 (20.0) Not supported ? Not supported  [1] An earlier, and slightly different, version of the specification was implemented in Firefox 18.", 
        "type": "Encoding"
    }, 
    "TimeRanges.end": {
        "descr": "Returns the time offset at which a specified time range ends.", 
        "name": "TimeRanges.end", 
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.", 
                "name": "INDEX_SIZE_ERR"
            }
        ], 
        "path": "dom/timeranges.end", 
        "syntax": "endTime = TimeRanges.end(index)", 
        "type": "Miscellaneous"
    }, 
    "TimeRanges.length": {
        "descr": "Returns the number of ranges in the object.", 
        "name": "TimeRanges.length", 
        "params": [], 
        "path": "dom/timeranges.length", 
        "syntax": "length = TimeRanges.length; Example Given a video element with the ID \"myVideo\": var v = document.GetElementById(\"myVideo\");\n or var buf = v.buffered;var numRanges = buf.length;if (buf.length == 1)\u00a0{\u00a0 // only one range\u00a0 if (buf.start(0) == 0 &&\u00a0buf.end(0) == v.duration) {\u00a0\u00a0\u00a0 // The one range starts at the beginning and ends at\u00a0\u00a0\u00a0 // the end of the video, so the whole thing is loaded\u00a0 }});", 
        "type": "Miscellaneous"
    }, 
    "TimeRanges.start": {
        "descr": "Returns the time offset at which a specified time range begins.", 
        "name": "TimeRanges.start", 
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.", 
                "name": "INDEX_SIZE_ERR"
            }
        ], 
        "path": "dom/timeranges.start", 
        "syntax": "startTime = TimeRanges.start(index)", 
        "type": "Miscellaneous"
    }, 
    "Touch.force": {
        "descr": "Returns the amount of pressure the user is applying to the touch surface for this Touch.", 
        "name": "Touch.force", 
        "params": [
            {
                "descr": "The amount of pressure the user is applying to the touch surface. ", 
                "name": "force"
            }
        ], 
        "path": "dom/touch.force", 
        "syntax": "var force = touchItem.force; Return value  force  The amount of pressure the user is applying to the touch surface. This is a value between 0.0 (no pressure) and 1.0 (the maximum amount of pressure the hardware can recognize). Specification Touch Events Specification", 
        "type": "Touch"
    }, 
    "Touch.identifier": {
        "descr": "Returns a value uniquely identifying this point of contact with the touch surface. This value remains consistent for every event involving this finger's (or stylus's) movement on the surface until it is lifted off the surface.", 
        "name": "Touch.identifier", 
        "params": [
            {
                "descr": "The unique ID of the Touch object.", 
                "name": "id"
            }
        ], 
        "path": "dom/touch.identifier", 
        "syntax": "var id = touchItem.identifier; Return value  id  The unique ID of the Touch", 
        "type": "Touch"
    }, 
    "TouchEvent.changedTouches": {
        "descr": "A TouchList listing all the Touch objects for touch points that contributed to this touch event.", 
        "name": "TouchEvent.changedTouches", 
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that contributed to this touch event.", 
                "name": "touches"
            }
        ], 
        "path": "dom/touchevent.changedtouches", 
        "syntax": "var touches = touchEvent.changedTouches; This property is read-only. Return value  touches  A TouchList", 
        "type": "Touch"
    }, 
    "TouchEvent.targetTouches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.", 
        "name": "TouchEvent.targetTouches", 
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.", 
                "name": "touches"
            }
        ], 
        "path": "dom/touchevent.targettouches", 
        "syntax": "var touches = touchEvent.targetTouches; This property is read-only. Return value  touches  A TouchList", 
        "type": "Touch"
    }, 
    "TouchEvent.touches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target was at touchstart time.", 
        "name": "TouchEvent.touches", 
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target was at touchstart time.", 
                "name": "touches"
            }
        ], 
        "path": "dom/touchevent.touches", 
        "syntax": "var touches = touchEvent.touches; This property is read-only. Return value  touches  A TouchList", 
        "type": "Touch"
    }, 
    "TouchList": {
        "descr": "A TouchList represents a list of all of the points of contact with a touch surface; for example, if the user has three fingers on the screen (or trackpad), the corresponding TouchList would have one Touch object for each finger, for a total of three entries.", 
        "name": "TouchList", 
        "params": [
            {
                "descr": "The number of Touch objects in the TouchList.", 
                "name": "TouchList.length Read only"
            }, 
            {
                "descr": "Returns the first Touch item in the list whose identifier matches a specified value.", 
                "name": "TouchList.identifiedTouch()"
            }, 
            {
                "descr": "Returns the Touch object at the specified index in the list. ", 
                "name": "TouchList.item()"
            }
        ], 
        "path": "dom/touchlist", 
        "syntax": "TouchList.item()", 
        "type": "Touch"
    }, 
    "TouchList.identifiedTouch": {
        "descr": "This method returns the first Touch item in the TouchList matching the specified identifier.", 
        "name": "TouchList.identifiedTouch", 
        "params": [
            {
                "descr": "An integer value identifying the Touch object to retrieve from the list.", 
                "name": "id"
            }, 
            {
                "descr": "A Touch object matching the specified id.", 
                "name": "touchItem"
            }
        ], 
        "path": "dom/touchlist.identifiedtouch", 
        "syntax": "var touchItem = touchList.identifiedTouch(id);", 
        "type": "Touch"
    }, 
    "TouchList.item": {
        "descr": "Returns the Touch object at the specified index into the TouchList. You may also use standard array syntax to access items in the list.", 
        "name": "TouchList.item", 
        "params": [
            {
                "descr": "The index into the TouchList of the object to retrieve.", 
                "name": "index"
            }, 
            {
                "descr": "The requested Touch object from the TouchList.", 
                "name": "touchItem"
            }
        ], 
        "path": "dom/touchlist.item", 
        "syntax": "var touchItem = touchList.item(index);", 
        "type": "Touch"
    }, 
    "TouchList.length": {
        "descr": "This read-only property indicates the number of items in a TouchList.", 
        "name": "TouchList.length", 
        "params": [], 
        "path": "dom/touchlist.length", 
        "syntax": "numTouches = touchList.length; numTouches : An integer indicating the number of Touch", 
        "type": "Touch"
    }, 
    "TransitionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent", 
        "params": [
            {
                "descr": "Is a DOMString containing the name CSS property associated with the transition.", 
                "name": "TransitionEvent.animationName Read only"
            }, 
            {
                "descr": "Is a float giving the amount of time the transtion has been running, in seconds, when this event fired. ", 
                "name": "TransitionEvent.elapsedTime Read only"
            }, 
            {
                "descr": "Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. ", 
                "name": "TransitionEvent.pseudoElement Read only"
            }, 
            {
                "descr": "Creates a TransitionEvent event with the given parameters.", 
                "name": "TransitionEvent()"
            }, 
            {
                "descr": "Initializes a TransitionEvent created using the deprecated Document.createEvent(\"TransitionEvent\") method.", 
                "name": "TransitionEvent.initTransitionEvent()"
            }
        ], 
        "path": "dom/transitionevent", 
        "syntax": "TransitionEvent interface represents events providing information related to transitions. Properties Also inherits properties from its parent Event.  TransitionEvent.animationName", 
        "type": "Events"
    }, 
    "TransitionEvent.animationName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.animationName", 
        "params": [], 
        "path": "dom/transitionevent.animationname", 
        "syntax": "TransitionEvent.transitionName read-only property is a DOMString containing the name of the CSS property associated with the transition. Syntax name = TransitionEvent.transitionName Specifications Specification Status Comment CSS Transitions Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)  See also", 
        "type": "Events"
    }, 
    "TransitionEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the TransitionEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition. ", 
                "name": "animationName Optional"
            }, 
            {
                "descr": "Is float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "elapsedTime Optional"
            }, 
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ", 
                "name": "pseudoElement Optional"
            }
        ], 
        "path": "dom/transitionevent.transitionevent", 
        "syntax": "TransitionEvent()", 
        "type": "Events"
    }, 
    "TransitionEvent.elapsedTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.elapsedTime", 
        "params": [], 
        "path": "dom/transitionevent.elapsedtime", 
        "syntax": "TransionnEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired. This value is not affected by the transition-delay property. Syntax name = TransitionEvent.elapsedTime Specifications Specification Status Comment CSS Transitions Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)  See also", 
        "type": "Events"
    }, 
    "TransitionEvent.pseudoElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.pseudoElement", 
        "params": [], 
        "path": "dom/transitionevent.pseudoelement", 
        "syntax": "TransitionEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''. Syntax name = TransitionEvent.pseudoElement Specifications Specification Status Comment CSS Transitions Working Draft Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "TreeWalker": {
        "descr": "The TreeWalker object represents the nodes of a document subtree and a position within them.", 
        "name": "TreeWalker", 
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the TreeWalker was created.", 
                "name": "TreeWalker.root Read only"
            }, 
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. ", 
                "name": "TreeWalker.whatToShow Read only"
            }, 
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.", 
                "name": "TreeWalker.filter Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "TreeWalker.expandEntityReferences Read only"
            }, 
            {
                "descr": "Is the Node on which the TreeWalker is currently pointing at.", 
                "name": "TreeWalker.currentNode"
            }, 
            {
                "descr": "Moves the current Node to the first visible ancestor node in the document order, and returns the found node. ", 
                "name": "TreeWalker.parentNode()"
            }, 
            {
                "descr": "Moves the current Node to the first visible child of the current node, and returns the found child. ", 
                "name": "TreeWalker.firstChild()"
            }, 
            {
                "descr": "Moves the current Node to the last visible child of the current node, and returns the found child. ", 
                "name": "TreeWalker.lastChild()"
            }, 
            {
                "descr": "Moves the current Node to its previous sibling, if any, and returns the found sibling. ", 
                "name": "TreeWalker.previousSibling()"
            }, 
            {
                "descr": "Moves the current Node to its next sibling, if any, and returns the found sibling. ", 
                "name": "TreeWalker.nextSibling()"
            }, 
            {
                "descr": "Moves the current Node to the previous visible node in the document order, and returns the found node. ", 
                "name": "TreeWalker.previousNode()"
            }, 
            {
                "descr": "Moves the current Node to the next visible node in the document order, and returns the found node. ", 
                "name": "TreeWalker.nextNode()"
            }
        ], 
        "path": "dom/treewalker", 
        "syntax": "CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.currentNode": {
        "descr": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.", 
        "name": "TreeWalker.currentNode", 
        "params": [], 
        "path": "dom/treewalker.currentnode", 
        "syntax": "node = treeWalker.currentNode;treeWalker.currentNode = node; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = treeWalker.currentNode; // the root element as it is the first element!);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.expandEntityReferences": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "TreeWalker.expandEntityReferences", 
        "params": [], 
        "path": "dom/treewalker.expandentityreferences", 
        "syntax": "expand = treeWalker.expandEntityReferences; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or expand = treeWalker.expandEntityReferences;);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.filter": {
        "descr": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.", 
        "name": "TreeWalker.filter", 
        "params": [], 
        "path": "dom/treewalker.filter", 
        "syntax": "nodeFilter = treeWalker.filter; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or nodeFilter = treeWalker.filter; // document.body in this case);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.firstChild": {
        "descr": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.firstChild", 
        "params": [], 
        "path": "dom/treewalker.firstchild", 
        "syntax": "node = treeWalker.firstChild; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or var node = treeWalker.firstChild();\n or  // returns the first child of the root element, or null if none);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.lastChild": {
        "descr": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.lastChild", 
        "params": [], 
        "path": "dom/treewalker.lastchild", 
        "syntax": "node = treeWalker.lastChild();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.nextNode": {
        "descr": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.nextNode", 
        "params": [], 
        "path": "dom/treewalker.nextnode", 
        "syntax": "node = treeWalker.nextNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.nextSibling": {
        "descr": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.", 
        "name": "TreeWalker.nextSibling", 
        "params": [], 
        "path": "dom/treewalker.nextsibling", 
        "syntax": "node = treeWalker.nextSibling();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.parentNode": {
        "descr": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.", 
        "name": "TreeWalker.parentNode", 
        "params": [], 
        "path": "dom/treewalker.parentnode", 
        "syntax": "node = treeWalker.parentNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.previousNode": {
        "descr": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.", 
        "name": "TreeWalker.previousNode", 
        "params": [], 
        "path": "dom/treewalker.previousnode", 
        "syntax": "node = treeWalker.previousNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.previousSibling": {
        "descr": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.", 
        "name": "TreeWalker.previousSibling", 
        "params": [], 
        "path": "dom/treewalker.previoussibling", 
        "syntax": "node = treeWalker.previousSibling();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.root": {
        "descr": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.", 
        "name": "TreeWalker.root", 
        "params": [], 
        "path": "dom/treewalker.root", 
        "syntax": "root = TreeWalker.root; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = treeWalker.root; // document.body in this case);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.whatToShow": {
        "descr": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:", 
        "name": "TreeWalker.whatToShow", 
        "params": [], 
        "path": "dom/treewalker.whattoshow", 
        "syntax": "CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document", 
        "type": "TreeWalker"
    }, 
    "TypeError": {
        "descr": "Represents an error when a value is not of the expected type.", 
        "name": "TypeError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an TypeError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/typeerror", 
        "syntax": "new TypeError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Types": {
        "descr": "JavaScript provides several built-in datatypes. In addition to those, this page documents virtual types like Selectors, enhanced pseudo-types like Events and all and everything you wanted to know about Functions.", 
        "name": "Types", 
        "params": [], 
        "path": "jquery/types", 
        "syntax": "\"x defaulted to false\" is printed.  To keep the examples short, the invert (\"not\") operator and double-negation are used to show a boolean context:", 
        "type": "Miscellaneous"
    }, 
    "URIError": {
        "descr": "Represents an error when a malformed URI is encountered.", 
        "name": "URIError", 
        "params": [
            {
                "descr": "Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to a URIError object.", 
                "name": "prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Error name.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/urierror", 
        "syntax": "new URIError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "URL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.URL", 
        "params": [], 
        "path": "dom/window.url", 
        "syntax": "Window.URL property returns a URL object that provides static methods used for creating and managing object URLs.  It is good practice to call the URL constructor instead of using this property.  Syntax url = window.URL; Specification Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 8.0 as webkitURL", 
        "type": "window"
    }, 
    "URL.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URL.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing an absolute or relative URL. ", 
                "name": "urlString"
            }, 
            {
                "descr": "Is a DOMString representing the base URL to use in case urlString is a relative URL. ", 
                "name": "baseURLstring Optional"
            }, 
            {
                "descr": "Is a URL object representing the base URL to use in case urlString is a relative URL.", 
                "name": "baseURLobject"
            }
        ], 
        "path": "dom/url.url", 
        "syntax": "URL()", 
        "type": "URL"
    }, 
    "URL.createObjectURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URL.createObjectURL", 
        "params": [
            {
                "descr": "Is a File object or a Blob object to create a object URL for.", 
                "name": "blob"
            }
        ], 
        "path": "dom/url.createobjecturl", 
        "syntax": "URL.createObjectURL()", 
        "type": "URL"
    }, 
    "URL.revokeObjectURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URL.revokeObjectURL", 
        "params": [
            {
                "descr": "is a DOMString representing the object URL that was created by calling URL.createObjectURL().", 
                "name": "objectURL"
            }
        ], 
        "path": "dom/url.revokeobjecturl", 
        "syntax": "URL.revokeObjectURL()", 
        "type": "URL"
    }, 
    "URLUtils": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtils", 
        "params": [
            {
                "descr": "Is a DOMString containing the whole URL.", 
                "name": "URLUtils.href"
            }, 
            {
                "descr": "Is a DOMString containing the protocol scheme of the URL, including the final ':'.", 
                "name": "URLUtils.protocol"
            }, 
            {
                "descr": "Is a DOMString containing the host, that is the hostname, and then, if the port of the URL is not empty (which can happen because it was not specified or because it was specified to be the default port of the URL's scheme), a ':', and the port of the URL.", 
                "name": "URLUtils.host"
            }, 
            {
                "descr": "Is a DOMString containing the domain of the URL.", 
                "name": "URLUtils.hostname"
            }, 
            {
                "descr": "Is a DOMString containing the port number of the URL.", 
                "name": "URLUtils.port"
            }, 
            {
                "descr": "Is a DOMString containing an initial '/' followed by the path of the URL.", 
                "name": "URLUtils.pathname"
            }, 
            {
                "descr": "Is a DOMString containing a '?' followed by the parameters of the URL.", 
                "name": "URLUtils.search"
            }, 
            {
                "descr": "Is a DOMString containing a '#' followed by the fragment identifier of the URL.", 
                "name": "URLUtils.hash"
            }, 
            {
                "descr": "Is a DOMString containing the username specified before the domain name.", 
                "name": "URLUtils.username"
            }, 
            {
                "descr": "Is a DOMString containing the password specified before the domain name.", 
                "name": "URLUtils.password"
            }, 
            {
                "descr": "Returns a DOMString containing the origin of the URL, that is its scheme, its domain and its port.", 
                "name": "URLUtils.origin Read only"
            }, 
            {
                "descr": "Returns a URLQuery object allowing to access the GET query arguments contained in the URL.", 
                "name": "URLUtils.query"
            }, 
            {
                "descr": "Returns a DOMString containing the whole URL. ", 
                "name": "URLUtils.toString()"
            }
        ], 
        "path": "dom/urlutils", 
        "syntax": "URLUtils interface defines utility methods to work with URLs. There are no objects of this type, but several objects implement it, such as Location, URL, HTMLAnchorElement", 
        "type": "URL"
    }, 
    "URLUtils.hash": {
        "descr": "The URLUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL.", 
        "name": "URLUtils.hash", 
        "params": [], 
        "path": "dom/urlutils.hash", 
        "syntax": "string = object.hash;object.hash = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/URLUtils.href#youhou\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.hash; // Returns:'#youhou');", 
        "type": "URL"
    }, 
    "URLUtils.host": {
        "descr": "The URLUtils.host property is a DOMString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.", 
        "name": "URLUtils.host", 
        "params": [], 
        "path": "dom/urlutils.host", 
        "syntax": "string = object.host;object.host = string; Examples var anchor = document.createElement(\"a\");\n or anchor.href = \"https://developer.mozilla.org/en-US/URLUtils.host\"anchor.host == \"developer.mozilla.org\"anchor.href = \"https://developer.mozilla.org:443/en-US/URLUtils.host\"anchor.host == \"developer.mozilla.org\"// The port number is not included because 443 is the scheme's default portanchor.href = \"https://developer.mozilla.org:4097/en-US/URLUtils.host\"anchor.host == \"developer.mozilla.org:4097\");", 
        "type": "URL"
    }, 
    "URLUtils.hostname": {
        "descr": "The URLUtils.hostname property is a DOMString containing the domain of the URL.", 
        "name": "URLUtils.hostname", 
        "params": [], 
        "path": "dom/urlutils.hostname", 
        "syntax": "string = object.hostname;object.hostname = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/URLUtils.hostname\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.hostname; // Returns:'developer.mozilla.org');", 
        "type": "URL"
    }, 
    "URLUtils.href": {
        "descr": "The URLUtils.href property is a DOMString containing the whole URL.", 
        "name": "URLUtils.href", 
        "params": [], 
        "path": "dom/urlutils.href", 
        "syntax": "string = object.href;object.href = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/URLUtils.href\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.href; // Returns:'https://developer.mozilla.org/en-US/URLUtils.href');", 
        "type": "URL"
    }, 
    "URLUtils.origin": {
        "descr": "The URLUtils.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file: scheme, the value is browser dependant.", 
        "name": "URLUtils.origin", 
        "params": [], 
        "path": "dom/urlutils.origin", 
        "syntax": "string = object.origin; Examples // On this page, returns the originvar result = window.location.origin; // Returns:'https://developer.mozilla.org:443' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] Not supported Not supported [1] Not supported [1] Not supported [1] window.location.origin", 
        "type": "URL"
    }, 
    "URLUtils.password": {
        "descr": "The URLUtils.password property is a DOMString containing the password specified before the domain name.", 
        "name": "URLUtils.password", 
        "params": [], 
        "path": "dom/urlutils.password", 
        "syntax": "string = object.password;object.password = string; Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/URLUtils.username\"> be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.password; // Returns:'flabada');", 
        "type": "URL"
    }, 
    "URLUtils.pathname": {
        "descr": "The URLUtils.pathname property is a DOMString containing an initial '/' followed by the path of the URL.", 
        "name": "URLUtils.pathname", 
        "params": [], 
        "path": "dom/urlutils.pathname", 
        "syntax": "string = object.pathname;object.pathname = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/URLUtils.pathname\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.pathName; // Returns:'/en-US/docs/URLUtils.pathname');", 
        "type": "URL"
    }, 
    "URLUtils.port": {
        "descr": "The URLUtils.port property is a DOMString containing the port number of the URL.", 
        "name": "URLUtils.port", 
        "params": [], 
        "path": "dom/urlutils.port", 
        "syntax": "string = object.port;object.port = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/URLUtils.port\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.port; // Returns:'80');", 
        "type": "URL"
    }, 
    "URLUtils.protocol": {
        "descr": "The URLUtils.protocol property is a DOMString representing the protocol scheme of the URL, including the final ':'.", 
        "name": "URLUtils.protocol", 
        "params": [], 
        "path": "dom/urlutils.protocol", 
        "syntax": "string = object.protocol;object.protocol = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/URLUtils.protocol\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.protocol; // Returns:'https:');", 
        "type": "URL"
    }, 
    "URLUtils.search": {
        "descr": "The URLUtils.search property is a DOMString containing a '?' followed by the parameters of the URL.", 
        "name": "URLUtils.search", 
        "params": [], 
        "path": "dom/urlutils.search", 
        "syntax": "string = object.search;object.search = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/URLUtils.search?q=123\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.search; // Returns:'?q=123');", 
        "type": "URL"
    }, 
    "URLUtils.toString": {
        "descr": "The URLUtils.toString() stringifier method returns a DOMString containing the whole URL. It is a read-only version of URLUtilsReadOnly.href.", 
        "name": "URLUtils.toString", 
        "params": [], 
        "path": "dom/urlutils.tostring", 
        "syntax": "string = object.toString();", 
        "type": "URL"
    }, 
    "URLUtils.username": {
        "descr": "The URLUtils.username property is a DOMString containing the username specified before the domain name.", 
        "name": "URLUtils.username", 
        "params": [], 
        "path": "dom/urlutils.username", 
        "syntax": "string = object.username;object.username = string; Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/URLUtils.username\"> be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.username; // Returns:'anonymous');", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly", 
        "params": [
            {
                "descr": "Is a DOMString containing the whole URL.", 
                "name": "URLUtilsReadOnly.href Read only"
            }, 
            {
                "descr": "Is a DOMString containing the protocol scheme of the URL, including the final ':'.", 
                "name": "URLUtilsReadOnly.protocol Read only"
            }, 
            {
                "descr": "Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL.", 
                "name": "URLUtilsReadOnly.host Read only"
            }, 
            {
                "descr": "Is a DOMString containing the domain of the URL.", 
                "name": "URLUtilsReadOnly.hostname Read only"
            }, 
            {
                "descr": "Is a DOMString containing the port number of the URL.", 
                "name": "URLUtilsReadOnly.port Read only"
            }, 
            {
                "descr": "Is a DOMString containing an initial '/' followed by the path of the URL.", 
                "name": "URLUtilsReadOnly.pathname Read only"
            }, 
            {
                "descr": "Is a DOMString containing a '?' followed by the parameters of the URL.", 
                "name": "URLUtilsReadOnly.search Read only"
            }, 
            {
                "descr": "Is a DOMString containing a '#' followed by the fragment identifier of the URL.", 
                "name": "URLUtilsReadOnly.hash Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the whole URL. ", 
                "name": "URLUtilsReadOnly.toString()"
            }
        ], 
        "path": "dom/urlutilsreadonly", 
        "syntax": "URLUtilsReadOnly interface defines utility methods to work with URLs. It defines only non-modifying methods intended to be used on data that cannot be changed. There are no object of this type, but several interface are implemented it, like WorkerLocation. Properties This interface doesn't inherit any property.  URLUtilsReadOnly.href Read only   Is a DOMString containing the whole URL.  URLUtilsReadOnly.protocol Read only   Is a DOMString containing the protocol scheme of the URL, including the final ':'.  URLUtilsReadOnly.host Read only   Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL.  URLUtilsReadOnly.hostname Read only   Is a DOMString containing the domain of the URL.  URLUtilsReadOnly.port Read only   Is a DOMString containing the port number of the URL.  URLUtilsReadOnly.pathname Read only   Is a DOMString containing an initial '/' followed by the path of the URL.  URLUtilsReadOnly.search Read only   Is a DOMString containing a '?' followed by the parameters of the URL.  URLUtilsReadOnly.hash Read only   Is a DOMString containing a '#' followed by the fragment identifier of the URL. Methods This interface doesn't inherit any method.  URLUtilsReadOnly.toString()", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.hash": {
        "descr": "The URLUtilsReadOnly.hash read-only property returns a DOMString containing a '#' followed by the fragment identifier of the URL.", 
        "name": "URLUtilsReadOnly.hash", 
        "params": [], 
        "path": "dom/urlutilsreadonly.hash", 
        "syntax": "string = object.hash; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/docs/URLUtilsReadOnly.hash#examplevar result = window.self.hash; // Returns:'#hash' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.host": {
        "descr": "The URLUtilsReadOnly.host read-only property returns a DOMString containing the host, that is the hostname, a ':', and the port of the URL.", 
        "name": "URLUtilsReadOnly.host", 
        "params": [], 
        "path": "dom/urlutilsreadonly.host", 
        "syntax": "string = object.host; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hostvar result = window.self.host; // Returns:'developer.mozilla.org:80' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.hostname": {
        "descr": "The URLUtilsReadOnly.hostname read-only property returns a DOMString containing the domain of the URL.", 
        "name": "URLUtilsReadOnly.hostname", 
        "params": [], 
        "path": "dom/urlutilsreadonly.hostname", 
        "syntax": "string = object.hostname; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hostnamevar result = window.self.hostname; // Returns:'developer.mozilla.org' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.href": {
        "descr": "The URLUtilsReadOnly.href read-only property returns a DOMString containing the whole URL.", 
        "name": "URLUtilsReadOnly.href", 
        "params": [], 
        "path": "dom/urlutilsreadonly.href", 
        "syntax": "string = object.href; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hrefvar result = window.self.href; // Returns:'https://developer.mozilla.org/en-US/URLUtilsReadOnly.href' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.pathname": {
        "descr": "The URLUtilsReadOnly.pathname read-only property returns a DOMString containing an initial '/' followed by the path of the URL.", 
        "name": "URLUtilsReadOnly.pathname", 
        "params": [], 
        "path": "dom/urlutilsreadonly.pathname", 
        "syntax": "string = object.pathname; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.pathnamevar result = window.self.pathname; // Returns:'/en-US/URLUtilsReadOnly.pathname' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.port": {
        "descr": "The URLUtilsReadOnly.port read-only property returns a DOMString containing the port number of the URL.", 
        "name": "URLUtilsReadOnly.port", 
        "params": [], 
        "path": "dom/urlutilsreadonly.port", 
        "syntax": "string = object.port; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.portvar result = window.self.port; // Returns:'80' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.protocol": {
        "descr": "The URLUtilsReadOnly.protocol read-only property returns a DOMString containing the protocol scheme of the URL, including the final ':'.", 
        "name": "URLUtilsReadOnly.protocol", 
        "params": [], 
        "path": "dom/urlutilsreadonly.protocol", 
        "syntax": "string = object.protocol; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hrefvar result = window.self.protocol; // Returns:'https:' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.search": {
        "descr": "The URLUtilsReadOnly.search read-only property returns a DOMString containing a '?' followed by the parameters of the URL.", 
        "name": "URLUtilsReadOnly.search", 
        "params": [], 
        "path": "dom/urlutilsreadonly.search", 
        "syntax": "string = object.search; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/docs/URLUtilsReadOnly.href?t=67var result = window.self.search; // Returns:'?t=67' Specifications Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]  [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.toString": {
        "descr": "The URLUtilsReadOnly.toString() stringifier method returns a DOMString containing the whole URL. It is a synonym for URLUtilsReadOnly.href.", 
        "name": "URLUtilsReadOnly.toString", 
        "params": [], 
        "path": "dom/urlutilsreadonly.tostring", 
        "syntax": "string = object.toString();", 
        "type": "URL"
    }, 
    "UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.", 
        "name": "Date.UTC", 
        "params": [
            {
                "descr": "A year after 1900.", 
                "name": "year"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the month.", 
                "name": "month"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month.", 
                "name": "date"
            }, 
            {
                "descr": "An integer between 0 and 23 representing the hours.", 
                "name": "hrs"
            }, 
            {
                "descr": "An integer between 0 and 59 representing the minutes.", 
                "name": "min"
            }, 
            {
                "descr": "An integer between 0 and 59 representing the seconds.", 
                "name": "sec"
            }, 
            {
                "descr": "An integer between 0 and 999 representing the milliseconds.", 
                "name": "ms"
            }
        ], 
        "path": "javascript/global_objects/date/utc", 
        "syntax": "Date.UTC(year,month[,date[,hrs[,min[,sec[,ms]]]]])", 
        "type": "Date"
    }, 
    "Uint16Array": {
        "descr": "The Uint16Array type represents an array of unsigned 16-bit integers in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Uint16Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Uint16Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset of the first element in the array to be referenced by the new Uint16Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset of the element one-past the last element to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/uint16array", 
        "syntax": "TypedArray represents any of the typed array object types. Uint16Array Uint16Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Uint32Array": {
        "descr": "The Uint32Array type represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead.", 
        "name": "Uint32Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Uint32Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Uint32Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/uint32array", 
        "syntax": "TypedArray represents any of the typed array object types. Uint32Array Uint32Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "Uint8Array": {
        "descr": "Draft This page is not complete.", 
        "name": "Uint8Array", 
        "params": [
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "length"
            }, 
            {
                "descr": "An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. ", 
                "name": "array"
            }, 
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new Uint8Array object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "An array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "The offset to the first element in the array to be referenced by the new Uint8Array object.", 
                "name": "begin"
            }, 
            {
                "descr": "The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.", 
                "name": "end Optional"
            }
        ], 
        "path": "dom/uint8array", 
        "syntax": "TypedArray represents any of the typed array object types. Uint8Array Uint8Array(unsigned long length);", 
        "type": "Typed Arrays"
    }, 
    "UserProximityEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "UserProximityEvent", 
        "params": [
            {
                "descr": "Indicates if the device has sensed a nearby physical object.", 
                "name": "UserProximityEvent.near"
            }
        ], 
        "path": "dom/userproximityevent", 
        "syntax": "UserProximityEvent indicates whether a nearby physical object is present by using the proximity sensor of a device. Properties  UserProximityEvent.near", 
        "type": "Events"
    }, 
    "UserProximityEvent.near": {
        "descr": "The near property tell if there is an object close to the device (true) or not (false).", 
        "name": "UserProximityEvent.near", 
        "params": [], 
        "path": "dom/userproximityevent.near", 
        "syntax": "var near = instanceOfUserProximityEvent.near; Value A boolean Specifications Specification Status Comment Proximity Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported (Yes) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  See also", 
        "type": "Events"
    }, 
    "ValidityState": {
        "descr": "The DOM ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.", 
        "name": "ValidityState", 
        "params": [], 
        "path": "dom/validitystate", 
        "syntax": "type is email or url). valid", 
        "type": "Miscellaneous"
    }, 
    "VideoPlaybackQuality": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality", 
        "params": [
            {
                "descr": "Is a DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object.", 
                "name": "VideoPlaybackQuality.creationTime Read only"
            }, 
            {
                "descr": "Is an unsigned long giving the number of video frames created and dropped since the creation of the associated HTMLVideoElement.", 
                "name": "VideoPlaybackQuality.totalVideoFrames Read only"
            }, 
            {
                "descr": "Is an unsigned long giving the number of video frames dropped since the creation of the associated HTMLVideoElement.", 
                "name": "VideoPlaybackQuality.droppedVideoFrames Read only"
            }, 
            {
                "descr": "Is an unsigned long giving the number of video frames dropped since the creation of the associated HTMLVideoElement. ", 
                "name": "VideoPlaybackQuality.corruptedVideoFrames Read only"
            }, 
            {
                "descr": "Is a double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. ", 
                "name": "VideoPlaybackQuality.totalFrameDelay Read only"
            }
        ], 
        "path": "dom/videoplaybackquality", 
        "syntax": "VideoPlaybackQuality interface represents the set of metrics describing the quality of the restitution of a video. It is created by the HTMLVideoElement.getVideoPlaybackQuality()", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.corruptedVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.corruptedVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality.corruptedvideoframes", 
        "syntax": "VideoPlaybackQuality.corruptedVideoFrames read-only property returns an unsigned long containing the number of corrupted video frames since the creation of the associated HTMLVideoElement. A corrupted frame may or may not be dropped, depending of the corruption and of the browser algorithm. Syntax value = videoPlaybackQuality.corruptedVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.corruptedVideoFrames);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.creationTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.creationTime", 
        "params": [], 
        "path": "dom/videoplaybackquality.creationtime", 
        "syntax": "VideoPlaybackQuality.creationTime read-only property returns a DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object. Syntax value = videoPlaybackQuality.creationTime; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.creationTime);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.droppedVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.droppedVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality.droppedvideoframes", 
        "syntax": "VideoPlaybackQuality.droppedVideoFrames read-only property returns an unsigned long containing the number of video frames dropped since the creation of the associated HTMLVideoElement. Syntax value = videoPlaybackQuality.droppedVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.droppedVideoFrames);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.totalFrameDelay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.totalFrameDelay", 
        "params": [], 
        "path": "dom/videoplaybackquality.totalframedelay", 
        "syntax": "VideoPlaybackQuality.totalFrameDelay read-only property returns a double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. The frame delay is the difference between a frame's theoretical presentation time and its effective display time. Syntax value = videoPlaybackQuality.totalFrameDelay; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.totalFrameDelay);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.totalVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.totalVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality.totalvideoframes", 
        "syntax": "VideoPlaybackQuality.totalVideoFrames read-only property returns an unsigned long containing the number of video frames created and dropped since the creation of the associated HTMLVideoElement. Syntax value = videoPlaybackQuality.totalVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.totalVideoFrames);", 
        "type": "Media"
    }, 
    "WaveShaperNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "WaveShaperNode", 
        "params": [
            {
                "descr": "Is a Float32Array of numbers describing the distortion to apply. ", 
                "name": "WaveShaperNode.curve"
            }, 
            {
                "descr": "Is an enumerated values indicating if oversampling must be used. ", 
                "name": "WaveShaperNode.oversample"
            }
        ], 
        "path": "dom/waveshapernode", 
        "syntax": "WaveShaperNodeinterface represents a non-linear distorter. It is an AudioNode", 
        "type": "Web Audio"
    }, 
    "WeakMap": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "WeakMap", 
        "params": [], 
        "path": "javascript/global_objects/weakmap", 
        "syntax": "myWeakMap.get(key\u00a0[,\u00a0defaultValue])", 
        "type": "Global Objects"
    }, 
    "WebSocket": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "WebSocket", 
        "params": [
            {
                "descr": "A numeric value indicating the status code explaining why the connection is being closed. ", 
                "name": "code Optional"
            }, 
            {
                "descr": "A human-readable string explaining why the connection is closing. ", 
                "name": "reason Optional"
            }, 
            {
                "descr": "An invalid code was specified.", 
                "name": "INVALID_ACCESS_ERR"
            }, 
            {
                "descr": "The reason string is too long or contains unpaired surrogates.", 
                "name": "SYNTAX_ERR"
            }, 
            {
                "descr": "A text string to send to the server.", 
                "name": "data"
            }, 
            {
                "descr": "The connection is not currently OPEN.", 
                "name": "INVALID_STATE_ERR"
            }, 
            {
                "descr": "The data is a string that has unpaired surrogates.", 
                "name": "SYNTAX_ERR"
            }
        ], 
        "path": "dom/websocket", 
        "syntax": "WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. Method overview void close(in optional unsigned long code, in optional DOMString reason);", 
        "type": "Web Sockets"
    }, 
    "Worker.constructor": {
        "descr": "The Worker() constructor creates a Worker that executes the script at the specified URL. This script must obey the same-origin policy.", 
        "name": "Worker.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the URL of the script the worker is to execute. ", 
                "name": "aURL"
            }
        ], 
        "path": "dom/worker.worker", 
        "syntax": "DOMException of type SECURITY_ERR is thrown.  Note: that there is a disagreement among browser manufacturers about whether a data URI is of the same origin or not. Though Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.", 
        "type": "Web Workers"
    }, 
    "Worker.onmessage": {
        "descr": "The Worker.onmessage property represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker calls its own postMessage() method: it is the way that a Worker has to give back information to the thread that created it.", 
        "name": "Worker.onmessage", 
        "params": [], 
        "path": "dom/worker.onmessage", 
        "syntax": "worker.onmessage = eventHandler Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard No change from Web Workers. Web Workers Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) (Yes) 10.0 (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) (Yes) 10.0 (Yes) (Yes)  See also", 
        "type": "Web Workers"
    }, 
    "Worker.postMessage": {
        "descr": "The Worker.postMessage() method sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.", 
        "name": "Worker.postMessage", 
        "params": [
            {
                "descr": "The object to deliver to the worker; this will be in the data field in the event delivered to the Worker.onmessage handler. ", 
                "name": "aMessage"
            }, 
            {
                "descr": "An optional array of Transferable objects to transfer ownership of. ", 
                "name": "transferList Optional"
            }
        ], 
        "path": "dom/worker.postmessage", 
        "syntax": "worker.postMessage(aMessage, transferList);", 
        "type": "Web Workers"
    }, 
    "Worker.terminate": {
        "descr": "The Worker.terminate() method immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.", 
        "name": "Worker.terminate", 
        "params": [], 
        "path": "dom/worker.terminate", 
        "syntax": "worker.terminate();", 
        "type": "Web Workers"
    }, 
    "add": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .add() method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to .add() can be pretty much anything that $() accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.", 
        "name": "add", 
        "params": [
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Elements  One or more elements to add to the set of matched elements.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: htmlString  An HTML fragment to add to the set of matched elements.", 
                "name": "html"
            }, 
            {
                "descr": "Type: jQuery object   An existing jQuery object to add to the set of matched elements.", 
                "name": "jQuery object"
            }, 
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  The point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.", 
                "name": "context"
            }
        ], 
        "path": "jquery/add", 
        "syntax": ".add( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "addBack": {
        "descr": "As described in the discussion for .end(), jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, .addBack() can help.", 
        "name": "addBack", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match the current set of elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/addback", 
        "syntax": ".addBack( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "addClass": {
        "descr": "It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.", 
        "name": "addClass", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be added to the class attribute of each matched element.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Function() A function returning one or more space-separated class names to be added to the existing class name(s). ", 
                "name": "function(index, currentClass)"
            }
        ], 
        "path": "jquery/addclass", 
        "syntax": ".addClass( className ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "after": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax\u2014specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.", 
        "name": "after", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  HTML string, DOM element, array of elements, or jQuery object to insert after each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Array or jQuery  One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function() A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. ", 
                "name": "function(index)"
            }
        ], 
        "path": "jquery/after", 
        "syntax": ".after( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "ajaxComplete": {
        "descr": "Whenever an Ajax request completes, jQuery triggers the ajaxComplete event. Any and all handlers that have been registered with the .ajaxComplete() method are executed at this time.", 
        "name": "ajaxComplete", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler(event, XMLHttpRequest, ajaxOptions)"
            }
        ], 
        "path": "jquery/ajaxcomplete", 
        "syntax": ".ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxError": {
        "descr": "Whenever an Ajax request completes with an error, jQuery triggers the ajaxError event. Any and all handlers that have been registered with the .ajaxError() method are executed at this time. Note: This handler is not called for cross-domain script and cross-domain JSONP requests.", 
        "name": "ajaxError", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler(event, jqXHR, ajaxSettings, thrownError)"
            }
        ], 
        "path": "jquery/ajaxerror", 
        "syntax": ".ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxSend": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery triggers the ajaxSend event. Any and all handlers that have been registered with the .ajaxSend() method are executed at this time.", 
        "name": "ajaxSend", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler(event, jqXHR, ajaxOptions)"
            }
        ], 
        "path": "jquery/ajaxsend", 
        "syntax": ".ajaxSend( handler(event, jqXHR, ajaxOptions) ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxStart": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the ajaxStart event. Any and all handlers that have been registered with the .ajaxStart() method are executed at this time.", 
        "name": "ajaxStart", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler()"
            }
        ], 
        "path": "jquery/ajaxstart", 
        "syntax": ".ajaxStart( handler() ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxStop": {
        "descr": "Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the ajaxStop event. Any and all handlers that have been registered with the .ajaxStop() method are executed at this time. The ajaxStop event is also triggered if the last outstanding Ajax request is cancelled by returning false within the beforeSend callback function.", 
        "name": "ajaxStop", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler()"
            }
        ], 
        "path": "jquery/ajaxstop", 
        "syntax": ".ajaxStop( handler() ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxSuccess": {
        "descr": "Whenever an Ajax request completes successfully, jQuery triggers the ajaxSuccess event. Any and all handlers that have been registered with the .ajaxSuccess() method are executed at this time.", 
        "name": "ajaxSuccess", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler(event, XMLHttpRequest, ajaxOptions)"
            }
        ], 
        "path": "jquery/ajaxsuccess", 
        "syntax": ".ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.", 
        "name": "window.alert", 
        "params": [], 
        "path": "dom/window.alert", 
        "syntax": "window.alert(message);", 
        "type": "window"
    }, 
    "andSelf": {
        "descr": "Note: This function has been deprecated and is now an alias for .addBack(), which should be used with jQuery 1.8 and later.", 
        "name": "andSelf", 
        "params": [], 
        "path": "jquery/andself", 
        "syntax": ".andSelf() Returns: jQueryversion deprecated: 1.8", 
        "type": "Traversing"
    }, 
    "animate": {
        "descr": "The .animate() method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the .css() method, except that the range of properties is more restrictive.", 
        "name": "animate", 
        "params": [
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.", 
                "name": "properties"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.", 
                "name": "properties"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }
        ], 
        "path": "jquery/animate", 
        "syntax": ".animate( properties [, duration ] [, easing ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "append": {
        "descr": "The .append() method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the first child, use .prepend()).", 
        "name": "append", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Array or jQuery  One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function() A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. ", 
                "name": "function(index, html)"
            }
        ], 
        "path": "jquery/append", 
        "syntax": ".append( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "appendTo": {
        "descr": "The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.", 
        "name": "appendTo", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/appendto", 
        "syntax": ".appendTo( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "apply": {
        "descr": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).", 
        "name": "Function.apply", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. ", 
                "name": "argsArray"
            }
        ], 
        "path": "javascript/global_objects/function/apply", 
        "syntax": "call()", 
        "type": "Function"
    }, 
    "arguments.callee": {
        "descr": "Specifies the currently executing function.", 
        "name": "arguments.callee", 
        "params": [], 
        "path": "javascript/functions_and_function_scope/arguments/callee", 
        "syntax": "callee is a property of the arguments object. It can be used to refer to the currently executing function inside the function body of that function. This is useful when the name of the function is unknown, such as within a function expression with no name (also called \"anonymous functions\").", 
        "type": "Function"
    }, 
    "atob": {
        "descr": "Decodes a string of data which has been encoded using base-64 encoding.", 
        "name": "window.atob", 
        "params": [], 
        "path": "dom/window.atob", 
        "syntax": "var decodedData = window.atob(encodedData);", 
        "type": "window"
    }, 
    "attr": {
        "descr": "The .attr() method gets the attribute value for only the first element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.", 
        "name": "attr", 
        "params": [
            {
                "descr": "Type: String  The name of the attribute to get.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: String  The name of the attribute to set.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: String or Number  A value to set for the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "Type: PlainObject  An object of attribute-value pairs to set.", 
                "name": "attributes"
            }, 
            {
                "descr": "Type: String  The name of the attribute to set.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: Function() A function returning the value to set. ", 
                "name": "function(index, attr)"
            }
        ], 
        "path": "jquery/attr", 
        "syntax": ".attr( attributeName ) Returns: String", 
        "type": "Manipulation"
    }, 
    "back": {
        "descr": "Returns the window to the previous item in the history.", 
        "name": "window.back", 
        "params": [], 
        "path": "dom/window.back", 
        "syntax": "window.back()", 
        "type": "window"
    }, 
    "before": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.", 
        "name": "before", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  HTML string, DOM element, array of elements, or jQuery object to insert before each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Array or jQuery  One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function() A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/before", 
        "syntax": ".before( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "bind": {
        "descr": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.", 
        "name": "Function.bind", 
        "params": [
            {
                "descr": "The value to be passed as the this parameter to the target function when the bound function is called. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments to prepend to arguments provided to the bound function when invoking the target function.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/bind", 
        "syntax": "fun.bind(thisArg[, arg1[, arg2[, ...]]])", 
        "type": "Function"
    }, 
    "block": {
        "descr": "A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.", 
        "name": "block", 
        "params": [
            {
                "descr": "Statements grouped within the block statement.", 
                "name": "statement_1, statement_2, statement_n"
            }
        ], 
        "path": "javascript/statements/block", 
        "syntax": "{  statement_1  statement_2  ...  statement_n} Parameters  statement_1, statement_2, statement_n  Statements grouped within the block statement. Description This statement is commonly used with control flow statements (e.g. if, for, while). For example:", 
        "type": "Statements"
    }, 
    "blur": {
        "descr": "Shifts focus away from the window.", 
        "name": "window.blur", 
        "params": [], 
        "path": "dom/window.blur", 
        "syntax": "window.blur()", 
        "type": "window"
    }, 
    "break": {
        "descr": "Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.", 
        "name": "break", 
        "params": [
            {
                "descr": "Identifier associated with the label of the statement. ", 
                "name": "label"
            }
        ], 
        "path": "javascript/statements/break", 
        "syntax": "break [label]; Parameters  label  Identifier associated with the label of the statement. If the statement is not a loop or switch, this is required. Description The break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within this labelled statement. The labelled statement can be any block statement; it does not have to be preceded by a loop statement. Example The following function has a break statement that terminates the while loop when i is 3, and then returns the value 3 * x. function testBreak(x) {   var i = 0;   while (i < 6) {      if (i == 3) {         break;      }      i += 1;   }   return i * x;}", 
        "type": "Statements"
    }, 
    "btoa": {
        "descr": "Creates a base-64 encoded ASCII string from a \"string\" of binary data.", 
        "name": "window.btoa", 
        "params": [], 
        "path": "dom/window.btoa", 
        "syntax": "var encodedData = window.btoa(stringToEncode);", 
        "type": "window"
    }, 
    "call": {
        "descr": "The call() method calls a function with a given this value and arguments provided individually.", 
        "name": "Function.call", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments for the object.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/call", 
        "syntax": "apply()", 
        "type": "Function"
    }, 
    "callbacks.add": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.add", 
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be added to the callback list.", 
                "name": "callbacks"
            }
        ], 
        "path": "jquery/callbacks.add", 
        "syntax": "callbacks.add( callbacks ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.disable": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.disable", 
        "params": [], 
        "path": "jquery/callbacks.disable", 
        "syntax": "callbacks.disable() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.disabled": {
        "descr": "", 
        "name": "callbacks.disabled", 
        "params": [], 
        "path": "jquery/callbacks.disabled", 
        "syntax": "callbacks.disabled() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.empty": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.empty", 
        "params": [], 
        "path": "jquery/callbacks.empty", 
        "syntax": "callbacks.empty() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fire": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.fire", 
        "params": [
            {
                "descr": "Type: Anything  The argument or list of arguments to pass back to the callback list.", 
                "name": "arguments"
            }
        ], 
        "path": "jquery/callbacks.fire", 
        "syntax": "callbacks.fire( arguments ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fireWith": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.fireWith", 
        "params": [
            {
                "descr": "Type:  A reference to the context in which the callbacks in the list should be fired.", 
                "name": "context"
            }, 
            {
                "descr": "Type:  An argument, or array of arguments, to pass to the callbacks in the list.", 
                "name": "args"
            }
        ], 
        "path": "jquery/callbacks.firewith", 
        "syntax": "callbacks.fireWith( [context ] [, args ] ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fired": {
        "descr": "", 
        "name": "callbacks.fired", 
        "params": [], 
        "path": "jquery/callbacks.fired", 
        "syntax": "callbacks.fired() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.has": {
        "descr": "", 
        "name": "callbacks.has", 
        "params": [
            {
                "descr": "Type: Function() The callback to search for.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/callbacks.has", 
        "syntax": "callbacks.has( callback ) Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.lock": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.lock", 
        "params": [], 
        "path": "jquery/callbacks.lock", 
        "syntax": "callbacks.lock() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.locked": {
        "descr": "", 
        "name": "callbacks.locked", 
        "params": [], 
        "path": "jquery/callbacks.locked", 
        "syntax": "callbacks.locked() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.remove": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.remove", 
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be removed from the callback list.", 
                "name": "callbacks"
            }
        ], 
        "path": "jquery/callbacks.remove", 
        "syntax": "callbacks.remove( callbacks ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "cancelAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.cancelAnimationFrame", 
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.", 
                "name": "requestID"
            }
        ], 
        "path": "dom/window.cancelanimationframe", 
        "syntax": "window.requestAnimationFrame()", 
        "type": "window"
    }, 
    "change": {
        "descr": "This method is a shortcut for .on( \"change\", handler ) in the first two variations, and .trigger( \"change\" ) in the third.", 
        "name": "change", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/change", 
        "syntax": ".change( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "charAt": {
        "descr": "Returns the specified character from a string.", 
        "name": "String.charAt", 
        "params": [
            {
                "descr": "An integer between 0 and 1-less-than the length of the string.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charat", 
        "syntax": "returns = string.charAt(index)", 
        "type": "String"
    }, 
    "charCodeAt": {
        "descr": "Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).", 
        "name": "String.charCodeAt", 
        "params": [
            {
                "descr": "An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charcodeat", 
        "syntax": "string.charCodeAt(index)", 
        "type": "String"
    }, 
    "children": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .children() method allows us to search through the children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .children() method differs from .find() in that .children() only travels a single level down the DOM tree while .find() can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, .children() does not return text nodes; to get all children including text and comment nodes, use .contents().", 
        "name": "children", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/children", 
        "syntax": ".children( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.", 
        "name": "window.clearImmediate", 
        "params": [], 
        "path": "dom/window.clearimmediate", 
        "syntax": "window.clearImmediate(immediateID)", 
        "type": "window"
    }, 
    "clearInterval": {
        "descr": "Cancels repeated action which was set up using setInterval.", 
        "name": "window.clearInterval", 
        "params": [], 
        "path": "dom/window.clearinterval", 
        "syntax": "window.clearInterval(intervalID)", 
        "type": "window"
    }, 
    "clearQueue": {
        "descr": "When the .clearQueue() method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, .clearQueue() removes the remaining functions from fx, the standard effects queue. In this way it is similar to .stop(true). However, while the .stop() method is meant to be used only with animations, .clearQueue() can also be used to remove any function that has been added to a generic jQuery queue with the .queue() method.", 
        "name": "clearQueue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/clearqueue", 
        "syntax": ".clearQueue( [queueName ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "clearTimeout": {
        "descr": "Clears the delay set by window.setTimeout().", 
        "name": "window.clearTimeout", 
        "params": [], 
        "path": "dom/window.cleartimeout", 
        "syntax": "window.clearTimeout(timeoutID)", 
        "type": "window"
    }, 
    "click": {
        "descr": "This method is a shortcut for .on( \"click\", handler ) in the first two variations, and .trigger( \"click\" ) in the third. The click event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:", 
        "name": "click", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/click", 
        "syntax": ".click( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "clone": {
        "descr": "The .clone() method performs a deep copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes. For performance reasons, the dynamic state of form elements (e.g., user data typed into input, and textarea or user selections made to a select) is not copied to the cloned elements. The clone operation sets these fields to their default values as specified in the HTML.", 
        "name": "clone", 
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers should be copied along with the elements. ", 
                "name": "withDataAndEvents"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers and data should be copied along with the elements. ", 
                "name": "withDataAndEvents"
            }, 
            {
                "descr": "(default: value of withDataAndEvents) Type: Boolean  A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. ", 
                "name": "deepWithDataAndEvents"
            }
        ], 
        "path": "jquery/clone", 
        "syntax": ".clone( [withDataAndEvents ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "close": {
        "descr": "Closes the current window, or a referenced window.", 
        "name": "window.close", 
        "params": [], 
        "path": "dom/window.close", 
        "syntax": "window.close();", 
        "type": "window"
    }, 
    "closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.", 
        "name": "window.closed", 
        "params": [
            {
                "descr": "A boolean. Possible Values: true: The window has been closed. ", 
                "name": "isClosed"
            }
        ], 
        "path": "dom/window.closed", 
        "syntax": "isClosed = windowRef.closed;  isClosed  A boolean. Possible Values: true: The window has been closed. false: The window is open.  Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closedif (window.opener && !window.opener.closed) {  window.opener.location.href = \"http://www.mozilla.org\";}", 
        "type": "window"
    }, 
    "closest": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .closest() method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The .parents() and .closest() methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:", 
        "name": "closest", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found. ", 
                "name": "context"
            }, 
            {
                "descr": "Type: jQuery  A jQuery object to match elements against.", 
                "name": "jQuery object"
            }, 
            {
                "descr": "Type: Element  An element to match elements against.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Array  An array or string containing a selector expression to match elements against (can also be a jQuery object).", 
                "name": "selectors"
            }, 
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found. ", 
                "name": "context"
            }
        ], 
        "path": "jquery/closest", 
        "syntax": ".closest( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "concat": {
        "descr": "Combines the text of two or more strings and returns a new string.", 
        "name": "String.concat", 
        "params": [
            {
                "descr": "Strings to concatenate to this string.", 
                "name": "string2...stringN"
            }
        ], 
        "path": "javascript/global_objects/string/concat", 
        "syntax": "string.concat(string2, string3[, ..., stringN])", 
        "type": "String"
    }, 
    "confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.", 
        "name": "window.confirm", 
        "params": [], 
        "path": "dom/window.confirm", 
        "syntax": "result = window.confirm(message);", 
        "type": "window"
    }, 
    "console.dir": {
        "descr": "Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.", 
        "name": "console.dir", 
        "params": [
            {
                "descr": "A JavaScript object whose properties should be output.", 
                "name": "object"
            }
        ], 
        "path": "dom/console.dir", 
        "syntax": "console.dir(object);", 
        "type": "Console"
    }, 
    "console.error": {
        "descr": "Outputs an error message to the Web Console.", 
        "name": "console.error", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console.error", 
        "syntax": "console.error(obj1 [, obj2, ..., objN);\n or console.error(msg [, subst1, ..., substN);", 
        "type": "Console"
    }, 
    "console.group": {
        "descr": "Creates a new inline group in the Web Console log. This indents all following output by an additional level, until console.groupEnd() is called.", 
        "name": "console.group", 
        "params": [], 
        "path": "dom/console.group", 
        "syntax": "console.group();", 
        "type": "Console"
    }, 
    "console.groupCollapsed": {
        "descr": "Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.", 
        "name": "console.groupCollapsed", 
        "params": [], 
        "path": "dom/console.groupcollapsed", 
        "syntax": "console.groupCollapsed();", 
        "type": "Console"
    }, 
    "console.groupEnd": {
        "descr": "Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples.", 
        "name": "console.groupEnd", 
        "params": [], 
        "path": "dom/console.groupend", 
        "syntax": "console.groupEnd();", 
        "type": "Console"
    }, 
    "console.info": {
        "descr": "Outputs an informational message to the Web Console. In Firefox, a small \"i\" icon is displayed next to these items in the Web Console's log.", 
        "name": "console.info", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console.info", 
        "syntax": "console.info(obj1 [, obj2, ..., objN);\n or console.info(msg [, subst1, ..., substN);", 
        "type": "Console"
    }, 
    "console.log": {
        "descr": "Outputs a message to the Web Console.", 
        "name": "console.log", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console.log", 
        "syntax": "console.log(obj1 [, obj2, ..., objN);\n or console.log(msg [, subst1, ..., substN);", 
        "type": "Console"
    }, 
    "console.time": {
        "descr": "Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.", 
        "name": "console.time", 
        "params": [
            {
                "descr": "The name to give the new timer. ", 
                "name": "timerName"
            }
        ], 
        "path": "dom/console.time", 
        "syntax": "console.time(timerName);", 
        "type": "Console"
    }, 
    "console.timeEnd": {
        "descr": "Stops a timer that was previously started by calling console.time().", 
        "name": "console.timeEnd", 
        "params": [
            {
                "descr": "The name of the timer to stop. Once stopped, the elapsed time is automatically displayed in the Web Console.", 
                "name": "timerName"
            }
        ], 
        "path": "dom/console.timeend", 
        "syntax": "console.timeEnd(timerName);", 
        "type": "Console"
    }, 
    "console.trace": {
        "descr": "Outputs a stack trace to the Web Console.", 
        "name": "console.trace", 
        "params": [], 
        "path": "dom/console.trace", 
        "syntax": "console.trace();", 
        "type": "Console"
    }, 
    "console.warn": {
        "descr": "Outputs a warning message to the Web Console.", 
        "name": "console.warn", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console.warn", 
        "syntax": "console.warn(obj1 [, obj2, ..., objN);\n or console.warn(msg [, subst1, ..., substN);", 
        "type": "Console"
    }, 
    "const": {
        "descr": "Declares a read-only named constant.", 
        "name": "const", 
        "params": [
            {
                "descr": "Constant name. It can be any legal identifier.", 
                "name": "nameN"
            }, 
            {
                "descr": "Value of the constant. It can be any legal expression.", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/statements/const", 
        "syntax": "const name1 = value1 [, name2 = value2 [, name3 = value3 [, ... [, nameN = valueN]]]]; Parameters  nameN  Constant name. It can be any legal identifier.  valueN  Value of the constant. It can be any legal expression. Description Creates a constant that can be global or local to the function in which it is declared. Constants follow the same scope rules as variables. The value of a constant cannot change through re-assignment, and a constant cannot be re-declared. Because of this, although it is possible to declare a constant without initializing it, it would be useless to do so. A constant cannot share its name with a function or a variable in the same scope. Browser compatibility The current implementation of const is a Mozilla-specific extension and is not part of ECMAScript 5. It is supported in Firefox & Chrome (V8). As of Safari 5.1.7 and Opera 12.00, if you define a variable with const", 
        "type": "Statements"
    }, 
    "contains": {
        "descr": "Introduced in JavaScript 1.8.6", 
        "name": "String.contains", 
        "params": [
            {
                "descr": "A string to be searched for within this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/contains", 
        "syntax": "var contained = str.contains(searchString [, position])", 
        "type": "String"
    }, 
    "content": {
        "descr": "Returns a Window object for the primary content window. This is useful in XUL windows that have a <browser> (or tabbrowser or <iframe>) with type=\"content-primary\" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow.", 
        "name": "window.content", 
        "params": [], 
        "path": "dom/window.content", 
        "syntax": "var windowObject = window.content; Example Executing the following code in a chrome XUL window with a <browser type=\"content-primary\"/> element in it draws a red border around the first div on the page currently displayed in the browser: content.document.getElementsByTagName(\"div\")[0].style.border = \"solid red 1px\";", 
        "type": "window"
    }, 
    "contents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .contents() method allows us to search throughthe immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .contents() and .children() methods are similar, except that the former includes text nodes as well as HTML elements in the resulting jQuery object.", 
        "name": "contents", 
        "params": [], 
        "path": "jquery/contents", 
        "syntax": ".contents() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "context": {
        "descr": "The .context property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version.", 
        "name": "context", 
        "params": [], 
        "path": "jquery/context", 
        "syntax": "contextReturns: Elementversion deprecated: 1.10   Description: The DOM node context originally passed to jQuery()", 
        "type": "Miscellaneous"
    }, 
    "continue": {
        "descr": "Terminates execution of the statements in the current iteration of the current or labelled loop, and continues execution of the loop with the next iteration.", 
        "name": "continue", 
        "params": [
            {
                "descr": "Identifier associated with the label of the statement.", 
                "name": "label"
            }
        ], 
        "path": "javascript/statements/continue", 
        "syntax": "continue [label];  Parameters label Identifier associated with the label of the statement. Description In contrast to the break statement, continue does not terminate the execution of the loop entirely: instead, In a while loop, it jumps back to the condition. In a for loop, it jumps to the update expression. The continue statement can include an optional label that allows the program to jump to the next iteration of a labelled loop statement instead of the current loop. In this case, the continue statement needs to be nested within this labelled statement. Examples Example: Using continue with while The following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12. i = 0;n = 0;while (i < 5) {   i++;   if (i == 3)      continue;   n += i;}", 
        "type": "Statements"
    }, 
    "count": {
        "descr": "Obsolete since Gecko 2 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Object.count", 
        "params": [], 
        "path": "javascript/global_objects/object/count", 
        "syntax": "obj.__count__ Example { 1: 1 }.__count__              // 1[].__count__                    // 0[1].__count__                   // 1[1, /* hole */, 2, 3].__count__ // 3 Specifications Not part of any specifications. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Not supported Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported Not supported Not supported Not supported Not supported  See also", 
        "type": "Object"
    }, 
    "create": {
        "descr": "The Object.create() method creates a new object with the specified prototype object and properties.", 
        "name": "Object.create", 
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.", 
                "name": "proto"
            }, 
            {
                "descr": "If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties.", 
                "name": "propertiesObject"
            }
        ], 
        "path": "javascript/global_objects/object/create", 
        "syntax": "Object.create(proto [, propertiesObject ])", 
        "type": "Object"
    }, 
    "crypto.getRandomValues": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.crypto.getRandomValues", 
        "params": [], 
        "path": "dom/window.crypto.getrandomvalues", 
        "syntax": "window.crypto.getRandomValues(typedArray);", 
        "type": "window"
    }, 
    "css": {
        "descr": "The .css() method is a convenient way to get a style property from the first matched element, especially in light of the different ways browsers access most of those properties (the getComputedStyle() method in standards-based browsers versus the currentStyle and runtimeStyle properties in Internet Explorer) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the float property as styleFloat, while W3C standards-compliant browsers refer to it as cssFloat. For consistency, you can simply use \"float\", and jQuery will translate it to the correct value for each browser.", 
        "name": "css", 
        "params": [
            {
                "descr": "Type: String  A CSS property.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Array  An array of one or more CSS properties.", 
                "name": "propertyNames"
            }, 
            {
                "descr": "Type: String  A CSS property name.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: String or Number  A value to set for the property.", 
                "name": "value"
            }, 
            {
                "descr": "Type: String  A CSS property name.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Function() A function returning the value to set. ", 
                "name": "function(index, value)"
            }, 
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.", 
                "name": "properties"
            }
        ], 
        "path": "jquery/css", 
        "syntax": ".css( propertyName ) Returns: String", 
        "type": "Manipulation"
    }, 
    "data": {
        "descr": "The .data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.", 
        "name": "data", 
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Object  The new data value; it can be any Javascript type including Array or Object.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Object  An object of key-value pairs of data to update.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }
        ], 
        "path": "jquery/data", 
        "syntax": ".data( key, value ) Returns: jQuery", 
        "type": "Data"
    }, 
    "dblclick": {
        "descr": "This method is a shortcut for .on( \"dblclick\", handler) in the first two variations, and .trigger( \"dblclick\" ) in the third. The dblclick event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:", 
        "name": "dblclick", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/dblclick", 
        "syntax": ".dblclick( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "debugger": {
        "descr": "Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.", 
        "name": "debugger", 
        "params": [], 
        "path": "javascript/statements/debugger", 
        "syntax": "debugger; Examples The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.", 
        "type": "Statements"
    }, 
    "decodeURI": {
        "descr": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.", 
        "name": "decodeURI", 
        "params": [
            {
                "descr": "A complete, encoded Uniform Resource Identifier.", 
                "name": "encodedURI"
            }
        ], 
        "path": "javascript/global_objects/decodeuri", 
        "syntax": "decodeURI(encodedURI)", 
        "type": "Global Objects"
    }, 
    "decodeURIComponent": {
        "descr": "The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.", 
        "name": "decodeURIComponent", 
        "params": [
            {
                "descr": "An encoded component of a Uniform Resource Identifier.", 
                "name": "encodedURI"
            }
        ], 
        "path": "javascript/global_objects/decodeuricomponent", 
        "syntax": "decodeURIComponent(encodedURI)", 
        "type": "Global Objects"
    }, 
    "defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "window.defaultStatus", 
        "params": [], 
        "path": "dom/window.defaultstatus", 
        "syntax": "var sMsg = window.defaultStatus;window.defaultStatus = sMsg; Parameters sMsg is a string containing the text to be displayed by default in the statusbar. Example <html>  <body onload=\"window.defaultStatus='hello!';\"/>   <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button>  </body> </html>);", 
        "type": "window"
    }, 
    "deferred.always": {
        "descr": "The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the alwaysCallbacks are called. Since deferred.always() returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional .always() methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the resolve, reject, resolveWith or rejectWith method calls. For more information, see the documentation for Deferred object.", 
        "name": "deferred.always", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that is called when the Deferred is resolved or rejected.", 
                "name": "alwaysCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.", 
                "name": "alwaysCallbacks"
            }
        ], 
        "path": "jquery/deferred.always", 
        "syntax": "deferred.always( alwaysCallbacks [, alwaysCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.done": {
        "descr": "The deferred.done() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since deferred.done() returns the deferred object, other methods of the deferred object can be chained to this one, including additional .done() methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the resolve or resolveWith method call in the order they were added. For more information, see the documentation for Deferred object.", 
        "name": "deferred.done", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }
        ], 
        "path": "jquery/deferred.done", 
        "syntax": "deferred.done( doneCallbacks [, doneCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.fail": {
        "descr": "The deferred.fail() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since deferred.fail() returns the deferred object, other methods of the deferred object can be chained to this one, including additional deferred.fail() methods. The failCallbacks are executed using the arguments provided to the deferred.reject() or deferred.rejectWith() method call in the order they were added. For more information, see the documentation for Deferred object.", 
        "name": "deferred.fail", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }
        ], 
        "path": "jquery/deferred.fail", 
        "syntax": "deferred.fail( failCallbacks [, failCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.isRejected": {
        "descr": "As of jQuery 1.7 this API has been deprecated; please use deferred.state() instead.", 
        "name": "deferred.isRejected", 
        "params": [], 
        "path": "jquery/deferred.isrejected", 
        "syntax": "deferred.isRejected() Returns: Booleanversion deprecated: 1.7, removed: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.isResolved": {
        "descr": "This API is deprecated as of jQuery 1.7 and removed as of jQuery 1.8; please use deferred.state() instead.", 
        "name": "deferred.isResolved", 
        "params": [], 
        "path": "jquery/deferred.isresolved", 
        "syntax": "deferred.isResolved() Returns: Booleanversion deprecated: 1.7, removed: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.notify": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.notify", 
        "params": [
            {
                "descr": "Type: Object   Optional arguments that are passed to the progressCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.notify", 
        "syntax": "deferred.notify( args ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.notifyWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.notifyWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the progressCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Object   Optional arguments that are passed to the progressCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.notifywith", 
        "syntax": "deferred.notifyWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.pipe": {
        "descr": "Deprecation Notice:As of jQuery 1.8, the deferred.pipe() method is deprecated. The deferred.then() method, which replaces it, should be used instead.", 
        "name": "deferred.pipe", 
        "params": [
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.", 
                "name": "progressFilter"
            }
        ], 
        "path": "jquery/deferred.pipe", 
        "syntax": "deferred.pipe( [doneFilter ] [, failFilter ] ) Returns: Promiseversion deprecated: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.progress": {
        "descr": "The argument can be either a single function or an array of functions. When the Deferred generates progress notifications by calling notify or notifyWith, the progressCallbacks are called. Since deferred.progress() returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any progressCallbacks added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the .notify() or notifyWith() call. For more information, see the documentation for jQuery.Deferred().", 
        "name": "deferred.progress", 
        "params": [
            {
                "descr": "Type: Function() or Array   A function, or array of functions, to be called when the Deferred generates progress notifications.", 
                "name": "progressCallbacks"
            }
        ], 
        "path": "jquery/deferred.progress", 
        "syntax": "deferred.progress( progressCallbacks ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.promise": {
        "descr": "The deferred.promise() method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (then, done, fail, always, pipe, progress, and state), but not ones that change the state (resolve, reject, notify, resolveWith, rejectWith, and notifyWith).", 
        "name": "deferred.promise", 
        "params": [
            {
                "descr": "Type: Object  Object onto which the promise methods have to be attached", 
                "name": "target"
            }
        ], 
        "path": "jquery/deferred.promise", 
        "syntax": "deferred.promise( [target ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "deferred.reject": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.reject", 
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the failCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.reject", 
        "syntax": "deferred.reject( [args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.rejectWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.rejectWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the failCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the failCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.rejectwith", 
        "syntax": "deferred.rejectWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.resolve": {
        "descr": "When the Deferred is resolved, any doneCallbacks added by deferred.then() or deferred.done() are called. Callbacks are executed in the order they were added. Each callback is passed the args from the deferred.resolve(). Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the deferred.resolve() call. For more information, see the documentation for jQuery.Deferred().", 
        "name": "deferred.resolve", 
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the doneCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.resolve", 
        "syntax": "deferred.resolve( [args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.resolveWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.resolveWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the doneCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the doneCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.resolvewith", 
        "syntax": "deferred.resolveWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.state": {
        "descr": "The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:", 
        "name": "deferred.state", 
        "params": [], 
        "path": "jquery/deferred.state", 
        "syntax": "deferred.state() Returns: String", 
        "type": "Deferred Object"
    }, 
    "deferred.then": {
        "descr": "Prior to jQuery 1.8, the arguments could be a function or an array of functions.", 
        "name": "deferred.then", 
        "params": [
            {
                "descr": "Type: Function()  A function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.", 
                "name": "progressFilter"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred notifies progress.", 
                "name": "progressCallbacks"
            }
        ], 
        "path": "jquery/deferred.then", 
        "syntax": "deferred.then( doneFilter [, failFilter ] [, progressFilter ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "defineGetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.defineGetter", 
        "params": [
            {
                "descr": "A string containing the name of the property to bind to the given function", 
                "name": "sprop"
            }, 
            {
                "descr": "A function to be bound to a lookup of the specified property", 
                "name": "fun"
            }
        ], 
        "path": "javascript/global_objects/object/definegetter", 
        "syntax": "obj.__defineGetter__(sprop, fun)", 
        "type": "Object"
    }, 
    "defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.", 
        "name": "Object.defineProperties", 
        "params": [
            {
                "descr": "The object on which to define or modify properties.", 
                "name": "obj"
            }, 
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.", 
                "name": "props"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperties", 
        "syntax": "Object.defineProperties(obj, props)", 
        "type": "Object"
    }, 
    "defineProperty": {
        "descr": "The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.", 
        "name": "Object.defineProperty", 
        "params": [
            {
                "descr": "The object on which to define the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property to be defined or modified.", 
                "name": "prop"
            }, 
            {
                "descr": "The descriptor for the property being defined or modified.", 
                "name": "descriptor"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.Defaults to false.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.Defaults to false.", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "True if and only if the value associated with the property may be changed with an assignment operator.Defaults to false.", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperty", 
        "syntax": "Object.defineProperty(obj, prop, descriptor)", 
        "type": "Object"
    }, 
    "defineSetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.defineSetter", 
        "params": [
            {
                "descr": "A string containing the name of the property to be bound to the given function", 
                "name": "sprop"
            }, 
            {
                "descr": "A function to be called when there is an attempt to set the specified property. ", 
                "name": "fun"
            }, 
            {
                "descr": "an alias for the variable that holds the value attempted to be assigned to prop", 
                "name": "val"
            }
        ], 
        "path": "javascript/global_objects/object/definesetter", 
        "syntax": "obj.__defineSetter__(sprop, fun)", 
        "type": "Object"
    }, 
    "delay": {
        "descr": "Added to jQuery in version 1.4, the .delay() method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will not delay the no-arguments forms of .show() or .hide() which do not use the effects queue.", 
        "name": "delay", 
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the number of milliseconds to delay execution of the next item in the queue.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/delay", 
        "syntax": ".delay( duration [, queueName ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "delegate": {
        "descr": "As of jQuery 1.7, .delegate() has been superseded by the .on() method. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the .on() method. In general, these are the equivalent templates for the two methods:", 
        "name": "delegate", 
        "params": [
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more event types and functions to execute for them.", 
                "name": "events"
            }
        ], 
        "path": "jquery/delegate", 
        "syntax": ".delegate( selector, eventType, handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "delete": {
        "descr": "The delete operator removes a property from an object.", 
        "name": "delete", 
        "params": [
            {
                "descr": "The name of an object, or an expression evaluating to an object.", 
                "name": "object"
            }, 
            {
                "descr": "The property to delete.", 
                "name": "property"
            }
        ], 
        "path": "javascript/operators/delete", 
        "syntax": "delete expression where expression should evaluate to a property reference, e.g.: delete object.propertydelete object['property'] Parameters  object  The name of an object, or an expression evaluating to an object.  property  The property to delete. Returns Throws in strict mode if the property is an own non-configurable property (returns false in non-strict). Returns true", 
        "type": "Operators"
    }, 
    "dequeue": {
        "descr": "When .dequeue() is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause .dequeue() to be called, so that the sequence can continue.", 
        "name": "dequeue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/dequeue", 
        "syntax": ".dequeue( [queueName ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "detach": {
        "descr": "The .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.", 
        "name": "detach", 
        "params": [
            {
                "descr": "Type: Selector  A selector expression that filters the set of matched elements to be removed.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/detach", 
        "syntax": ".detach( [selector ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "die": {
        "descr": "Any handler that has been attached with .live() can be removed with .die(). This method is analogous to calling .off() with no arguments, which is used to remove all handlers attached with .on(). See the discussions of .live() and .off() for further details.", 
        "name": "die", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or keydown.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: String  The function that is no longer to be executed.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more event types, such as click or keydown and their corresponding functions that are no longer to be executed.", 
                "name": "events"
            }
        ], 
        "path": "jquery/die", 
        "syntax": ".die() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Events"
    }, 
    "directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "window.directories", 
        "params": [], 
        "path": "dom/window.directories", 
        "syntax": "var dirBar = window.directories; Parameters dirBar is an object of the type BarProp. Example <script>  function dirs() {   alert(window.directories);\n or  } </script>);", 
        "type": "window"
    }, 
    "do...while": {
        "descr": "Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.", 
        "name": "do...while", 
        "params": [
            {
                "descr": "A statement that is executed at least once and is re-executed each time the condition evaluates to true. ", 
                "name": "statement"
            }, 
            {
                "descr": "An expression evaluated after each pass through the loop. ", 
                "name": "condition"
            }
        ], 
        "path": "javascript/statements/do...while", 
        "syntax": "do   statementwhile (condition);", 
        "type": "Statements"
    }, 
    "document": {
        "descr": "Returns a reference to the document contained in the window.", 
        "name": "window.document", 
        "params": [], 
        "path": "dom/window.document", 
        "syntax": "doc = window.document  Parameters doc is an object reference to a document. Example <!DOCTYPE html><html><head>   <title>Hello, World!</title></head><body><script type=\"text/javascript\">   var doc = window.document;   alert( doc.title);\n or     // alerts: Hello, World!</script></body></html>);", 
        "type": "window"
    }, 
    "document.activeElement": {
        "descr": "{{ DomRef }}", 
        "name": "document.activeElement", 
        "params": [], 
        "path": "dom/document.activeelement", 
        "syntax": "var curElement = document.activeElement; Example <!DOCTYPE HTML><html><head>    <script type=\"text/javascript\" charset=\"utf-8\">    function init() {        function onMouseUp(e) {            console.log(e);\n or             var outputElement = document.getElementById('output-element');\n or             var outputText = document.getElementById('output-text');\n or             var selectedTextArea = document.activeElement;            var selection = selectedTextArea.value.substring(            selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n or             outputElement.innerHTML = selectedTextArea.id;            outputText.innerHTML = selection;        }        document.getElementById(\"ta-example-one\").addEventListener(\"mouseup\", onMouseUp, false);\n or         document.getElementById(\"ta-example-two\").addEventListener(\"mouseup\", onMouseUp, false);\n or     }    </script></head><body onload=\"init()\"><div>    Select some text from one of the Textareas below:</div><form id=\"frm-example\" action=\"#\" accept-charset=\"utf-8\"><textarea name=\"ta-example-one\" id=\"ta-example-one\" rows=\"8\" cols=\"40\">This is Textarea Example One: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tincidunt, lorem a porttitor molestie, odio nibh iaculis libero, et accumsan nunc orci eu dui.</textarea><textarea name=\"ta-example-two\" id=\"ta-example-two\" rows=\"8\" cols=\"40\">This is Textarea Example Two:Fusce ullamcorper, nisl ac porttitor adipiscing, urna orci egestas libero, ut accumsan orci lacus laoreet diam. Morbi sed euismod diam.</textarea></form>Active Element Id: <span id=\"output-element\"></span><br/>Selected Text: <span id=\"output-text\"></span></body></html>);", 
        "type": "Document"
    }, 
    "document.adoptNode": {
        "descr": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.", 
        "name": "document.adoptNode", 
        "params": [], 
        "path": "dom/document.adoptnode", 
        "syntax": "node = document.adoptNode(externalNode);", 
        "type": "Document"
    }, 
    "document.anchors": {
        "descr": "anchors returns a list of all of the anchors in the document.", 
        "name": "document.anchors", 
        "params": [], 
        "path": "dom/document.anchors", 
        "syntax": "nodeList = document.anchors; Example if ( document.anchors.length >= 5 ) {  dump(\"dump found too many anchors\");\n or   window.location = \"http://www.google.com\";});", 
        "type": "Document"
    }, 
    "document.applets": {
        "descr": "applets returns an ordered list of the applets within a document.", 
        "name": "document.applets", 
        "params": [], 
        "path": "dom/document.applets", 
        "syntax": "nodeList = document.applets  Example // ( When you know the second applet is the one you want ) my_java_app = document.applets[1];", 
        "type": "Document"
    }, 
    "document.body": {
        "descr": "Returns the <body> or <frameset> node of the current document, or null if no such element exists.", 
        "name": "document.body", 
        "params": [], 
        "path": "dom/document.body", 
        "syntax": "var objRef = document.body; document.body = objRef; Example // in HTML: <body id=\"oldBodyElement\"></body>alert(document.body.id);\n or  // \"oldBodyElement\"var aNewBodyElement = document.createElement(\"body\");\n or aNewBodyElement.id = \"newBodyElement\";document.body = aNewBodyElement;alert(document.body.id);\n or  // \"newBodyElement\");", 
        "type": "Document"
    }, 
    "document.caretPositionFromPoint": {
        "descr": "This method is used to retrieve the caret position in a document based on two coordinates. A CaretPosition is returned, containing the found DOM node and the character offset in that node.", 
        "name": "document.caretPositionFromPoint", 
        "params": [
            {
                "descr": "Horizontal point on the page at where to determine the caret position.", 
                "name": "x"
            }, 
            {
                "descr": "Vertical point on the page at where to determine the caret position.", 
                "name": "y"
            }
        ], 
        "path": "dom/document.caretpositionfrompoint", 
        "syntax": "var cp = document.caretPositionFromPoint(float x, float y);", 
        "type": "Document"
    }, 
    "document.characterSet": {
        "descr": "Returns the character encoding of the current document.", 
        "name": "document.characterSet", 
        "params": [], 
        "path": "dom/document.characterset", 
        "syntax": "document.characterSet Examples var string = document.characterSet; <button onclick=\"alert(document.characterSet);\n or \">Show character set</button>// returns document's character set, such as \"ISO-8859-1\" or \"UTF-8\");", 
        "type": "Document"
    }, 
    "document.close": {
        "descr": "The document.close() method finishes writing to a document, opened with document.open().", 
        "name": "document.close", 
        "params": [], 
        "path": "dom/document.close", 
        "syntax": "document.close();", 
        "type": "Document"
    }, 
    "document.compatMode": {
        "descr": "{{ DomRef }}", 
        "name": "document.compatMode", 
        "params": [], 
        "path": "dom/document.compatmode", 
        "syntax": "mode = document.compatMode  mode is the string \"BackCompat\" for Quirks mode or \"CSS1Compat\" for Strict mode. Example if (document.compatMode == \"BackCompat\") {  // in Quirks mode}", 
        "type": "Document"
    }, 
    "document.contentType": {
        "descr": "{{ DomRef }}", 
        "name": "document.contentType", 
        "params": [], 
        "path": "dom/document.contenttype", 
        "syntax": "contentType = document.contentType; contentType is a read-only property. Notes The property is not affected by META tags. Specification Non-standard, only supported by Gecko. To be used in chrome code (i.e. Extensions and XUL applications).", 
        "type": "Document"
    }, 
    "document.cookie": {
        "descr": "Get and set the cookies associated with the current document.", 
        "name": "document.cookie", 
        "params": [
            {
                "descr": "The function to be executed (function).", 
                "name": "callback (required)"
            }, 
            {
                "descr": "The this object (object or null).", 
                "name": "thisObject (optional)"
            }, 
            {
                "descr": "The arguments of the callback function.", 
                "name": "argumentToPass1, argumentToPass2, argumentToPassN (optional)"
            }, 
            {
                "descr": "The identifier to check, i.e. the name of the cookie (string)", 
                "name": "identifier (required)"
            }, 
            {
                "descr": "A boolean expressing whether the cookie will use the local path (true) instead of the global one (false or undefined) (boolean or undefined)", 
                "name": "onlyHere (optional)"
            }, 
            {
                "descr": "The name of the cookie to create/overwrite (string).", 
                "name": "name (required)"
            }, 
            {
                "descr": "The value of the cookie (string).", 
                "name": "value (required)"
            }, 
            {
                "descr": "The max-age in seconds (e.g. 31536e3 for a year, Infinity for a never-expires cookie) or the expires date in GMTString format or as Date object; if not specified it will expire at the end of session (number \u2013 finite or Infinity \u2013 string, Date object or null).", 
                "name": "end (optional)"
            }, 
            {
                "descr": "E.g., \"/\", \"/mydir\"; if not specified, defaults to the current path of the current document location (string or null).", 
                "name": "path (optional)"
            }, 
            {
                "descr": "E.g., \"example.com\", \".example.com\" (includes all subdomains) or \"subdomain.example.com\"; if not specified, defaults to the host portion of the current document location (string or null).", 
                "name": "domain (optional)"
            }, 
            {
                "descr": "The cookie will be transmitted only over secure protocol as https (boolean or null).", 
                "name": "secure (optional)"
            }, 
            {
                "descr": "the name of the cookie to read (string).", 
                "name": "name"
            }, 
            {
                "descr": "the name of the cookie to remove (string).", 
                "name": "name"
            }, 
            {
                "descr": "e.g., \"/\", \"/mydir\"; if not specified, defaults to the current path of the current document location (string or null).", 
                "name": "path (optional)"
            }, 
            {
                "descr": "E.g., \"example.com\", \".example.com\" (includes all subdomains) or \"subdomain.example.com\"; if not specified, defaults to the host portion of the current document location (string or null).", 
                "name": "domain (optional)"
            }, 
            {
                "descr": "the name of the cookie to test (string).", 
                "name": "name"
            }
        ], 
        "path": "dom/document.cookie", 
        "syntax": "allCookies = document.cookie; allCookies is a string containing a semicolon-separated list of cookies (i.e. key=value pairs)", 
        "type": "Document"
    }, 
    "document.createAttribute": {
        "descr": "createAttribute creates a new attribute node, and returns it.", 
        "name": "document.createAttribute", 
        "params": [], 
        "path": "dom/document.createattribute", 
        "syntax": "attribute = document.createAttribute(name)", 
        "type": "Document"
    }, 
    "document.createCDATASection": {
        "descr": "createCDATASection() creates a new CDATA section node, and returns it.", 
        "name": "document.createCDATASection", 
        "params": [], 
        "path": "dom/document.createcdatasection", 
        "syntax": "CDATASectionNode = document.createCDATASection(data)", 
        "type": "Document"
    }, 
    "document.createComment": {
        "descr": "createComment() creates a new comment node, and returns it.", 
        "name": "document.createComment", 
        "params": [
            {
                "descr": "A string containing the data to be added to the Comment.", 
                "name": "data"
            }
        ], 
        "path": "dom/document.createcomment", 
        "syntax": "CommentNode = document.createComment(data)", 
        "type": "Document"
    }, 
    "document.createDocumentFragment": {
        "descr": "Creates a new empty DocumentFragment.", 
        "name": "document.createDocumentFragment", 
        "params": [], 
        "path": "dom/document.createdocumentfragment", 
        "syntax": "var docFragment = document.createDocumentFragment();", 
        "type": "Document"
    }, 
    "document.createElement": {
        "descr": "In an HTML document creates the specified HTML element or HTMLUnknownElement if the element is not known. In a XUL document creates the specified XUL element. In other documents creates an element with a null namespaceURI.", 
        "name": "document.createElement", 
        "params": [], 
        "path": "dom/document.createelement", 
        "syntax": "var element = document.createElement(tagName);", 
        "type": "Document"
    }, 
    "document.createEvent": {
        "descr": "The createEvent method is deprecated. Use event constructors instead.", 
        "name": "document.createEvent", 
        "params": [], 
        "path": "dom/document.createevent", 
        "syntax": "var event = document.createEvent(type);", 
        "type": "Document"
    }, 
    "document.createExpression": {
        "descr": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.", 
        "name": "document.createExpression", 
        "params": [], 
        "path": "dom/document.createexpression", 
        "syntax": "xpathExpr = document.createExpression(xpathText, namespaceURLMapper);", 
        "type": "Document"
    }, 
    "document.createNodeIterator": {
        "descr": "Returns a new NodeIterator object.", 
        "name": "document.createNodeIterator", 
        "params": [
            {
                "descr": "The root node at which to begin the NodeIterator's traversal.", 
                "name": "root"
            }, 
            {
                "descr": "Bitwise OR'd list of Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.", 
                "name": "whatToShow Optional"
            }, 
            {
                "descr": "An object implementing the NodeFilter interface; its acceptNode() method will be called for each node in the subtree based at root which is accepted as included by the whatToShow flag to determine whether or not to include it in the list of iterable nodes (a simple callback function may also be used instead). The method should return one of NodeFilter.FILTER_ACCEPT, NodeFilter.FILTER_REJECT, or NodeFilter.FILTER_SKIP. See the Example.", 
                "name": "filter Optional"
            }
        ], 
        "path": "dom/document.createnodeiterator", 
        "syntax": "var nodeIterator = document.createNodeIterator(root, whatToShow, filter);", 
        "type": "Document"
    }, 
    "document.createRange": {
        "descr": "Returns a new Range object.", 
        "name": "document.createRange", 
        "params": [], 
        "path": "dom/document.createrange", 
        "syntax": "range = document.createRange();", 
        "type": "Document"
    }, 
    "document.createTextNode": {
        "descr": "Creates a new Text node.", 
        "name": "document.createTextNode", 
        "params": [], 
        "path": "dom/document.createtextnode", 
        "syntax": "text = document.createTextNode(data);", 
        "type": "Document"
    }, 
    "document.createTreeWalker": {
        "descr": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.", 
        "name": "document.createTreeWalker", 
        "params": [
            {
                "descr": "Is the root Node of this TreeWalker traversal. ", 
                "name": "root"
            }, 
            {
                "descr": "Is an optionale unsigned long representing a bitmask created by combining the constant properties of NodeFilter. ", 
                "name": "whatToShow Optional"
            }, 
            {
                "descr": "Is an optional NodeFilter, that is an object with a method acceptNode, which is called by the TreeWalker to determine whether or not to accept a node that has passed the whatToShow check.", 
                "name": "filter Optional"
            }, 
            {
                "descr": "Is a Boolean flag indicating if when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "entityReferenceExpansion Optional"
            }
        ], 
        "path": "dom/document.createtreewalker", 
        "syntax": "treeWalker = document.createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);", 
        "type": "Document"
    }, 
    "document.currentScript": {
        "descr": "Returns the <script> element whose script is currently being processed.", 
        "name": "document.currentScript", 
        "params": [], 
        "path": "dom/document.currentscript", 
        "syntax": "var curScriptElement = document.currentScript; Example This example checks to see if the script is being executed asynchronously: if (document.currentScript.async) {  console.log(\"Executing asynchronously\");\n or } else {  console.log(\"Executing synchronously\");\n or });", 
        "type": "Document"
    }, 
    "document.defaultView": {
        "descr": "In browsers returns the window object associated with the document or null if none available.", 
        "name": "document.defaultView", 
        "params": [], 
        "path": "dom/document.defaultview", 
        "syntax": "var win = document.defaultView; This property is read-only. Notes According to quirksmode, defaultView is not supported in IE until IE 9. Specification HTML5: defaultView DOM Level 2 Views: defaultView DOM Level 3 Views (Only developed to Working Group Note and not implemented)       Edit this page on MDN", 
        "type": "Document"
    }, 
    "document.doctype": {
        "descr": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.", 
        "name": "document.doctype", 
        "params": [], 
        "path": "dom/document.doctype", 
        "syntax": "doctype = document.doctype; doctype is a read-only property. Example var doctypeObj = document.doctype;alert(  \"doctypeObj.name: \"           + doctypeObj.name            + \"\\n\" +  \"doctypeObj.internalSubset: \" + doctypeObj.internalSubset  + \"\\n\" +  \"doctypeObj.publicId: \"       + doctypeObj.publicId        + \"\\n\" +  \"doctypeObj.systemId: \"       + doctypeObj.systemId);", 
        "type": "Document"
    }, 
    "document.documentElement": {
        "descr": "Read-only", 
        "name": "document.documentElement", 
        "params": [], 
        "path": "dom/document.documentelement", 
        "syntax": "varelement = document.documentElement; Example var rootElement = document.documentElement;var firstTier = rootElement.childNodes;// firstTier is the NodeList of the direct children of the root elementfor (var i = 0; i < firstTier.length; i++) {   // do something with each direct kid of the root element   // as firstTier[i]}", 
        "type": "Document"
    }, 
    "document.documentURI": {
        "descr": "Returns the document location as string. It is read-only per DOM4 specification.", 
        "name": "document.documentURI", 
        "params": [], 
        "path": "dom/document.documenturi", 
        "syntax": "var string = document.documentURI; Notes HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents. Specification DOM4 (Working Draft)       Edit this page on MDN", 
        "type": "Document"
    }, 
    "document.domain": {
        "descr": "Gets/sets the domain portion of the origin of the current document, as used by the same origin policy.", 
        "name": "document.domain", 
        "params": [], 
        "path": "dom/document.domain", 
        "syntax": "var domainString = document.domain;document.domain = string; Example // for document www.example.xxx/good.html,// this script closes the windowvar badDomain = \"www.example.xxx\";if (document.domain == badDomain)   window.close();\n or  // Just an example - window.close() sometimes has no effect.);", 
        "type": "Document"
    }, 
    "document.elementFromPoint": {
        "descr": "Returns the element from the document whose elementFromPoint method is being called which is the topmost element which lies under the given point. To get an element, specify the point via coordinates, in CSS pixels, relative to the upper-left-most point in the window or frame containing the document.", 
        "name": "document.elementFromPoint", 
        "params": [], 
        "path": "dom/document.elementfrompoint", 
        "syntax": "var element = document.elementFromPoint(x, y);", 
        "type": "Document"
    }, 
    "document.embeds": {
        "descr": "embeds returns a list of the embedded OBJECTS within the current document.", 
        "name": "document.embeds", 
        "params": [], 
        "path": "dom/document.embeds", 
        "syntax": "nodeList = document.embeds  Specification DOM Level 0. Not part of any standard. MSDN: embeds Collection", 
        "type": "Document"
    }, 
    "document.enableStyleSheetsForSet": {
        "descr": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).", 
        "name": "document.enableStyleSheetsForSet", 
        "params": [
            {
                "descr": "The name of the style sheets to enable. ", 
                "name": "name"
            }
        ], 
        "path": "dom/document.enablestylesheetsforset", 
        "syntax": "document.enableStyleSheetsForSet(name)", 
        "type": "Document"
    }, 
    "document.evaluate": {
        "descr": "Returns an XPathResult based on an XPath expression and other given parameters.", 
        "name": "document.evaluate", 
        "params": [], 
        "path": "dom/document.evaluate", 
        "syntax": "var xpathResult = document.evaluate( xpathExpression,  contextNode,  namespaceResolver,  resultType,  result);", 
        "type": "Document"
    }, 
    "document.exitPointerLock": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "document.exitPointerLock", 
        "params": [], 
        "path": "dom/document.exitpointerlock", 
        "syntax": "exitPointerLock asynchronously releases a pointer lock previously requested through Element.requestPointerLock. To track the success or failure of the request, it is necessary to listen for the pointerlockchange and pointerlockerror events. Syntax document.exitPointerLock();", 
        "type": "Document"
    }, 
    "document.forms": {
        "descr": "forms returns a collection (an HTMLCollection) of the form elements within the current document.", 
        "name": "document.forms", 
        "params": [], 
        "path": "dom/document.forms", 
        "syntax": "collection = document.forms; Example: Getting form information <!DOCTYPE html><html lang=\"en\"><head><title>document.forms example</title></head><body><form id=\"robby\">  <input type=\"button\" onclick=\"alert(document.forms[0].id);\n or \" value=\"robby's form\" /></form><form id=\"dave\">  <input type=\"button\" onclick=\"alert(document.forms[1].id);\n or \" value=\"dave's form\" /></form><form id=\"paul\">  <input type=\"button\" onclick=\"alert(document.forms[2].id);\n or \" value=\"paul's form\" /></form></body></html>);", 
        "type": "Document"
    }, 
    "document.getBoxObjectFor": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "document.getBoxObjectFor", 
        "params": [], 
        "path": "dom/document.getboxobjectfor", 
        "syntax": "boxObject = document.getBoxObjectFor(element);", 
        "type": "Document"
    }, 
    "document.getElementById": {
        "descr": "Returns a reference to the element by its ID.", 
        "name": "document.getElementById", 
        "params": [], 
        "path": "dom/document.getelementbyid", 
        "syntax": "element = document.getElementById(id);", 
        "type": "Document"
    }, 
    "document.getElementsByClassName": {
        "descr": "Returns a set of elements which have all the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.", 
        "name": "document.getElementsByClassName", 
        "params": [], 
        "path": "dom/document.getelementsbyclassname", 
        "syntax": "elements = document.getElementsByClassName(names);\n or  // or:elements = rootElement.getElementsByClassName(names);", 
        "type": "Document"
    }, 
    "document.getElementsByName": {
        "descr": "Returns a list of elements with a given name in the (X)HTML document.", 
        "name": "document.getElementsByName", 
        "params": [], 
        "path": "dom/document.getelementsbyname", 
        "syntax": "elements = document.getElementsByName(name)", 
        "type": "Document"
    }, 
    "document.getElementsByTagName": {
        "descr": "Returns a HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName again.", 
        "name": "document.getElementsByTagName", 
        "params": [], 
        "path": "dom/document.getelementsbytagname", 
        "syntax": "var elements = document.getElementsByTagName(name);", 
        "type": "Document"
    }, 
    "document.getSelection": {
        "descr": "The DOM getSelection() method is available on the Window and Document interfaces. See window.getSelection() for details.", 
        "name": "document.getSelection", 
        "params": [], 
        "path": "dom/document.getselection", 
        "syntax": "Window and Document", 
        "type": "Document"
    }, 
    "document.hasFocus": {
        "descr": "Returns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus.", 
        "name": "document.hasFocus", 
        "params": [], 
        "path": "dom/document.hasfocus", 
        "syntax": "focused = document.hasFocus();", 
        "type": "Document"
    }, 
    "document.head": {
        "descr": "Returns the <head> element of the current document. If there are more than one <head> elements, the first one is returned.", 
        "name": "document.head", 
        "params": [], 
        "path": "dom/document.head", 
        "syntax": "var objRef = document.head; Example // in HTML: <head id=\"my-document-head\">var aHead = document.head;alert(aHead.id);\n or  // \"my-document-head\";alert( document.head === document.querySelector(\"head\") );\n or  // true);", 
        "type": "Document"
    }, 
    "document.height": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "document.height", 
        "params": [], 
        "path": "dom/document.height", 
        "syntax": "height_value = document.height Example // alert document heightalert(document.height);", 
        "type": "Document"
    }, 
    "document.images": {
        "descr": "document.images returns a collection of the images in the current HTML document.", 
        "name": "document.images", 
        "params": [], 
        "path": "dom/document.images", 
        "syntax": "var htmlCollection = document.images; Example var ilist = document.images;for(var i = 0; i < ilist.length; i++) {    if(ilist[i].src == \"banner.gif\") {        // found the banner    }}", 
        "type": "Document"
    }, 
    "document.implementation": {
        "descr": "Returns a DOMImplementation object associated with the current document.", 
        "name": "document.implementation", 
        "params": [], 
        "path": "dom/document.implementation", 
        "syntax": "DOMImpObj = document.implementation; Example var modName = \"HTML\";var modVer = \"2.0\";var conformTest = document.implementation.hasFeature( modName, modVer );\n or alert( \"DOM \" + modName + \" \" + modVer + \" supported?: \" + conformTest );\n or // alerts with: \"DOM HTML 2.0 supported?: true\" if DOM Level 2 HTML module is supported.);", 
        "type": "Document"
    }, 
    "document.importNode": {
        "descr": "Creates a copy of a node from an external document that can be inserted into the current document.", 
        "name": "document.importNode", 
        "params": [
            {
                "descr": "The new node that is imported into the document. ", 
                "name": "node"
            }, 
            {
                "descr": "The node from another document to be imported.", 
                "name": "externalNode"
            }, 
            {
                "descr": "A boolean, indicating whether the descendants of the imported node need to be imported.", 
                "name": "deep Optional"
            }
        ], 
        "path": "dom/document.importnode", 
        "syntax": "var node = document.importNode(externalNode, deep);", 
        "type": "Document"
    }, 
    "document.lastModified": {
        "descr": "Returns a string containing the date and time on which the current document was last modified.", 
        "name": "document.lastModified", 
        "params": [], 
        "path": "dom/document.lastmodified", 
        "syntax": "string = document.lastModified;  Example Example #1: Simple usage alert(document.lastModified);\n or  // returns: Tuesday, July 10, 2001 10:19:42);", 
        "type": "Document"
    }, 
    "document.lastStyleSheetSet": {
        "descr": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.", 
        "name": "document.lastStyleSheetSet", 
        "params": [], 
        "path": "dom/document.laststylesheetset", 
        "syntax": "lastStyleSheetSet = document.lastStyleSheetSet On return, lastStyleSheetSet indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting document.selectedStyleSheetSet, the returned value is null.  Note: This value doesn't change when document.enableStyleSheetsForSet()", 
        "type": "Document"
    }, 
    "document.links": {
        "descr": "The links property returns a collection of all AREA elements and anchor elements in a document with a value for the href attribute.", 
        "name": "document.links", 
        "params": [], 
        "path": "dom/document.links", 
        "syntax": "nodeList = document.links  Example var links = document.links;for(var i = 0; i < links.length; i++) {  var linkHref = document.createTextNode(links[i].href);\n or   var lineBreak = document.createElement(\"br\");\n or   document.body.appendChild(linkHref);\n or   document.body.appendChild(lineBreak);\n or });", 
        "type": "Document"
    }, 
    "document.location": {
        "descr": "Document", 
        "name": "document.location", 
        "params": [], 
        "path": "dom/document.location", 
        "syntax": "locationObj = document.locationdocument.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org' Example dump(document.location);\n or  // Prints a string like// \"http://www.example.com/juicybits.html\" to the console);", 
        "type": "Document"
    }, 
    "document.open": {
        "descr": "The document.open() method opens a document for writing.", 
        "name": "document.open", 
        "params": [], 
        "path": "dom/document.open", 
        "syntax": "document.open();", 
        "type": "Document"
    }, 
    "document.plugins": {
        "descr": "Returns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document.", 
        "name": "document.plugins", 
        "params": [], 
        "path": "dom/document.plugins", 
        "syntax": "embedArrayObj = document.plugins  Specification DOM Level 0. Not part of any standard. See also MSDN: plugins Collection       Edit this page on MDN", 
        "type": "Document"
    }, 
    "document.pointerLockElement": {
        "descr": "The pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.", 
        "name": "document.pointerLockElement", 
        "params": [], 
        "path": "dom/document.pointerlockelement", 
        "syntax": "var element = document.pointerLockElement; Value An Element or null. Specifications Specification Status Comment Pointer Lock Working Draft Extend the Document interface Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support (Yes) webkit (Yes) moz ? ? ?   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  See also", 
        "type": "Document"
    }, 
    "document.preferredStyleSheetSet": {
        "descr": "Returns the preferred style sheet set as set by the page author.", 
        "name": "document.preferredStyleSheetSet", 
        "params": [], 
        "path": "dom/document.preferredstylesheetset", 
        "syntax": "preferredStyleSheetSet = document.preferredStyleSheetSet On return, preferredStyleSheetSet indicates the author's preferred style sheet set. This is determined from the order of style sheet declarations and the Default-Style HTTP header. If there isn't a preferred style sheet set defined by the author, the empty string (\"\") is returned.", 
        "type": "Document"
    }, 
    "document.queryCommandSupported": {
        "descr": "Reports whether or not the specified editor query command is supported by the browser.", 
        "name": "document.queryCommandSupported", 
        "params": [
            {
                "descr": "The command for which to determine support.", 
                "name": "command"
            }
        ], 
        "path": "dom/document.querycommandsupported", 
        "syntax": "isSupported = document.queryCommandSupported(command);", 
        "type": "Document"
    }, 
    "document.querySelector": {
        "descr": "Returns the first element within the document (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.", 
        "name": "document.querySelector", 
        "params": [], 
        "path": "dom/document.queryselector", 
        "syntax": "element = document.querySelector(selectors);", 
        "type": "Document"
    }, 
    "document.querySelectorAll": {
        "descr": "Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.", 
        "name": "document.querySelectorAll", 
        "params": [], 
        "path": "dom/document.queryselectorall", 
        "syntax": "elementList = document.querySelectorAll(selectors);", 
        "type": "Document"
    }, 
    "document.readyState": {
        "descr": "Returns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources, and \"complete\" once it has loaded.", 
        "name": "document.readyState", 
        "params": [], 
        "path": "dom/document.readystate", 
        "syntax": "Syntax var string = document.readyState; Examples // alternative to DOMContentLoadeddocument.onreadystatechange = function () {  if (document.readyState == \"interactive\") {    initApplication();\n or   }});", 
        "type": "Document"
    }, 
    "document.referrer": {
        "descr": "Returns the URI of the page that linked to this page.", 
        "name": "document.referrer", 
        "params": [], 
        "path": "dom/document.referrer", 
        "syntax": "string = document.referrer;  Notes The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark). Since this property returns only a string, it does not give you DOM access to the referring page.", 
        "type": "Document"
    }, 
    "document.releaseCapture": {
        "descr": "Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().", 
        "name": "document.releaseCapture", 
        "params": [], 
        "path": "dom/document.releasecapture", 
        "syntax": "document.releaseCapture()", 
        "type": "Document"
    }, 
    "document.scripts": {
        "descr": "Returns a list of the <script> elements in the document. The returned object is an HTMLCollection.", 
        "name": "document.scripts", 
        "params": [], 
        "path": "dom/document.scripts", 
        "syntax": "var scriptList = document.scripts; The returned scriptList is an HTMLCollection", 
        "type": "Document"
    }, 
    "document.selectedStyleSheetSet": {
        "descr": "Indicates the name of the style sheet set that's currently in use.", 
        "name": "document.selectedStyleSheetSet", 
        "params": [], 
        "path": "dom/document.selectedstylesheetset", 
        "syntax": "currentStyleSheetSet = document.selectedStyleSheetSetdocument.selectedStyleSheet = newStyleSheetSet  On return, currentStyleSheetSet indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property. Setting the value of this property is equivalent to calling document.enableStyleSheetsForSet()", 
        "type": "Document"
    }, 
    "document.styleSheetSets": {
        "descr": "Returns a live list of all of the currently-available style sheet sets.", 
        "name": "document.styleSheetSets", 
        "params": [], 
        "path": "dom/document.stylesheetsets", 
        "syntax": "sets = document.styleSheetSets On return, sets is a list of style sheet sets that are available. Example Given an <ul>", 
        "type": "Document"
    }, 
    "document.styleSheets": {
        "descr": "Returns a list of StyleSheet objects for stylesheets explicitly linked into or embedded in a document.", 
        "name": "document.styleSheets", 
        "params": [
            {
                "descr": "returns the number of stylesheet objects contained in the object.var styleSheetsNum = document.styleSheets.length;", 
                "name": "length"
            }
        ], 
        "path": "dom/document.stylesheets", 
        "syntax": "var styleSheetList = document.styleSheets; The returned object is a StyleSheetList. It is an ordered collection of StyleSheet objects. styleSheetList.item(index)", 
        "type": "Document"
    }, 
    "document.title": {
        "descr": "Gets or sets the title of the document.", 
        "name": "document.title", 
        "params": [], 
        "path": "dom/document.title", 
        "syntax": "var docTitle = document.title; title is a string containing the document's title. If the title was overridden by setting document.title, returns that value. Otherwise returns the title specified in the markup (see the Notes below).", 
        "type": "Document"
    }, 
    "document.width": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "document.width", 
        "params": [], 
        "path": "dom/document.width", 
        "syntax": "pixels = document.width; Example function init() {    alert(\"The width of the document is \" + document.width + \" pixels.\");\n or });", 
        "type": "Document"
    }, 
    "document.write": {
        "descr": "Writes a string of text to a document stream opened by document.open().", 
        "name": "document.write", 
        "params": [], 
        "path": "dom/document.write", 
        "syntax": "document.write(markup);", 
        "type": "Document"
    }, 
    "document.writeln": {
        "descr": "Writes a string of text followed by a newline character to a document.", 
        "name": "document.writeln", 
        "params": [], 
        "path": "dom/document.writeln", 
        "syntax": "document.writeln(line);", 
        "type": "Document"
    }, 
    "dump": {
        "descr": "Prints messages to the (native) console.", 
        "name": "window.dump", 
        "params": [], 
        "path": "dom/window.dump", 
        "syntax": "window.dump(message);\n or dump(message);", 
        "type": "window"
    }, 
    "each": {
        "descr": "The .each() method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword this refers to the element.", 
        "name": "each", 
        "params": [
            {
                "descr": "Type: Function() A function to execute for each matched element.", 
                "name": "function(index, Element)"
            }
        ], 
        "path": "jquery/each", 
        "syntax": ".each( function(index, Element) ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "element": {
        "descr": "The Element interface represents part of the document. This interface describes methods and properties common to each kind of elements. Specific behaviors are described in the specific interfaces, inheriting from Element: the HTMLElement interface for HTML elements, or the SVGElement interface for SVG elements.", 
        "name": "element", 
        "params": [
            {
                "descr": "Returns the event handling code for the copy event. ", 
                "name": "Element.oncopy"
            }, 
            {
                "descr": "Returns the event handling code for the cut event. ", 
                "name": "Element.oncut"
            }, 
            {
                "descr": "...", 
                "name": "Element.ongotpointercapture"
            }, 
            {
                "descr": "...", 
                "name": "Element.onlostpointercapture"
            }, 
            {
                "descr": "Returns the event handling code for the paste event.(bug bug 280959)", 
                "name": "Element.onpaste"
            }, 
            {
                "descr": "Returns the event handling code for the wheel event.", 
                "name": "element.onwheel"
            }
        ], 
        "path": "dom/element", 
        "syntax": "Element.innerHTML  Gets/sets the markup of the element's content. String ParentNode.lastElementChild The last direct child element of an element, or null if the element has no child elements. Element ElementTraversal.nextElementSibling The element immediately following the given one in the tree, or null if there's no sibling node. Element Element.outerHTML   Gets the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string. String ElementTraversal.previousElementSibling The element immediately preceding the given one in the tree, or null if there is no sibling element. Element Element.scrollHeight  The scroll view height of an element. Number Element.scrollLeft  Gets/sets the left scroll offset of an element. Number Element.scrollTop  Gets/sets the top scroll offset of an element. Number Element.scrollWidth", 
        "type": "Element"
    }, 
    "element.classList": {
        "descr": "classList returns a token list of the class attribute of the element.", 
        "name": "element.classList", 
        "params": [], 
        "path": "dom/element.classlist", 
        "syntax": "var elementClasses = elementNodeReference.classList; elementClasses is a DOMTokenList representing the class attribute of elementNodeReference. If the class attribute was not set or is empty elementClasses.length returns 0. element.classList itself is read-only, although you can modify it using the add()", 
        "type": "Element"
    }, 
    "element.className": {
        "descr": "className gets and sets the value of the class attribute of the specified element.", 
        "name": "element.className", 
        "params": [], 
        "path": "dom/element.classname", 
        "syntax": "cName = elementNodeReference.className;elementNodeReference.className = cName; cName is a string variable representing the class or space-separated classes of the current element. Example var elm = document.getElementById(\"div1\");\n or if (elm.className == \"fixed\") {  // skip a particular class of element  goNextElement();\n or });", 
        "type": "Element"
    }, 
    "element.clientHeight": {
        "descr": "Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.", 
        "name": "element.clientHeight", 
        "params": [], 
        "path": "dom/element.clientheight", 
        "syntax": "var h = element.clientHeight; h is an integer representing height of the element in pixels.  Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect()", 
        "type": "Element"
    }, 
    "element.clientLeft": {
        "descr": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right\u2013to\u2013left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.", 
        "name": "element.clientLeft", 
        "params": [], 
        "path": "dom/element.clientleft", 
        "syntax": "var left = element.clientLeft; Example   padding-top", 
        "type": "Element"
    }, 
    "element.clientTop": {
        "descr": "The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.", 
        "name": "element.clientTop", 
        "params": [], 
        "path": "dom/element.clienttop", 
        "syntax": "vartop = element.clientTop; Example   padding-top", 
        "type": "Element"
    }, 
    "element.clientWidth": {
        "descr": "This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().", 
        "name": "element.clientWidth", 
        "params": [], 
        "path": "dom/element.clientwidth", 
        "syntax": "var intElemClientWidth = element.clientWidth; intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. clientWidth is read\u2013only.  Example   padding-top", 
        "type": "Element"
    }, 
    "element.getAttribute": {
        "descr": "getAttribute() returns the value of the named attribute on the specified element. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.", 
        "name": "element.getAttribute", 
        "params": [], 
        "path": "dom/element.getattribute", 
        "syntax": "var attribute = element.getAttribute(attributeName);", 
        "type": "Element"
    }, 
    "element.getAttributeNode": {
        "descr": "Returns the specified attribute of the specified element, as an Attr node.", 
        "name": "element.getAttributeNode", 
        "params": [], 
        "path": "dom/element.getattributenode", 
        "syntax": "var attrNode = element.getAttributeNode(attrName);", 
        "type": "Element"
    }, 
    "element.getBoundingClientRect": {
        "descr": "Returns a text rectangle object that encloses a group of text rectangles.", 
        "name": "element.getBoundingClientRect", 
        "params": [], 
        "path": "dom/element.getboundingclientrect", 
        "syntax": "rectObject = object.getBoundingClientRect();", 
        "type": "Element"
    }, 
    "element.getClientRects": {
        "descr": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client.", 
        "name": "element.getClientRects", 
        "params": [], 
        "path": "dom/element.getclientrects", 
        "syntax": "var rectCollection = object.getClientRects();", 
        "type": "Element"
    }, 
    "element.getElementsByTagName": {
        "descr": "Returns a list of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times element.getElementsByTagName with the same element and arguments.", 
        "name": "element.getElementsByTagName", 
        "params": [], 
        "path": "dom/element.getelementsbytagname", 
        "syntax": "elements = element.getElementsByTagName(tagName)", 
        "type": "Element"
    }, 
    "element.hasAttribute": {
        "descr": "hasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not.", 
        "name": "element.hasAttribute", 
        "params": [], 
        "path": "dom/element.hasattribute", 
        "syntax": "var result = element.hasAttribute(attName);", 
        "type": "Element"
    }, 
    "element.id": {
        "descr": "Gets or sets the element's identifier (attribute id).", 
        "name": "element.id", 
        "params": [], 
        "path": "dom/element.id", 
        "syntax": "var idStr = element.id; // Get the id.element.id = idStr; // Set the id where idStr is the ID of the element. Notes The ID must be unique in a document, and is often used to retrieve the element using getElementById. In some documents (in particular, HTML, XUL, and SVG), the id", 
        "type": "Element"
    }, 
    "element.innerHTML": {
        "descr": "innerHTML sets or gets the HTML syntax describing the element's descendants.", 
        "name": "element.innerHTML", 
        "params": [], 
        "path": "dom/element.innerhtml", 
        "syntax": "<div>, <span>", 
        "type": "Element"
    }, 
    "element.insertAdjacentHTML": {
        "descr": "insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.", 
        "name": "element.insertAdjacentHTML", 
        "params": [
            {
                "descr": "Before the element itself.", 
                "name": "'beforebegin'"
            }, 
            {
                "descr": "Just inside the element, before its first child.", 
                "name": "'afterbegin'"
            }, 
            {
                "descr": "Just inside the element, after its last child.", 
                "name": "'beforeend'"
            }, 
            {
                "descr": "After the element itself.", 
                "name": "'afterend'"
            }
        ], 
        "path": "dom/element.insertadjacenthtml", 
        "syntax": "element.insertAdjacentHTML(position, text);", 
        "type": "Element"
    }, 
    "element.length": {
        "descr": "length returns the number of items in a NodeList.", 
        "name": "element.length", 
        "params": [], 
        "path": "dom/element.length", 
        "syntax": "numItems =nodeList.length numItems is an integer value representing the number of items in a NodeList. Example // all the paragraphs in the document var items = document.getElementsByTagName(\"p\");\n or  // for each item in the list,// append the entire element as a string of HTMLvar gross = \"\";for (var i = 0; i < items.length; i++) {  gross += items[i].innerHTML;}// gross is now all the HTML for the paragraphs);", 
        "type": "Element"
    }, 
    "element.matches": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "element.matches", 
        "params": [
            {
                "descr": "The specified selector string is invalid.", 
                "name": "SYNTAX_ERR"
            }
        ], 
        "path": "dom/element.matches", 
        "syntax": "true if the element would be selected by the specified selector string; otherwise, returns false.  Most browsers implements this, prefixed, under the non-standard name matchesSelector()", 
        "type": "Element"
    }, 
    "element.name": {
        "descr": "name gets or sets the name propery of an DOM object, it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.", 
        "name": "element.name", 
        "params": [], 
        "path": "dom/element.name", 
        "syntax": "<form>, <frame>, <iframe>", 
        "type": "Element"
    }, 
    "element.outerHTML": {
        "descr": "The outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.", 
        "name": "element.outerHTML", 
        "params": [], 
        "path": "dom/element.outerhtml", 
        "syntax": "var content = element.outerHTML; On return, content contains the serialized HTML fragment describing the element and its descendants. element.outerHTML = content; Replaces the element with the nodes generated by parsing the string content with the parent of element as the context node for the fragment parsing algorithm. Examples Getting the value of an element's outerHTML property: // HTML:// <div id=\"d\"><p>Content</p><p>Further Elaborated</p></div>d = document.getElementById(\"d\");\n or dump(d.outerHTML);\n or // the string '<div id=\"d\"><p>Content</p><p>Further Elaborated</p></div>'// is dumped to the console window);", 
        "type": "Element"
    }, 
    "element.querySelector": {
        "descr": "Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.", 
        "name": "element.querySelector", 
        "params": [], 
        "path": "dom/element.queryselector", 
        "syntax": "element = baseElement.querySelector(selectors);", 
        "type": "Element"
    }, 
    "element.querySelectorAll": {
        "descr": "Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors.", 
        "name": "element.querySelectorAll", 
        "params": [], 
        "path": "dom/element.queryselectorall", 
        "syntax": "elementList = baseElement.querySelectorAll(selectors);", 
        "type": "Element"
    }, 
    "element.removeAttribute": {
        "descr": "removeAttribute removes an attribute from the specified element.", 
        "name": "element.removeAttribute", 
        "params": [], 
        "path": "dom/element.removeattribute", 
        "syntax": "element.removeAttribute(attrName);", 
        "type": "Element"
    }, 
    "element.removeAttributeNode": {
        "descr": "removeAttributeNode removes the specified attribute from the current element.", 
        "name": "element.removeAttributeNode", 
        "params": [], 
        "path": "dom/element.removeattributenode", 
        "syntax": "removedAttr = element.removeAttributeNode(attributeNode)", 
        "type": "Element"
    }, 
    "element.requestFullscreen": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "element.requestFullscreen", 
        "params": [], 
        "path": "dom/element.requestfullscreen", 
        "syntax": "element.mozRequestFullScreen();", 
        "type": "Element"
    }, 
    "element.requestPointerLock": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "element.requestPointerLock", 
        "params": [], 
        "path": "dom/element.requestpointerlock", 
        "syntax": "requestPointerLock allows to asynchronously ask for the pointer to be locked on the given element. To track the success or failure of the request, it is necessary to listen for the pointerlockchange and pointerlockerror events at the Document", 
        "type": "Element"
    }, 
    "element.scrollHeight": {
        "descr": "This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().", 
        "name": "element.scrollHeight", 
        "params": [], 
        "path": "dom/element.scrollheight", 
        "syntax": "var intElemScrollHeight = document.getElementById(id_attribute_value).scrollHeight;", 
        "type": "Element"
    }, 
    "element.scrollIntoView": {
        "descr": "The scrollIntoView() method scrolls the element into view.", 
        "name": "element.scrollIntoView", 
        "params": [
            {
                "descr": "If true, the scrolled element is aligned with the top of the scroll area. ", 
                "name": "alignWithTop Optional"
            }
        ], 
        "path": "dom/element.scrollintoview", 
        "syntax": "element.scrollIntoView(alignWithTop);", 
        "type": "Element"
    }, 
    "element.scrollLeft": {
        "descr": "scrollLeft gets or sets the number of pixels that an element's content is scrolled to the left.", 
        "name": "element.scrollLeft", 
        "params": [], 
        "path": "dom/element.scrollleft", 
        "syntax": "// Get the number of pixels scrolledvar sLeft = element.scrollLeft; sLeft is an integer representing the number of pixels that element has been scrolled to the left. // Set the number of pixels scrolledelement.scrollLeft = 10; scrollLeft can be set to any integer value, however: If the element can't be scrolled (e.g. it has no overflow), scrollLeft", 
        "type": "Element"
    }, 
    "element.scrollTop": {
        "descr": "scrollTop gets or sets the number of pixels that the content of an element is scrolled upward.", 
        "name": "element.scrollTop", 
        "params": [], 
        "path": "dom/element.scrolltop", 
        "syntax": "// Get the number of pixels scrolledvar  intElemScrollTop = element.scrollTop; intElemScrollTop is an integer corresponding to number of pixels that element's content has been scrolled upward. // Set the number of pixels scrolledelement.scrollTop = intValue; scrollTop can be set to any integer value, however: If the element can't be scrolled (e.g. it has no overflow or if the element is non-scrollable), scrollTop is set to 0. If set to a value less than 0, scrollTop is set to 0. If set to a value greater than the maximum that the content can be scrolled, scrollTop is set to the maximum. Description An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content.", 
        "type": "Element"
    }, 
    "element.scrollWidth": {
        "descr": "This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().", 
        "name": "element.scrollWidth", 
        "params": [], 
        "path": "dom/element.scrollwidth", 
        "syntax": "var xScrollWidth = element.scrollWidth; xScrollWidth is the width of the content of element in pixels. Example <div id=\"aDiv\"     style=\"width: 100px; height: 200px; overflow: auto;\">-FooBar-FooBar-FooBar</div><br><input type=\"button\" value=\"Show scrollWidth\"       onclick=\"alert(document.getElementById('aDiv').scrollWidth);\n or \">);", 
        "type": "Element"
    }, 
    "element.setAttribute": {
        "descr": "Adds a new attribute or changes the value of an existing attribute on the specified element.", 
        "name": "element.setAttribute", 
        "params": [], 
        "path": "dom/element.setattribute", 
        "syntax": "element.setAttribute(name, value);", 
        "type": "Element"
    }, 
    "element.setAttributeNode": {
        "descr": "setAttributeNode() adds a new Attr node to the specified element.", 
        "name": "element.setAttributeNode", 
        "params": [], 
        "path": "dom/element.setattributenode", 
        "syntax": "var replacedAttr = element.setAttributeNode(attribute);", 
        "type": "Element"
    }, 
    "element.setCapture": {
        "descr": "Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called.", 
        "name": "element.setCapture", 
        "params": [
            {
                "descr": "If true, all events are targeted directly to this element; if false, events can also fire at descendants of this element.", 
                "name": "retargetToElement"
            }
        ], 
        "path": "dom/element.setcapture", 
        "syntax": "element.setCapture(retargetToElement);", 
        "type": "Element"
    }, 
    "element.supports": {
        "descr": "The supports method tests if this DOM implementation supports a particular feature.", 
        "name": "element.supports", 
        "params": [], 
        "path": "dom/element.supports", 
        "syntax": "if ( document.supports(\"package\", \"4.0\") ) {     // do something that only package 4.0 allows }", 
        "type": "Element"
    }, 
    "element.tagName": {
        "descr": "Returns the name of the element.", 
        "name": "element.tagName", 
        "params": [], 
        "path": "dom/element.tagname", 
        "syntax": "elementName = element.tagName elementName is a string containing the name of the current element. Notes In XML (and XML-based languages such as XHTML), tagName", 
        "type": "Element"
    }, 
    "empty": {
        "descr": "This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:", 
        "name": "empty", 
        "params": [], 
        "path": "jquery/empty", 
        "syntax": ".empty() Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "encodeURI": {
        "descr": "The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).", 
        "name": "encodeURI", 
        "params": [
            {
                "descr": "A complete Uniform Resource Identifier.", 
                "name": "URI"
            }
        ], 
        "path": "javascript/global_objects/encodeuri", 
        "syntax": "encodeURI(URI)", 
        "type": "Global Objects"
    }, 
    "encodeURIComponent": {
        "descr": "The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).", 
        "name": "encodeURIComponent", 
        "params": [
            {
                "descr": "String. A component of a URI.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/encodeuricomponent", 
        "syntax": "encodeURIComponent(str);", 
        "type": "Global Objects"
    }, 
    "end": {
        "descr": "Most of jQuery's DOM traversal methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use end() to pop the sets back off of the stack.", 
        "name": "end", 
        "params": [], 
        "path": "jquery/end", 
        "syntax": ".end() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "endsWith": {
        "descr": "Determines whether a string ends with the characters of another string, returning true or false as appropriate.", 
        "name": "String.endsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the end of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/endswith", 
        "syntax": "var endsWith = str.endsWith(searchString [, position])", 
        "type": "String"
    }, 
    "eq": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .eq() method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set.", 
        "name": "eq", 
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the 0-based position of the element.", 
                "name": "index"
            }, 
            {
                "descr": "Type: Integer  An integer indicating the position of the element, counting backwards from the last element in the set.", 
                "name": "-index"
            }
        ], 
        "path": "jquery/eq", 
        "syntax": ".eq( index ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "error": {
        "descr": "This method is a shortcut for .on( \"error\", handler ).", 
        "name": "error", 
        "params": [
            {
                "descr": "Type: Function() A function to execute when the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/error", 
        "syntax": ".error( handler(eventObject) ) Returns: jQueryversion deprecated: 1.8", 
        "type": "Events"
    }, 
    "eval": {
        "descr": "ObsoleteThis feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "Object.eval", 
        "params": [
            {
                "descr": "Any string representing a JavaScript expression, statement, or sequence of statements. ", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/object/eval", 
        "syntax": "obj.eval(string)", 
        "type": "Object"
    }, 
    "event.altKey": {
        "descr": "Indicates whether the ALT key was pressed when the event fired.", 
        "name": "event.altKey", 
        "params": [], 
        "path": "dom/event.altkey", 
        "syntax": "event.altKey Examples var bool = event.altKey; bool contains true or false, depending on whether the alt key was held down or not, when the event fired. <html><head><title>altKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key,with or without holding down the ALT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.bubbles": {
        "descr": "Indicates whether the given event bubbles up through the DOM or not.", 
        "name": "event.bubbles", 
        "params": [], 
        "path": "dom/event.bubbles", 
        "syntax": "event.bubbles Returns a Boolean value, which is true if the event bubbles up through the DOM. Example var bool = event.bubbles; bool contains true or false, depending on whether the event can bubble or not. Notes Only certain events can bubble. Events that do bubble have this property set to true. You can use this property to check if an event is allowed to bubble or not. Example  function goInput(e) {  // checks bubbles and  if (!e.bubbles) {     // passes event along if it's not     passItOn(e);\n or    }  // already bubbling  doOutput(e)});", 
        "type": "Event"
    }, 
    "event.button": {
        "descr": "Indicates which mouse button caused the event.", 
        "name": "event.button", 
        "params": [], 
        "path": "dom/event.button", 
        "syntax": "event.button Example var buttonCode = event.button; This property returns an integer value indicating the button that changed state. 0 for standard \"click;\" this is usually usually the left button. 1 for middle button; this is usually a click on the scroll wheel's button. 2 for right button; this is usually a right-click.  Note: This convention is not followed in Internet Explorer: See QuirksMode for details. The order of buttons may be different depending on how the pointing device has been configured. Example <script>var whichButton = function (e) {    // Handle different event models    var e = e || window.event;    var btnCode;    if ('object' === typeof e) {        btnCode = e.button;        switch (btnCode) {            case 0:                alert('Left button clicked.');\n or             break;            case 1:                alert('Middle button clicked.');\n or             break;            case 2:                alert('Right button clicked.');\n or             break;            default:                alert('Unexpected code: ' + btnCode);\n or         }    }}</script><button onmouseup=\"whichButton(event);\n or \" oncontextmenu=\"event.preventDefault();\n or \">Click with mouse...</button>);", 
        "type": "Event"
    }, 
    "event.cancelable": {
        "descr": "Indicates whether the event is cancelable or not.", 
        "name": "event.cancelable", 
        "params": [], 
        "path": "dom/event.cancelable", 
        "syntax": "bool = event.cancelable The result is a Boolean, which is true if the event can be canceled. Example var bool = event.cancelable; bool contains true or false, depending on whether the event can have its default action prevented. Notes Whether an event can be canceled or not is something that's determined when that event is initialized. To cancel an event, call the preventDefault()", 
        "type": "Event"
    }, 
    "event.clientX": {
        "descr": "Returns the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally.", 
        "name": "event.clientX", 
        "params": [], 
        "path": "dom/event.clientx", 
        "syntax": "x = event.clientX; Example <!DOCTYPE html> <html><head><title>clientX\\clientY example</title><script>function showCoords(evt){  alert(    \"clientX value: \" + evt.clientX + \"\\n\" +    \"clientY value: \" + evt.clientY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.clientY": {
        "descr": "Returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically.", 
        "name": "event.clientY", 
        "params": [], 
        "path": "dom/event.clienty", 
        "syntax": "var y = event.clientY; Example <html><head><title>clientX\\clientY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"clientX value: \" + evt.clientX + \"\\n\"    + \"clientY value: \" + evt.clientY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.createEvent": {
        "descr": "Creates a new event, which must then be initialized by calling its init() method.", 
        "name": "event.createEvent", 
        "params": [
            {
                "descr": "A string indicating the event type to create.", 
                "name": "type"
            }
        ], 
        "path": "dom/event.createevent", 
        "syntax": "document.createEvent(type)", 
        "type": "Event"
    }, 
    "event.ctrlKey": {
        "descr": "Indicates whether the CTRL key was pressed when the event fired.", 
        "name": "event.ctrlKey", 
        "params": [], 
        "path": "dom/event.ctrlkey", 
        "syntax": "var bool = event.ctrlKey; bool contains true or false, depending on whether the ctrl key was held down or not, when the event fired. Example <html><head><title>ctrlKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"CTRL key pressed: \" + e.ctrlKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the CTRL key.<br />You can also use the SHIFT key together with the CTRL key.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.currentTarget": {
        "descr": "This property will typically be equal to the this of the function.", 
        "name": "event.currentTarget", 
        "params": [], 
        "path": "jquery/event.currenttarget", 
        "syntax": "event.currentTargetReturns: Element   Description:  The current DOM element within the event bubbling phase.   version added: 1.3event.currentTarget This property will typically be equal to the this of the function.  If you are using jQuery.proxy or another form of scope manipulation, this will be equal to whatever context you have provided, not event.currentTarget   Example: Alert that currentTarget matches the `this` keyword. $( \"p\" ).click(function( event ) {  alert( event.currentTarget === this );\n or  // true});", 
        "type": "Events"
    }, 
    "event.data": {
        "descr": "", 
        "name": "event.data", 
        "params": [], 
        "path": "jquery/event.data", 
        "syntax": "event.dataReturns: Object   Description: An optional object of data passed to an event method when the current executing handler is bound.   version added: 1.1event.dataExample: Within a for loop, pass the value of i to the .on()", 
        "type": "Events"
    }, 
    "event.defaultPrevented": {
        "descr": "Returns a boolean indicating whether or not event.preventDefault() was called on the event.", 
        "name": "event.defaultPrevented", 
        "params": [], 
        "path": "dom/event.defaultprevented", 
        "syntax": "bool = event.defaultPrevented  Example  if (e.defaultPrevented) {   /* the default was prevented */ }", 
        "type": "Event"
    }, 
    "event.delegateTarget": {
        "descr": "This property is most often useful in delegated events attached by .delegate() or .on(), where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.", 
        "name": "event.delegateTarget", 
        "params": [], 
        "path": "jquery/event.delegatetarget", 
        "syntax": "event.delegateTargetReturns: Element   Description: The element where the currently-called jQuery event handler was attached.  version added: 1.7event.delegateTarget This property is most often useful in delegated events attached by .delegate()", 
        "type": "Events"
    }, 
    "event.detail": {
        "descr": "Returns additional numerical information about the event, depending on the type of event. See the Notes section for details.", 
        "name": "event.detail", 
        "params": [], 
        "path": "dom/event.detail", 
        "syntax": "event.detail Examples var number = event.detail; <html><head>  <title>event.detail example</title>  <script type=\"text/javascript\">  function giveDetails(e) {      var text = document.getElementById(\"t\");\n or       text.value = e.detail;  }  function init() {      var b1 = document.getElementById(\"b\");\n or       b1.onclick = giveDetails;     }  </script></head><body onload=\"init();\n or \"><form> <input id=\"b\" type=\"button\" value=\"details\"> <input id=\"t\" type=\"text\" value=\"\"><br> <input type=\"reset\"></form></body></html>);", 
        "type": "Event"
    }, 
    "event.initEvent": {
        "descr": "The initEvent method is deprecated. Use event constructors instead.", 
        "name": "event.initEvent", 
        "params": [
            {
                "descr": "The type of event.", 
                "name": "type"
            }, 
            {
                "descr": "A boolean indicating whether the event should bubble up through the event chain or not (see bubbles).", 
                "name": "bubbles"
            }, 
            {
                "descr": "A boolean indicating whether the event can be canceled (see cancelable).", 
                "name": "cancelable;"
            }
        ], 
        "path": "dom/event.initevent", 
        "syntax": "event.initEvent(type, bubbles, cancelable);", 
        "type": "Event"
    }, 
    "event.initKeyEvent": {
        "descr": "The initKeyEvent method is used to initialize the value of an event created using document.createEvent(\"KeyboardEvent\").", 
        "name": "event.initKeyEvent", 
        "params": [
            {
                "descr": "The type of event.", 
                "name": "type"
            }, 
            {
                "descr": "A boolean indicating whether the event should bubble up through the event chain or not (see bubbles).", 
                "name": "bubbles"
            }, 
            {
                "descr": "A boolean indicating whether the event can be canceled (see cancelable).", 
                "name": "cancelable"
            }, 
            {
                "descr": "Specifies UIEvent.view. This value may be null.", 
                "name": "viewArg"
            }, 
            {
                "descr": "bool True if the Virtual Key to be generated is a combination of the Ctrl key and other keys", 
                "name": "ctrlKeyArg"
            }, 
            {
                "descr": "bool True if the Virtual Key to be generated is a combination of the Alt key and other keys", 
                "name": "altKeyArg"
            }, 
            {
                "descr": "bool True if the Virtual Key to be generated is a combination of the Shift key and other keys", 
                "name": "shiftKeyArg"
            }, 
            {
                "descr": "bool True if the Virtual Key to be generated is a combination of the Meta key and other keys", 
                "name": "metaKeyArg"
            }, 
            {
                "descr": "unsigned long the virtual key code value of the key which was depressed, otherwise zero", 
                "name": "keyCodeArg"
            }, 
            {
                "descr": "unsigned long the Unicode character associated with the depressed key otherwise zero", 
                "name": "charCodeArg"
            }
        ], 
        "path": "dom/event.initkeyevent", 
        "syntax": "event.initKeyEvent (type, bubbles, cancelable, viewArg,                         ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg,                         keyCodeArg, charCodeArg)", 
        "type": "Event"
    }, 
    "event.initMouseEvent": {
        "descr": "Intializes the value of a mouse event once it's been created (normally using document.createEvent method).", 
        "name": "event.initMouseEvent", 
        "params": [
            {
                "descr": "the string to set the event's type to. ", 
                "name": "type"
            }, 
            {
                "descr": "whether or not the event can bubble. ", 
                "name": "canBubble"
            }, 
            {
                "descr": "whether or not the event's default action can be prevented. ", 
                "name": "cancelable"
            }, 
            {
                "descr": "the Event's AbstractView. You should pass the window object here. ", 
                "name": "view"
            }, 
            {
                "descr": "the Event's mouse click count. Sets the value of event.detail.", 
                "name": "detail"
            }, 
            {
                "descr": "the Event's screen x coordinate. ", 
                "name": "screenX"
            }, 
            {
                "descr": "the Event's screen y coordinate. ", 
                "name": "screenY"
            }, 
            {
                "descr": "the Event's client x coordinate. ", 
                "name": "clientX"
            }, 
            {
                "descr": "the Event's client y coordinate. ", 
                "name": "clientY"
            }, 
            {
                "descr": "whether or not control key was depressed during the Event. ", 
                "name": "ctrlKey"
            }, 
            {
                "descr": "whether or not alt key was depressed during the Event. ", 
                "name": "altKey"
            }, 
            {
                "descr": "whether or not shift key was depressed during the Event. ", 
                "name": "shiftKey"
            }, 
            {
                "descr": "whether or not meta key was depressed during the Event. ", 
                "name": "metaKey"
            }, 
            {
                "descr": "the Event's mouse event.button.", 
                "name": "button"
            }, 
            {
                "descr": "the Event's related EventTarget. ", 
                "name": "relatedTarget"
            }
        ], 
        "path": "dom/event.initmouseevent", 
        "syntax": "event.initMouseEvent(type, canBubble, cancelable, view,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 detail, screenX, screenY, clientX, clientY,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ctrlKey, altKey, shiftKey, metaKey,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 button, relatedTarget);", 
        "type": "Event"
    }, 
    "event.initUIEvent": {
        "descr": "Initializes a UI event once it's been created.", 
        "name": "event.initUIEvent", 
        "params": [
            {
                "descr": "The type of event.", 
                "name": "type"
            }, 
            {
                "descr": "A boolean indicating whether the event should bubble up through the event chain or not (see bubbles).", 
                "name": "canBubble"
            }, 
            {
                "descr": "A boolean indicating whether the event can be canceled (see cancelable).", 
                "name": "cancelable"
            }, 
            {
                "descr": "The AbstractView associated with the event.", 
                "name": "view"
            }, 
            {
                "descr": "A number specifying some detail information about the event, depending on the type of event. ", 
                "name": "detail"
            }
        ], 
        "path": "dom/event.inituievent", 
        "syntax": "event.initUIEvent(type, canBubble, cancelable, view, detail)", 
        "type": "Event"
    }, 
    "event.isChar": {
        "descr": "Returns a boolean indicating whether the event produced a key character or not.", 
        "name": "event.isChar", 
        "params": [], 
        "path": "dom/event.ischar", 
        "syntax": "bool = event.isChar; Example if (e.isChar) {   echoInput(e.type);\n or });", 
        "type": "Event"
    }, 
    "event.isDefaultPrevented": {
        "descr": "", 
        "name": "event.isDefaultPrevented", 
        "params": [], 
        "path": "jquery/event.isdefaultprevented", 
        "syntax": "event.isDefaultPrevented() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.isImmediatePropagationStopped": {
        "descr": "This property was introduced in DOM level 3.", 
        "name": "event.isImmediatePropagationStopped", 
        "params": [], 
        "path": "jquery/event.isimmediatepropagationstopped", 
        "syntax": "event.isImmediatePropagationStopped() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.isPropagationStopped": {
        "descr": "This event method is described in the W3C DOM Level 3 specification.", 
        "name": "event.isPropagationStopped", 
        "params": [], 
        "path": "jquery/event.ispropagationstopped", 
        "syntax": "event.isPropagationStopped() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.keyCode": {
        "descr": "Returns the Unicode value of a non-character key in a keypress event or any key in any other type of keyboard event.", 
        "name": "event.keyCode", 
        "params": [], 
        "path": "dom/event.keycode", 
        "syntax": "event.keyCode Examples var value = event.keyCode; value is the Unicode value of the key that was pressed. <!DOCTYPE html><html lang=\"en\"><head><title>keyCode example</title><script type=\"text/javascript\">function showKeyCode(e) {\talert( \"keyCode for the key pressed: \" + e.keyCode + \"\\n\" );\n or }</script></head><body onkeydown=\"showKeyCode(event);\n or \"><p>Press any key.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.layerX": {
        "descr": "Returns the horizontal coordinate of the event relative to the current layer.", 
        "name": "event.layerX", 
        "params": [], 
        "path": "dom/event.layerx", 
        "syntax": "event.layerX Examples var Xpos = event.layerX; Xpos is an integer value in pixels for the X coordinate of the mouse pointer, when the mouse event fired. <html><head><title>pageX\\pageY & layerX\\layerY example</title><script type=\"text/javascript\">function showCoords(evt){  var form = document.forms.form_coords;  var parent_id = evt.target.parentNode.id;  form.parentId.value = parent_id;  form.pageXCoords.value = evt.pageX;  form.pageYCoords.value = evt.pageY;  form.layerXCoords.value = evt.layerX;  form.layerYCoords.value = evt.layerY;}</script><style type=\"text/css\"> #d1 {  border: solid blue 1px;  padding: 20px; } #d2 {  position: absolute;  top: 180px;  left: 80%;  right:auto;  width: 40%;  border: solid blue 1px;  padding: 20px; } #d3 {  position: absolute;  top: 240px;  left: 20%;  width: 50%;  border: solid blue 1px;  padding: 10px; }</style></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates please click anywhere on the page.</p><div id=\"d1\"><span>This is an un-positioned div so clicking it will returnlayerX/layerY values almost the same as pageX/PageY values.</span></div><div id=\"d2\"><span>This is a positioned div so clicking it will return layerX/layerYvalues that are relative to the top-left corner of this positionedelement. Note the pageX\\pageY properties still return theabsolute position in the document, including page scrolling.</span><span>Make the page scroll more! This is a positioned div so clicking itwill return layerX/layerY values that are relative to the top-leftcorner of this positioned element. Note the pageX\\pageY properties stillreturn the absolute position in the document, including pagescrolling.</span></div><div id=\"d3\"><form name=\"form_coords\" id=\"form1\"> Parent Element id: <input type=\"text\" name=\"parentId\" size=\"7\" /><br /> pageX:<input type=\"text\" name=\"pageXCoords\" size=\"7\" />\u00a0\u00a0 pageY:<input type=\"text\" name=\"pageYCoords\" size=\"7\" /><br /> layerX:<input type=\"text\" name=\"layerXCoords\" size=\"7\" />\u00a0\u00a0 layerY:<input type=\"text\" name=\"layerYCoords\" size=\"7\" /></form></div></body></html>", 
        "type": "Event"
    }, 
    "event.layerY": {
        "descr": "Returns the vertical coordinate of the event relative to the current layer.", 
        "name": "event.layerY", 
        "params": [], 
        "path": "dom/event.layery", 
        "syntax": "var Ypos = event.layerY; Ypos is an integer value in pixels for the Y coordinate of the mouse pointer, when the mouse event fired. Example <html><head><title>pageX\\pageY & layerX\\layerY example</title><script type=\"text/javascript\">function showCoords(evt){  var form = document.forms.form_coords;  var parent_id = evt.target.parentNode.id;  form.parentId.value = parent_id;  form.pageXCoords.value = evt.pageX;  form.pageYCoords.value = evt.pageY;  form.layerXCoords.value = evt.layerX;  form.layerYCoords.value = evt.layerY;}</script><style type=\"text/css\"> #d1 {  border: solid blue 1px;  padding: 20px; } #d2 {  position: absolute;  top: 180px;  left: 80%;  right:auto;  width: 40%;  border: solid blue 1px;  padding: 20px; } #d3 {  position: absolute;  top: 240px;  left: 20%;  width: 50%;  border: solid blue 1px;  padding: 10px; }</style></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates please click anywhere on the page.</p><div id=\"d1\"><span>This is an un-positioned div so clicking it will returnlayerX/layerY values almost the same as pageX/PageY values.</span></div><div id=\"d2\"><span>This is a positioned div so clicking it will return layerX/layerYvalues that are relative to the top-left corner of this positionedelement. Note the pageX\\pageY properties still return theabsolute position in the document, including page scrolling.</span><span>Make the page scroll more! This is a positioned div so clicking itwill return layerX/layerY values that are relative to the top-leftcorner of this positioned element. Note the pageX\\pageY properties stillreturn the absolute position in the document, including pagescrolling.</span></div><div id=\"d3\"><form name=\"form_coords\" id=\"form1\"> Parent Element id: <input type=\"text\" name=\"parentId\" size=\"7\" /><br /> pageX:<input type=\"text\" name=\"pageXCoords\" size=\"7\" />\u00a0\u00a0 pageY:<input type=\"text\" name=\"pageYCoords\" size=\"7\" /><br /> layerX:<input type=\"text\" name=\"layerXCoords\" size=\"7\" />\u00a0\u00a0 layerY:<input type=\"text\" name=\"layerYCoords\" size=\"7\" /></form></div></body></html>", 
        "type": "Event"
    }, 
    "event.metaKey": {
        "descr": "Indicates whether the \"meta\" key was pressed when the event fired.", 
        "name": "event.metaKey", 
        "params": [], 
        "path": "dom/event.metakey", 
        "syntax": "var bool = event.metaKey; bool contains true or false, depending on whether the meta key was held down or not, when the event fired. Example  function goInput(e) { // checks metaKey and   if (e.metaKey) {        // passes event along     superSizeOutput(e);\n or    } else {     doOutput(e);\n or    } });", 
        "type": "Event"
    }, 
    "event.namespace": {
        "descr": "This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.", 
        "name": "event.namespace", 
        "params": [], 
        "path": "jquery/event.namespace", 
        "syntax": "event.namespaceReturns: String   Description: The namespace specified when the event was triggered.  version added: 1.4.3event.namespace This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.  Example: Determine the event namespace used. <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>event.namespace demo</title>  <script src=\"//code.jquery.com/jquery-1.10.2.js\"></script></head><body> <button>display event.namespace</button><p></p> <script>$( \"p\" ).on( \"test.something\", function( event ) {  alert( event.namespace );\n or });\n or $( \"button\" ).click(function( event ) {  $( \"p\" ).trigger( \"test.something\" );\n or });\n or </script> </body></html>);", 
        "type": "Events"
    }, 
    "event.pageX": {
        "descr": "Returns the horizontal coordinate of the event relative to whole document.", 
        "name": "event.pageX", 
        "params": [], 
        "path": "dom/event.pagex", 
        "syntax": "event.pageX Examples var pageX = event.pageX; pageX is an integer value in pixels for the X coordinate of the mouse pointer, relative to the whole document, when the mouse event fired. This property takes into account any horizontal scrolling of the page. <html><head><title>pageX\\pageY & layerX\\layerY example</title><script type=\"text/javascript\">function showCoords(evt){  var form = document.forms.form_coords;  var parent_id = evt.target.parentNode.id;  form.parentId.value = parent_id;  form.pageXCoords.value = evt.pageX;  form.pageYCoords.value = evt.pageY;  form.layerXCoords.value = evt.layerX;  form.layerYCoords.value = evt.layerY;}</script><style type=\"text/css\"> #d1 {  border: solid blue 1px;  padding: 20px; } #d2 {  position: absolute;  top: 180px;  left: 80%;  right:auto;  width: 40%;  border: solid blue 1px;  padding: 20px; } #d3 {  position: absolute;  top: 240px;  left: 20%;  width: 50%;  border: solid blue 1px;  padding: 10px; }</style></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates please click anywhere on the page.</p><div id=\"d1\"><span>This is an un-positioned div so clicking it will returnlayerX/layerY values almost the same as pageX/PageY values.</span></div><div id=\"d2\"><span>This is a positioned div so clicking it will return layerX/layerYvalues that are relative to the top-left corner of this positionedelement. Note the pageX\\pageY properties still return theabsolute position in the document, including page scrolling.</span><span>Make the page scroll more! This is a positioned div so clicking itwill return layerX/layerY values that are relative to the top-leftcorner of this positioned element. Note the pageX\\pageY properties stillreturn the absolute position in the document, including pagescrolling.</span></div><div id=\"d3\"><form name=\"form_coords\"> Parent Element id: <input type=\"text\" name=\"parentId\" size=\"7\" /><br /> pageX:<input type=\"text\" name=\"pageXCoords\" size=\"7\" /> pageY:<input type=\"text\" name=\"pageYCoords\" size=\"7\" /><br /> layerX:<input type=\"text\" name=\"layerXCoords\" size=\"7\" /> layerY:<input type=\"text\" name=\"layerYCoords\" size=\"7\" /></form></div></body></html>", 
        "type": "Event"
    }, 
    "event.pageY": {
        "descr": "Returns the vertical coordinate of the event relative to the whole document.", 
        "name": "event.pageY", 
        "params": [], 
        "path": "dom/event.pagey", 
        "syntax": "var pageY = event.pageY; pageY is an integer value in pixels for the Y coordinate of the mouse pointer, relative to the whole document, when the mouse event fired. This property takes into account any vertical scrolling of the page. Example <html><head><title>pageX\\pageY & layerX\\layerY example</title><script type=\"text/javascript\">function showCoords(evt){  var form = document.forms.form_coords;  var parent_id = evt.target.parentNode.id;  form.parentId.value = parent_id;  form.pageXCoords.value = evt.pageX;  form.pageYCoords.value = evt.pageY;  form.layerXCoords.value = evt.layerX;  form.layerYCoords.value = evt.layerY;}</script><style type=\"text/css\"> #d1 {  border: solid blue 1px;  padding: 20px; } #d2 {  position: absolute;  top: 180px;  left: 80%;  right:auto;  width: 40%;  border: solid blue 1px;  padding: 20px; } #d3 {  position: absolute;  top: 240px;  left: 20%;  width: 50%;  border: solid blue 1px;  padding: 10px; }</style></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates please click anywhere on the page.</p><div id=\"d1\"><span>This is an un-positioned div so clicking it will returnlayerX/layerY values almost the same as pageX/PageY values.</span></div><div id=\"d2\"><span>This is a positioned div so clicking it will return layerX/layerYvalues that are relative to the top-left corner of this positionedelement. Note the pageX\\pageY properties still return theabsolute position in the document, including page scrolling.</span><span>Make the page scroll more! This is a positioned div so clicking itwill return layerX/layerY values that are relative to the top-leftcorner of this positioned element. Note the pageX\\pageY properties stillreturn the absolute position in the document, including pagescrolling.</span></div><div id=\"d3\"><form name=\"form_coords\"> Parent Element id: <input type=\"text\" name=\"parentId\" size=\"7\" /><br /> pageX:<input type=\"text\" name=\"pageXCoords\" size=\"7\" />\u00a0\u00a0 pageY:<input type=\"text\" name=\"pageYCoords\" size=\"7\" /><br /> layerX:<input type=\"text\" name=\"layerXCoords\" size=\"7\" />\u00a0\u00a0 layerY:<input type=\"text\" name=\"layerYCoords\" size=\"7\" /></form></div></body></html>", 
        "type": "Event"
    }, 
    "event.preventDefault": {
        "descr": "Cancels the event if it is cancelable, without stopping further propagation of the event.", 
        "name": "event.preventDefault", 
        "params": [], 
        "path": "dom/event.preventdefault", 
        "syntax": "event.preventDefault();", 
        "type": "Event"
    }, 
    "event.relatedTarget": {
        "descr": "For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.", 
        "name": "event.relatedTarget", 
        "params": [], 
        "path": "jquery/event.relatedtarget", 
        "syntax": "event.relatedTargetReturns: Element   Description: The other DOM element involved in the event, if any.  version added: 1.1.4event.relatedTarget For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.   Example: On mouseout of anchors, alert the element type being entered. $( \"a\" ).mouseout(function( event ) {  alert( event.relatedTarget.nodeName );\n or  // \"DIV\"});", 
        "type": "Events"
    }, 
    "event.result": {
        "descr": "This property can be useful for getting previous return values of custom events.", 
        "name": "event.result", 
        "params": [], 
        "path": "jquery/event.result", 
        "syntax": "event.resultReturns: Object   Description: The last value returned by an event handler that was triggered by this event, unless the value was undefined.  version added: 1.3event.result This property can be useful for getting previous return values of custom events.   Example: Display previous handler's return value <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>event.result demo</title>  <script src=\"//code.jquery.com/jquery-1.10.2.js\"></script></head><body> <button>display event.result</button><p></p> <script>$( \"button\" ).click(function( event ) {  return \"hey\";});\n or $( \"button\" ).click(function( event ) {  $( \"p\" ).html( event.result );\n or });\n or </script> </body></html>);", 
        "type": "Events"
    }, 
    "event.screenX": {
        "descr": "Returns the horizontal coordinate of the event within the screen as a whole.", 
        "name": "event.screenX", 
        "params": [], 
        "path": "dom/event.screenx", 
        "syntax": "var pixelNumber = event.screenX;  pixelNumber is the offset from the left side of the screen in pixels. Example <html><head><title>screenX\\screenY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"screenX value: \" + evt.screenX + \"\\n\"    + \"screenY value: \" + evt.screenY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.screenY": {
        "descr": "Returns the vertical coordinate of the event within the screen as a whole.", 
        "name": "event.screenY", 
        "params": [], 
        "path": "dom/event.screeny", 
        "syntax": "var pixelNumber = event.screenY;  pixelNumber is the offset from the top of the screen in pixels. Example <html><head><title>screenX\\screenY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"screenX value: \" + evt.screenX + \"\\n\"    + \"screenY value: \" + evt.screenY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.shiftKey": {
        "descr": "hift", 
        "name": "event.shiftKey", 
        "params": [], 
        "path": "dom/event.shiftkey", 
        "syntax": "var bool = event.shiftKey; bool contains true or false, depending on whether the shift key was held down or not, when the event fired. Example <html><head><title>shiftKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"SHIFT key pressed: \" + e.shiftKey + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the SHIFT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Event"
    }, 
    "event.stopImmediatePropagation": {
        "descr": "Prevents other listeners of the same event to be called.", 
        "name": "event.stopImmediatePropagation", 
        "params": [], 
        "path": "dom/event.stopimmediatepropagation", 
        "syntax": "event.stopImmediatePropagation();", 
        "type": "Event"
    }, 
    "event.stopPropagation": {
        "descr": "Prevents further propagation of the current event.", 
        "name": "event.stopPropagation", 
        "params": [], 
        "path": "dom/event.stoppropagation", 
        "syntax": "event.stopPropagation();", 
        "type": "Event"
    }, 
    "event.target": {
        "descr": "This property of event objects is the object the event was dispatched on. It is different than event.currentTarget when the event handler is called in bubbling or capturing phase of the event.", 
        "name": "event.target", 
        "params": [], 
        "path": "dom/event.target", 
        "syntax": "event.target Example The event.target property can be used in order to implement event delegation. // Assuming there is a 'list' variable containing an instance of an HTML ul element.function hide(e){  // Unless list items are separated by a margin, e.target should be different than e.currentTarget  e.target.style.visibility = 'hidden';}list.addEventListener('click', hide, false);\n or // If some element (<li> element or a link within an <li> element for instance) is clicked, it will disappear.// It only requires a single listener to do that);", 
        "type": "Event"
    }, 
    "event.timeStamp": {
        "descr": "Returns the time (in milliseconds since the epoch) at which the event was created.", 
        "name": "event.timeStamp", 
        "params": [], 
        "path": "dom/event.timestamp", 
        "syntax": "event.timeStamp Examples var number = event.timeStamp; The following is a more complete example: <html><head><title>timeStamp example</title><script type=\"text/javascript\">function getTime(event) {  document.getElementById(\"time\").firstChild.nodeValue = event.timeStamp;}</script></head><body onkeypress=\"getTime(event)\"><p>Press any key to get the current timestampfor the onkeypress event.</p><p>timeStamp: <span id=\"time\">-</span></p></body></html>", 
        "type": "Event"
    }, 
    "event.type": {
        "descr": "Returns a string containing the type of event.", 
        "name": "event.type", 
        "params": [], 
        "path": "dom/event.type", 
        "syntax": "event.type Examples var string = event.type; <!DOCTYPE html><html lang=\"en\"><head><title>type example</title><script>var currEvent = null;function getEvtType(evt) {  currEvent = evt.type;  document.getElementById(\"Etype\").firstChild.nodeValue = currEvent;}</script></head><body  onkeydown=\"getEvtType(event)\"  onkeyup=\"getEvtType(event)\"  onmousedown=\"getEvtType(event)\"  onmouseup=\"getEvtType(event)\"><p>Press any key or click the mouse to get the event type.</p><p>Event type: <span id=\"Etype\">-</span></p></body></html>", 
        "type": "Event"
    }, 
    "event.which": {
        "descr": "Returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed.", 
        "name": "event.which", 
        "params": [], 
        "path": "dom/event.which", 
        "syntax": "var keyResult = event.which; keyResult contains the numeric code for a particular key pressed, depending on whether an alphanumeric or non-alphanumeric key was pressed. Please see charCode and keyCode for more details. Example <html><head><title>charCode/keyCode/which example</title><script type=\"text/javascript\">function showKeyPress(evt){alert(\"onkeypress handler: \\n\"      + \"keyCode property: \" + evt.keyCode + \"\\n\"      + \"which property: \" + evt.which + \"\\n\"      + \"charCode property: \" + evt.charCode + \"\\n\"      + \"Character Key Pressed: \"      + String.fromCharCode(evt.charCode) + \"\\n\"     );\n or }function keyDown(evt){alert(\"onkeydown handler: \\n\"      + \"keyCode property: \" + evt.keyCode + \"\\n\"      + \"which property: \" + evt.which + \"\\n\"     );\n or }</script></head><body onkeypress=\"showKeyPress(event);\n or \" onkeydown=\"keyDown(event);\n or \"><p>Please press any key.</p></body></html>);", 
        "type": "Event"
    }, 
    "every": {
        "descr": "Tests whether all elements in the array pass the test implemented by the provided function.", 
        "name": "Array.every", 
        "params": [
            {
                "descr": "Function to test for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/every", 
        "syntax": "array.every(callback[, thisObject])", 
        "type": "Array"
    }, 
    "exec": {
        "descr": "The exec() method executes a search for a match in a specified string. Returns a result array, or null.", 
        "name": "RegExp.exec", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/exec", 
        "syntax": "regexObj.exec(str)", 
        "type": "RegExp"
    }, 
    "export": {
        "descr": "Allows a signed script to provide properties, functions, and objects to other signed or unsigned scripts. This feature is not in ECMA-262, Edition 3.", 
        "name": "export", 
        "params": [
            {
                "descr": "Property, function, or object to be exported.", 
                "name": "nameN"
            }
        ], 
        "path": "javascript/statements/export", 
        "syntax": "export name1, name2, ..., nameN;  export *;  Parameters nameN Property, function, or object to be exported. Description Typically, information in a signed script is available only to scripts signed by the same principals. By exporting properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the companion import statement to access the information.", 
        "type": "Statements"
    }, 
    "fadeIn": {
        "descr": "The .fadeIn() method animates the opacity of the matched elements. It is similar to the .fadeTo() method but that method does not unhide the element and can specify the final opacity level.", 
        "name": "fadeIn", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadein", 
        "syntax": ".fadeIn( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeOut": {
        "descr": "The .fadeOut() method animates the opacity of the matched elements. Once the opacity reaches 0, the display style property is set to none, so the element no longer affects the layout of the page.", 
        "name": "fadeOut", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadeout", 
        "syntax": ".fadeOut( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeTo": {
        "descr": "The .fadeTo() method animates the opacity of the matched elements. It is similar to the .fadeIn() method but that method unhides the element and always fades to 100% opacity.", 
        "name": "fadeTo", 
        "params": [
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.", 
                "name": "opacity"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.", 
                "name": "opacity"
            }, 
            {
                "descr": "Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadeto", 
        "syntax": ".fadeTo( duration, opacity [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeToggle": {
        "descr": "The .fadeToggle() method animates the opacity of the matched elements. When called on a visible element, the element's display style property is set to none once the opacity reaches 0, so the element no longer affects the layout of the page.", 
        "name": "fadeToggle", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }
        ], 
        "path": "jquery/fadetoggle", 
        "syntax": ".fadeToggle( [duration ] [, easing ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "filter": {
        "descr": "Creates a new array with all elements that pass the test implemented by the provided function.", 
        "name": "Array.filter", 
        "params": [
            {
                "descr": "Function to test each element of the array.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/filter", 
        "syntax": "array.filter(callback[, thisObject])", 
        "type": "Array"
    }, 
    "find": {
        "descr": "Finds a string in a window.", 
        "name": "window.find", 
        "params": [
            {
                "descr": "The text string for which to search.", 
                "name": "aString"
            }, 
            {
                "descr": "Boolean value. If true, specifies a case-sensitive search.", 
                "name": "aCaseSensitive"
            }, 
            {
                "descr": "Boolean. If true, specifies a backward search.", 
                "name": "aBackwards"
            }, 
            {
                "descr": "Boolean. If true, specifies a wrap around search.", 
                "name": "aWrapAround"
            }, 
            {
                "descr": "Boolean. If true, specifies a whole word search. ", 
                "name": "aWholeWord Unimplemented"
            }, 
            {
                "descr": "Boolean. If true, specifies a search in frames.", 
                "name": "aSearchInFrames"
            }, 
            {
                "descr": "Boolean. If true, specifies a show Dialog.", 
                "name": "aShowDialog"
            }
        ], 
        "path": "dom/window.find", 
        "syntax": "window.find(aString, aCaseSensitive, aBackwards, aWrapAround,            aWholeWord, aSearchInFrames, aShowDialog);", 
        "type": "window"
    }, 
    "finish": {
        "descr": "When .finish() is called on an element, the currently-running animation and all queued animations (if any) immediately stop and their CSS properties set to their target values. All queued animations are removed.", 
        "name": "finish", 
        "params": [
            {
                "descr": "Type: String  The name of the queue in which to stop animations.", 
                "name": "queue"
            }
        ], 
        "path": "jquery/finish", 
        "syntax": ".finish( [queue ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "first": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .first() method constructs a new jQuery object from the first element in that set.", 
        "name": "first", 
        "params": [], 
        "path": "jquery/first", 
        "syntax": ".first() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "focus": {
        "descr": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.", 
        "name": "window.focus", 
        "params": [], 
        "path": "dom/window.focus", 
        "syntax": "window.focus()", 
        "type": "window"
    }, 
    "focusin": {
        "descr": "This method is a shortcut for .on('focusin', handler).", 
        "name": "focusin", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/focusin", 
        "syntax": ".focusin( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "focusout": {
        "descr": "This method is a shortcut for .on( \"focusout\", handler ) when passed arguments, and .trigger( \"focusout\" ) when no arguments are passed.", 
        "name": "focusout", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/focusout", 
        "syntax": ".focusout( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "fontcolor": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.fontcolor", 
        "params": [
            {
                "descr": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. ", 
                "name": "color"
            }
        ], 
        "path": "javascript/global_objects/string/fontcolor", 
        "syntax": "fontcolor(color)", 
        "type": "String"
    }, 
    "for": {
        "descr": "Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.", 
        "name": "for", 
        "params": [
            {
                "descr": "An expression (including assignment expressions) or variable declaration. ", 
                "name": "initialization"
            }, 
            {
                "descr": "An expression to be evaluated before each loop iteration. ", 
                "name": "condition"
            }, 
            {
                "descr": "An expression to be evaluated at the end of each loop iteration. ", 
                "name": "final-expression"
            }, 
            {
                "descr": "A statement that is executed as long as the condition evaluates to true. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/for", 
        "syntax": "for ([initialization]; [condition]; [final-expression])   statement", 
        "type": "Statements"
    }, 
    "for each...in": {
        "descr": "DeprecatedThis feature has been removed from the Web. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time.", 
        "name": "for each...in", 
        "params": [
            {
                "descr": "Variable to iterate over property values, optionally declared with the var keyword. ", 
                "name": "variable"
            }, 
            {
                "descr": "Object for which the properties are iterated.", 
                "name": "object"
            }, 
            {
                "descr": "A statement to execute for each property. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/for_each...in", 
        "syntax": "for each (variable in object) {  statement}", 
        "type": "Statements"
    }, 
    "for...in": {
        "descr": "Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.", 
        "name": "for...in", 
        "params": [
            {
                "descr": "A different property name is assigned to variable on each iteration.", 
                "name": "variable"
            }, 
            {
                "descr": "Object whose enumerable properties are iterated.", 
                "name": "object"
            }
        ], 
        "path": "javascript/statements/for...in", 
        "syntax": "for (variable in object) {  ...}", 
        "type": "Statements"
    }, 
    "for...of": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "for...of", 
        "params": [
            {
                "descr": "On each iteration a value of a different property is assigned to variable.", 
                "name": "variable"
            }, 
            {
                "descr": "Object whose enumerable properties are iterated.", 
                "name": "object"
            }
        ], 
        "path": "javascript/statements/for...of", 
        "syntax": "for (variable of object)  statement", 
        "type": "Statements"
    }, 
    "forEach": {
        "descr": "Executes a provided function once per array element.", 
        "name": "Array.forEach", 
        "params": [
            {
                "descr": "Function to execute for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/foreach", 
        "syntax": "array.forEach(callback[, thisArg])", 
        "type": "Array"
    }, 
    "forward": {
        "descr": "Moves the window one document forward in the history.", 
        "name": "window.forward", 
        "params": [], 
        "path": "dom/window.forward", 
        "syntax": "window.forward()", 
        "type": "window"
    }, 
    "frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.", 
        "name": "window.frameElement", 
        "params": [], 
        "path": "dom/window.frameelement", 
        "syntax": "frameEl = window.frameElement; frameEl is the element which the window is embedded into, or null if the window is top-level. Example var frameEl = window.frameElement;// If we are inside a frame, then change its URL to 'http://mozilla.org/'if (frameEl) {  frameEl.src = 'http://mozilla.org/';}", 
        "type": "window"
    }, 
    "frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.", 
        "name": "window.frames", 
        "params": [], 
        "path": "dom/window.frames", 
        "syntax": "frameList = window.frames; frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation. frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[ 0 ]", 
        "type": "window"
    }, 
    "freeze": {
        "descr": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.", 
        "name": "Object.freeze", 
        "params": [
            {
                "descr": "The object to freeze.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/freeze", 
        "syntax": "Object.freeze(obj)", 
        "type": "Object"
    }, 
    "fromCharCode": {
        "descr": "Returns a string created by using the specified sequence of Unicode values.", 
        "name": "String.fromCharCode", 
        "params": [
            {
                "descr": "A sequence of numbers that are Unicode values.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcharcode", 
        "syntax": "String.fromCharCode(num1, ..., numN)", 
        "type": "String"
    }, 
    "fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.", 
        "name": "window.fullScreen", 
        "params": [
            {
                "descr": "A boolean. Possible Values:", 
                "name": "isInFullScreen"
            }
        ], 
        "path": "dom/window.fullscreen", 
        "syntax": "isInFullScreen = windowRef.fullScreen; With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen  A boolean. Possible Values: true: The window is in full screen mode. false: The window is not in full screen mode. Examples  Specification DOM Level 0. window.fullScreen is not part of any W3C specification or technical recommendation. Notes This property is only reliable in Mozilla 1.9 (Firefox 3) and later. Mozilla 1.8 and earlier do have this property, but it always returns false", 
        "type": "window"
    }, 
    "function": {
        "descr": "Declares a function with the specified parameters.", 
        "name": "function", 
        "params": [
            {
                "descr": "The function name.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements which comprise the body of the function.", 
                "name": "statements"
            }
        ], 
        "path": "javascript/statements/function", 
        "syntax": "function name([param] [, param] [..., param]) {   statements}", 
        "type": "Statements"
    }, 
    "get": {
        "descr": "Binds an object property to a function that will be called when that property is looked up.", 
        "name": "get", 
        "params": [
            {
                "descr": "the name of the property to bind to the given function", 
                "name": "prop"
            }
        ], 
        "path": "javascript/operators/get", 
        "syntax": "{get prop() { .\u00a0.\u00a0. } }", 
        "type": "Operators"
    }, 
    "getComputedStyle": {
        "descr": "getComputedStyle() gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.", 
        "name": "window.getComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window.getcomputedstyle", 
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);", 
        "type": "window"
    }, 
    "getDate": {
        "descr": "The getDate() method returns the day of the month for the specified date according to local time.", 
        "name": "Date.getDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getdate", 
        "syntax": "dateObj.getDate()", 
        "type": "Date"
    }, 
    "getDay": {
        "descr": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday.", 
        "name": "Date.getDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getday", 
        "syntax": "dateObj.getDay()", 
        "type": "Date"
    }, 
    "getDefaultComputedStyle": {
        "descr": "getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling. That is, only user-agent and user styles are taken into account.", 
        "name": "window.getDefaultComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window.getdefaultcomputedstyle", 
        "syntax": "var style = window.getDefaultComputedStyle(element[, pseudoElt]);", 
        "type": "window"
    }, 
    "getFullYear": {
        "descr": "The getFullYear() method returns the year of the specified date according to local time.", 
        "name": "Date.getFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getfullyear", 
        "syntax": "dateObj.getFullYear()", 
        "type": "Date"
    }, 
    "getHours": {
        "descr": "The getHours() method returns the hour for the specified date, according to local time.", 
        "name": "Date.getHours", 
        "params": [], 
        "path": "javascript/global_objects/date/gethours", 
        "syntax": "dateObj.getHours()", 
        "type": "Date"
    }, 
    "getMilliseconds": {
        "descr": "The getMilliseconds() method returns the milliseconds in the specified date according to local time.", 
        "name": "Date.getMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getmilliseconds", 
        "syntax": "dateObj.getMilliseconds()", 
        "type": "Date"
    }, 
    "getMinutes": {
        "descr": "The getMinutes() method returns the minutes in the specified date according to local time.", 
        "name": "Date.getMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getminutes", 
        "syntax": "dateObj.getMinutes()", 
        "type": "Date"
    }, 
    "getMonth": {
        "descr": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).", 
        "name": "Date.getMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getmonth", 
        "syntax": "dateObj.getMonth()", 
        "type": "Date"
    }, 
    "getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.", 
        "name": "Object.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The object in which to look for the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property whose description is to be retrieved", 
                "name": "prop"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptor", 
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)", 
        "type": "Object"
    }, 
    "getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.", 
        "name": "Object.getOwnPropertyNames", 
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertynames", 
        "syntax": "Object.getOwnPropertyNames(obj)", 
        "type": "Object"
    }, 
    "getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the internal [[Prototype]]) of the specified object.", 
        "name": "Object.getPrototypeOf", 
        "params": [
            {
                "descr": "The object whose prototype is to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getprototypeof", 
        "syntax": "Object.getPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "getSeconds": {
        "descr": "The getSeconds() method returns the seconds in the specified date according to local time.", 
        "name": "Date.getSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getseconds", 
        "syntax": "dateObj.getSeconds()", 
        "type": "Date"
    }, 
    "getSelection": {
        "descr": "Returns a selection object representing the range of text selected by the user.", 
        "name": "window.getSelection", 
        "params": [], 
        "path": "dom/window.getselection", 
        "syntax": "selection = window.getSelection() ;", 
        "type": "window"
    }, 
    "getTime": {
        "descr": "The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.", 
        "name": "Date.getTime", 
        "params": [], 
        "path": "javascript/global_objects/date/gettime", 
        "syntax": "dateObj.getTime()", 
        "type": "Date"
    }, 
    "getTimezoneOffset": {
        "descr": "The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.", 
        "name": "Date.getTimezoneOffset", 
        "params": [], 
        "path": "javascript/global_objects/date/gettimezoneoffset", 
        "syntax": "dateObj.getTimezoneOffset()", 
        "type": "Date"
    }, 
    "getUTCDate": {
        "descr": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.", 
        "name": "Date.getUTCDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcdate", 
        "syntax": "dateObj.getUTCDate()", 
        "type": "Date"
    }, 
    "getUTCDay": {
        "descr": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.", 
        "name": "Date.getUTCDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcday", 
        "syntax": "dateObj.getUTCDay()", 
        "type": "Date"
    }, 
    "getUTCFullYear": {
        "descr": "The getUTCFullYear() method returns the year in the specified date according to universal time.", 
        "name": "Date.getUTCFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcfullyear", 
        "syntax": "dateObj.getUTCFullYear()", 
        "type": "Date"
    }, 
    "getUTCHours": {
        "descr": "The getUTCHours() method returns the hours in the specified date according to universal time.", 
        "name": "Date.getUTCHours", 
        "params": [], 
        "path": "javascript/global_objects/date/getutchours", 
        "syntax": "dateObj.getUTCHours()", 
        "type": "Date"
    }, 
    "getUTCMilliseconds": {
        "descr": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.", 
        "name": "Date.getUTCMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmilliseconds", 
        "syntax": "dateObj.getUTCMilliseconds()", 
        "type": "Date"
    }, 
    "getUTCMinutes": {
        "descr": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.", 
        "name": "Date.getUTCMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcminutes", 
        "syntax": "dateObj.getUTCMinutes()", 
        "type": "Date"
    }, 
    "getUTCMonth": {
        "descr": "The getUTCMonth() returns the month of the specified date according to universal time.", 
        "name": "Date.getUTCMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmonth", 
        "syntax": "dateObj.getUTCMonth()", 
        "type": "Date"
    }, 
    "getUTCSeconds": {
        "descr": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.", 
        "name": "Date.getUTCSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcseconds", 
        "syntax": "dateObj.getUTCSeconds()", 
        "type": "Date"
    }, 
    "has": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .has() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.", 
        "name": "has", 
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  A DOM element to match elements against.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/has", 
        "syntax": ".has( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "hasClass": {
        "descr": "Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:", 
        "name": "hasClass", 
        "params": [
            {
                "descr": "Type: String  The class name to search for.", 
                "name": "className"
            }
        ], 
        "path": "jquery/hasclass", 
        "syntax": ".hasClass( className ) Returns: Boolean", 
        "type": "Manipulation"
    }, 
    "hasOwnProperty": {
        "descr": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.", 
        "name": "Object.hasOwnProperty", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/hasownproperty", 
        "syntax": "obj.hasOwnProperty(prop)", 
        "type": "Object"
    }, 
    "height": {
        "descr": "The difference between .css( \"height\" ) and .height() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .height() method is recommended when an element's height needs to be used in a mathematical calculation.", 
        "name": "height", 
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function() A function returning the height to set. ", 
                "name": "function(index, height)"
            }
        ], 
        "path": "jquery/height", 
        "syntax": ".height() Returns: Integer", 
        "type": "Dimensions"
    }, 
    "hide": {
        "descr": "With no parameters, the .hide() method is the simplest way to hide an element:", 
        "name": "hide", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/hide", 
        "syntax": ".hide() Returns: jQuery", 
        "type": "Effects"
    }, 
    "history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).", 
        "name": "window.history", 
        "params": [], 
        "path": "dom/window.history", 
        "syntax": "var historyObj = window.history; The obtained History object has the following methods:See Manipulating the browser history for examples and details. In particular, that article explains security features of the pushState()", 
        "type": "window"
    }, 
    "history.length": {
        "descr": "The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.", 
        "name": "history.length", 
        "params": [], 
        "path": "dom/history.length", 
        "syntax": "length = history.length; Examples var result = window.history.length; // Returns the size of the history of the current session. Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard No change from HTML5. HTML5 Candidate Recommendation Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) (Yes) (Yes) (Yes) (Yes)   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) (Yes) (Yes) (Yes) (Yes)  See also", 
        "type": "History"
    }, 
    "home": {
        "descr": "Returns the window to the home page.", 
        "name": "window.home", 
        "params": [], 
        "path": "dom/window.home", 
        "syntax": "window.home()", 
        "type": "window"
    }, 
    "hover": {
        "descr": "The .hover() method binds handlers for both mouseenter and mouseleave events. You can use it to simply apply behavior to an element during the time the mouse is within the element.", 
        "name": "hover", 
        "params": [
            {
                "descr": "Type: Function() A function to execute when the mouse pointer enters the element.", 
                "name": "handlerIn(eventObject)"
            }, 
            {
                "descr": "Type: Function() A function to execute when the mouse pointer leaves the element.", 
                "name": "handlerOut(eventObject)"
            }, 
            {
                "descr": "Type: Function() A function to execute when the mouse pointer enters or leaves the element.", 
                "name": "handlerInOut(eventObject)"
            }
        ], 
        "path": "jquery/hover", 
        "syntax": ".hover( handlerIn(eventObject), handlerOut(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "html": {
        "descr": "This method is not available on XML documents.", 
        "name": "html", 
        "params": [
            {
                "descr": "Type: htmlString  A string of HTML to set as the content of each matched element.", 
                "name": "htmlString"
            }, 
            {
                "descr": "Type: Function() A function returning the HTML content to set. ", 
                "name": "function(index, oldhtml)"
            }
        ], 
        "path": "jquery/html", 
        "syntax": ".html() Returns: String", 
        "type": "Manipulation"
    }, 
    "if...else": {
        "descr": "Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.", 
        "name": "if...else", 
        "params": [
            {
                "descr": "An expression that evaluates to true or false.", 
                "name": "condition"
            }, 
            {
                "descr": "Statement that is executed if condition evaluates to true. ", 
                "name": "statement1"
            }, 
            {
                "descr": "Statement that is executed if condition evaluates to false and the else clause exists. ", 
                "name": "statement2"
            }
        ], 
        "path": "javascript/statements/if...else", 
        "syntax": "if (condition)   statement1[else   statement2]", 
        "type": "Statements"
    }, 
    "import": {
        "descr": "Allows a script to import properties, functions, and objects from a signed script that has exported the information. This feature is not in ECMA 262, Edition 3.", 
        "name": "import", 
        "params": [
            {
                "descr": "Name of the object that will receive the imported names.", 
                "name": "objectName"
            }, 
            {
                "descr": "Property, function, or object to be imported.", 
                "name": "nameN"
            }
        ], 
        "path": "javascript/statements/import", 
        "syntax": "import objectName.name1, objectName.name2, ..., objectName.nameN;  import objectName.*;  Parameters objectName Name of the object that will receive the imported names. nameN Property, function, or object to be imported. Description The objectName parameter is the name of the object that will receive the imported names. For example, if f and p have been exported, and if obj is an object from the importing script, the following code makes f and p accessible in the importing script as properties of obj. import obj.f, obj.p; The first syntax imports the specified properties, functions, and objects from the exported script. The second syntax imports all properties, functions, and objects from the exported script. Typically, information in a signed script is available only to scripts signed by the same principals. By exporting (using the export statement) properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the import", 
        "type": "Statements"
    }, 
    "importDialog": {
        "descr": "Because opening windows on mobile isn't necessarily appropriate, the Firefox Mobile team designed the importDialog() method to replace window.openDialog(). Instead of opening a new window, it merges the specified XUL dialog into the main window.", 
        "name": "window.importDialog", 
        "params": [
            {
                "descr": "The opened window", 
                "name": "newDialog"
            }, 
            {
                "descr": "The dialog's parent; can be null.", 
                "name": "aParent"
            }, 
            {
                "descr": "The chrome URL of the XUL dialog.", 
                "name": "aSrc"
            }, 
            {
                "descr": "A JavaScript object containing data to pass to the dialog.", 
                "name": "aArguments"
            }
        ], 
        "path": "dom/window.importdialog", 
        "syntax": "newDialog = importDialog(aParent, aSrc, aArguments)", 
        "type": "window"
    }, 
    "in": {
        "descr": "The in operator returns true if the specified property is in the specified object.", 
        "name": "in", 
        "params": [
            {
                "descr": "A string or numeric expression representing a property name or array index.", 
                "name": "prop"
            }, 
            {
                "descr": "Name of an object.", 
                "name": "objectName"
            }
        ], 
        "path": "javascript/operators/in", 
        "syntax": "prop in objectName  Parameters  prop  A string or numeric expression representing a property name or array index.  objectName  Name of an object. Description The following examples show some uses of the in operator. // Arraysvar trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\");\n or 0 in trees        // returns true3 in trees        // returns true6 in trees        // returns false\"bay\" in trees    // returns false (you must specify the index number,                  // not the value at that index)\"length\" in trees // returns true (length is an Array property)// Predefined objects\"PI\" in Math          // returns true// Custom objectsvar mycar = {make: \"Honda\", model: \"Accord\", year: 1998};\"make\" in mycar  // returns true\"model\" in mycar // returns true);", 
        "type": "Operators"
    }, 
    "index": {
        "descr": "If no argument is passed to the .index() method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.", 
        "name": "index", 
        "params": [
            {
                "descr": "Type: Selector  A selector representing a jQuery collection in which to look for an element.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element or jQuery  The DOM element or first element within the jQuery object to look for.", 
                "name": "element"
            }
        ], 
        "path": "jquery/index/index", 
        "syntax": ".index() Returns: Number", 
        "type": "Miscellaneous"
    }, 
    "indexOf": {
        "descr": "Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, returns -1 if the value is not found.", 
        "name": "String.indexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for.", 
                "name": "searchValue"
            }, 
            {
                "descr": "The location within the calling string to start the search from. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/string/indexof", 
        "syntax": "string.indexOf(searchValue[, fromIndex])", 
        "type": "String"
    }, 
    "innerHeight": {
        "descr": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.", 
        "name": "window.innerHeight", 
        "params": [], 
        "path": "dom/window.innerheight", 
        "syntax": "var intViewportHeight = window.innerHeight; Value On return, intViewportHeight is the height of the browser window's viewport. The window.innerHeight property is read only; it has no default value. Notes The innerHeight property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar. Example Assuming a frameset var intFrameHeight = window.innerHeight; // orvar intFrameHeight = self.innerHeight;// will return the height of the frame viewport within the framesetvar intFramesetHeight = parent.innerHeight;// will return the height of the viewport of the closest framesetvar intOuterFramesetHeight = top.innerHeight;// will return the height of the viewport of the outermost frameset  To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "innerWidth": {
        "descr": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.", 
        "name": "window.innerWidth", 
        "params": [], 
        "path": "dom/window.innerwidth", 
        "syntax": "window.innerWidth property is read only; it has no default value. Notes The innerWidth property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the width of the viewport excluding, if rendered, the vertical scrollbar.", 
        "type": "window"
    }, 
    "insertAfter": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.", 
        "name": "insertAfter", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/insertafter", 
        "syntax": ".insertAfter( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "insertBefore": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.", 
        "name": "insertBefore", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/insertbefore", 
        "syntax": ".insertBefore( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "instanceof": {
        "descr": "The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.", 
        "name": "instanceof", 
        "params": [
            {
                "descr": "The object to test.", 
                "name": "object"
            }, 
            {
                "descr": "Function to test against", 
                "name": "constructor"
            }
        ], 
        "path": "javascript/operators/instanceof", 
        "syntax": "object instanceof constructor Parameters  object  The object to test.  constructor  Function to test against Description The instanceof operator tests presence of constructor.prototype in object prototype chain. function C(){} // defining a constructorfunction D(){} // defining another constructorvar o = new C();\n or o instanceof C; // true, because: Object.getPrototypeOf(o) === C.prototypeo instanceof D; // false, because D.prototype is nowhere in o's prototype chaino instanceof Object; // true, because:C.prototype instanceof Object // trueC.prototype = {};var o2 = new C();\n or o2 instanceof C; // trueo instanceof C; // false, because C.prototype is nowhere in o's prototype chain anymoreD.prototype = new C();\n or  // use inheritancevar o3 = new D();\n or o3 instanceof D; // trueo3 instanceof C; // true);", 
        "type": "Operators"
    }, 
    "is": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Object.is", 
        "params": [
            {
                "descr": "The first value to compare.", 
                "name": "value1"
            }, 
            {
                "descr": "The second value to compare.", 
                "name": "value2"
            }
        ], 
        "path": "javascript/global_objects/object/is", 
        "syntax": "Object.is()", 
        "type": "Object"
    }, 
    "isArray": {
        "descr": "The Array.isArray() method returns true if an object is an array, false if it is not.", 
        "name": "Array.isArray", 
        "params": [
            {
                "descr": "The object to be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/array/isarray", 
        "syntax": "Array.isArray(obj)", 
        "type": "Array"
    }, 
    "isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).", 
        "name": "Object.isExtensible", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isextensible", 
        "syntax": "Object.isExtensible(obj)", 
        "type": "Object"
    }, 
    "isFinite": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isFinite", 
        "params": [
            {
                "descr": "The value to be tested for finiteness.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isfinite", 
        "syntax": "Number.isFinite()", 
        "type": "Number"
    }, 
    "isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.", 
        "name": "Object.isFrozen", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isfrozen", 
        "syntax": "Object.isFrozen(obj)", 
        "type": "Object"
    }, 
    "isInteger": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isInteger", 
        "params": [
            {
                "descr": "The value to be tested for being an integer.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isinteger", 
        "syntax": "Number.isInteger()", 
        "type": "Number"
    }, 
    "isNaN": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Number.isNaN", 
        "params": [
            {
                "descr": "The value to be tested for NaN.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/isnan", 
        "syntax": "Number.isNaN()", 
        "type": "Number"
    }, 
    "isPrototypeOf": {
        "descr": "The isPrototypeOf() method tests for an object in another object's prototype chain.", 
        "name": "Object.isPrototypeOf", 
        "params": [
            {
                "descr": "An object to be tested against each link in the prototype chain of the object argument.", 
                "name": "prototypeObj"
            }, 
            {
                "descr": "the object whose prototype chain will be searched", 
                "name": "object"
            }
        ], 
        "path": "javascript/global_objects/object/isprototypeof", 
        "syntax": "prototypeObj.isPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.", 
        "name": "Object.isSealed", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/issealed", 
        "syntax": "Object.isSealed(obj)", 
        "type": "Object"
    }, 
    "jQuery": {
        "descr": "In the first formulation listed above, jQuery() \u2014 which can also be written as $() \u2014 searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:", 
        "name": "jQuery", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element or jQuery  A DOM Element, Document, or jQuery to use as context", 
                "name": "context"
            }, 
            {
                "descr": "Type: Element  A DOM element to wrap in a jQuery object.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Array  An array containing a set of DOM elements to wrap in a jQuery object.", 
                "name": "elementArray"
            }, 
            {
                "descr": "Type: PlainObject  A plain object to wrap in a jQuery object.", 
                "name": "object"
            }, 
            {
                "descr": "Type: PlainObject  An existing jQuery object to clone.", 
                "name": "jQuery object"
            }, 
            {
                "descr": "Type: htmlString  A string of HTML to create on the fly. ", 
                "name": "html"
            }, 
            {
                "descr": "Type: document  A document in which the new elements will be created.", 
                "name": "ownerDocument"
            }, 
            {
                "descr": "Type: htmlString  A string defining a single, standalone, HTML element (e.g. ", 
                "name": "html"
            }, 
            {
                "descr": "Type: PlainObject  An object of attributes, events, and methods to call on the newly-created element.", 
                "name": "attributes"
            }, 
            {
                "descr": "Type: Function() The function to execute when the DOM is ready.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery", 
        "syntax": "jQuery( selector [, context ] ) Returns: jQuery", 
        "type": "Miscellaneous"
    }, 
    "jQuery.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.", 
        "name": "jQuery.Callbacks", 
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.", 
                "name": "flags"
            }
        ], 
        "path": "jquery/jquery.callbacks", 
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "jQuery.Deferred": {
        "descr": "The jQuery.Deferred() constructor creates a new Deferred object. The new operator is optional.", 
        "name": "jQuery.Deferred", 
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.", 
                "name": "beforeStart"
            }
        ], 
        "path": "jquery/jquery.deferred", 
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "jQuery.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:", 
        "name": "jQuery.ajax", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ", 
                "name": "async"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ", 
                "name": "beforeSend"
            }, 
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ", 
                "name": "cache"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ", 
                "name": "contents"
            }, 
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: String  When sending data to the server, use this content type. ", 
                "name": "contentType"
            }, 
            {
                "descr": "Type: PlainObject  This object will be made the context of all Ajax-related callbacks. ", 
                "name": "context"
            }, 
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ", 
                "name": "converters"
            }, 
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)", 
                "name": "crossDomain"
            }, 
            {
                "descr": "Type: PlainObject or String  Data to be sent to the server. ", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( String data, String type ) => Object  A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. ", 
                "name": "dataFilter"
            }, 
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ", 
                "name": "error"
            }, 
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ", 
                "name": "global"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ", 
                "name": "headers"
            }, 
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ", 
                "name": "ifModified"
            }, 
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ", 
                "name": "isLocal"
            }, 
            {
                "descr": "Type: String  Override the callback function name in a jsonp request. ", 
                "name": "jsonp"
            }, 
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ", 
                "name": "jsonpCallback"
            }, 
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ", 
                "name": "mimeType"
            }, 
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "password"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.", 
                "name": "processData"
            }, 
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ", 
                "name": "scriptCharset"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ", 
                "name": "statusCode"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.", 
                "name": "traditional"
            }, 
            {
                "descr": "(default: 'GET') Type: String  The type of request to make (\"POST\" or \"GET\"), default is \"GET\". ", 
                "name": "type"
            }, 
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "username"
            }, 
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ", 
                "name": "xhr"
            }, 
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ", 
                "name": "xhrFields"
            }
        ], 
        "path": "jquery/jquery.ajax", 
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:", 
        "name": "jQuery.ajaxPrefilter", 
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes", 
                "name": "dataTypes"
            }, 
            {
                "descr": "Type: Function() A handler to set default values for future Ajax requests.", 
                "name": "handler(options, originalOptions, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.ajaxprefilter", 
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler(options, originalOptions, jqXHR) ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().", 
        "name": "jQuery.ajaxSetup", 
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ", 
                "name": "options"
            }
        ], 
        "path": "jquery/jquery.ajaxsetup", 
        "syntax": "jQuery.ajaxSetup( options ) Returns:", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.", 
        "name": "jQuery.ajaxTransport", 
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function() A handler to return the new transport object to use with the data type provided in the first argument.", 
                "name": "handler(options, originalOptions, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.ajaxtransport", 
        "syntax": "jQuery.ajaxTransport( dataType, handler(options, originalOptions, jqXHR) ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "jQuery.boxModel": {
        "descr": "", 
        "name": "jQuery.boxModel", 
        "params": [], 
        "path": "jquery/jquery.boxmodel", 
        "syntax": "jQuery.boxModelReturns: Booleanversion deprecated: 1.3   Description: Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.", 
        "type": "Utilities"
    }, 
    "jQuery.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "name": "jQuery.browser", 
        "params": [], 
        "path": "jquery/jquery.browser", 
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "type": "Utilities"
    }, 
    "jQuery.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.", 
        "name": "jQuery.contains", 
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.", 
                "name": "container"
            }, 
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/jquery.contains", 
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.", 
        "name": "jQuery.cssHooks", 
        "params": [], 
        "path": "jquery/jquery.csshooks", 
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()", 
        "type": "Miscellaneous"
    }, 
    "jQuery.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.", 
        "name": "jQuery.data", 
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Object  The new data value.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.data", 
        "syntax": "jQuery.data( element, key, value ) Returns: Object", 
        "type": "Data"
    }, 
    "jQuery.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.", 
        "name": "jQuery.dequeue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/jquery.dequeue", 
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined", 
        "type": "Data"
    }, 
    "jQuery.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.", 
        "name": "jQuery.each", 
        "params": [
            {
                "descr": "Type: Object  The object or array to iterate over.", 
                "name": "collection"
            }, 
            {
                "descr": "Type: Function() The function that will be executed on every object.", 
                "name": "callback(indexInArray, valueOfElement)"
            }
        ], 
        "path": "jquery/jquery.each", 
        "syntax": "jQuery.each( collection, callback(indexInArray, valueOfElement) ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.", 
        "name": "jQuery.error", 
        "params": [
            {
                "descr": "Type: String  The message to send out.", 
                "name": "message"
            }
        ], 
        "path": "jquery/jquery.error", 
        "syntax": "jQuery.error( message ) Returns:", 
        "type": "Miscellaneous"
    }, 
    "jQuery.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.", 
        "name": "jQuery.extend", 
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }, 
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ", 
                "name": "deep"
            }, 
            {
                "descr": "Type: Object  The object to extend. ", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }
        ], 
        "path": "jquery/jquery.extend", 
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.fn.extend": {
        "descr": "", 
        "name": "jQuery.fn.extend", 
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.fn.extend", 
        "syntax": "jQuery.fn.extend( object ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.fx.interval": {
        "descr": "This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.", 
        "name": "jQuery.fx.interval", 
        "params": [], 
        "path": "jquery/jquery.fx.interval", 
        "syntax": "jQuery.fx.intervalReturns: Number   Description: The rate (in milliseconds) at which animations fire.", 
        "type": "Effects"
    }, 
    "jQuery.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:", 
        "name": "jQuery.fx.off", 
        "params": [], 
        "path": "jquery/jquery.fx.off", 
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons: jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations (see the article Turn Off Animation for more information). Animations can be turned back on by setting the property to false", 
        "type": "Effects"
    }, 
    "jQuery.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.get", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success(data, textStatus, jqXHR)"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }
        ], 
        "path": "jquery/jquery.get", 
        "syntax": "jQuery.get( url [, data ] [, success(data, textStatus, jqXHR) ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getJSON", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success( data, textStatus, jqXHR )"
            }
        ], 
        "path": "jquery/jquery.getjson", 
        "syntax": "jQuery.getJSON( url [, data ] [, success( data, textStatus, jqXHR ) ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getScript", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds.", 
                "name": "success(script, textStatus, jqXHR)"
            }
        ], 
        "path": "jquery/jquery.getscript", 
        "syntax": "jQuery.getScript( url [, success(script, textStatus, jqXHR) ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).", 
        "name": "jQuery.globalEval", 
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.", 
                "name": "code"
            }
        ], 
        "path": "jquery/jquery.globaleval", 
        "syntax": "jQuery.globalEval( code ) Returns:", 
        "type": "Utilities"
    }, 
    "jQuery.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.", 
        "name": "jQuery.grep", 
        "params": [
            {
                "descr": "Type: Array  The array to search through.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "function(elementOfArray, indexInArray)"
            }, 
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ", 
                "name": "invert"
            }
        ], 
        "path": "jquery/jquery.grep", 
        "syntax": "jQuery.grep( array, function(elementOfArray, indexInArray) [, invert ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If no data is associated with an element (there is no data object at all or the data object is empty), the method returns false; otherwise it returns true.", 
        "name": "jQuery.hasData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.hasdata", 
        "syntax": "jQuery.hasData( element ) Returns: Boolean", 
        "type": "Data"
    }, 
    "jQuery.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.", 
        "name": "jQuery.holdReady", 
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released", 
                "name": "hold"
            }
        ], 
        "path": "jquery/jquery.holdready", 
        "syntax": "jQuery.holdReady( hold ) Returns: undefined", 
        "type": "Miscellaneous"
    }, 
    "jQuery.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.", 
        "name": "jQuery.inArray", 
        "params": [
            {
                "descr": "Type: Anything  The value to search for.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Array  An array through which to search.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "jquery/jquery.inarray", 
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number", 
        "type": "Utilities"
    }, 
    "jQuery.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).", 
        "name": "jQuery.isArray", 
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isarray", 
        "syntax": "jQuery.isArray( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()", 
        "name": "jQuery.isEmptyObject", 
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isemptyobject", 
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isFunction": {
        "descr": "Note: As of jQuery 1.3, functions provided by the browser like alert() and DOM element methods like getAttribute() are not guaranteed to be detected as functions in browsers such as Internet Explorer.", 
        "name": "jQuery.isFunction", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a function.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isfunction", 
        "syntax": "jQuery.isFunction( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.", 
        "name": "jQuery.isNumeric", 
        "params": [
            {
                "descr": "Type: PlainObject  The value to be tested.", 
                "name": "value"
            }
        ], 
        "path": "jquery/jquery.isnumeric", 
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.", 
        "name": "jQuery.isPlainObject", 
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isplainobject", 
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).", 
        "name": "jQuery.isWindow", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.iswindow", 
        "syntax": "jQuery.isWindow( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isXMLDoc": {
        "descr": "", 
        "name": "jQuery.isXMLDoc", 
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.", 
                "name": "node"
            }
        ], 
        "path": "jquery/jquery.isxmldoc", 
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).", 
        "name": "jQuery.makeArray", 
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.makearray", 
        "syntax": "jQuery.makeArray( obj ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.map": {
        "descr": "If you wish to process a jQuery object \u2014 for example, $('div').map( callback ); \u2014 use .map() instead.", 
        "name": "jQuery.map", 
        "params": [
            {
                "descr": "Type: Array  The Array to translate.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "callback( elementOfArray, indexInArray )"
            }, 
            {
                "descr": "Type: Array or Object  The Array or Object to translate.", 
                "name": "arrayOrObject"
            }, 
            {
                "descr": "Type: Function() The function to process each item against. ", 
                "name": "callback( value, indexOrKey )"
            }
        ], 
        "path": "jquery/jquery.map", 
        "syntax": "jQuery.map( array, callback( elementOfArray, indexInArray ) ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the first parameter to add the items from the second.", 
        "name": "jQuery.merge", 
        "params": [
            {
                "descr": "Type: Array  The first array to merge, the elements of second added.", 
                "name": "first"
            }, 
            {
                "descr": "Type: Array  The second array to merge into the first, unaltered.", 
                "name": "second"
            }
        ], 
        "path": "jquery/jquery.merge", 
        "syntax": "jQuery.merge( first, second ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.", 
        "name": "jQuery.noConflict", 
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).", 
                "name": "removeAll"
            }
        ], 
        "path": "jquery/jquery.noconflict", 
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object", 
        "type": "Miscellaneous"
    }, 
    "jQuery.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.", 
        "name": "jQuery.noop", 
        "params": [], 
        "path": "jquery/jquery.noop", 
        "syntax": "jQuery.noop() Returns: undefined", 
        "type": "Utilities"
    }, 
    "jQuery.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().", 
        "name": "jQuery.now", 
        "params": [], 
        "path": "jquery/jquery.now", 
        "syntax": "jQuery.now() Returns: Number", 
        "type": "Utilities"
    }, 
    "jQuery.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).", 
        "name": "jQuery.param", 
        "params": [
            {
                "descr": "Type: Array or PlainObject  An array or object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Array or PlainObject  An array or object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.", 
                "name": "traditional"
            }
        ], 
        "path": "jquery/jquery.param", 
        "syntax": "jQuery.param( obj ) Returns: String", 
        "type": "Ajax"
    }, 
    "jQuery.parseHTML": {
        "descr": "jQuery.parseHTML uses a native DOM element creation function to convert the string to a set of DOM elements, which can then be inserted into the document.", 
        "name": "jQuery.parseHTML", 
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed", 
                "name": "data"
            }, 
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created", 
                "name": "context"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string", 
                "name": "keepScripts"
            }
        ], 
        "path": "jquery/jquery.parsehtml", 
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.parseJSON": {
        "descr": "Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all malformed JSON strings:", 
        "name": "jQuery.parseJSON", 
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.", 
                "name": "json"
            }
        ], 
        "path": "jquery/jquery.parsejson", 
        "syntax": "jQuery.parseJSON( json ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.", 
        "name": "jQuery.parseXML", 
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed", 
                "name": "data"
            }
        ], 
        "path": "jquery/jquery.parsexml", 
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument", 
        "type": "Utilities"
    }, 
    "jQuery.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.post", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A callback function that is executed if the request succeeds. ", 
                "name": "success(data, textStatus, jqXHR)"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }
        ], 
        "path": "jquery/jquery.post", 
        "syntax": "jQuery.post( url [, data ] [, success(data, textStatus, jqXHR) ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.", 
        "name": "jQuery.proxy", 
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.", 
                "name": "additionalArguments"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.", 
                "name": "additionalArguments"
            }
        ], 
        "path": "jquery/jquery.proxy", 
        "syntax": "jQuery.proxy( function, context ) Returns: Function", 
        "type": "Utilities"
    }, 
    "jQuery.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.", 
        "name": "jQuery.queue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function() The new function to add to the queue.", 
                "name": "callback()"
            }
        ], 
        "path": "jquery/jquery.queue", 
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "jQuery.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.", 
        "name": "jQuery.removeData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to remove.", 
                "name": "name"
            }
        ], 
        "path": "jquery/jquery.removedata", 
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "jQuery.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.", 
        "name": "jQuery.sub", 
        "params": [], 
        "path": "jquery/jquery.sub", 
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Miscellaneous"
    }, 
    "jQuery.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.", 
        "name": "jQuery.trim", 
        "params": [
            {
                "descr": "Type: String  The string to trim.", 
                "name": "str"
            }
        ], 
        "path": "jquery/jquery.trim", 
        "syntax": "jQuery.trim( str ) Returns: String", 
        "type": "Utilities"
    }, 
    "jQuery.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:", 
        "name": "jQuery.type", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to get the internal JavaScript [[Class]] of.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.type", 
        "syntax": "jQuery.type( obj ) Returns: String", 
        "type": "Utilities"
    }, 
    "jQuery.unique": {
        "descr": "The $.unique() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.", 
        "name": "jQuery.unique", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.unique", 
        "syntax": "jQuery.unique( array ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.when": {
        "descr": "If a single Deferred is passed to jQuery.when, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as deferred.then. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by jQuery.ajax() is a Promise and can be used this way:", 
        "name": "jQuery.when", 
        "params": [
            {
                "descr": "Type: Deferred  One or more Deferred objects, or plain JavaScript objects.", 
                "name": "deferreds"
            }
        ], 
        "path": "jquery/jquery.when", 
        "syntax": "jQuery.when( deferreds ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "join": {
        "descr": "The join() method joins all elements of an array into a string.", 
        "name": "Array.join", 
        "params": [
            {
                "descr": "Specifies a string to separate each element of the array. ", 
                "name": "separator"
            }
        ], 
        "path": "javascript/global_objects/array/join", 
        "syntax": "str = arr.join(separator)", 
        "type": "Array"
    }, 
    "jquery": {
        "descr": "The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".", 
        "name": "jquery", 
        "params": [], 
        "path": "jquery/jquery-2", 
        "syntax": "jqueryReturns: String   Description: A string containing the jQuery version number.  version added: 1.0jquery The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".  Examples: Example: Determine if an object is a jQuery object  var a = { what: \"A regular JS object\" },  b = $( \"body\" );\n or  if ( a.jquery ) { // Falsy, since it's undefined  alert( \"a is a jQuery object!\" );\n or } if ( b.jquery ) { // Truthy, since it's a string    alert( \"b is a jQuery object!\" );\n or });", 
        "type": "Miscellaneous"
    }, 
    "keydown": {
        "descr": "This method is a shortcut for .on( \"keydown\", handler ) in the first and second variations, and .trigger( \"keydown\" ) in the third.", 
        "name": "keydown", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/keydown", 
        "syntax": ".keydown( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "keypress": {
        "descr": "Note: as the keypress event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.", 
        "name": "keypress", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/keypress", 
        "syntax": ".keypress( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "keys": {
        "descr": "The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).", 
        "name": "Object.keys", 
        "params": [
            {
                "descr": "The object whose enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/keys", 
        "syntax": "Object.keys(obj)", 
        "type": "Object"
    }, 
    "keyup": {
        "descr": "This method is a shortcut for .on( \"keyup\", handler ) in the first two variations, and .trigger( \"keyup\" ) in the third.", 
        "name": "keyup", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/keyup", 
        "syntax": ".keyup( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "label": {
        "descr": "Provides a statement with an identifier that you can refer to using a break or continue statement.", 
        "name": "label", 
        "params": [
            {
                "descr": "Any JavaScript identifier that is not a reserved word.", 
                "name": "label"
            }, 
            {
                "descr": "Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements.", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/label", 
        "syntax": "label :   statement Parameters label Any JavaScript identifier that is not a reserved word.  statement  Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements. Avoid using labels Labels are not very commonly used in JavaScript since they make programs harder to read and understand. As much as possible, avoid using labels and, depending on the cases, prefer calling functions or throwing an error. Examples continue Example var i, j;loop1:for (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"   loop2:   for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"      if (i == 1 && j == 1) {         continue loop1;      } else {         console.log(\"i = \" + i + \", j = \" + j);\n or       }   }}// Output is://   \"i = 0, j = 0\"//   \"i = 0, j = 1\"//   \"i = 0, j = 2\"//   \"i = 1, j = 0\"//   \"i = 2, j = 0\"//   \"i = 2, j = 1\"//   \"i = 2, j = 2\"// Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\");", 
        "type": "Statements"
    }, 
    "last": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .last() method constructs a new jQuery object from the last element in that set.", 
        "name": "last", 
        "params": [], 
        "path": "jquery/last", 
        "syntax": ".last() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "lastIndex": {
        "descr": "The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.", 
        "name": "RegExp.lastIndex", 
        "params": [], 
        "path": "javascript/global_objects/regexp/lastindex", 
        "syntax": "lastIndex = regExpObj.lastIndex; Description This property is set only if the regular expression used the \"g\" flag to indicate a global search. The following rules apply: If lastIndex is greater than the length of the string, regexp.test and regexp.exec fail, and lastIndex is set to 0. If lastIndex is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at lastIndex. If lastIndex is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and lastIndex is reset to 0. Otherwise, lastIndex is set to the next position following the most recent match. Examples Consider the following sequence of statements: var re = /(hi)?/g;", 
        "type": "RegExp"
    }, 
    "lastIndexOf": {
        "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.", 
        "name": "String.lastIndexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for.", 
                "name": "searchValue"
            }, 
            {
                "descr": "The location within the calling string to end the search at, indexed from left to right. ", 
                "name": "toIndex"
            }
        ], 
        "path": "javascript/global_objects/string/lastindexof", 
        "syntax": "string.lastIndexOf(searchValue[, toIndex])", 
        "type": "String"
    }, 
    "length": {
        "descr": "Returns the number of frames (either frame or iframe elements) in the window.", 
        "name": "window.length", 
        "params": [], 
        "path": "dom/window.length", 
        "syntax": "framesCount = window.length; framesCount is the number of frames. Example if (window.length) {  // this is a document with subframes}", 
        "type": "window"
    }, 
    "let": {
        "descr": "Introduced in JavaScript 1.7", 
        "name": "let", 
        "params": [], 
        "path": "javascript/statements/let", 
        "syntax": "let definition: let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]; let expression: let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) expression;", 
        "type": "Statements"
    }, 
    "live": {
        "descr": "As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().", 
        "name": "live", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more JavaScript event types and functions to execute for them.", 
                "name": "events"
            }
        ], 
        "path": "jquery/live", 
        "syntax": ".live( events, handler(eventObject) ) Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Events"
    }, 
    "load": {
        "descr": "This method is a shortcut for .on( \"load\", handler ).", 
        "name": "load", 
        "params": [
            {
                "descr": "Type: Function() A function to execute when the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/load-event", 
        "syntax": ".load( handler(eventObject) ) Returns: jQueryversion deprecated: 1.8", 
        "type": "Events"
    }, 
    "localeCompare": {
        "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.", 
        "name": "String.localeCompare", 
        "params": [
            {
                "descr": "The string against which the referring string is comparing", 
                "name": "compareString"
            }, 
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "kn"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "kf"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ", 
                "name": "usage"
            }, 
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ", 
                "name": "sensitivity"
            }, 
            {
                "descr": "Whether punctuation should be ignored. ", 
                "name": "ignore\u00adPunctua\u00adtion"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "numeric"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "caseFirst"
            }
        ], 
        "path": "javascript/global_objects/string/localecompare", 
        "syntax": "string.localeCompare(compareString [, locales [, options]])", 
        "type": "String"
    }, 
    "location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.", 
        "name": "window.location", 
        "params": [], 
        "path": "dom/window.location", 
        "syntax": "oldLocation = window.location;window.location = newLocation; Examples Basic Example alert(window.location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/window.location\");", 
        "type": "window"
    }, 
    "lookupGetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.lookupGetter", 
        "params": [
            {
                "descr": "A string containing the name of the property whose getter should be returned.", 
                "name": "sprop"
            }
        ], 
        "path": "javascript/global_objects/object/lookupgetter", 
        "syntax": "obj.__lookupGetter__(sprop)", 
        "type": "Object"
    }, 
    "lookupSetter": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Object.lookupSetter", 
        "params": [
            {
                "descr": "A string containing the name of the property whose setter should be returned.", 
                "name": "sprop"
            }
        ], 
        "path": "javascript/global_objects/object/lookupsetter", 
        "syntax": "obj.__lookupSetter__(sprop)", 
        "type": "Object"
    }, 
    "map": {
        "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
        "name": "Array.map", 
        "params": [
            {
                "descr": "Function that produces an element of the new Array from an element of the current one.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/map", 
        "syntax": "array.map(callback[, thisArg])", 
        "type": "Array"
    }, 
    "match": {
        "descr": "Used to retrieve the matches when matching a string against a regular expression.", 
        "name": "String.match", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/match", 
        "syntax": "var array = string.match(regexp);", 
        "type": "String"
    }, 
    "matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.", 
        "name": "window.matchMedia", 
        "params": [], 
        "path": "dom/window.matchmedia", 
        "syntax": "mql = window.matchMedia(mediaQueryString)", 
        "type": "window"
    }, 
    "mousedown": {
        "descr": "This method is a shortcut for .on( \"mousedown\", handler) in the first variation, and .trigger( \"mousedown\" ) in the second.", 
        "name": "mousedown", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mousedown", 
        "syntax": ".mousedown( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseenter": {
        "descr": "This method is a shortcut for .on( \"mouseenter\", handler ) in the first two variations, and .trigger( \"mouseenter\" ) in the third.", 
        "name": "mouseenter", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mouseenter", 
        "syntax": ".mouseenter( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseleave": {
        "descr": "This method is a shortcut for .on('mouseleave', handler) in the first two variations, and .trigger('mouseleave') in the third.", 
        "name": "mouseleave", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mouseleave", 
        "syntax": ".mouseleave( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mousemove": {
        "descr": "This method is a shortcut for .on( \"mousemove\", handler ) in the first two variations, and .trigger( \"mousemove\" ) in the third.", 
        "name": "mousemove", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mousemove", 
        "syntax": ".mousemove( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseout": {
        "descr": "This method is a shortcut for .on( \"mouseout\", handler ) in the first two variation, and .trigger( \"mouseout\" ) in the third.", 
        "name": "mouseout", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mouseout", 
        "syntax": ".mouseout( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseover": {
        "descr": "This method is a shortcut for .on( \"mouseover\", handler ) in the first two variations, and .trigger( \"mouseover\" ) in the third.", 
        "name": "mouseover", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mouseover", 
        "syntax": ".mouseover( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseup": {
        "descr": "This method is a shortcut for .on('mouseup', handler) in the first variation, and .trigger('mouseup') in the second.", 
        "name": "mouseup", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/mouseup", 
        "syntax": ".mouseup( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "moveBy": {
        "descr": "Moves the current window by a specified amount.", 
        "name": "window.moveBy", 
        "params": [], 
        "path": "dom/window.moveby", 
        "syntax": "window.moveBy(deltaX, deltaY)", 
        "type": "window"
    }, 
    "moveTo": {
        "descr": "Moves the window to the specified coordinates.", 
        "name": "window.moveTo", 
        "params": [], 
        "path": "dom/window.moveto", 
        "syntax": "window.moveTo(x, y)", 
        "type": "window"
    }, 
    "navigator": {
        "descr": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.", 
        "name": "navigator", 
        "params": [], 
        "path": "dom/window.navigator", 
        "syntax": "navigatorObject = window.navigator Examples Example #1: Browser detect and return a string var sBrowser, sUsrAg = navigator.userAgent;if(sUsrAg.indexOf(\"Chrome\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Google Chrome\";} else if (sUsrAg.indexOf(\"Safari\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Apple Safari\";} else if (sUsrAg.indexOf(\"Opera\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Opera\";} else if (sUsrAg.indexOf(\"Firefox\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Mozilla Firefox\";} else if (sUsrAg.indexOf(\"MSIE\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Microsoft Internet Explorer\";}alert(\"You are using: \" + sBrowser);", 
        "type": "Navigator"
    }, 
    "navigator.battery": {
        "descr": "The battery object provides information about the system's battery charge level; you can also listen to events it sends that provide updates about the battery's charge status. This implements the Battery Status API; see that documentation for additional details, a guide to using the API, and sample code.", 
        "name": "navigator.battery", 
        "params": [], 
        "path": "dom/navigator.battery", 
        "syntax": "var battery = window.navigator.battery; Value navigator.battery is a BatteryManager object. Specifications Specification Status Comment Battery Status API Candidate Recommendation Initial specification.  Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported Chrome on Android: crbug.com/135863 Chrome OS: crbug.com/122593 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? Not supported 10.0 (10) moz [1] 16.0 (16) (without prefix) [2] Not supported Not supported Not supported  Gecko notes [1] Disabled by default in Firefox 10.0, but can be enabled setting the preference dom.battery.enabled", 
        "type": "Navigator"
    }, 
    "navigator.buildID": {
        "descr": "Returns the build identifier of the browser.", 
        "name": "navigator.buildID", 
        "params": [], 
        "path": "dom/navigator.buildid", 
        "syntax": "buildID = navigator.buildID; buildID is the build identifier of the application as a string. The build ID is in form YYYYMMDDHH. Example dump(window.navigator.buildID);\n or  // prints \"2006090803\" to the console);", 
        "type": "Navigator"
    }, 
    "navigator.cookieEnabled": {
        "descr": "Returns a Boolean value indicating whether cookies are enabled or not (read-only).", 
        "name": "navigator.cookieEnabled", 
        "params": [], 
        "path": "dom/navigator.cookieenabled", 
        "syntax": "var cookieEnabled = navigator.cookieEnabled; cookieEnabled is a Boolean true or false. Example if (!navigator.cookieEnabled) {   // let the user know that enabling cookies makes the web page much more useful}", 
        "type": "Navigator"
    }, 
    "navigator.doNotTrack": {
        "descr": "Returns the user's do-not-track setting. This is \"yes\" if the user has requested not to be tracked by web sites, content, or advertising.", 
        "name": "navigator.doNotTrack", 
        "params": [], 
        "path": "dom/navigator.donottrack", 
        "syntax": "dnt = navigator.doNotTrack; Note that navigator.doNotTrack is not the value sent for the do-not-track header. When the do-not-track header sends \"1\", navigator.doNotTrack is \"yes\". When the header is unset, navigator.doNotTrack is \"unspecified\". When the header sends \"0\" (currently unsupported in Firefox), navigator.doNotTrack", 
        "type": "Navigator"
    }, 
    "navigator.getUserMedia": {
        "descr": "Prompts the user for permission to use a media device such as a camera or microphone. If the user provides permission, the successCallback is invoked on the calling application with a LocalMediaStream object as its argument.", 
        "name": "navigator.getUserMedia", 
        "params": [], 
        "path": "dom/navigator.getusermedia", 
        "syntax": "navigator.getUserMedia ( constraints, successCallback, errorCallback );", 
        "type": "Navigator"
    }, 
    "navigator.oscpu": {
        "descr": "Returns a string that identifies the current operating system.", 
        "name": "navigator.oscpu", 
        "params": [], 
        "path": "dom/navigator.oscpu", 
        "syntax": "oscpuInfo = window.navigator.oscpu  oscpuInfo is a string that takes the following form: Operating system oscpuInfo string format OS/2 OS/2 Warp x (either 3, 4 or 4.5) Windows CE WindowsCE x.y1 Windows 64-bit (64-bit build) Windows NT x.y; Win64; x64 Windows 64-bit (32-bit build) Windows NT x.y; WOW64 Windows 32-bit Windows NT x.y Mac OS X (PPC build) PPC Mac OS X x.y Mac OS X (i386/x64 build) Intel Mac OS X x.y Linux 64-bit (32-bit build) Output of uname -s plus \"i686 on x86_64\" Linux Output of uname -sm 1x.y refers to the version of the operating system", 
        "type": "Navigator"
    }, 
    "navigator.registerContentHandler": {
        "descr": "Allows web sites to register themselves as possible handlers for content of a particular MIME type.", 
        "name": "navigator.registerContentHandler", 
        "params": [], 
        "path": "dom/window.navigator.registercontenthandler", 
        "syntax": "navigator.registerContentHandler(mimeType, uri, title);", 
        "type": "Navigator"
    }, 
    "navigator.registerProtocolHandler": {
        "descr": "Allows web sites to register themselves as possible handlers for particular protocols.", 
        "name": "navigator.registerProtocolHandler", 
        "params": [], 
        "path": "dom/navigator.registerprotocolhandler", 
        "syntax": "window.navigator.registerProtocolHandler(protocol, uri, title);", 
        "type": "Navigator"
    }, 
    "navigator.vendorSub": {
        "descr": "vendorSub is the substring of the vendor having to do with the vendor version number.", 
        "name": "navigator.vendorSub", 
        "params": [], 
        "path": "dom/navigator.vendorsub", 
        "syntax": "venSub = window.navigator.vendorSub  Parameters venSub is a string. Example window.navigator.vendorSub // returns \"6.1\" where the vendor part of userAgent is // Netscape6/6.1 Notes vendorSub is yet another component of the full user agent string. It refers to the version number that the vendor themselves have given the current browser (as opposed to the version of the product, which may be different). In Netscape 6.1, the productSub is given as \"5.0\" and the vendorSub is \"6.1.\" See also navigator.productSub", 
        "type": "Navigator"
    }, 
    "navigator.vibrate": {
        "descr": "The Navigator.vibrate() method pulses the vibration hardware on the device, if such hardware exists. If the device doesn't support vibration, this method has no effect. If a vibration pattern is already in progress when this method is called, the previous pattern is halted and the new one begins instead.", 
        "name": "navigator.vibrate", 
        "params": [
            {
                "descr": "Provides a pattern of vibration and pause intervals. ", 
                "name": "pattern"
            }
        ], 
        "path": "dom/navigator.vibrate", 
        "syntax": "window.navigator.vibrate(pattern);", 
        "type": "Navigator"
    }, 
    "navigatorGeolocation.geolocation": {
        "descr": "The NavigatorGeolocation.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app offer customized results based on the user's location.", 
        "name": "navigatorGeolocation.geolocation", 
        "params": [], 
        "path": "dom/navigatorgeolocation.geolocation", 
        "syntax": "geo = navigator.geolocation Specifications Specification Status Comment Geolocation API Recommendation Initial specification. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 5 3.5 (1.9.1) 9 10.60 Removed in 15.0 Reintroduced in 16.0 5   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? 4.0 (4) ? 10.60 ?  See also", 
        "type": "Navigator"
    }, 
    "navigatorID.appCodeName": {
        "descr": "Returns the internal \"code\" name of the current browser.", 
        "name": "navigatorID.appCodeName", 
        "params": [], 
        "path": "dom/navigatorid.appcodename", 
        "syntax": "codeName = window.navigator.appCodeName  codeName is the internal name of the browser as a string. Example console.log(window.navigator.appCodeName);", 
        "type": "Navigator"
    }, 
    "navigatorID.appName": {
        "descr": "Returns the name of the browser. The HTML5 specification also allows any browser to return \"Netscape\" here, for compatibility reasons.", 
        "name": "navigatorID.appName", 
        "params": [], 
        "path": "dom/navigatorid.appname", 
        "syntax": "appName = window.navigator.appName  appName is the name of the browser as a string. Example alert(window.navigator.appName);\n or  // shows the name of the browser);", 
        "type": "Navigator"
    }, 
    "navigatorID.appVersion": {
        "descr": "Returns the version of the browser as a string. It may be either a plain version number, like \"5.0\", or a version number followed by more detailed information. The HTML5 specification also allows any browser to return \"4.0\" here, for compatibility reasons.", 
        "name": "navigatorID.appVersion", 
        "params": [], 
        "path": "dom/navigatorid.appversion", 
        "syntax": "window.navigator.appVersion  Returned value ver is the version number of the browser as a string. Example alert(\"Your browser version is reported as \" + navigator.appVersion);", 
        "type": "Navigator"
    }, 
    "navigatorID.platform": {
        "descr": "Returns a string representing the platform of the browser.", 
        "name": "navigatorID.platform", 
        "params": [], 
        "path": "dom/navigatorid.platform", 
        "syntax": "platform = navigator.platform  platform is a string with one of the following values: \"Win32\", \"Linux i686\", \"MacPPC\", \"MacIntel\", or other. Example alert(navigator.platform);", 
        "type": "Navigator"
    }, 
    "navigatorID.product": {
        "descr": "This property returns the product name of the current browser.", 
        "name": "navigatorID.product", 
        "params": [], 
        "path": "dom/navigatorid.product", 
        "syntax": "productName = window.navigator.product  productName is a string. Example <script>function prod() {   dt = document.getElementById(\"d\");\n or    dt.innerHTML = window.navigator.product; }</script> <button onclick=\"prod();\n or \">product</button> <div id=\"d\">\u00a0</div> <!-- returns \"Gecko\" -->);", 
        "type": "Navigator"
    }, 
    "navigatorID.userAgent": {
        "descr": "Returns the user agent string for the current browser.", 
        "name": "navigatorID.userAgent", 
        "params": [], 
        "path": "dom/navigatorid.useragent", 
        "syntax": "var ua = window.navigator.userAgent; Value ua stores the user agent string value of the current browser. The window.navigator.userAgent property is read-write; it has no default value. The user agent string is built on a formal structure which can be decomposed into several pieces of info. Each of these pieces of info comes from other navigator properties which are also settable by the user. Gecko-based browsers comply with the following general structure: userAgent = appCodeName/appVersion number (Platform; Security; OS-or-CPU; Localization; rv: revision-version-number) product/productSub Application-Name Application-Name-version", 
        "type": "Navigator"
    }, 
    "navigatorLanguage.language": {
        "descr": "Returns a string representing the language version of the browser.", 
        "name": "navigatorLanguage.language", 
        "params": [], 
        "path": "dom/navigatorlanguage.language", 
        "syntax": "lang = window.navigator.language  Parameters lang string representing the language version as defined in RFC 4646. Examples of valid language codes include \"en\", \"en-US\", \"fr\", \"es-ES\", etc. Example if ( window.navigator.language\u00a0!= \"en\" ) {        doLangSelect(window.navigator.language);\n or  });", 
        "type": "Navigator"
    }, 
    "navigatorOnLine.onLine": {
        "descr": "Returns the online status of the browser. The property returns a boolean value, with true for being online and false for being offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.", 
        "name": "navigatorOnLine.onLine", 
        "params": [], 
        "path": "dom/navigatoronline.online", 
        "syntax": "online = window.navigator.onLine; online is a boolean true or false. Example View  a live example. To check if you are online, query window.navigator.onLine, as in the following example: if (navigator.onLine) {  alert('online');\n or } else {  alert('offline');\n or });", 
        "type": "Navigator"
    }, 
    "navigatorPlugins": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "navigatorPlugins", 
        "params": [
            {
                "descr": "Returns a Boolean flag indicating whether the host browser is Java-enabled or not.", 
                "name": "NavigatorPlugins.javaEnabled Read only"
            }, 
            {
                "descr": "Returns an MimeTypeArray listing the MIME types supported by the browser.", 
                "name": "NavigatorPlugins.mimeTypes Read only"
            }, 
            {
                "descr": "Returns a PluginArray listing the plugins installed in the browser.", 
                "name": "NavigatorPlugins.plugins Read only"
            }
        ], 
        "path": "dom/navigatorplugins", 
        "syntax": "NavigatorPlugins interface contains methods and properties related to the plugins installed in the browser. There is no object of type NavigatorPlugins, but other interfaces, like Navigator, implement it. Properties The NavigatorPlugins interface doesn't inherit any property.  NavigatorPlugins.javaEnabled Read only   Returns a Boolean flag indicating whether the host browser is Java-enabled or not.  NavigatorPlugins.mimeTypes Read only   Returns an MimeTypeArray listing the MIME types supported by the browser.  NavigatorPlugins.plugins Read only   Returns a PluginArray listing the plugins installed in the browser. Methods The NavigatorPlugins interface neither implements, nor inherit any method. Specifications Specification Status Comment WHATWG HTML Living Standard Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support (Yes) (Yes) (Yes) (Yes) (Yes)   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)  See also", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.javaEnabled": {
        "descr": "This method indicates whether the current browser is Java-enabled or not.", 
        "name": "navigatorPlugins.javaEnabled", 
        "params": [], 
        "path": "dom/navigatorplugins.javaenabled", 
        "syntax": "result = window.navigator.javaEnabled()", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.mimeTypes": {
        "descr": "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.", 
        "name": "navigatorPlugins.mimeTypes", 
        "params": [], 
        "path": "dom/navigatorplugins.mimetypes", 
        "syntax": "mimeTypes = navigator.mimeTypes;  mimeTypes is a MimeTypeArray object which has a length property as well as item(index)", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.plugins": {
        "descr": "Returns a PluginArray object, listing the plugins installed in the application.", 
        "name": "navigatorPlugins.plugins", 
        "params": [], 
        "path": "dom/navigatorplugins.plugins", 
        "syntax": "plugins = navigator.plugins; plugins is used to access Plugin objects either by name or as an array of items. The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index)", 
        "type": "Navigator"
    }, 
    "new": {
        "descr": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.", 
        "name": "new", 
        "params": [
            {
                "descr": "A function that specifies the type of the object instance.", 
                "name": "constructor"
            }, 
            {
                "descr": "A list of values that the constructor will be called with.", 
                "name": "arguments"
            }
        ], 
        "path": "javascript/operators/new", 
        "syntax": "new constructor[([arguments])]", 
        "type": "Operators"
    }, 
    "next": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .next() method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "next", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/next", 
        "syntax": ".next( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "nextAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .nextAll() method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "nextAll", 
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/nextall", 
        "syntax": ".nextAll( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "nextUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .nextUntil() method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the .nextUntil() argument.", 
        "name": "nextUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching following sibling elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element  A DOM node or jQuery object indicating where to stop matching following sibling elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/nextuntil", 
        "syntax": ".nextUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "not": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .not() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.", 
        "name": "not", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Elements  One or more DOM elements to remove from the matched set.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: Function() A function used as a test for each element in the set. ", 
                "name": "function(index)"
            }, 
            {
                "descr": "Type: PlainObject  An existing jQuery object to match the current set of elements against.", 
                "name": "jQuery object"
            }
        ], 
        "path": "jquery/not", 
        "syntax": ".not( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
        "name": "Date.now", 
        "params": [], 
        "path": "javascript/global_objects/date/now", 
        "syntax": "var timeInMs = Date.now();", 
        "type": "Date"
    }, 
    "null": {
        "descr": "The value null, the only value of the Null Type.", 
        "name": "null", 
        "params": [], 
        "path": "javascript/global_objects/null", 
        "syntax": "null  Description null is a literal (not a property of the global object like undefined can be).", 
        "type": "Global Objects"
    }, 
    "of": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Array.of", 
        "params": [
            {
                "descr": "Elements of which to create the array.", 
                "name": "element0, element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/of", 
        "syntax": "Array.of()", 
        "type": "Array"
    }, 
    "off": {
        "descr": "The .off() method removes event handlers that were attached with .on(). See the discussion of delegated and directly bound events on that page for more information. Calling .off() with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.", 
        "name": "off", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Function() A handler function previously attached for the event(s), or the special value false.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/off", 
        "syntax": ".off( events [, selector ] [, handler(eventObject) ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "offset": {
        "descr": "The .offset() method allows us to retrieve the current position of an element relative to the document. Contrast this with .position(), which retrieves the current position relative to the offset parent. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), .offset() is more useful.", 
        "name": "offset", 
        "params": [
            {
                "descr": "Type: PlainObject  An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.", 
                "name": "coordinates"
            }, 
            {
                "descr": "Type: Function() A function to return the coordinates to set. ", 
                "name": "function(index, coords)"
            }
        ], 
        "path": "jquery/offset", 
        "syntax": ".offset() Returns: Object", 
        "type": "Offset"
    }, 
    "offsetParent": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .offsetParent() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of relative, absolute, or fixed. This information is useful for calculating offsets for performing animations and placing objects on the page.", 
        "name": "offsetParent", 
        "params": [], 
        "path": "jquery/offsetparent", 
        "syntax": ".offsetParent() Returns: jQuery", 
        "type": "Offset"
    }, 
    "on": {
        "descr": "The .on() method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the .on() method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see .bind(), .delegate(), and .live(). To remove events bound with .on(), see .off(). To attach an event that runs only once and then removes itself, see .one()", 
        "name": "on", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A function to execute when the event is triggered. ", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.", 
                "name": "data"
            }
        ], 
        "path": "jquery/on", 
        "syntax": ".on( events [, selector ] [, data ], handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "onafterprint": {
        "descr": "The onafterprint property sets and returns the onafterprint event handler code for the current window.", 
        "name": "window.onafterprint", 
        "params": [], 
        "path": "dom/window.onafterprint", 
        "syntax": "window.onafterprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "window"
    }, 
    "onbeforeprint": {
        "descr": "The onbeforeprint property sets and returns the onbeforeprint event handler code for the current window.", 
        "name": "window.onbeforeprint", 
        "params": [], 
        "path": "dom/window.onbeforeprint", 
        "syntax": "window.onbeforeprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "window"
    }, 
    "onbeforeunload": {
        "descr": "An event that fires when a window is about to <a href=\"window.onunload\" title=\"The unload event is raised when the window is unloading its content and resources. The resources removal is processed      \u00a0after  the unload event occurs.\">unload its resources. The document is still visible and the event is still cancelable.", 
        "name": "window.onbeforeunload", 
        "params": [], 
        "path": "dom/window.onbeforeunload", 
        "syntax": "window.onbeforeunload = funcRef funcRef is a reference to a function or a function expression. The function should assign a string value to the returnValue property of the Event object and return the same string. Note that in Firefox 4 and later the returned string is not displayed to the user. See bug 588292. Example window.onbeforeunload = function(e) {  return 'Dialog text here.';};", 
        "type": "window"
    }, 
    "onblur": {
        "descr": "The onblur property can be used to set the blur handler on the window, which is triggered when the window loses focus.", 
        "name": "window.onblur", 
        "params": [], 
        "path": "dom/window.onblur", 
        "syntax": "window.onblur = funcRef; funcRef is a reference to the function to be executed. Example <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onblur test</title><script>window.onblur = blurText;function blurText() {  alert(\"blur event detected!\");\n or   // remove the event to stop an infinite loop!  window.onblur = '';}</script></head><body><p>click on another windowto fire the blur event for this browser window</p></body></html>);", 
        "type": "window"
    }, 
    "onclick": {
        "descr": "Called when the user clicks the mouse button while the cursor is in the window. This event is fired for any mouse button pressed; you can look at the event properties to find out which button was pressed and where.", 
        "name": "window.onclick", 
        "params": [], 
        "path": "dom/window.onclick", 
        "syntax": "window.onclick =funcRef; Parameters funcRef is a reference to a function. Example window.onclick = doPopup; <html><head><title>onclick test</title><script type=\"text/javascript\">window.onclick = clickPage;function clickPage(){ alert(\"click event detected!\");\n or }</script></head><body><p>click and release the LH mouse button on this page.</p></body></html>);", 
        "type": "window"
    }, 
    "ondevicelight": {
        "descr": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.", 
        "name": "window.ondevicelight", 
        "params": [], 
        "path": "dom/window.ondevicelight", 
        "syntax": "window.ondevicelight = funcRef Where funcRef is a function to be called when the devicelight event occurs. These events are of type DeviceLightEvent. Specifications Specification Status Comment Ambient Light Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 22.0 (22.0) (Mac OS X only) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  Gecko-specific notes The devicelight", 
        "type": "window"
    }, 
    "ondevicemotion": {
        "descr": "An event handler for the devicemotion events sent to the window.", 
        "name": "window.ondevicemotion", 
        "params": [], 
        "path": "dom/window.ondevicemotion", 
        "syntax": "window.ondevicemotion = funcRef; Where funcRef is a reference to a function. This function receives a DeviceMotionEvent object describing the motion that occurred. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "window"
    }, 
    "ondeviceorientation": {
        "descr": "An event handler for the deviceorientation events sent to the window.", 
        "name": "window.ondeviceorientation", 
        "params": [], 
        "path": "dom/window.ondeviceorientation", 
        "syntax": "window.ondeviceorientation = funcRef; Where funcRef is a reference to a function. The function receives a DeviceOrientationEvent object describing the device orientation change that occurred. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "window"
    }, 
    "ondeviceproximity": {
        "descr": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.", 
        "name": "window.ondeviceproximity", 
        "params": [], 
        "path": "dom/window.ondeviceproximity", 
        "syntax": "window.onuserproximity = funcRef Where funcRef is a function to be called when the deviceproximity event occurs. These events are of type DeviceProximityEvent. Specifications Specification Status Comment Proximity Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported (Yes) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  See also", 
        "type": "window"
    }, 
    "one": {
        "descr": "The first form of this method is identical to .bind(), except that the handler is unbound after its first invocation. The second two forms, introduced in jQuery 1.7, are identical to .on() except that the handler is removed after the first time the event occurs at the delegated element, whether the selector matched anything or not. For example:", 
        "name": "one", 
        "params": [
            {
                "descr": "Type: String  A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function() A function to execute when the event is triggered. ", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.", 
                "name": "data"
            }
        ], 
        "path": "jquery/one", 
        "syntax": ".one( events [, data ], handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "onhashchange": {
        "descr": "The hashchange event fires when a window's hash changes (see location.hash).", 
        "name": "window.onhashchange", 
        "params": [
            {
                "descr": "A reference to a function.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/window.onhashchange", 
        "syntax": "window.onhashchange = funcRef; or <body onhashchange=\"funcRef();\n or \">);", 
        "type": "window"
    }, 
    "onkeydown": {
        "descr": "An event handler for the keydown event on the window.", 
        "name": "window.onkeydown", 
        "params": [], 
        "path": "dom/window.onkeydown", 
        "syntax": "window.onkeydown = funcRef; funcRef is a reference to a function. Example window.onkeydown = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onkeydown test</title><script>window.onkeydown = keydown;function keydown() {  alert(\"keydown event detected!\");\n or }</script></head><body><p>press and hold down any key to fire the keydown event.</p></body></html>);", 
        "type": "window"
    }, 
    "onkeypress": {
        "descr": "An event handler for the keypress event on the window.", 
        "name": "window.onkeypress", 
        "params": [], 
        "path": "dom/window.onkeypress", 
        "syntax": "window.onkeypress = funcRef; funcRef is a reference to a function. Example window.onkeypress = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onkeypress test</title><script>window.onkeypress = keypress;function keypress() { alert(\"keypress event detected!\");\n or }</script></head><body><p>press and release any key to fire the keypress event.</p></body></html>);", 
        "type": "window"
    }, 
    "onkeyup": {
        "descr": "An event handler for the keyup event on the window.", 
        "name": "window.onkeyup", 
        "params": [], 
        "path": "dom/window.onkeyup", 
        "syntax": "window.onkeyup =funcRef; Parameters funcRef is a reference to a function. Example window.onkeyup = doFunc; <html><head><title>onkeyup test</title><script type=\"text/javascript\">window.onkeyup = keyup;function keyup(){ alert(\"keyup event detected!\");\n or }</script></head><body><p>press and hold any key, then release it to fire the keyup event.</p></body></html>);", 
        "type": "window"
    }, 
    "onmousedown": {
        "descr": "An event handler for the mousedown event on the window.", 
        "name": "window.onmousedown", 
        "params": [], 
        "path": "dom/window.onmousedown", 
        "syntax": "window.onmousedown = funcRef; Parameters funcRef is a reference to a function. Example window.onmousedown = doFunc; <html><head><title>onmousedown test</title><script type=\"text/javascript\">window.onmousedown = mousedown;function mousedown(){ alert(\"mousedown event detected!\");\n or }</script></head><body><p>click and hold down the LH mouse button<br /> on the page to fire the mousedown event.</p></body></html>);", 
        "type": "window"
    }, 
    "onmousemove": {
        "descr": "An event handler for the mousemove event on the window.", 
        "name": "window.onmousemove", 
        "params": [], 
        "path": "dom/window.onmousemove", 
        "syntax": "window.onmousemove =funcRef; Parameters funcRef is a reference to a function. Example window.onmousemove = doFunc; <html><head><title>onmousemove test</title><script type=\"text/javascript\">window.onmousemove = mousemoved;function mousemoved(){ alert(\"mousemove event detected!\");\n or }</script></head><body><p>move the mouse pointer anywhere on the page<br />to fire the mousemove event.</p></body></html>);", 
        "type": "window"
    }, 
    "onmouseout": {
        "descr": "An event handler for the mouseout event on the window", 
        "name": "window.onmouseout", 
        "params": [], 
        "path": "dom/window.onmouseout", 
        "syntax": "window Syntax window.onmouseout = funcRef; funcRef is a reference to a function. Example window.onmouseout = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onmouseout test</title><style>body { border: 1px solid blue; }.my_box { border: 1px solid red; }p { border: 1px solid green; }</style><script>window.onmouseout = mouseout;function mouseout() { alert(\"mouseout event detected!\");\n or }</script></head><body><div class=\"my_box\"><p>move the mouse pointer away from the element it is on<br />to fire the mouseout event.</p></div></body></html>);", 
        "type": "window"
    }, 
    "onmouseover": {
        "descr": "An event handler for the mouseover event on the window.", 
        "name": "window.onmouseover", 
        "params": [], 
        "path": "dom/window.onmouseover", 
        "syntax": "window.onmouseover =funcRef; Parameters funcRef is a reference to a function. Example window.onmouseover = doFunc; <html><head><title>onmouseover test</title><style type=\"text/css\">.my_box { border: 1px solid red; }</style><script type=\"text/javascript\">window.onmouseover = mouseover;function mouseover(){ alert(\"mouseover event detected!\");\n or }</script></head><body><div class=\"my_box\"><p>move the mouse pointer to this div element,<br />or onto the status bar and back into the main window< br />to fire the mouseover event.</p></div></body></html>);", 
        "type": "window"
    }, 
    "onmouseup": {
        "descr": "An event handler for the mouseup event on the window.", 
        "name": "window.onmouseup", 
        "params": [], 
        "path": "dom/window.onmouseup", 
        "syntax": "window.onmouseup = funcRef; funcRef is a reference to a function. Example window.onmouseup = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onmouseup test</title><script>window.onmouseup = mouseup;function mouseup() {  alert(\"mouseup event detected!\");\n or }</script></head><body><p>click on the page with the LH mouse button, and hold down for a fewseconds, then release the button. The mouseup event fires when yourelease the mouse button.</p></body></html>);", 
        "type": "window"
    }, 
    "onpopstate": {
        "descr": "An event handler for the popstate event on the window.", 
        "name": "window.onpopstate", 
        "params": [], 
        "path": "dom/window.onpopstate", 
        "syntax": "window.onpopstate = funcRef; funcRef is a handler function. The popstate event As an example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) {  alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or };history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\"history.back();\n or  // alerts \"location: http://example.com/example.html, state: nullhistory.go(2);\n or   // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});", 
        "type": "window"
    }, 
    "onreset": {
        "descr": "An event handler for the reset event on the window.", 
        "name": "window.onreset", 
        "params": [], 
        "path": "dom/window.onreset", 
        "syntax": "window.onreset = funcRef; Parameters funcRef is a reference to a function. Example <html><script>function reg() {  window.captureEvents(Event.RESET);\n or   window.onreset = hit;} function hit() { alert('hit');\n or }</script><body onload=\"reg();\n or \"> <form>   <input type=\"reset\" value=\"reset\" /> </form> <div id=\"d\">\u00a0</div></body></html>);", 
        "type": "window"
    }, 
    "onresize": {
        "descr": "An event handler for the resize event on the window.", 
        "name": "window.onresize", 
        "params": [], 
        "path": "dom/window.onresize", 
        "syntax": "window.onresize = funcRef; Parameters funcRef is a reference to a function. Example window.onresize = doFunc; <html><head><title>onresize test</title><script type=\"text/javascript\">window.onresize = resize;function resize(){ alert(\"resize event detected!\");\n or }</script></head><body><p>Resize the browser window to fire the resize event.</p></body></html>);", 
        "type": "window"
    }, 
    "onscroll": {
        "descr": "Specifies the function to be called when the window is scrolled.", 
        "name": "window.onscroll", 
        "params": [], 
        "path": "dom/window.onscroll", 
        "syntax": "window.onscroll = funcRef; funcRef is a reference to a function. Examples Example 1: Generic window.onscroll = function (oEvent) {  // called when the window is scrolled.}", 
        "type": "window"
    }, 
    "onunload": {
        "descr": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed  after the unload event occurs.", 
        "name": "window.onunload", 
        "params": [], 
        "path": "dom/window.onunload", 
        "syntax": "window.onunload = funcRef; funcRef is a reference to a function. Notes Using this event handler in your page prevents Firefox 1.5 from caching the page in the in-memory bfcache. See Using Firefox 1.5 caching for details. Browsers equipped with pop-up window blockers will ignore all window.open()", 
        "type": "window"
    }, 
    "onuserproximity": {
        "descr": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.", 
        "name": "window.onuserproximity", 
        "params": [], 
        "path": "dom/window.onuserproximity", 
        "syntax": "window.onuserproximity = eventHandler Specifications Specification Status Comment Proximity Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported (Yes) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  See also", 
        "type": "window"
    }, 
    "open": {
        "descr": "{{ APIRef }}", 
        "name": "window.open", 
        "params": [
            {
                "descr": "A reference to the newly created window. ", 
                "name": "windowObjectReference"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window. ", 
                "name": "strUrl"
            }, 
            {
                "descr": "A string name for the new window. ", 
                "name": "strWindowName"
            }, 
            {
                "descr": "Optional parameter listing the features (size, position, scrollbars, etc.) of the new window. ", 
                "name": "strWindowFeatures"
            }, 
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenX"
            }, 
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenY"
            }, 
            {
                "descr": "Centers the window in relation to its parent's size and position. ", 
                "name": "centerscreen"
            }, 
            {
                "descr": "Specifies the height of the whole browser window in pixels. ", 
                "name": "outerHeight"
            }, 
            {
                "descr": "Specifies the width of the whole browser window in pixels. ", 
                "name": "outerWidth"
            }, 
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerHeight"
            }, 
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerWidth"
            }, 
            {
                "descr": "example \"status=yes\", \"status=1\" and \"status\" have identical results", 
                "name": "NOTE: All features can be set to yes, 1 or just be present to be \"on\", set to no or 0 or in most cases just not present to be \"off\""
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.", 
                "name": "menubar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ", 
                "name": "toolbar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ", 
                "name": "location"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ", 
                "name": "personalbar"
            }, 
            {
                "descr": "Obsolete synonym of personalbar. ", 
                "name": "directories Obsolete since Gecko 2"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ", 
                "name": "status"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will be resizable.", 
                "name": "resizable"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ", 
                "name": "scrollbars"
            }, 
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ", 
                "name": "dependent"
            }, 
            {
                "descr": "The dialog feature removes all icons (restore, minimize, maximize) from the window's titlebar, leaving only the close button. ", 
                "name": "dialog"
            }, 
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ", 
                "name": "minimizable"
            }, 
            {
                "descr": "Do not use. Not implemented in Mozilla. ", 
                "name": "fullscreen"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ", 
                "name": "chrome"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ", 
                "name": "modal"
            }, 
            {
                "descr": "By default, all new secondary windows have a titlebar. ", 
                "name": "titlebar"
            }, 
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.", 
                "name": "alwaysRaised"
            }, 
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ", 
                "name": "alwaysLowered"
            }, 
            {
                "descr": "Same as alwaysLowered.", 
                "name": "z-lock"
            }, 
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ", 
                "name": "close"
            }, 
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ", 
                "name": "How can I prevent the confirmation message asking the user whether he wants to close the window?"
            }, 
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ", 
                "name": "How can I bring back the window if it is minimized or behind another window?"
            }, 
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.", 
                "name": "How do I force a maximized window?"
            }, 
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ", 
                "name": "How do I turn off window resizability or remove toolbars?"
            }, 
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.", 
                "name": "How do I resize a window to fit its content?"
            }, 
            {
                "descr": "Currently, you can not. Only the user can set his advanced preferences to do that. ", 
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            }, 
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.", 
                "name": "How do I know whether a window I opened is still open?"
            }, 
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ", 
                "name": "How can I tell when my window was blocked by a popup blocker?"
            }, 
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.", 
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            }, 
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ", 
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Opener window, parent window, main window, first window"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Sub-window, child window, secondary window, second window"
            }, 
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.", 
                "name": "Unrequested popup windows"
            }
        ], 
        "path": "dom/window.open", 
        "syntax": "var windowObjectReference = window.open(strUrl, strWindowName[, strWindowFeatures]);", 
        "type": "window"
    }, 
    "openDialog": {
        "descr": "window.openDialog is an extension to window.open. It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.", 
        "name": "window.openDialog", 
        "params": [
            {
                "descr": "The opened window", 
                "name": "newWindow"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window.", 
                "name": "url"
            }, 
            {
                "descr": "The window name (optional). See window.open description for detailed information.", 
                "name": "name"
            }, 
            {
                "descr": "See window.open description for description.", 
                "name": "features"
            }, 
            {
                "descr": "The arguments to be passed to the new window (optional).", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "dom/window.opendialog", 
        "syntax": "newWindow = openDialog(url, name, features, arg1, arg2, ...)", 
        "type": "window"
    }, 
    "opener": {
        "descr": "Returns a reference to the window that opened this current window.", 
        "name": "window.opener", 
        "params": [], 
        "path": "dom/window.opener", 
        "syntax": "objRef = window.opener; Example if (window.opener != indexWin) {  referToTop(window.opener);\n or });", 
        "type": "window"
    }, 
    "outerHeight": {
        "descr": "window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerHeight", 
        "params": [], 
        "path": "dom/window.outerheight", 
        "syntax": "outWindowHeight = window.outerHeight; On return, outWindowHeight contains the height of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "outerWidth": {
        "descr": "window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerWidth", 
        "params": [], 
        "path": "dom/window.outerwidth", 
        "syntax": "outWindowWidth = window.outerWidth; On return, outWindowWidth is the width of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "parent": {
        "descr": "A reference to the parent of the current window or subframe.", 
        "name": "window.parent", 
        "params": [], 
        "path": "dom/window.parent", 
        "syntax": "parentWindow = window.parent;  Example if (window.parent\u00a0!= window.top) {  // we're deeper than one down}", 
        "type": "window"
    }, 
    "parents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .parents() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. When multiple DOM elements are in the original set, the resulting set will be in reverse order of the original elements as well, with duplicates removed.", 
        "name": "parents", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/parents", 
        "syntax": ".parents( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "parentsUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .parentsUntil() method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the .parentsUntil() selector.", 
        "name": "parentsUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching ancestor elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element  A DOM node or jQuery object indicating where to stop matching ancestor elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/parentsuntil", 
        "syntax": ".parentsUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.", 
        "name": "Date.parse", 
        "params": [
            {
                "descr": "A string representing an RFC2822 or ISO 8601 date.", 
                "name": "dateString"
            }
        ], 
        "path": "javascript/global_objects/date/parse", 
        "syntax": "Date.parse(dateString)", 
        "type": "Date"
    }, 
    "parseFloat": {
        "descr": "The parseFloat() function parses a string argument and returns a floating point number.", 
        "name": "parseFloat", 
        "params": [
            {
                "descr": "A string that represents the value you want to parse.", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/parsefloat", 
        "syntax": "parseFloat(string)", 
        "type": "Global Objects"
    }, 
    "parseInt": {
        "descr": "The parseInt() function parses a string argument and returns an integer of the specified radix or base.", 
        "name": "parseInt", 
        "params": [
            {
                "descr": "The value to parse. If string is not a string, then it is converted to one. ", 
                "name": "string"
            }, 
            {
                "descr": "An integer that represents the radix of the above mentioned string. ", 
                "name": "radix"
            }
        ], 
        "path": "javascript/global_objects/parseint", 
        "syntax": "parseInt(string, radix);", 
        "type": "Global Objects"
    }, 
    "pop": {
        "descr": "The pop() method removes the last element from an array and returns that element.", 
        "name": "Array.pop", 
        "params": [], 
        "path": "javascript/global_objects/array/pop", 
        "syntax": "arr.pop()", 
        "type": "Array"
    }, 
    "position": {
        "descr": "The .position() method allows us to retrieve the current position of an element relative to the offset parent. Contrast this with .offset(), which retrieves the current position relative to the document. When positioning a new element near another one and within the same containing DOM element, .position() is the more useful.", 
        "name": "position", 
        "params": [], 
        "path": "jquery/position", 
        "syntax": ".position() Returns: Object", 
        "type": "Offset"
    }, 
    "postMessage": {
        "descr": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.", 
        "name": "window.postMessage", 
        "params": [
            {
                "descr": "A reference to another window; such a reference may be obtained, for example, using the contentWindow property of an iframe element, the object returned by window.open, or by named or numeric index on window.frames.", 
                "name": "otherWindow"
            }, 
            {
                "descr": "Data to be sent to the other window.", 
                "name": "message"
            }, 
            {
                "descr": "Specifies what the origin of otherWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ", 
                "name": "targetOrigin"
            }, 
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ", 
                "name": "transfer Optional"
            }, 
            {
                "descr": "The object passed from the other window.", 
                "name": "data"
            }, 
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ", 
                "name": "origin"
            }, 
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.", 
                "name": "source"
            }
        ], 
        "path": "dom/window.postmessage", 
        "syntax": "otherWindow.postMessage(message, targetOrigin, [transfer]);", 
        "type": "window"
    }, 
    "prepend": {
        "descr": "The .prepend() method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the last child, use .append()).", 
        "name": "prepend", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Array or jQuery  One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function() A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. ", 
                "name": "function(index, html)"
            }
        ], 
        "path": "jquery/prepend", 
        "syntax": ".prepend( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "prependTo": {
        "descr": "The .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.", 
        "name": "prependTo", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/prependto", 
        "syntax": ".prependTo( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "prev": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prev() method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.", 
        "name": "prev", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/prev", 
        "syntax": ".prev( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "prevAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prevAll() method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.", 
        "name": "prevAll", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/prevall", 
        "syntax": ".prevAll( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "prevUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .prevUntil() method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the .prevUntil() selector; the elements are returned in order from the closest sibling to the farthest.", 
        "name": "prevUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching preceding sibling elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element  A DOM node or jQuery object indicating where to stop matching preceding sibling elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/prevuntil", 
        "syntax": ".prevUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).", 
        "name": "Object.preventExtensions", 
        "params": [
            {
                "descr": "The object which should be made non-extensible.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/preventextensions", 
        "syntax": "Object.preventExtensions(obj)", 
        "type": "Object"
    }, 
    "print": {
        "descr": "Opens the Print Dialog to print the current document.", 
        "name": "window.print", 
        "params": [], 
        "path": "dom/window.print", 
        "syntax": "window.print()", 
        "type": "window"
    }, 
    "promise": {
        "descr": "The .promise() method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.", 
        "name": "promise", 
        "params": [
            {
                "descr": "(default: fx) Type: String   The type of queue that needs to be observed.", 
                "name": "type"
            }, 
            {
                "descr": "Type: PlainObject  Object onto which the promise methods have to be attached", 
                "name": "target"
            }
        ], 
        "path": "jquery/promise", 
        "syntax": ".promise( [type ] [, target ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.", 
        "name": "window.prompt", 
        "params": [], 
        "path": "dom/window.prompt", 
        "syntax": "result = window.prompt(text, value);", 
        "type": "window"
    }, 
    "prop": {
        "descr": "The .prop() method gets the property value for only the first element in the matched set. It returns undefined for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.", 
        "name": "prop", 
        "params": [
            {
                "descr": "Type: String  The name of the property to get.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: String  The name of the property to set.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: String or Number or Boolean  A value to set for the property.", 
                "name": "value"
            }, 
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.", 
                "name": "properties"
            }, 
            {
                "descr": "Type: String  The name of the property to set.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Function() A function returning the value to set. ", 
                "name": "function(index, oldPropertyValue)"
            }
        ], 
        "path": "jquery/prop", 
        "syntax": ".prop( propertyName ) Returns: String or Boolean", 
        "type": "Manipulation"
    }, 
    "propertyIsEnumerable": {
        "descr": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.", 
        "name": "Object.propertyIsEnumerable", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/propertyisenumerable", 
        "syntax": "obj.propertyIsEnumerable(prop)", 
        "type": "Object"
    }, 
    "prototype": {
        "descr": "Represents the String prototype object.", 
        "name": "String.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "charAt"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "charCodeAt"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "concat"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "contains"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "endsWith"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "indexOf"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "lastIndexOf"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "localeCompare"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "match"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "quote"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "replace"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "search"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "slice"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "split"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "startsWith"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "substr"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "substring"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "toLocaleLowerCase"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "toLocaleUpperCase"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "toLowerCase"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "toSource"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "toString"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "toUpperCase"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "trim Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "trimLeft Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "trimRight Requires JavaScript 1.8.1"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "valueOf"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "anchor"
            }, 
            {
                "descr": "<big>", 
                "name": "big"
            }, 
            {
                "descr": "<blink>", 
                "name": "blink"
            }, 
            {
                "descr": "<b>", 
                "name": "bold"
            }, 
            {
                "descr": "<tt>", 
                "name": "fixed"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "fontcolor"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "fontsize"
            }, 
            {
                "descr": "<i>", 
                "name": "italics"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "link"
            }, 
            {
                "descr": "<small>.", 
                "name": "small"
            }, 
            {
                "descr": "<strike>", 
                "name": "strike"
            }, 
            {
                "descr": "<sub>", 
                "name": "sub"
            }, 
            {
                "descr": "<sup>", 
                "name": "sup"
            }
        ], 
        "path": "javascript/global_objects/string/prototype", 
        "syntax": "split  Splits a String object into an array of strings by separating the string into substrings.  startsWith  Determines whether a string begins with the characters of another string.  substr  Returns the characters in a string beginning at the specified location through the specified number of characters.  substring  Returns the characters in a string between two indexes into the string.  toLocaleLowerCase  The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase.  toLocaleUpperCase  The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase.  toLowerCase  Returns the calling string value converted to lower case.  toSource   Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.  toString  Returns a string representing the specified object. Overrides the Object.prototype.toString method.  toUpperCase  Returns the calling string value converted to uppercase.  trim Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.  trimLeft Requires JavaScript 1.8.1   Trims whitespace from the left side of the string.  trimRight Requires JavaScript 1.8.1   Trims whitespace from the right side of the string.  valueOf  Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.  HTML wrapper methods   HTML wrapper methods   Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.  Should we change these to point to our own docs rather than W3C? In any case, they're staying as is for now because with the current structure of the HTML pages here at MDC, we cannot reference specific attributes as necessary anyway (e.g., the difference between the anchor method and the link method). Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.", 
        "type": "String"
    }, 
    "push": {
        "descr": "The push() method mutates an array by appending the given elements and returning the new length of the array.", 
        "name": "Array.push", 
        "params": [
            {
                "descr": "The elements to add to the end of the array.", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/push", 
        "syntax": "arr.push(element1, ..., elementN)", 
        "type": "Array"
    }, 
    "pushStack": {
        "descr": "", 
        "name": "pushStack", 
        "params": [
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: String  The name of a jQuery method that generated the array of elements.", 
                "name": "name"
            }, 
            {
                "descr": "Type: Array  The arguments that were passed in to the jQuery method (for serialization).", 
                "name": "arguments"
            }
        ], 
        "path": "jquery/pushstack", 
        "syntax": ".pushStack( elements ) Returns: jQuery", 
        "type": "Miscellaneous"
    }, 
    "queue": {
        "descr": "Every element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called fx) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:", 
        "name": "queue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function() The new function to add to the queue, with a function to call that will dequeue the next item.", 
                "name": "callback( next )"
            }
        ], 
        "path": "jquery/queue", 
        "syntax": ".queue( [queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "ready": {
        "descr": "While JavaScript provides the load event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to .ready() is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code. When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.", 
        "name": "ready", 
        "params": [
            {
                "descr": "Type: Function() A function to execute after the DOM is ready.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ready", 
        "syntax": ".ready( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "reduce": {
        "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.", 
        "name": "Array.reduce", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  previousValue  The value previously returned in the last invocation of the callback, or initialValue, if supplied. ", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduce", 
        "syntax": "array.reduce(callback,[initialValue])", 
        "type": "Array"
    }, 
    "reduceRight": {
        "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
        "name": "Array.reduceRight", 
        "params": [
            {
                "descr": "Function to execute on each value in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduceright", 
        "syntax": "array.reduceRight(callback[, initialValue])", 
        "type": "Array"
    }, 
    "remove": {
        "descr": "Similar to .empty(), the .remove() method takes elements out of the DOM. Use .remove() when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use .detach() instead.", 
        "name": "remove", 
        "params": [
            {
                "descr": "Type: String  A selector expression that filters the set of matched elements to be removed.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/remove", 
        "syntax": ".remove( [selector ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeAttr": {
        "descr": "The .removeAttr() method uses the JavaScript removeAttribute() function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.", 
        "name": "removeAttr", 
        "params": [
            {
                "descr": "Type: String  An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.", 
                "name": "attributeName"
            }
        ], 
        "path": "jquery/removeattr", 
        "syntax": ".removeAttr( attributeName ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeClass": {
        "descr": "If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.", 
        "name": "removeClass", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be removed from the class attribute of each matched element.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Function() A function returning one or more space-separated class names to be removed. ", 
                "name": "function(index, class)"
            }
        ], 
        "path": "jquery/removeclass", 
        "syntax": ".removeClass( [className ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeData": {
        "descr": "The .removeData() method allows us to remove values that were previously set using .data(). When called with the name of a key, .removeData() deletes that particular value; when called with no arguments, all values are removed. Removing data from jQuery's internal .data() cache does not effect any HTML5 data- attributes in a document; use .removeAttr() to remove those.", 
        "name": "removeData", 
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to delete.", 
                "name": "name"
            }, 
            {
                "descr": "Type: Array or String  An array or space-separated string naming the pieces of data to delete.", 
                "name": "list"
            }
        ], 
        "path": "jquery/removedata", 
        "syntax": ".removeData( [name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "removeProp": {
        "descr": "The .removeProp() method removes properties set by the .prop() method.", 
        "name": "removeProp", 
        "params": [
            {
                "descr": "Type: String  The name of the property to remove.", 
                "name": "propertyName"
            }
        ], 
        "path": "jquery/removeprop", 
        "syntax": ".removeProp( propertyName ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "replace": {
        "descr": "Returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.", 
        "name": "String.replace", 
        "params": [
            {
                "descr": "A RegExp object. The match is replaced by the return value of parameter #2.", 
                "name": "regexp"
            }, 
            {
                "descr": "A String that is to be replaced by newSubStr.", 
                "name": "substr"
            }, 
            {
                "descr": "The String that replaces the substring received from parameter #1. ", 
                "name": "newSubStr"
            }, 
            {
                "descr": "A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). ", 
                "name": "function"
            }, 
            {
                "descr": "A string specifying a combination of regular expression flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "global match", 
                "name": "g"
            }, 
            {
                "descr": "ignore case", 
                "name": "i"
            }, 
            {
                "descr": "match over multiple lines", 
                "name": "m"
            }, 
            {
                "descr": "sticky", 
                "name": "y"
            }
        ], 
        "path": "javascript/global_objects/string/replace", 
        "syntax": "newstring = str.replace(regexp|substr, newSubStr|function[,  flags]);", 
        "type": "String"
    }, 
    "replaceAll": {
        "descr": "The .replaceAll() method is corollary to .replaceWith(), but with the source and target reversed. Consider this DOM structure:", 
        "name": "replaceAll", 
        "params": [
            {
                "descr": "Type: Selector or jQuery or Array or Element  A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.", 
                "name": "target"
            }
        ], 
        "path": "jquery/replaceall", 
        "syntax": ".replaceAll( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "replaceWith": {
        "descr": "The .replaceWith() method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:", 
        "name": "replaceWith", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  The content to insert. ", 
                "name": "newContent"
            }, 
            {
                "descr": "Type: Function() A function that returns content with which to replace the set of matched elements.", 
                "name": "function"
            }
        ], 
        "path": "jquery/replacewith", 
        "syntax": ".replaceWith( newContent ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "requestAnimationFrame": {
        "descr": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.", 
        "name": "window.requestAnimationFrame", 
        "params": [
            {
                "descr": "A parameter specifying a function to call when it's time to update your animation for the next repaint. ", 
                "name": "callback"
            }
        ], 
        "path": "dom/window.requestanimationframe", 
        "syntax": "requestID = window.requestAnimationFrame(callback);\n or        // Firefox 23 / IE 10 / Chrome / Safari 7 (incl. iOS)requestID = window.mozRequestAnimationFrame(callback);\n or     // Firefox < 23requestID = window.webkitRequestAnimationFrame(callback);\n or  // Older versions of Safari / Chrome);", 
        "type": "window"
    }, 
    "resize": {
        "descr": "This method is a shortcut for .on('resize', handler) in the first and second variations, and .trigger( \"resize\" ) in the third.", 
        "name": "resize", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/resize", 
        "syntax": ".resize( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "resizeBy": {
        "descr": "Resizes the current window by a certain amount.", 
        "name": "window.resizeBy", 
        "params": [], 
        "path": "dom/window.resizeby", 
        "syntax": "window.resizeBy(xDelta, yDelta)", 
        "type": "window"
    }, 
    "resizeTo": {
        "descr": "Dynamically resizes window.", 
        "name": "window.resizeTo", 
        "params": [], 
        "path": "dom/window.resizeto", 
        "syntax": "window.resizeTo(iWidth, iHeight)", 
        "type": "window"
    }, 
    "return": {
        "descr": "Specifies the value to be returned by a function.", 
        "name": "return", 
        "params": [
            {
                "descr": "The expression to return. If omitted, undefined is returned instead.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/statements/return", 
        "syntax": "return [expression];  Parameters  expression  The expression to return. If omitted, undefined is returned instead. Examples Example: Using return The following function returns the square of its argument, x, where x is a number. function square(x) {   return x * x;}", 
        "type": "Statements"
    }, 
    "reverse": {
        "descr": "The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.", 
        "name": "Array.reverse", 
        "params": [], 
        "path": "javascript/global_objects/array/reverse", 
        "syntax": "arr.reverse()", 
        "type": "Array"
    }, 
    "screen": {
        "descr": "Returns a reference to the screen object associated with the window.", 
        "name": "window.screen", 
        "params": [
            {
                "descr": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.", 
                "name": "screen.availTop"
            }, 
            {
                "descr": "Returns the first available pixel available from the left side of the screen.", 
                "name": "screen.availLeft"
            }, 
            {
                "descr": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.", 
                "name": "screen.availHeight"
            }, 
            {
                "descr": "Returns the amount of horizontal space in pixels available to the window.", 
                "name": "screen.availWidth"
            }, 
            {
                "descr": "Returns the color depth of the screen.", 
                "name": "screen.colorDepth"
            }, 
            {
                "descr": "Returns the height of the screen in pixels.", 
                "name": "screen.height"
            }, 
            {
                "descr": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen.", 
                "name": "screen.left"
            }, 
            {
                "descr": "Returns the current orientation of the screen.", 
                "name": "screen.orientation"
            }, 
            {
                "descr": "Gets the bit depth of the screen.", 
                "name": "screen.pixelDepth"
            }, 
            {
                "descr": "Returns the distance in pixels from the top side of the current screen.", 
                "name": "screen.top"
            }, 
            {
                "descr": "Returns the width of the screen.", 
                "name": "screen.width"
            }, 
            {
                "descr": "Boolean. Setting to false will turn off the device's screen.", 
                "name": "screen.mozEnabled"
            }, 
            {
                "descr": "Controls the brightness of a device's screen. ", 
                "name": "screen.mozBrightness"
            }, 
            {
                "descr": "A handler for the orientationchange events.", 
                "name": "screen.onorientationchange"
            }, 
            {
                "descr": "Lock the screen orientation (only works in fullscreen or for installed apps)", 
                "name": "screen.lockOrientation"
            }, 
            {
                "descr": "Unlock the screen orientation (only works in fullscreen or for installed apps)", 
                "name": "screen.unlockOrientation"
            }, 
            {
                "descr": "Register an event handler of a specific event type on the EventTarget.", 
                "name": "EventTarget.addEventListener ()"
            }, 
            {
                "descr": "Removes an event listener from the EventTarget.", 
                "name": "EventTarget.removeEventListener ()"
            }, 
            {
                "descr": "Dispatch an event to this EventTarget.", 
                "name": "EventTarget.dispatchEvent ()"
            }
        ], 
        "path": "dom/window.screen", 
        "syntax": "screenObj = window.screen; Properties  screen.availTop  Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.  screen.availLeft  Returns the first available pixel available from the left side of the screen.  screen.availHeight  Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.  screen.availWidth  Returns the amount of horizontal space in pixels available to the window.  screen.colorDepth  Returns the color depth of the screen.  screen.height  Returns the height of the screen in pixels.  screen.left  Returns the distance in pixels from the left side of the main screen to the left side of the current screen.  screen.orientation  Returns the current orientation of the screen.  screen.pixelDepth  Gets the bit depth of the screen.  screen.top  Returns the distance in pixels from the top side of the current screen.  screen.width  Returns the width of the screen.  screen.mozEnabled   Boolean. Setting to false will turn off the device's screen.  screen.mozBrightness", 
        "type": "window"
    }, 
    "scroll": {
        "descr": "Scrolls the window to a particular place in the document.", 
        "name": "window.scroll", 
        "params": [], 
        "path": "dom/window.scroll", 
        "syntax": "window.scroll(x-coord,y-coord)", 
        "type": "window"
    }, 
    "scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.", 
        "name": "window.scrollBy", 
        "params": [], 
        "path": "dom/window.scrollby", 
        "syntax": "window.scrollBy(X,Y);", 
        "type": "window"
    }, 
    "scrollByLines": {
        "descr": "Scrolls the document by the given number of lines.", 
        "name": "window.scrollByLines", 
        "params": [], 
        "path": "dom/window.scrollbylines", 
        "syntax": "window.scrollByLines(lines)", 
        "type": "window"
    }, 
    "scrollLeft": {
        "descr": "The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be 0.", 
        "name": "scrollLeft", 
        "params": [
            {
                "descr": "Type: Number  An integer indicating the new position to set the scroll bar to.", 
                "name": "value"
            }
        ], 
        "path": "jquery/scrollleft", 
        "syntax": ".scrollLeft() Returns: Integer", 
        "type": "Offset"
    }, 
    "scrollMaxX": {
        "descr": "Returns the maximum number of pixels that the document can be scrolled horizontally.", 
        "name": "window.scrollMaxX", 
        "params": [], 
        "path": "dom/window.scrollmaxx", 
        "syntax": "xpix = window.scrollMaxX xpix is the number of pixels. Example // Scroll to most right of the pagevar maxX = window.scrollMaxX;window.scrollTo(maxX, 0);", 
        "type": "window"
    }, 
    "scrollMaxY": {
        "descr": "Returns the maximum number of pixels that the document can be scrolled vertically.", 
        "name": "window.scrollMaxY", 
        "params": [], 
        "path": "dom/window.scrollmaxy", 
        "syntax": "ypix = window.scrollMaxY ypix is the number of pixels. Example // Scroll to the bottom of the pagevar maxY = window.scrollMaxY;window.scrollTo(0,maxY);", 
        "type": "window"
    }, 
    "scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.", 
        "name": "window.scrollTo", 
        "params": [], 
        "path": "dom/window.scrollto", 
        "syntax": "window.scrollTo(x-coord,y-coord )", 
        "type": "window"
    }, 
    "scrollTop": {
        "descr": "The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be 0.", 
        "name": "scrollTop", 
        "params": [
            {
                "descr": "Type: Number  An integer indicating the new position to set the scroll bar to.", 
                "name": "value"
            }
        ], 
        "path": "jquery/scrolltop", 
        "syntax": ".scrollTop() Returns: Integer", 
        "type": "Offset"
    }, 
    "scrollX": {
        "descr": "Returns the number of pixels that the document has already been scrolled horizontally.", 
        "name": "window.scrollX", 
        "params": [], 
        "path": "dom/window.scrollx", 
        "syntax": "var x = window.scrollX; Parameters x is the number of pixels that the document is currently scrolled from the left. Example // If scrollX is greater than 400, reset scroll position\u00a0to the top left of the document.if (window.scrollX > 400) {  window.scroll(0,0);\n or });", 
        "type": "window"
    }, 
    "scrollY": {
        "descr": "Returns the number of pixels that the document has already been scrolled vertically.", 
        "name": "window.scrollY", 
        "params": [], 
        "path": "dom/window.scrolly", 
        "syntax": "var y = window.scrollY; y is the number of pixels that the document is currently scrolled from the top. Example // make sure and go down to the second page if (window.scrollY) {  window.scroll(0, 0);\n or   // reset the scroll position to the top left of the document.}window.scrollByPages(1);", 
        "type": "window"
    }, 
    "seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.", 
        "name": "Object.seal", 
        "params": [
            {
                "descr": "The object which should be sealed.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/seal", 
        "syntax": "Object.seal(obj)", 
        "type": "Object"
    }, 
    "search": {
        "descr": "Executes the search for a match between a regular expression and this String object.", 
        "name": "String.search", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/search", 
        "syntax": "string.search(regexp)", 
        "type": "String"
    }, 
    "select": {
        "descr": "This method is a shortcut for .on( \"select\", handler ) in the first two variations, and .trigger( \"select\" ) in the third.", 
        "name": "select", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/select", 
        "syntax": ".select( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "selector": {
        "descr": "The .selector property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a \"foo\" plugin could be written as $.fn.foo = function( selector, options ) { /* plugin code goes here */ };, and the person using the plugin would write $( \"div.bar\" ).foo( \"div.bar\", {dog: \"bark\"} ); with the \"div.bar\" selector repeated as the first argument of .foo().", 
        "name": "selector", 
        "params": [], 
        "path": "jquery/selector", 
        "syntax": "selectorReturns: Stringversion deprecated: 1.7, removed: 1.9   Description: A selector representing selector passed to jQuery(), if any, when creating the original set.", 
        "type": "Miscellaneous"
    }, 
    "self": {
        "descr": "Returns an object reference to the window object.", 
        "name": "window.self", 
        "params": [], 
        "path": "dom/window.self", 
        "syntax": "objRef = window.self  Example  if (window.parent.frames[0]\u00a0!= window.self) {    // this window is not the first frame in the list }", 
        "type": "window"
    }, 
    "serialize": {
        "descr": "The .serialize() method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as <input>, <textarea>, and <select>: $( \"input, textarea, select\" ).serialize();", 
        "name": "serialize", 
        "params": [], 
        "path": "jquery/serialize", 
        "syntax": ".serialize() Returns: String", 
        "type": "Ajax"
    }, 
    "serializeArray": {
        "descr": "The .serializeArray() method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:", 
        "name": "serializeArray", 
        "params": [], 
        "path": "jquery/serializearray", 
        "syntax": ".serializeArray() Returns: Array", 
        "type": "Ajax"
    }, 
    "set": {
        "descr": "Binds an object property to a function to be called when there is an attempt to set that property.", 
        "name": "set", 
        "params": [
            {
                "descr": "the name of the property to bind to the given function", 
                "name": "prop"
            }, 
            {
                "descr": "an alias for the variable that holds the value attempted to be assigned to prop", 
                "name": "val"
            }
        ], 
        "path": "javascript/operators/set", 
        "syntax": "{set prop(val) { . . . }}", 
        "type": "Operators"
    }, 
    "setDate": {
        "descr": "The setDate() method sets the day of the month for a specified date according to local time.", 
        "name": "Date.setDate", 
        "params": [
            {
                "descr": "An integer representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setdate", 
        "syntax": "dateObj.setDate(dayValue)", 
        "type": "Date"
    }, 
    "setFullYear": {
        "descr": "The setFullYear() method sets the full year for a specified date according to local time.", 
        "name": "Date.setFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setfullyear", 
        "syntax": "dateObj.setFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "setHours": {
        "descr": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.", 
        "name": "Date.setHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/sethours", 
        "syntax": "dateObj.setHours(hoursValue[, minutesValue[, secondsValue, msValue]])", 
        "type": "Date"
    }, 
    "setImmediate": {
        "descr": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.", 
        "name": "window.setImmediate", 
        "params": [], 
        "path": "dom/window.setimmediate", 
        "syntax": "var immediateID = setImmediate(func, [param1, param2, ...]);\n or var immediateID = setImmediate(func);", 
        "type": "window"
    }, 
    "setInterval": {
        "descr": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function.", 
        "name": "window.setInterval", 
        "params": [
            {
                "descr": "The this object on which will be called the callback function. ", 
                "name": "thisObject"
            }, 
            {
                "descr": "The function which will be invoked repeatedly. ", 
                "name": "callback"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation. ", 
                "name": "rate (optional)"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "length (optional)"
            }, 
            {
                "descr": "The this object on which is executed the daemon (read/write). ", 
                "name": "myDaemon.owner"
            }, 
            {
                "descr": "The function which will be repeatedly invoked (read/write). ", 
                "name": "myDaemon.task"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation (read/write).", 
                "name": "myDaemon.rate"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "myDaemon.length"
            }, 
            {
                "descr": "Returns a boolean expressing whether the daemon is at the start/end position or not.", 
                "name": "myDaemon.isAtEnd()"
            }, 
            {
                "descr": "Synchronize the timer of a started daemon with the time of its invocation.", 
                "name": "myDaemon.synchronize()"
            }, 
            {
                "descr": "Pauses the daemon.", 
                "name": "myDaemon.pause()"
            }, 
            {
                "descr": "Starts the daemon forward (index of each invocation increasing) or backwards (index decreasing).", 
                "name": "myDaemon.start([reverse])"
            }, 
            {
                "descr": "Forces a single callback to the minidaemon.task function regardless of the fact that the end has been reached or not. ", 
                "name": "MiniDaemon.forceCall(minidaemon)"
            }
        ], 
        "path": "dom/window.setinterval", 
        "syntax": "var intervalID = window.setInterval(func, delay[, param1, param2, ...]);\n or var intervalID = window.setInterval(code, delay);", 
        "type": "window"
    }, 
    "setMilliseconds": {
        "descr": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.", 
        "name": "Date.setMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmilliseconds", 
        "syntax": "dateObj.setMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "setMinutes": {
        "descr": "The setMinutes() method sets the minutes for a specified date according to local time.", 
        "name": "Date.setMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setminutes", 
        "syntax": "dateObj.setMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "setMonth": {
        "descr": "The setMonth() method sets the month for a specified date according to local time.", 
        "name": "Date.setMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11 (representing the months January through December).", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmonth", 
        "syntax": "dateObj.setMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "setPrototypeOf": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "Object.setPrototypeOf", 
        "params": [
            {
                "descr": "The object which is to have its prototype set.", 
                "name": "obj"
            }, 
            {
                "descr": "The object's new prototype (an object or null).", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/object/setprototypeof", 
        "syntax": "Object.setPrototype()", 
        "type": "Object"
    }, 
    "setSeconds": {
        "descr": "The setSeconds() method sets the seconds for a specified date according to local time.", 
        "name": "Date.setSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setseconds", 
        "syntax": "dateObj.setSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "setTime": {
        "descr": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.", 
        "name": "Date.setTime", 
        "params": [
            {
                "descr": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.", 
                "name": "timeValue"
            }
        ], 
        "path": "javascript/global_objects/date/settime", 
        "syntax": "dateObj.setTime(timeValue)", 
        "type": "Date"
    }, 
    "setTimeout": {
        "descr": "Calls a function or executes a code snippet after a specified delay.", 
        "name": "window.setTimeout", 
        "params": [], 
        "path": "dom/window.settimeout", 
        "syntax": "var timeoutID = window.setTimeout(func, delay, [param1, param2, ...]);\n or var timeoutID = window.setTimeout(code, delay);", 
        "type": "window"
    }, 
    "setUTCDate": {
        "descr": "The setUTCDate() method sets the day of the month for a specified date according to universal time.", 
        "name": "Date.setUTCDate", 
        "params": [
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcdate", 
        "syntax": "dateObj.setUTCDate(dayValue)", 
        "type": "Date"
    }, 
    "setUTCFullYear": {
        "descr": "The setUTCFullYear() method sets the full year for a specified date according to universal time.", 
        "name": "Date.setUTCFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcfullyear", 
        "syntax": "dateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "setUTCHours": {
        "descr": "The setUTCHours() method sets the hour for a specified date according to universal time.", 
        "name": "Date.setUTCHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutchours", 
        "syntax": "dateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])", 
        "type": "Date"
    }, 
    "setUTCMilliseconds": {
        "descr": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.", 
        "name": "Date.setUTCMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmilliseconds", 
        "syntax": "dateObj.setUTCMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "setUTCMinutes": {
        "descr": "The setUTCMinutes() method sets the minutes for a specified date according to universal time.", 
        "name": "Date.setUTCMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcminutes", 
        "syntax": "dateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "setUTCMonth": {
        "descr": "The setUTCMonth() method sets the month for a specified date according to universal time.", 
        "name": "Date.setUTCMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmonth", 
        "syntax": "dateObj.setUTCMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "setUTCSeconds": {
        "descr": "The setUTCSeconds() method sets the seconds for a specified date according to universal time.", 
        "name": "Date.setUTCSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcseconds", 
        "syntax": "dateObj.setUTCSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "shift": {
        "descr": "The shift() method removes the first element from an array and returns that element. This method changes the length of the array.", 
        "name": "Array.shift", 
        "params": [], 
        "path": "javascript/global_objects/array/shift", 
        "syntax": "arr.shift()", 
        "type": "Array"
    }, 
    "show": {
        "descr": "With no parameters, the .show() method is the simplest way to display an element:", 
        "name": "show", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/show", 
        "syntax": ".show() Returns: jQuery", 
        "type": "Effects"
    }, 
    "showModalDialog": {
        "descr": "Creates and displays a modal dialog box containing a specified HTML document.", 
        "name": "window.showModalDialog", 
        "params": [], 
        "path": "dom/window.showmodaldialog", 
        "syntax": "returnVal = window.showModalDialog(uri[, arguments][, options]);", 
        "type": "window"
    }, 
    "siblings": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .siblings() method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "siblings", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/siblings", 
        "syntax": ".siblings( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "size": {
        "descr": "The .size() method is deprecated as of jQuery 1.8. Use the .length property instead.", 
        "name": "size", 
        "params": [], 
        "path": "jquery/size", 
        "syntax": ".size() Returns: Integerversion deprecated: 1.8", 
        "type": "Miscellaneous"
    }, 
    "sizeToContent": {
        "descr": "Sizes the window according to its content.", 
        "name": "window.sizeToContent", 
        "params": [], 
        "path": "dom/window.sizetocontent", 
        "syntax": "window.sizeToContent()", 
        "type": "window"
    }, 
    "slice": {
        "descr": "Extracts a section of a string and returns a new string.", 
        "name": "String.slice", 
        "params": [
            {
                "descr": "The zero-based index at which to begin extraction. ", 
                "name": "beginSlice"
            }, 
            {
                "descr": "The zero-based index at which to end extraction. ", 
                "name": "endSlice"
            }
        ], 
        "path": "javascript/global_objects/string/slice", 
        "syntax": "String Implemented in JavaScript 1.2 ECMAScript Edition ECMAScript 3rd Edition Syntax string.slice(beginslice[, endSlice])", 
        "type": "String"
    }, 
    "slideDown": {
        "descr": "The .slideDown() method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.", 
        "name": "slideDown", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slidedown", 
        "syntax": ".slideDown( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "slideToggle": {
        "descr": "The .slideToggle() method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The display property is saved and restored as needed. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline. When the height reaches 0 after a hiding animation, the display style property is set to none to ensure that the element no longer affects the layout of the page.", 
        "name": "slideToggle", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slidetoggle", 
        "syntax": ".slideToggle( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "slideUp": {
        "descr": "The .slideUp() method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the display style property is set to none to ensure that the element no longer affects the layout of the page.", 
        "name": "slideUp", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slideup", 
        "syntax": ".slideUp( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "some": {
        "descr": "Tests whether some element in the array passes the test implemented by the provided function.", 
        "name": "Array.some", 
        "params": [
            {
                "descr": "Function to test for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Object to use as this when executing callback.", 
                "name": "thisObject"
            }
        ], 
        "path": "javascript/global_objects/array/some", 
        "syntax": "array.some(callback[, thisObject])", 
        "type": "Array"
    }, 
    "sort": {
        "descr": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is lexicographic (not numeric).", 
        "name": "Array.sort", 
        "params": [
            {
                "descr": "Specifies a function that defines the sort order. ", 
                "name": "compareFunction"
            }
        ], 
        "path": "javascript/global_objects/array/sort", 
        "syntax": "arr.sort([compareFunction])", 
        "type": "Array"
    }, 
    "splice": {
        "descr": "The splice() method changes the content of an array, adding new elements while removing old elements.", 
        "name": "Array.splice", 
        "params": [
            {
                "descr": "Index at which to start changing the array. ", 
                "name": "index"
            }, 
            {
                "descr": "An integer indicating the number of old array elements to remove. ", 
                "name": "howMany"
            }, 
            {
                "descr": "The elements to add to the array. ", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/splice", 
        "syntax": "array.splice(index , howMany[, element1[, ...[, elementN]]])", 
        "type": "Array"
    }, 
    "split": {
        "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
        "name": "String.split", 
        "params": [
            {
                "descr": "Specifies the character(s) to use for separating the string. ", 
                "name": "separator"
            }, 
            {
                "descr": "Integer specifying a limit on the number of splits to be found. ", 
                "name": "limit"
            }
        ], 
        "path": "javascript/global_objects/string/split", 
        "syntax": "string.split([separator][, limit])", 
        "type": "String"
    }, 
    "startsWith": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "String.startsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the start of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/startswith", 
        "syntax": "true or false as appropriate. Method of String Implemented in JavaScript 1.8.5+ ECMAScript Edition None (Harmony Proposal) Syntax", 
        "type": "String"
    }, 
    "sticky": {
        "descr": "This is an experimental technology, part of the Harmony (EcmaScript 6) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.", 
        "name": "RegExp.sticky", 
        "params": [], 
        "path": "javascript/global_objects/regexp/sticky", 
        "syntax": "sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky", 
        "type": "RegExp"
    }, 
    "stop": {
        "descr": "This method stops window loading.", 
        "name": "window.stop", 
        "params": [], 
        "path": "dom/window.stop", 
        "syntax": "window.stop()", 
        "type": "window"
    }, 
    "sub": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.sub", 
        "params": [], 
        "path": "javascript/global_objects/string/sub", 
        "syntax": "sub()", 
        "type": "String"
    }, 
    "submit": {
        "descr": "This method is a shortcut for .on( \"submit\", handler ) in the first variation, and .trigger( \"submit\" ) in the third.", 
        "name": "submit", 
        "params": [
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/submit", 
        "syntax": ".submit( handler(eventObject) ) Returns: jQuery", 
        "type": "Events"
    }, 
    "substr": {
        "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
        "name": "String.substr", 
        "params": [
            {
                "descr": "Location at which to begin extracting characters.", 
                "name": "start"
            }, 
            {
                "descr": "The number of characters to extract.", 
                "name": "length"
            }
        ], 
        "path": "javascript/global_objects/string/substr", 
        "syntax": "string.substr(start[, length])", 
        "type": "String"
    }, 
    "substring": {
        "descr": "Returns a subset of a string between one index and another, or through the end of the string.", 
        "name": "String.substring", 
        "params": [
            {
                "descr": "An integer between 0 and the length of the string.", 
                "name": "indexA"
            }, 
            {
                "descr": "(optional) An integer between 0 and the length of the string.", 
                "name": "indexB"
            }
        ], 
        "path": "javascript/global_objects/string/substring", 
        "syntax": "string.substring(indexA[, indexB])", 
        "type": "String"
    }, 
    "sup": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "String.sup", 
        "params": [], 
        "path": "javascript/global_objects/string/sup", 
        "syntax": "sup()", 
        "type": "String"
    }, 
    "switch": {
        "descr": "Evaluates an expression, matching the expression's value to a case label, and executes statements associated with that case.", 
        "name": "switch", 
        "params": [
            {
                "descr": "An expression matched against each label.", 
                "name": "expression"
            }, 
            {
                "descr": "Identifier used to match against expression.", 
                "name": "labelN"
            }, 
            {
                "descr": "Statements that are executed if expression matches the associated label.", 
                "name": "statementsN"
            }, 
            {
                "descr": "Statements that are executed if expression does not match any label.", 
                "name": "statements_def"
            }
        ], 
        "path": "javascript/statements/switch", 
        "syntax": "switch (expression) {  case label1:    statements1    [break;]  case label2:    statements2    [break;]  ...  case labelN:    statementsN    [break;]  default:    statements_def    [break;]}", 
        "type": "Statements"
    }, 
    "test": {
        "descr": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.", 
        "name": "RegExp.test", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/test", 
        "syntax": "regexObj.test(str)", 
        "type": "RegExp"
    }, 
    "text": {
        "descr": "Unlike the .html() method, .text() can be used in both XML and HTML documents. The result of the .text() method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:", 
        "name": "text", 
        "params": [
            {
                "descr": "Type: String  A string of text to set as the content of each matched element.", 
                "name": "textString"
            }, 
            {
                "descr": "Type: Function() A function returning the text content to set. ", 
                "name": "function(index, text)"
            }
        ], 
        "path": "jquery/text", 
        "syntax": ".text() Returns: String", 
        "type": "Manipulation"
    }, 
    "throw": {
        "descr": "Throws a user-defined exception.", 
        "name": "throw", 
        "params": [
            {
                "descr": "The expression to throw.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/statements/throw", 
        "syntax": "throw expression;  Parameters expression The expression to throw. Description Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception: throw \"Error2\"; // generates an exception with a string value throw 42; // generates an exception with the value 42 throw true; // generates an exception with the value true Examples Example: Throw an object You can specify an object when you throw an exception. You can then reference the object's properties in the catch block. The following example creates an object myUserException of type UserException and uses it in a throw statement. function UserException(message) {   this.message = message;   this.name = \"UserException\";}function getMonthName(mo) {   mo = mo-1; // Adjust month number for array index (1=Jan, 12=Dec)   var months = new Array(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",      \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\");\n or    if (months[mo]\u00a0!== undefined) {      return months[mo];   } else {      throw new UserException(\"InvalidMonthNo\");\n or    }}try {   // statements to try   var myMonth = 15; // 15 is out of bound to raise the exception   monthName = getMonthName(myMonth);\n or } catch (e) {   monthName = \"unknown\";   logMyErrors(e.message, e.name);\n or  // pass exception object to err handler});", 
        "type": "Statements"
    }, 
    "toArray": {
        "descr": ".toArray() returns all of the elements in the jQuery set:", 
        "name": "toArray", 
        "params": [], 
        "path": "jquery/toarray", 
        "syntax": ".toArray() Returns: Array", 
        "type": "Miscellaneous"
    }, 
    "toDateString": {
        "descr": "The toDateString() method returns the date portion of a Date object in human readable form in American English.", 
        "name": "Date.toDateString", 
        "params": [], 
        "path": "javascript/global_objects/date/todatestring", 
        "syntax": "dateObj.toDateString()", 
        "type": "Date"
    }, 
    "toExponential": {
        "descr": "The toExponential() method returns a string representing the Number object in exponential notation", 
        "name": "Number.toExponential", 
        "params": [
            {
                "descr": "An integer specifying the number of digits after the decimal point. ", 
                "name": "fractionDigits"
            }, 
            {
                "descr": "If fractionDigits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/toexponential", 
        "syntax": "numObj.toExponential(fractionDigits)", 
        "type": "Number"
    }, 
    "toFixed": {
        "descr": "The toFixed() method formats a number using fixed-point notation.", 
        "name": "Number.toFixed", 
        "params": [
            {
                "descr": "The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. ", 
                "name": "digits"
            }, 
            {
                "descr": "If digits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/tofixed", 
        "syntax": "numObj.toFixed(digits)", 
        "type": "Number"
    }, 
    "toISOString": {
        "descr": "The toISOString() method returns a string in ISO format (ISO 8601 Extended Format), which can be described as follows: YYYY-MM-DDTHH:mm:ss.sssZ. The timezone is always UTC as denoted by the suffix \"Z\".", 
        "name": "Date.toISOString", 
        "params": [], 
        "path": "javascript/global_objects/date/toisostring", 
        "syntax": "dateObj.toISOString()", 
        "type": "Date"
    }, 
    "toInteger": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "Number.toInteger", 
        "params": [
            {
                "descr": "The value to be converted to an integer.", 
                "name": "number"
            }
        ], 
        "path": "javascript/global_objects/number/tointeger", 
        "syntax": "Number.toInteger(number)", 
        "type": "Number"
    }, 
    "toJSON": {
        "descr": "The toJSON() method returns a JSON representation of the Date object.", 
        "name": "Date.toJSON", 
        "params": [], 
        "path": "javascript/global_objects/date/tojson", 
        "syntax": "dateObj.toJSON()", 
        "type": "Date"
    }, 
    "toLocaleDateString": {
        "descr": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "Date.toLocaleDateString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaledatestring", 
        "syntax": "dateObj.toLocaleDateString([locales [, options]])", 
        "type": "Date"
    }, 
    "toLocaleLowerCase": {
        "descr": "Returns the calling string value converted to lower case, according to any locale-specific case mappings.", 
        "name": "String.toLocaleLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocalelowercase", 
        "syntax": "string.toLocaleLowerCase()", 
        "type": "String"
    }, 
    "toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.", 
        "name": "Object.toLocaleString", 
        "params": [], 
        "path": "javascript/global_objects/object/tolocalestring", 
        "syntax": "obj.toLocaleString();", 
        "type": "Object"
    }, 
    "toLocaleTimeString": {
        "descr": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "Date.toLocaleTimeString", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "An object with some or all of the following properties:  localeMatcher  The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaletimestring", 
        "syntax": "dateObj.toLocaleTimeString([locales [, options]])", 
        "type": "Date"
    }, 
    "toLocaleUpperCase": {
        "descr": "Returns the calling string value converted to upper case, according to any locale-specific case mappings.", 
        "name": "String.toLocaleUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocaleuppercase", 
        "syntax": "toLocaleUpperCase()", 
        "type": "String"
    }, 
    "toLowerCase": {
        "descr": "Returns the calling string value converted to lowercase.", 
        "name": "String.toLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolowercase", 
        "syntax": "string.toLowerCase()", 
        "type": "String"
    }, 
    "toPrecision": {
        "descr": "The toPrecision() method returns a string representing the Number object to the specified precision.", 
        "name": "Number.toPrecision", 
        "params": [
            {
                "descr": "An integer specifying the number of significant digits.", 
                "name": "precision"
            }, 
            {
                "descr": "If precison is not between 1 and 100 (inclusive), a RangeError is thrown. ", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/number/toprecision", 
        "syntax": "numObj.toPrecision(precision)", 
        "type": "Number"
    }, 
    "toSource": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "RegExp.toSource", 
        "params": [], 
        "path": "javascript/global_objects/regexp/tosource", 
        "syntax": "regexObj.toSource()RegExp.toSource()", 
        "type": "RegExp"
    }, 
    "toString": {
        "descr": "Returns a string representing the specified object.", 
        "name": "String.toString", 
        "params": [], 
        "path": "javascript/global_objects/string/tostring", 
        "syntax": "string.toString()", 
        "type": "String"
    }, 
    "toTimeString": {
        "descr": "The toTimeString() method returns the time portion of a Date object in human readable form in American English.", 
        "name": "Date.toTimeString", 
        "params": [], 
        "path": "javascript/global_objects/date/totimestring", 
        "syntax": "dateObj.toTimeString()", 
        "type": "Date"
    }, 
    "toUTCString": {
        "descr": "The toUTCString() method converts a date to a string, using the UTC time zone.", 
        "name": "Date.toUTCString", 
        "params": [], 
        "path": "javascript/global_objects/date/toutcstring", 
        "syntax": "dateObj.toUTCString()", 
        "type": "Date"
    }, 
    "toUpperCase": {
        "descr": "Returns the calling string value converted to uppercase.", 
        "name": "String.toUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/touppercase", 
        "syntax": "string.toUpperCase()", 
        "type": "String"
    }, 
    "toggle": {
        "descr": "Note: The event handling suite also has a method named .toggle(). Which one is fired depends on the set of arguments passed.", 
        "name": "toggle", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). ", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Boolean  A Boolean indicating whether to show or hide the elements.", 
                "name": "showOrHide"
            }
        ], 
        "path": "jquery/toggle", 
        "syntax": ".toggle( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "toggleClass": {
        "descr": "This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply .toggleClass() to a simple <div>:", 
        "name": "toggleClass", 
        "params": [
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.", 
                "name": "className"
            }, 
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Boolean  A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.", 
                "name": "switch"
            }, 
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.", 
                "name": "switch"
            }, 
            {
                "descr": "Type: Function() A function that returns class names to be toggled in the class attribute of each element in the matched set. ", 
                "name": "function(index, class, switch)"
            }, 
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.", 
                "name": "switch"
            }
        ], 
        "path": "jquery/toggleclass", 
        "syntax": ".toggleClass( className ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "top": {
        "descr": "Returns a reference to the topmost window in the window hierarchy.", 
        "name": "window.top", 
        "params": [], 
        "path": "dom/window.top", 
        "syntax": "var topWindow = window.top; Notes Where the window.parent property returns the immediate parent of the current window, window.top returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support ? ? ? ? ?   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  Gecko notes  Note: Starting in Gecko 6.0, this property is correctly read only.", 
        "type": "window"
    }, 
    "trigger": {
        "descr": "Any event handlers attached with .on() or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the .trigger() method. A call to .trigger() executes the handlers in the same order they would be if the event were triggered naturally by the user:", 
        "name": "trigger", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }, 
            {
                "descr": "Type: Event  A jQuery.Event object.", 
                "name": "event"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }
        ], 
        "path": "jquery/trigger", 
        "syntax": ".trigger( eventType [, extraParameters ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "triggerHandler": {
        "descr": "The .triggerHandler() method behaves similarly to .trigger(), with the following exceptions:", 
        "name": "triggerHandler", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Array  An array of additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }
        ], 
        "path": "jquery/triggerhandler", 
        "syntax": ".triggerHandler( eventType [, extraParameters ] ) Returns: Object", 
        "type": "Events"
    }, 
    "trim": {
        "descr": "Introduced in JavaScript 1.8.1", 
        "name": "String.trim", 
        "params": [], 
        "path": "javascript/global_objects/string/trim", 
        "syntax": "string.trim()", 
        "type": "String"
    }, 
    "try...catch": {
        "descr": "Marks a block of statements to try, and specifies a response, should an exception be thrown.", 
        "name": "try...catch", 
        "params": [
            {
                "descr": "The statements to be executed.", 
                "name": "try_statements"
            }, 
            {
                "descr": "Statements that are executed if an exception is thrown in the try block.", 
                "name": "catch_statements_1, catch_statements_2"
            }, 
            {
                "descr": "An identifier to hold an exception object for the associated catch clause.", 
                "name": "exception_var_1, exception_var_2"
            }, 
            {
                "descr": "A conditional expression.", 
                "name": "condition_1"
            }, 
            {
                "descr": "Statements that are executed after the try statement completes. ", 
                "name": "finally_statements"
            }
        ], 
        "path": "javascript/statements/try...catch", 
        "syntax": "try {   try_statements}[catch (exception_var_1 if condition_1) {   catch_statements_1}]...[catch (exception_var_2) {   catch_statements_2}][finally {   finally_statements}]", 
        "type": "Statements"
    }, 
    "typeof": {
        "descr": "The typeof operator returns a string indicating the type of the unevaluated operand.", 
        "name": "typeof", 
        "params": [], 
        "path": "javascript/operators/typeof", 
        "syntax": "typeof operator is followed by its operand: typeof operand Parameters operand is an expression representing the object or primitive whose type is to be returned. Description This table summarizes the possible return values of typeof: Type Result Undefined \"undefined\" Null \"object\" Boolean \"boolean\" Number \"number\" String \"string\" Host object (provided by the JS environment) Implementation-dependent Function object (implements [[Call]] in ECMA-262 terms) \"function\"", 
        "type": "Operators"
    }, 
    "unbind": {
        "descr": "Event handlers attached with .bind() can be removed with .unbind(). (As of jQuery 1.7, the .on() and .off() methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, .unbind() removes all handlers attached to the elements:", 
        "name": "unbind", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function() The function that is to be no longer executed.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Boolean  Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).", 
                "name": "false"
            }, 
            {
                "descr": "Type: Object  A JavaScript event object as passed to an event handler.", 
                "name": "event"
            }
        ], 
        "path": "jquery/unbind", 
        "syntax": ".unbind( eventType [, handler(eventObject) ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "undefined": {
        "descr": "The global undefined property represents the value undefined.", 
        "name": "undefined", 
        "params": [], 
        "path": "javascript/global_objects/undefined", 
        "syntax": "undefined Description undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined.  In modern browsers (JavaScript 1.8.5 / Firefox 4+), undefined", 
        "type": "Global Objects"
    }, 
    "undelegate": {
        "descr": "The .undelegate() method is a way of removing event handlers that have been bound using .delegate(). As of jQuery 1.7, the .on() and .off() methods are preferred for attaching and removing event handlers.", 
        "name": "undelegate", 
        "params": [
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function() A function to execute at the time the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: PlainObject  An object of one or more event types and previously bound functions to unbind from them.", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A string containing a namespace to unbind all events from.", 
                "name": "namespace"
            }
        ], 
        "path": "jquery/undelegate", 
        "syntax": ".undelegate() Returns: jQuery", 
        "type": "Events"
    }, 
    "unload": {
        "descr": "This method is a shortcut for .on( \"unload\", handler ).", 
        "name": "unload", 
        "params": [
            {
                "descr": "Type: Function() A function to execute when the event is triggered.", 
                "name": "handler(eventObject)"
            }, 
            {
                "descr": "Type: Object  A plain object of data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function() A function to execute each time the event is triggered.", 
                "name": "handler(eventObject)"
            }
        ], 
        "path": "jquery/unload", 
        "syntax": ".unload( handler(eventObject) ) Returns: jQueryversion deprecated: 1.8", 
        "type": "Events"
    }, 
    "unshift": {
        "descr": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.", 
        "name": "Array.unshift", 
        "params": [
            {
                "descr": "The elements to add to the front of the array.", 
                "name": "element1, ..., elementN"
            }
        ], 
        "path": "javascript/global_objects/array/unshift", 
        "syntax": "arr.unshift(element1, ..., elementN)", 
        "type": "Array"
    }, 
    "unwatch": {
        "descr": "The unwatch() method removes a watchpoint set with the watch() method.", 
        "name": "Object.unwatch", 
        "params": [
            {
                "descr": "The name of a property of the object to stop watching.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/unwatch", 
        "syntax": "obj.unwatch(prop)", 
        "type": "Object"
    }, 
    "unwrap": {
        "descr": "The .unwrap() method removes the element's parent. This is effectively the inverse of the .wrap() method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.", 
        "name": "unwrap", 
        "params": [], 
        "path": "jquery/unwrap", 
        "syntax": ".unwrap() Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "val": {
        "descr": "The .val() method is primarily used to get the values of form elements such as input, select and textarea. In the case of <select multiple=\"multiple\"> elements, the .val() method returns an array containing each selected option; if no option is selected, it returns null.", 
        "name": "val", 
        "params": [
            {
                "descr": "Type: String or Array  A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function() A function returning the value to set. ", 
                "name": "function(index, value)"
            }
        ], 
        "path": "jquery/val", 
        "syntax": ".val() Returns: String or Number or Array", 
        "type": "Manipulation"
    }, 
    "valueOf": {
        "descr": "Returns the primitive value of a String object.", 
        "name": "String.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/string/valueof", 
        "syntax": "string.valueOf()", 
        "type": "String"
    }, 
    "var": {
        "descr": "Declares a variable, optionally initializing it to a value.", 
        "name": "var", 
        "params": [
            {
                "descr": "Variable name. It can be any legal identifier.", 
                "name": "varnameN"
            }, 
            {
                "descr": "Initial value of the variable. It can be any legal expression.", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/statements/var", 
        "syntax": "var varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]]; Parameters  varnameN  Variable name. It can be any legal identifier.  valueN  Initial value of the variable. It can be any legal expression. Description The scope of a variable declared with var is the enclosing function or, for variables declared outside a function, the global scope (which is bound to the global object).", 
        "type": "Statements"
    }, 
    "void": {
        "descr": "The void operator evaluates the given expression and then returns undefined.", 
        "name": "void", 
        "params": [], 
        "path": "javascript/operators/void", 
        "syntax": "void expression Uses This operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)", 
        "type": "Operators"
    }, 
    "watch": {
        "descr": "The watch() method watches for a property to be assigned a value and runs a function when that occurs.", 
        "name": "Object.watch", 
        "params": [
            {
                "descr": "The name of a property of the object on which you wish to monitor changes.", 
                "name": "prop"
            }, 
            {
                "descr": "A function to call when the specified property's value changes.", 
                "name": "handler"
            }
        ], 
        "path": "javascript/global_objects/object/watch", 
        "syntax": "obj.watch(prop, handler)", 
        "type": "Object"
    }, 
    "while": {
        "descr": "Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.", 
        "name": "while", 
        "params": [
            {
                "descr": "An expression evaluated before each pass through the loop. ", 
                "name": "condition"
            }, 
            {
                "descr": "A statement that is executed as long as the condition evaluates to true. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/while", 
        "syntax": "while (condition) {  statement}", 
        "type": "Statements"
    }, 
    "width": {
        "descr": "The difference between .css(width) and .width() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .width() method is recommended when an element's width needs to be used in a mathematical calculation.", 
        "name": "width", 
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function() A function returning the width to set. ", 
                "name": "function(index, width)"
            }
        ], 
        "path": "jquery/width", 
        "syntax": ".width() Returns: Integer", 
        "type": "Dimensions"
    }, 
    "window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:", 
        "name": "window.window", 
        "params": [], 
        "path": "dom/window.window", 
        "syntax": "window: var global = {data: 0};alert(global === window.global);\n or  // displays \"true\");", 
        "type": "window"
    }, 
    "window.URL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.URL", 
        "params": [], 
        "path": "dom/window.url", 
        "syntax": "Window.URL property returns a URL object that provides static methods used for creating and managing object URLs.  It is good practice to call the URL constructor instead of using this property.  Syntax url = window.URL; Specification Specification Status Comment URL Living Standard Initial definition. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support 8.0 as webkitURL", 
        "type": "window"
    }, 
    "window.alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.", 
        "name": "window.alert", 
        "params": [], 
        "path": "dom/window.alert", 
        "syntax": "window.alert(message);", 
        "type": "window"
    }, 
    "window.atob": {
        "descr": "Decodes a string of data which has been encoded using base-64 encoding.", 
        "name": "window.atob", 
        "params": [], 
        "path": "dom/window.atob", 
        "syntax": "var decodedData = window.atob(encodedData);", 
        "type": "window"
    }, 
    "window.back": {
        "descr": "Returns the window to the previous item in the history.", 
        "name": "window.back", 
        "params": [], 
        "path": "dom/window.back", 
        "syntax": "window.back()", 
        "type": "window"
    }, 
    "window.blur": {
        "descr": "Shifts focus away from the window.", 
        "name": "window.blur", 
        "params": [], 
        "path": "dom/window.blur", 
        "syntax": "window.blur()", 
        "type": "window"
    }, 
    "window.btoa": {
        "descr": "Creates a base-64 encoded ASCII string from a \"string\" of binary data.", 
        "name": "window.btoa", 
        "params": [], 
        "path": "dom/window.btoa", 
        "syntax": "var encodedData = window.btoa(stringToEncode);", 
        "type": "window"
    }, 
    "window.cancelAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.cancelAnimationFrame", 
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.", 
                "name": "requestID"
            }
        ], 
        "path": "dom/window.cancelanimationframe", 
        "syntax": "window.requestAnimationFrame()", 
        "type": "window"
    }, 
    "window.clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.", 
        "name": "window.clearImmediate", 
        "params": [], 
        "path": "dom/window.clearimmediate", 
        "syntax": "window.clearImmediate(immediateID)", 
        "type": "window"
    }, 
    "window.clearInterval": {
        "descr": "Cancels repeated action which was set up using setInterval.", 
        "name": "window.clearInterval", 
        "params": [], 
        "path": "dom/window.clearinterval", 
        "syntax": "window.clearInterval(intervalID)", 
        "type": "window"
    }, 
    "window.clearTimeout": {
        "descr": "Clears the delay set by window.setTimeout().", 
        "name": "window.clearTimeout", 
        "params": [], 
        "path": "dom/window.cleartimeout", 
        "syntax": "window.clearTimeout(timeoutID)", 
        "type": "window"
    }, 
    "window.close": {
        "descr": "Closes the current window, or a referenced window.", 
        "name": "window.close", 
        "params": [], 
        "path": "dom/window.close", 
        "syntax": "window.close();", 
        "type": "window"
    }, 
    "window.closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.", 
        "name": "window.closed", 
        "params": [
            {
                "descr": "A boolean. Possible Values: true: The window has been closed. ", 
                "name": "isClosed"
            }
        ], 
        "path": "dom/window.closed", 
        "syntax": "isClosed = windowRef.closed;  isClosed  A boolean. Possible Values: true: The window has been closed. false: The window is open.  Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closedif (window.opener && !window.opener.closed) {  window.opener.location.href = \"http://www.mozilla.org\";}", 
        "type": "window"
    }, 
    "window.confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.", 
        "name": "window.confirm", 
        "params": [], 
        "path": "dom/window.confirm", 
        "syntax": "result = window.confirm(message);", 
        "type": "window"
    }, 
    "window.content": {
        "descr": "Returns a Window object for the primary content window. This is useful in XUL windows that have a <browser> (or tabbrowser or <iframe>) with type=\"content-primary\" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow.", 
        "name": "window.content", 
        "params": [], 
        "path": "dom/window.content", 
        "syntax": "var windowObject = window.content; Example Executing the following code in a chrome XUL window with a <browser type=\"content-primary\"/> element in it draws a red border around the first div on the page currently displayed in the browser: content.document.getElementsByTagName(\"div\")[0].style.border = \"solid red 1px\";", 
        "type": "window"
    }, 
    "window.crypto.getRandomValues": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "window.crypto.getRandomValues", 
        "params": [], 
        "path": "dom/window.crypto.getrandomvalues", 
        "syntax": "window.crypto.getRandomValues(typedArray);", 
        "type": "window"
    }, 
    "window.defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "window.defaultStatus", 
        "params": [], 
        "path": "dom/window.defaultstatus", 
        "syntax": "var sMsg = window.defaultStatus;window.defaultStatus = sMsg; Parameters sMsg is a string containing the text to be displayed by default in the statusbar. Example <html>  <body onload=\"window.defaultStatus='hello!';\"/>   <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button>  </body> </html>);", 
        "type": "window"
    }, 
    "window.directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it is still supported by browsers, its usage is discouraged in new projects. Try to avoid using it.", 
        "name": "window.directories", 
        "params": [], 
        "path": "dom/window.directories", 
        "syntax": "var dirBar = window.directories; Parameters dirBar is an object of the type BarProp. Example <script>  function dirs() {   alert(window.directories);\n or  } </script>);", 
        "type": "window"
    }, 
    "window.document": {
        "descr": "Returns a reference to the document contained in the window.", 
        "name": "window.document", 
        "params": [], 
        "path": "dom/window.document", 
        "syntax": "doc = window.document  Parameters doc is an object reference to a document. Example <!DOCTYPE html><html><head>   <title>Hello, World!</title></head><body><script type=\"text/javascript\">   var doc = window.document;   alert( doc.title);\n or     // alerts: Hello, World!</script></body></html>);", 
        "type": "window"
    }, 
    "window.dump": {
        "descr": "Prints messages to the (native) console.", 
        "name": "window.dump", 
        "params": [], 
        "path": "dom/window.dump", 
        "syntax": "window.dump(message);\n or dump(message);", 
        "type": "window"
    }, 
    "window.find": {
        "descr": "Finds a string in a window.", 
        "name": "window.find", 
        "params": [
            {
                "descr": "The text string for which to search.", 
                "name": "aString"
            }, 
            {
                "descr": "Boolean value. If true, specifies a case-sensitive search.", 
                "name": "aCaseSensitive"
            }, 
            {
                "descr": "Boolean. If true, specifies a backward search.", 
                "name": "aBackwards"
            }, 
            {
                "descr": "Boolean. If true, specifies a wrap around search.", 
                "name": "aWrapAround"
            }, 
            {
                "descr": "Boolean. If true, specifies a whole word search. ", 
                "name": "aWholeWord Unimplemented"
            }, 
            {
                "descr": "Boolean. If true, specifies a search in frames.", 
                "name": "aSearchInFrames"
            }, 
            {
                "descr": "Boolean. If true, specifies a show Dialog.", 
                "name": "aShowDialog"
            }
        ], 
        "path": "dom/window.find", 
        "syntax": "window.find(aString, aCaseSensitive, aBackwards, aWrapAround,            aWholeWord, aSearchInFrames, aShowDialog);", 
        "type": "window"
    }, 
    "window.focus": {
        "descr": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.", 
        "name": "window.focus", 
        "params": [], 
        "path": "dom/window.focus", 
        "syntax": "window.focus()", 
        "type": "window"
    }, 
    "window.forward": {
        "descr": "Moves the window one document forward in the history.", 
        "name": "window.forward", 
        "params": [], 
        "path": "dom/window.forward", 
        "syntax": "window.forward()", 
        "type": "window"
    }, 
    "window.frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.", 
        "name": "window.frameElement", 
        "params": [], 
        "path": "dom/window.frameelement", 
        "syntax": "frameEl = window.frameElement; frameEl is the element which the window is embedded into, or null if the window is top-level. Example var frameEl = window.frameElement;// If we are inside a frame, then change its URL to 'http://mozilla.org/'if (frameEl) {  frameEl.src = 'http://mozilla.org/';}", 
        "type": "window"
    }, 
    "window.frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.", 
        "name": "window.frames", 
        "params": [], 
        "path": "dom/window.frames", 
        "syntax": "frameList = window.frames; frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation. frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[ 0 ]", 
        "type": "window"
    }, 
    "window.fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.", 
        "name": "window.fullScreen", 
        "params": [
            {
                "descr": "A boolean. Possible Values:", 
                "name": "isInFullScreen"
            }
        ], 
        "path": "dom/window.fullscreen", 
        "syntax": "isInFullScreen = windowRef.fullScreen; With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen  A boolean. Possible Values: true: The window is in full screen mode. false: The window is not in full screen mode. Examples  Specification DOM Level 0. window.fullScreen is not part of any W3C specification or technical recommendation. Notes This property is only reliable in Mozilla 1.9 (Firefox 3) and later. Mozilla 1.8 and earlier do have this property, but it always returns false", 
        "type": "window"
    }, 
    "window.getComputedStyle": {
        "descr": "getComputedStyle() gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.", 
        "name": "window.getComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window.getcomputedstyle", 
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);", 
        "type": "window"
    }, 
    "window.getDefaultComputedStyle": {
        "descr": "getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling. That is, only user-agent and user styles are taken into account.", 
        "name": "window.getDefaultComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window.getdefaultcomputedstyle", 
        "syntax": "var style = window.getDefaultComputedStyle(element[, pseudoElt]);", 
        "type": "window"
    }, 
    "window.getSelection": {
        "descr": "Returns a selection object representing the range of text selected by the user.", 
        "name": "window.getSelection", 
        "params": [], 
        "path": "dom/window.getselection", 
        "syntax": "selection = window.getSelection() ;", 
        "type": "window"
    }, 
    "window.history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).", 
        "name": "window.history", 
        "params": [], 
        "path": "dom/window.history", 
        "syntax": "var historyObj = window.history; The obtained History object has the following methods:See Manipulating the browser history for examples and details. In particular, that article explains security features of the pushState()", 
        "type": "window"
    }, 
    "window.home": {
        "descr": "Returns the window to the home page.", 
        "name": "window.home", 
        "params": [], 
        "path": "dom/window.home", 
        "syntax": "window.home()", 
        "type": "window"
    }, 
    "window.importDialog": {
        "descr": "Because opening windows on mobile isn't necessarily appropriate, the Firefox Mobile team designed the importDialog() method to replace window.openDialog(). Instead of opening a new window, it merges the specified XUL dialog into the main window.", 
        "name": "window.importDialog", 
        "params": [
            {
                "descr": "The opened window", 
                "name": "newDialog"
            }, 
            {
                "descr": "The dialog's parent; can be null.", 
                "name": "aParent"
            }, 
            {
                "descr": "The chrome URL of the XUL dialog.", 
                "name": "aSrc"
            }, 
            {
                "descr": "A JavaScript object containing data to pass to the dialog.", 
                "name": "aArguments"
            }
        ], 
        "path": "dom/window.importdialog", 
        "syntax": "newDialog = importDialog(aParent, aSrc, aArguments)", 
        "type": "window"
    }, 
    "window.innerHeight": {
        "descr": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.", 
        "name": "window.innerHeight", 
        "params": [], 
        "path": "dom/window.innerheight", 
        "syntax": "var intViewportHeight = window.innerHeight; Value On return, intViewportHeight is the height of the browser window's viewport. The window.innerHeight property is read only; it has no default value. Notes The innerHeight property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar. Example Assuming a frameset var intFrameHeight = window.innerHeight; // orvar intFrameHeight = self.innerHeight;// will return the height of the frame viewport within the framesetvar intFramesetHeight = parent.innerHeight;// will return the height of the viewport of the closest framesetvar intOuterFramesetHeight = top.innerHeight;// will return the height of the viewport of the outermost frameset  To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "window.innerWidth": {
        "descr": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.", 
        "name": "window.innerWidth", 
        "params": [], 
        "path": "dom/window.innerwidth", 
        "syntax": "window.innerWidth property is read only; it has no default value. Notes The innerWidth property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the width of the viewport excluding, if rendered, the vertical scrollbar.", 
        "type": "window"
    }, 
    "window.length": {
        "descr": "Returns the number of frames (either frame or iframe elements) in the window.", 
        "name": "window.length", 
        "params": [], 
        "path": "dom/window.length", 
        "syntax": "framesCount = window.length; framesCount is the number of frames. Example if (window.length) {  // this is a document with subframes}", 
        "type": "window"
    }, 
    "window.location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.", 
        "name": "window.location", 
        "params": [], 
        "path": "dom/window.location", 
        "syntax": "oldLocation = window.location;window.location = newLocation; Examples Basic Example alert(window.location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/window.location\");", 
        "type": "window"
    }, 
    "window.matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.", 
        "name": "window.matchMedia", 
        "params": [], 
        "path": "dom/window.matchmedia", 
        "syntax": "mql = window.matchMedia(mediaQueryString)", 
        "type": "window"
    }, 
    "window.moveBy": {
        "descr": "Moves the current window by a specified amount.", 
        "name": "window.moveBy", 
        "params": [], 
        "path": "dom/window.moveby", 
        "syntax": "window.moveBy(deltaX, deltaY)", 
        "type": "window"
    }, 
    "window.moveTo": {
        "descr": "Moves the window to the specified coordinates.", 
        "name": "window.moveTo", 
        "params": [], 
        "path": "dom/window.moveto", 
        "syntax": "window.moveTo(x, y)", 
        "type": "window"
    }, 
    "window.onafterprint": {
        "descr": "The onafterprint property sets and returns the onafterprint event handler code for the current window.", 
        "name": "window.onafterprint", 
        "params": [], 
        "path": "dom/window.onafterprint", 
        "syntax": "window.onafterprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "window"
    }, 
    "window.onbeforeprint": {
        "descr": "The onbeforeprint property sets and returns the onbeforeprint event handler code for the current window.", 
        "name": "window.onbeforeprint", 
        "params": [], 
        "path": "dom/window.onbeforeprint", 
        "syntax": "window.onbeforeprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "window"
    }, 
    "window.onbeforeunload": {
        "descr": "An event that fires when a window is about to <a href=\"window.onunload\" title=\"The unload event is raised when the window is unloading its content and resources. The resources removal is processed      \u00a0after  the unload event occurs.\">unload its resources. The document is still visible and the event is still cancelable.", 
        "name": "window.onbeforeunload", 
        "params": [], 
        "path": "dom/window.onbeforeunload", 
        "syntax": "window.onbeforeunload = funcRef funcRef is a reference to a function or a function expression. The function should assign a string value to the returnValue property of the Event object and return the same string. Note that in Firefox 4 and later the returned string is not displayed to the user. See bug 588292. Example window.onbeforeunload = function(e) {  return 'Dialog text here.';};", 
        "type": "window"
    }, 
    "window.onblur": {
        "descr": "The onblur property can be used to set the blur handler on the window, which is triggered when the window loses focus.", 
        "name": "window.onblur", 
        "params": [], 
        "path": "dom/window.onblur", 
        "syntax": "window.onblur = funcRef; funcRef is a reference to the function to be executed. Example <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onblur test</title><script>window.onblur = blurText;function blurText() {  alert(\"blur event detected!\");\n or   // remove the event to stop an infinite loop!  window.onblur = '';}</script></head><body><p>click on another windowto fire the blur event for this browser window</p></body></html>);", 
        "type": "window"
    }, 
    "window.onclick": {
        "descr": "Called when the user clicks the mouse button while the cursor is in the window. This event is fired for any mouse button pressed; you can look at the event properties to find out which button was pressed and where.", 
        "name": "window.onclick", 
        "params": [], 
        "path": "dom/window.onclick", 
        "syntax": "window.onclick =funcRef; Parameters funcRef is a reference to a function. Example window.onclick = doPopup; <html><head><title>onclick test</title><script type=\"text/javascript\">window.onclick = clickPage;function clickPage(){ alert(\"click event detected!\");\n or }</script></head><body><p>click and release the LH mouse button on this page.</p></body></html>);", 
        "type": "window"
    }, 
    "window.ondevicelight": {
        "descr": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.", 
        "name": "window.ondevicelight", 
        "params": [], 
        "path": "dom/window.ondevicelight", 
        "syntax": "window.ondevicelight = funcRef Where funcRef is a function to be called when the devicelight event occurs. These events are of type DeviceLightEvent. Specifications Specification Status Comment Ambient Light Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported 22.0 (22.0) (Mac OS X only) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  Gecko-specific notes The devicelight", 
        "type": "window"
    }, 
    "window.ondevicemotion": {
        "descr": "An event handler for the devicemotion events sent to the window.", 
        "name": "window.ondevicemotion", 
        "params": [], 
        "path": "dom/window.ondevicemotion", 
        "syntax": "window.ondevicemotion = funcRef; Where funcRef is a reference to a function. This function receives a DeviceMotionEvent object describing the motion that occurred. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6.0 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "window"
    }, 
    "window.ondeviceorientation": {
        "descr": "An event handler for the deviceorientation events sent to the window.", 
        "name": "window.ondeviceorientation", 
        "params": [], 
        "path": "dom/window.ondeviceorientation", 
        "syntax": "window.ondeviceorientation = funcRef; Where funcRef is a reference to a function. The function receives a DeviceOrientationEvent object describing the device orientation change that occurred. Specifications Specification Status Comment Device Orientation Events Working Draft Initial specification. Browser compatibility Compatibility for DeviceOrientationEvent:  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support 7.0 3.6 (mozOrientation), 6 ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support 3.0 3.6 (mozOrientation), 6 Not supported Not supported 4.2  Gecko-specific notes Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "window"
    }, 
    "window.ondeviceproximity": {
        "descr": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.", 
        "name": "window.ondeviceproximity", 
        "params": [], 
        "path": "dom/window.ondeviceproximity", 
        "syntax": "window.onuserproximity = funcRef Where funcRef is a function to be called when the deviceproximity event occurs. These events are of type DeviceProximityEvent. Specifications Specification Status Comment Proximity Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported (Yes) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  See also", 
        "type": "window"
    }, 
    "window.onhashchange": {
        "descr": "The hashchange event fires when a window's hash changes (see location.hash).", 
        "name": "window.onhashchange", 
        "params": [
            {
                "descr": "A reference to a function.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/window.onhashchange", 
        "syntax": "window.onhashchange = funcRef; or <body onhashchange=\"funcRef();\n or \">);", 
        "type": "window"
    }, 
    "window.onkeydown": {
        "descr": "An event handler for the keydown event on the window.", 
        "name": "window.onkeydown", 
        "params": [], 
        "path": "dom/window.onkeydown", 
        "syntax": "window.onkeydown = funcRef; funcRef is a reference to a function. Example window.onkeydown = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onkeydown test</title><script>window.onkeydown = keydown;function keydown() {  alert(\"keydown event detected!\");\n or }</script></head><body><p>press and hold down any key to fire the keydown event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onkeypress": {
        "descr": "An event handler for the keypress event on the window.", 
        "name": "window.onkeypress", 
        "params": [], 
        "path": "dom/window.onkeypress", 
        "syntax": "window.onkeypress = funcRef; funcRef is a reference to a function. Example window.onkeypress = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onkeypress test</title><script>window.onkeypress = keypress;function keypress() { alert(\"keypress event detected!\");\n or }</script></head><body><p>press and release any key to fire the keypress event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onkeyup": {
        "descr": "An event handler for the keyup event on the window.", 
        "name": "window.onkeyup", 
        "params": [], 
        "path": "dom/window.onkeyup", 
        "syntax": "window.onkeyup =funcRef; Parameters funcRef is a reference to a function. Example window.onkeyup = doFunc; <html><head><title>onkeyup test</title><script type=\"text/javascript\">window.onkeyup = keyup;function keyup(){ alert(\"keyup event detected!\");\n or }</script></head><body><p>press and hold any key, then release it to fire the keyup event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onmousedown": {
        "descr": "An event handler for the mousedown event on the window.", 
        "name": "window.onmousedown", 
        "params": [], 
        "path": "dom/window.onmousedown", 
        "syntax": "window.onmousedown = funcRef; Parameters funcRef is a reference to a function. Example window.onmousedown = doFunc; <html><head><title>onmousedown test</title><script type=\"text/javascript\">window.onmousedown = mousedown;function mousedown(){ alert(\"mousedown event detected!\");\n or }</script></head><body><p>click and hold down the LH mouse button<br /> on the page to fire the mousedown event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onmousemove": {
        "descr": "An event handler for the mousemove event on the window.", 
        "name": "window.onmousemove", 
        "params": [], 
        "path": "dom/window.onmousemove", 
        "syntax": "window.onmousemove =funcRef; Parameters funcRef is a reference to a function. Example window.onmousemove = doFunc; <html><head><title>onmousemove test</title><script type=\"text/javascript\">window.onmousemove = mousemoved;function mousemoved(){ alert(\"mousemove event detected!\");\n or }</script></head><body><p>move the mouse pointer anywhere on the page<br />to fire the mousemove event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onmouseout": {
        "descr": "An event handler for the mouseout event on the window", 
        "name": "window.onmouseout", 
        "params": [], 
        "path": "dom/window.onmouseout", 
        "syntax": "window Syntax window.onmouseout = funcRef; funcRef is a reference to a function. Example window.onmouseout = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onmouseout test</title><style>body { border: 1px solid blue; }.my_box { border: 1px solid red; }p { border: 1px solid green; }</style><script>window.onmouseout = mouseout;function mouseout() { alert(\"mouseout event detected!\");\n or }</script></head><body><div class=\"my_box\"><p>move the mouse pointer away from the element it is on<br />to fire the mouseout event.</p></div></body></html>);", 
        "type": "window"
    }, 
    "window.onmouseover": {
        "descr": "An event handler for the mouseover event on the window.", 
        "name": "window.onmouseover", 
        "params": [], 
        "path": "dom/window.onmouseover", 
        "syntax": "window.onmouseover =funcRef; Parameters funcRef is a reference to a function. Example window.onmouseover = doFunc; <html><head><title>onmouseover test</title><style type=\"text/css\">.my_box { border: 1px solid red; }</style><script type=\"text/javascript\">window.onmouseover = mouseover;function mouseover(){ alert(\"mouseover event detected!\");\n or }</script></head><body><div class=\"my_box\"><p>move the mouse pointer to this div element,<br />or onto the status bar and back into the main window< br />to fire the mouseover event.</p></div></body></html>);", 
        "type": "window"
    }, 
    "window.onmouseup": {
        "descr": "An event handler for the mouseup event on the window.", 
        "name": "window.onmouseup", 
        "params": [], 
        "path": "dom/window.onmouseup", 
        "syntax": "window.onmouseup = funcRef; funcRef is a reference to a function. Example window.onmouseup = doFunc; <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>onmouseup test</title><script>window.onmouseup = mouseup;function mouseup() {  alert(\"mouseup event detected!\");\n or }</script></head><body><p>click on the page with the LH mouse button, and hold down for a fewseconds, then release the button. The mouseup event fires when yourelease the mouse button.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onpopstate": {
        "descr": "An event handler for the popstate event on the window.", 
        "name": "window.onpopstate", 
        "params": [], 
        "path": "dom/window.onpopstate", 
        "syntax": "window.onpopstate = funcRef; funcRef is a handler function. The popstate event As an example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) {  alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or };history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\"history.back();\n or  // alerts \"location: http://example.com/example.html, state: nullhistory.go(2);\n or   // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});", 
        "type": "window"
    }, 
    "window.onreset": {
        "descr": "An event handler for the reset event on the window.", 
        "name": "window.onreset", 
        "params": [], 
        "path": "dom/window.onreset", 
        "syntax": "window.onreset = funcRef; Parameters funcRef is a reference to a function. Example <html><script>function reg() {  window.captureEvents(Event.RESET);\n or   window.onreset = hit;} function hit() { alert('hit');\n or }</script><body onload=\"reg();\n or \"> <form>   <input type=\"reset\" value=\"reset\" /> </form> <div id=\"d\">\u00a0</div></body></html>);", 
        "type": "window"
    }, 
    "window.onresize": {
        "descr": "An event handler for the resize event on the window.", 
        "name": "window.onresize", 
        "params": [], 
        "path": "dom/window.onresize", 
        "syntax": "window.onresize = funcRef; Parameters funcRef is a reference to a function. Example window.onresize = doFunc; <html><head><title>onresize test</title><script type=\"text/javascript\">window.onresize = resize;function resize(){ alert(\"resize event detected!\");\n or }</script></head><body><p>Resize the browser window to fire the resize event.</p></body></html>);", 
        "type": "window"
    }, 
    "window.onscroll": {
        "descr": "Specifies the function to be called when the window is scrolled.", 
        "name": "window.onscroll", 
        "params": [], 
        "path": "dom/window.onscroll", 
        "syntax": "window.onscroll = funcRef; funcRef is a reference to a function. Examples Example 1: Generic window.onscroll = function (oEvent) {  // called when the window is scrolled.}", 
        "type": "window"
    }, 
    "window.onunload": {
        "descr": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed  after the unload event occurs.", 
        "name": "window.onunload", 
        "params": [], 
        "path": "dom/window.onunload", 
        "syntax": "window.onunload = funcRef; funcRef is a reference to a function. Notes Using this event handler in your page prevents Firefox 1.5 from caching the page in the in-memory bfcache. See Using Firefox 1.5 caching for details. Browsers equipped with pop-up window blockers will ignore all window.open()", 
        "type": "window"
    }, 
    "window.onuserproximity": {
        "descr": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.", 
        "name": "window.onuserproximity", 
        "params": [], 
        "path": "dom/window.onuserproximity", 
        "syntax": "window.onuserproximity = eventHandler Specifications Specification Status Comment Proximity Events Working Draft Initial specification Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support Not supported (Yes) Not supported Not supported Not supported   Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported  See also", 
        "type": "window"
    }, 
    "window.open": {
        "descr": "{{ APIRef }}", 
        "name": "window.open", 
        "params": [
            {
                "descr": "A reference to the newly created window. ", 
                "name": "windowObjectReference"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window. ", 
                "name": "strUrl"
            }, 
            {
                "descr": "A string name for the new window. ", 
                "name": "strWindowName"
            }, 
            {
                "descr": "Optional parameter listing the features (size, position, scrollbars, etc.) of the new window. ", 
                "name": "strWindowFeatures"
            }, 
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenX"
            }, 
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenY"
            }, 
            {
                "descr": "Centers the window in relation to its parent's size and position. ", 
                "name": "centerscreen"
            }, 
            {
                "descr": "Specifies the height of the whole browser window in pixels. ", 
                "name": "outerHeight"
            }, 
            {
                "descr": "Specifies the width of the whole browser window in pixels. ", 
                "name": "outerWidth"
            }, 
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerHeight"
            }, 
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerWidth"
            }, 
            {
                "descr": "example \"status=yes\", \"status=1\" and \"status\" have identical results", 
                "name": "NOTE: All features can be set to yes, 1 or just be present to be \"on\", set to no or 0 or in most cases just not present to be \"off\""
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.", 
                "name": "menubar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ", 
                "name": "toolbar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ", 
                "name": "location"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ", 
                "name": "personalbar"
            }, 
            {
                "descr": "Obsolete synonym of personalbar. ", 
                "name": "directories Obsolete since Gecko 2"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ", 
                "name": "status"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will be resizable.", 
                "name": "resizable"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ", 
                "name": "scrollbars"
            }, 
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ", 
                "name": "dependent"
            }, 
            {
                "descr": "The dialog feature removes all icons (restore, minimize, maximize) from the window's titlebar, leaving only the close button. ", 
                "name": "dialog"
            }, 
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ", 
                "name": "minimizable"
            }, 
            {
                "descr": "Do not use. Not implemented in Mozilla. ", 
                "name": "fullscreen"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ", 
                "name": "chrome"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ", 
                "name": "modal"
            }, 
            {
                "descr": "By default, all new secondary windows have a titlebar. ", 
                "name": "titlebar"
            }, 
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.", 
                "name": "alwaysRaised"
            }, 
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ", 
                "name": "alwaysLowered"
            }, 
            {
                "descr": "Same as alwaysLowered.", 
                "name": "z-lock"
            }, 
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ", 
                "name": "close"
            }, 
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ", 
                "name": "How can I prevent the confirmation message asking the user whether he wants to close the window?"
            }, 
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ", 
                "name": "How can I bring back the window if it is minimized or behind another window?"
            }, 
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.", 
                "name": "How do I force a maximized window?"
            }, 
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ", 
                "name": "How do I turn off window resizability or remove toolbars?"
            }, 
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.", 
                "name": "How do I resize a window to fit its content?"
            }, 
            {
                "descr": "Currently, you can not. Only the user can set his advanced preferences to do that. ", 
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            }, 
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.", 
                "name": "How do I know whether a window I opened is still open?"
            }, 
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ", 
                "name": "How can I tell when my window was blocked by a popup blocker?"
            }, 
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.", 
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            }, 
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ", 
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Opener window, parent window, main window, first window"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Sub-window, child window, secondary window, second window"
            }, 
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.", 
                "name": "Unrequested popup windows"
            }
        ], 
        "path": "dom/window.open", 
        "syntax": "var windowObjectReference = window.open(strUrl, strWindowName[, strWindowFeatures]);", 
        "type": "window"
    }, 
    "window.openDialog": {
        "descr": "window.openDialog is an extension to window.open. It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.", 
        "name": "window.openDialog", 
        "params": [
            {
                "descr": "The opened window", 
                "name": "newWindow"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window.", 
                "name": "url"
            }, 
            {
                "descr": "The window name (optional). See window.open description for detailed information.", 
                "name": "name"
            }, 
            {
                "descr": "See window.open description for description.", 
                "name": "features"
            }, 
            {
                "descr": "The arguments to be passed to the new window (optional).", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "dom/window.opendialog", 
        "syntax": "newWindow = openDialog(url, name, features, arg1, arg2, ...)", 
        "type": "window"
    }, 
    "window.opener": {
        "descr": "Returns a reference to the window that opened this current window.", 
        "name": "window.opener", 
        "params": [], 
        "path": "dom/window.opener", 
        "syntax": "objRef = window.opener; Example if (window.opener != indexWin) {  referToTop(window.opener);\n or });", 
        "type": "window"
    }, 
    "window.outerHeight": {
        "descr": "window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerHeight", 
        "params": [], 
        "path": "dom/window.outerheight", 
        "syntax": "outWindowHeight = window.outerHeight; On return, outWindowHeight contains the height of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "window.outerWidth": {
        "descr": "window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerWidth", 
        "params": [], 
        "path": "dom/window.outerwidth", 
        "syntax": "outWindowWidth = window.outerWidth; On return, outWindowWidth is the width of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "window"
    }, 
    "window.parent": {
        "descr": "A reference to the parent of the current window or subframe.", 
        "name": "window.parent", 
        "params": [], 
        "path": "dom/window.parent", 
        "syntax": "parentWindow = window.parent;  Example if (window.parent\u00a0!= window.top) {  // we're deeper than one down}", 
        "type": "window"
    }, 
    "window.postMessage": {
        "descr": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.", 
        "name": "window.postMessage", 
        "params": [
            {
                "descr": "A reference to another window; such a reference may be obtained, for example, using the contentWindow property of an iframe element, the object returned by window.open, or by named or numeric index on window.frames.", 
                "name": "otherWindow"
            }, 
            {
                "descr": "Data to be sent to the other window.", 
                "name": "message"
            }, 
            {
                "descr": "Specifies what the origin of otherWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ", 
                "name": "targetOrigin"
            }, 
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ", 
                "name": "transfer Optional"
            }, 
            {
                "descr": "The object passed from the other window.", 
                "name": "data"
            }, 
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ", 
                "name": "origin"
            }, 
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.", 
                "name": "source"
            }
        ], 
        "path": "dom/window.postmessage", 
        "syntax": "otherWindow.postMessage(message, targetOrigin, [transfer]);", 
        "type": "window"
    }, 
    "window.print": {
        "descr": "Opens the Print Dialog to print the current document.", 
        "name": "window.print", 
        "params": [], 
        "path": "dom/window.print", 
        "syntax": "window.print()", 
        "type": "window"
    }, 
    "window.prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.", 
        "name": "window.prompt", 
        "params": [], 
        "path": "dom/window.prompt", 
        "syntax": "result = window.prompt(text, value);", 
        "type": "window"
    }, 
    "window.requestAnimationFrame": {
        "descr": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.", 
        "name": "window.requestAnimationFrame", 
        "params": [
            {
                "descr": "A parameter specifying a function to call when it's time to update your animation for the next repaint. ", 
                "name": "callback"
            }
        ], 
        "path": "dom/window.requestanimationframe", 
        "syntax": "requestID = window.requestAnimationFrame(callback);\n or        // Firefox 23 / IE 10 / Chrome / Safari 7 (incl. iOS)requestID = window.mozRequestAnimationFrame(callback);\n or     // Firefox < 23requestID = window.webkitRequestAnimationFrame(callback);\n or  // Older versions of Safari / Chrome);", 
        "type": "window"
    }, 
    "window.resizeBy": {
        "descr": "Resizes the current window by a certain amount.", 
        "name": "window.resizeBy", 
        "params": [], 
        "path": "dom/window.resizeby", 
        "syntax": "window.resizeBy(xDelta, yDelta)", 
        "type": "window"
    }, 
    "window.resizeTo": {
        "descr": "Dynamically resizes window.", 
        "name": "window.resizeTo", 
        "params": [], 
        "path": "dom/window.resizeto", 
        "syntax": "window.resizeTo(iWidth, iHeight)", 
        "type": "window"
    }, 
    "window.screen": {
        "descr": "Returns a reference to the screen object associated with the window.", 
        "name": "window.screen", 
        "params": [
            {
                "descr": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.", 
                "name": "screen.availTop"
            }, 
            {
                "descr": "Returns the first available pixel available from the left side of the screen.", 
                "name": "screen.availLeft"
            }, 
            {
                "descr": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.", 
                "name": "screen.availHeight"
            }, 
            {
                "descr": "Returns the amount of horizontal space in pixels available to the window.", 
                "name": "screen.availWidth"
            }, 
            {
                "descr": "Returns the color depth of the screen.", 
                "name": "screen.colorDepth"
            }, 
            {
                "descr": "Returns the height of the screen in pixels.", 
                "name": "screen.height"
            }, 
            {
                "descr": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen.", 
                "name": "screen.left"
            }, 
            {
                "descr": "Returns the current orientation of the screen.", 
                "name": "screen.orientation"
            }, 
            {
                "descr": "Gets the bit depth of the screen.", 
                "name": "screen.pixelDepth"
            }, 
            {
                "descr": "Returns the distance in pixels from the top side of the current screen.", 
                "name": "screen.top"
            }, 
            {
                "descr": "Returns the width of the screen.", 
                "name": "screen.width"
            }, 
            {
                "descr": "Boolean. Setting to false will turn off the device's screen.", 
                "name": "screen.mozEnabled"
            }, 
            {
                "descr": "Controls the brightness of a device's screen. ", 
                "name": "screen.mozBrightness"
            }, 
            {
                "descr": "A handler for the orientationchange events.", 
                "name": "screen.onorientationchange"
            }, 
            {
                "descr": "Lock the screen orientation (only works in fullscreen or for installed apps)", 
                "name": "screen.lockOrientation"
            }, 
            {
                "descr": "Unlock the screen orientation (only works in fullscreen or for installed apps)", 
                "name": "screen.unlockOrientation"
            }, 
            {
                "descr": "Register an event handler of a specific event type on the EventTarget.", 
                "name": "EventTarget.addEventListener ()"
            }, 
            {
                "descr": "Removes an event listener from the EventTarget.", 
                "name": "EventTarget.removeEventListener ()"
            }, 
            {
                "descr": "Dispatch an event to this EventTarget.", 
                "name": "EventTarget.dispatchEvent ()"
            }
        ], 
        "path": "dom/window.screen", 
        "syntax": "screenObj = window.screen; Properties  screen.availTop  Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.  screen.availLeft  Returns the first available pixel available from the left side of the screen.  screen.availHeight  Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.  screen.availWidth  Returns the amount of horizontal space in pixels available to the window.  screen.colorDepth  Returns the color depth of the screen.  screen.height  Returns the height of the screen in pixels.  screen.left  Returns the distance in pixels from the left side of the main screen to the left side of the current screen.  screen.orientation  Returns the current orientation of the screen.  screen.pixelDepth  Gets the bit depth of the screen.  screen.top  Returns the distance in pixels from the top side of the current screen.  screen.width  Returns the width of the screen.  screen.mozEnabled   Boolean. Setting to false will turn off the device's screen.  screen.mozBrightness", 
        "type": "window"
    }, 
    "window.scroll": {
        "descr": "Scrolls the window to a particular place in the document.", 
        "name": "window.scroll", 
        "params": [], 
        "path": "dom/window.scroll", 
        "syntax": "window.scroll(x-coord,y-coord)", 
        "type": "window"
    }, 
    "window.scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.", 
        "name": "window.scrollBy", 
        "params": [], 
        "path": "dom/window.scrollby", 
        "syntax": "window.scrollBy(X,Y);", 
        "type": "window"
    }, 
    "window.scrollByLines": {
        "descr": "Scrolls the document by the given number of lines.", 
        "name": "window.scrollByLines", 
        "params": [], 
        "path": "dom/window.scrollbylines", 
        "syntax": "window.scrollByLines(lines)", 
        "type": "window"
    }, 
    "window.scrollMaxX": {
        "descr": "Returns the maximum number of pixels that the document can be scrolled horizontally.", 
        "name": "window.scrollMaxX", 
        "params": [], 
        "path": "dom/window.scrollmaxx", 
        "syntax": "xpix = window.scrollMaxX xpix is the number of pixels. Example // Scroll to most right of the pagevar maxX = window.scrollMaxX;window.scrollTo(maxX, 0);", 
        "type": "window"
    }, 
    "window.scrollMaxY": {
        "descr": "Returns the maximum number of pixels that the document can be scrolled vertically.", 
        "name": "window.scrollMaxY", 
        "params": [], 
        "path": "dom/window.scrollmaxy", 
        "syntax": "ypix = window.scrollMaxY ypix is the number of pixels. Example // Scroll to the bottom of the pagevar maxY = window.scrollMaxY;window.scrollTo(0,maxY);", 
        "type": "window"
    }, 
    "window.scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.", 
        "name": "window.scrollTo", 
        "params": [], 
        "path": "dom/window.scrollto", 
        "syntax": "window.scrollTo(x-coord,y-coord )", 
        "type": "window"
    }, 
    "window.scrollX": {
        "descr": "Returns the number of pixels that the document has already been scrolled horizontally.", 
        "name": "window.scrollX", 
        "params": [], 
        "path": "dom/window.scrollx", 
        "syntax": "var x = window.scrollX; Parameters x is the number of pixels that the document is currently scrolled from the left. Example // If scrollX is greater than 400, reset scroll position\u00a0to the top left of the document.if (window.scrollX > 400) {  window.scroll(0,0);\n or });", 
        "type": "window"
    }, 
    "window.scrollY": {
        "descr": "Returns the number of pixels that the document has already been scrolled vertically.", 
        "name": "window.scrollY", 
        "params": [], 
        "path": "dom/window.scrolly", 
        "syntax": "var y = window.scrollY; y is the number of pixels that the document is currently scrolled from the top. Example // make sure and go down to the second page if (window.scrollY) {  window.scroll(0, 0);\n or   // reset the scroll position to the top left of the document.}window.scrollByPages(1);", 
        "type": "window"
    }, 
    "window.self": {
        "descr": "Returns an object reference to the window object.", 
        "name": "window.self", 
        "params": [], 
        "path": "dom/window.self", 
        "syntax": "objRef = window.self  Example  if (window.parent.frames[0]\u00a0!= window.self) {    // this window is not the first frame in the list }", 
        "type": "window"
    }, 
    "window.setImmediate": {
        "descr": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.", 
        "name": "window.setImmediate", 
        "params": [], 
        "path": "dom/window.setimmediate", 
        "syntax": "var immediateID = setImmediate(func, [param1, param2, ...]);\n or var immediateID = setImmediate(func);", 
        "type": "window"
    }, 
    "window.setInterval": {
        "descr": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function.", 
        "name": "window.setInterval", 
        "params": [
            {
                "descr": "The this object on which will be called the callback function. ", 
                "name": "thisObject"
            }, 
            {
                "descr": "The function which will be invoked repeatedly. ", 
                "name": "callback"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation. ", 
                "name": "rate (optional)"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "length (optional)"
            }, 
            {
                "descr": "The this object on which is executed the daemon (read/write). ", 
                "name": "myDaemon.owner"
            }, 
            {
                "descr": "The function which will be repeatedly invoked (read/write). ", 
                "name": "myDaemon.task"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation (read/write).", 
                "name": "myDaemon.rate"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "myDaemon.length"
            }, 
            {
                "descr": "Returns a boolean expressing whether the daemon is at the start/end position or not.", 
                "name": "myDaemon.isAtEnd()"
            }, 
            {
                "descr": "Synchronize the timer of a started daemon with the time of its invocation.", 
                "name": "myDaemon.synchronize()"
            }, 
            {
                "descr": "Pauses the daemon.", 
                "name": "myDaemon.pause()"
            }, 
            {
                "descr": "Starts the daemon forward (index of each invocation increasing) or backwards (index decreasing).", 
                "name": "myDaemon.start([reverse])"
            }, 
            {
                "descr": "Forces a single callback to the minidaemon.task function regardless of the fact that the end has been reached or not. ", 
                "name": "MiniDaemon.forceCall(minidaemon)"
            }
        ], 
        "path": "dom/window.setinterval", 
        "syntax": "var intervalID = window.setInterval(func, delay[, param1, param2, ...]);\n or var intervalID = window.setInterval(code, delay);", 
        "type": "window"
    }, 
    "window.setTimeout": {
        "descr": "Calls a function or executes a code snippet after a specified delay.", 
        "name": "window.setTimeout", 
        "params": [], 
        "path": "dom/window.settimeout", 
        "syntax": "var timeoutID = window.setTimeout(func, delay, [param1, param2, ...]);\n or var timeoutID = window.setTimeout(code, delay);", 
        "type": "window"
    }, 
    "window.showModalDialog": {
        "descr": "Creates and displays a modal dialog box containing a specified HTML document.", 
        "name": "window.showModalDialog", 
        "params": [], 
        "path": "dom/window.showmodaldialog", 
        "syntax": "returnVal = window.showModalDialog(uri[, arguments][, options]);", 
        "type": "window"
    }, 
    "window.sizeToContent": {
        "descr": "Sizes the window according to its content.", 
        "name": "window.sizeToContent", 
        "params": [], 
        "path": "dom/window.sizetocontent", 
        "syntax": "window.sizeToContent()", 
        "type": "window"
    }, 
    "window.stop": {
        "descr": "This method stops window loading.", 
        "name": "window.stop", 
        "params": [], 
        "path": "dom/window.stop", 
        "syntax": "window.stop()", 
        "type": "window"
    }, 
    "window.top": {
        "descr": "Returns a reference to the topmost window in the window hierarchy.", 
        "name": "window.top", 
        "params": [], 
        "path": "dom/window.top", 
        "syntax": "var topWindow = window.top; Notes Where the window.parent property returns the immediate parent of the current window, window.top returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset. Browser compatibility   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari Basic support ? ? ? ? ?   Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Basic support ? ? ? ? ?  Gecko notes  Note: Starting in Gecko 6.0, this property is correctly read only.", 
        "type": "window"
    }, 
    "window.window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:", 
        "name": "window.window", 
        "params": [], 
        "path": "dom/window.window", 
        "syntax": "window: var global = {data: 0};alert(global === window.global);\n or  // displays \"true\");", 
        "type": "window"
    }, 
    "with": {
        "descr": "Extends the scope chain for a statement.", 
        "name": "with", 
        "params": [
            {
                "descr": "Adds the given object to the scope chain used when evaluating the statement. ", 
                "name": "object"
            }, 
            {
                "descr": "Any statement. To execute multiple statements, use a block statement ({ ... ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/with", 
        "syntax": "with (object) {  statement}", 
        "type": "Statements"
    }, 
    "wrap": {
        "descr": "The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.", 
        "name": "wrap", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.", 
                "name": "wrappingElement"
            }, 
            {
                "descr": "Type: Function() A callback function returning the HTML content or jQuery object to wrap around the matched elements. ", 
                "name": "function(index)"
            }
        ], 
        "path": "jquery/wrap", 
        "syntax": ".wrap( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "wrapAll": {
        "descr": "The .wrapAll() function can take any string or object that could be passed to the $() function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.", 
        "name": "wrapAll", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.", 
                "name": "wrappingElement"
            }
        ], 
        "path": "jquery/wrapall", 
        "syntax": ".wrapAll( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "wrapInner": {
        "descr": "The .wrapInner() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.", 
        "name": "wrapInner", 
        "params": [
            {
                "descr": "Type: String  An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.", 
                "name": "wrappingElement"
            }, 
            {
                "descr": "Type: Function() A callback function which generates a structure to wrap around the content of the matched elements. ", 
                "name": "function(index)"
            }
        ], 
        "path": "jquery/wrapinner", 
        "syntax": ".wrapInner( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }
}